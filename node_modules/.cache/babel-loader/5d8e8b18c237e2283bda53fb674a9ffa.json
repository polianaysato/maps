{"ast":null,"code":"/**\r\n * Functionality for drawing a trapezoid.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../Registry\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $type from \"../utils/Type\";\nimport * as $path from \"../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to draw a Trapezoid.\r\n *\r\n * @see {@link ITrapezoidEvents} for a list of available events\r\n * @see {@link ITrapezoidAdapters} for a list of available Adapters\r\n */\n\nvar Trapezoid =\n/** @class */\nfunction (_super) {\n  __extends(Trapezoid, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Trapezoid() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Trapezoid\";\n    _this.element = _this.paper.add(\"path\");\n    _this.topSide = percent(100);\n    _this.bottomSide = percent(100);\n    _this.leftSide = percent(100);\n    _this.rightSide = percent(100);\n    _this.isMeasured = false; // todo: add measureElement\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Trapezoid.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.pixelWidth;\n    var h = this.pixelHeight;\n    var ts = $utils.relativeToValue(this.topSide, w);\n    var bs = $utils.relativeToValue(this.bottomSide, w);\n    var ls = $utils.relativeToValue(this.leftSide, h);\n    var rs = $utils.relativeToValue(this.rightSide, h); // 1----2\n    // |    |\n    // 4----3\n\n    var x0 = (w - ts) / 2;\n    var y0 = (h - ls) / 2;\n    var x1 = w - (w - ts) / 2;\n    var y1 = (h - rs) / 2;\n    var x2 = w - (w - bs) / 2;\n    var y2 = h - (h - rs) / 2;\n    var x3 = (w - bs) / 2;\n    var y3 = h - (h - ls) / 2;\n    var mt = \"\";\n    var mr = \"\";\n    var mb = \"\";\n    var ml = \"\";\n\n    if ($type.hasValue(this.horizontalNeck)) {\n      var hn = this.horizontalNeck.value;\n      mt = $path.lineTo({\n        x: w * hn,\n        y: Math.max(y0, y1)\n      });\n      mb = $path.lineTo({\n        x: w * hn,\n        y: Math.min(y2, y3)\n      });\n    }\n\n    if ($type.hasValue(this.verticalNeck)) {\n      var vn = this.verticalNeck.value;\n      mr = $path.lineTo({\n        x: Math.min(x1, x2),\n        y: h * vn\n      });\n      ml = $path.lineTo({\n        x: Math.max(x0, x3),\n        y: h * vn\n      });\n    }\n\n    var path = $path.moveTo({\n      x: x0,\n      y: y0\n    }) + mt + $path.lineTo({\n      x: x1,\n      y: y1\n    }) + mr + $path.lineTo({\n      x: x2,\n      y: y2\n    }) + mb + $path.lineTo({\n      x: x3,\n      y: y3\n    }) + ml;\n    this.path = path;\n  };\n\n  Object.defineProperty(Trapezoid.prototype, \"topSide\", {\n    /**\r\n     * @return Width\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"topSide\");\n    },\n\n    /**\r\n     * Wdith of the top side. Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(100)\r\n     * @param value  Width\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"topSide\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Trapezoid.prototype, \"bottomSide\", {\n    /**\r\n     * @return Width\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"bottomSide\");\n    },\n\n    /**\r\n     * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(100)\r\n     * @param value  Width\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"bottomSide\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Trapezoid.prototype, \"leftSide\", {\n    /**\r\n     * @return Height\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"leftSide\");\n    },\n\n    /**\r\n     * Height of the left side. Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(100)\r\n     * @param value  Height\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"leftSide\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Trapezoid.prototype, \"rightSide\", {\n    /**\r\n     * @return Height\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"rightSide\");\n    },\n\n    /**\r\n     * Height of the right side. Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(100)\r\n     * @param value  Height\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"rightSide\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Trapezoid.prototype, \"horizontalNeck\", {\n    /**\r\n     * @return Horizontal neck position\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"horizontalNeck\");\n    },\n\n    /**\r\n     * A relative vertical position of the \"neck\". If the top and bottom sides\r\n     * are of different width, and `horizontalNeck` is set, a choke point\r\n     * will be created at that position, creating a funnel shape.\r\n     *\r\n     * @param value  Horizontal neck position\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"horizontalNeck\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Trapezoid.prototype, \"verticalNeck\", {\n    /**\r\n     * @return Vertical neck position\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"verticalNeck\");\n    },\n\n    /**\r\n     * A relative horizontal position of the \"neck\". If the left and right sides\r\n     * are of different height, and `verticalNeck` is set, a choke point\r\n     * will be created at that position, creating a funnel shape.\r\n     *\r\n     * @param value  Vertical neck position\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"verticalNeck\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Trapezoid;\n}(Sprite);\n\nexport { Trapezoid };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Trapezoid\"] = Trapezoid;","map":{"version":3,"mappings":"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","names":["Sprite","percent","registry","$utils","$type","$path","__extends","_super","_this","className","element","paper","add","topSide","bottomSide","leftSide","rightSide","isMeasured","applyTheme","Trapezoid","draw","call","w","pixelWidth","h","pixelHeight","ts","relativeToValue","bs","ls","rs","x0","y0","x1","y1","x2","y2","x3","y3","mt","mr","mb","ml","hasValue","horizontalNeck","hn","value","lineTo","x","y","Math","max","min","verticalNeck","vn","path","moveTo","Object","getPropertyValue","setPercentProperty","setPropertyValue","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/core/elements/Trapezoid.ts"],"sourcesContent":["/**\r\n * Functionality for drawing a trapezoid.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Trapezoid]].\r\n */\r\nexport interface ITrapezoidProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Wdith of the top side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\ttopSide?: number | Percent;\r\n\r\n\t/**\r\n\t * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tbottomSide?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of the left side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tleftSide?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of the right side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\trightSide?: number | Percent;\r\n\r\n\t/**\r\n\t * A relative vertical position of the \"neck\". If the top and bottom sides\r\n\t * are of different width, and `horizontalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t */\r\n\thorizontalNeck?: Percent;\r\n\r\n\t/**\r\n\t * A relative horizontal position of the \"neck\". If the left and right sides\r\n\t * are of different height, and `verticalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t */\r\n\tverticalNeck?: Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Trapezoid]].\r\n */\r\nexport interface ITrapezoidEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Trapezoid]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITrapezoidAdapters extends ISpriteAdapters, ITrapezoidProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a Trapezoid.\r\n *\r\n * @see {@link ITrapezoidEvents} for a list of available events\r\n * @see {@link ITrapezoidAdapters} for a list of available Adapters\r\n */\r\nexport class Trapezoid extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITrapezoidProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITrapezoidAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITrapezoidEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Trapezoid\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.topSide = percent(100);\r\n\t\tthis.bottomSide = percent(100);\r\n\t\tthis.leftSide = percent(100);\r\n\t\tthis.rightSide = percent(100);\r\n\r\n\t\tthis.isMeasured = false; // todo: add measureElement\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w: number = this.pixelWidth;\r\n\t\tlet h: number = this.pixelHeight;\r\n\r\n\t\tlet ts: number = $utils.relativeToValue(this.topSide, w);\r\n\t\tlet bs: number = $utils.relativeToValue(this.bottomSide, w);\r\n\t\tlet ls: number = $utils.relativeToValue(this.leftSide, h);\r\n\t\tlet rs: number = $utils.relativeToValue(this.rightSide, h);\r\n\r\n\t\t// 1----2\r\n\t\t// |    |\r\n\t\t// 4----3\r\n\r\n\t\tlet x0: number = (w - ts) / 2;\r\n\t\tlet y0: number = (h - ls) / 2;\r\n\r\n\t\tlet x1: number = w - (w - ts) / 2;\r\n\t\tlet y1: number = (h - rs) / 2;\r\n\r\n\t\tlet x2: number = w - (w - bs) / 2;\r\n\t\tlet y2: number = h - (h - rs) / 2;\r\n\r\n\t\tlet x3: number = (w - bs) / 2;\r\n\t\tlet y3: number = h - (h - ls) / 2;\r\n\r\n\t\tlet mt: string = \"\";\r\n\t\tlet mr: string = \"\";\r\n\t\tlet mb: string = \"\";\r\n\t\tlet ml: string = \"\";\r\n\r\n\t\tif ($type.hasValue(this.horizontalNeck)) {\r\n\t\t\tlet hn: number = this.horizontalNeck.value;\r\n\t\t\tmt = $path.lineTo({ x: w * hn, y: Math.max(y0, y1) });\r\n\t\t\tmb = $path.lineTo({ x: w * hn, y: Math.min(y2, y3) });\r\n\t\t}\r\n\r\n\t\tif ($type.hasValue(this.verticalNeck)) {\r\n\t\t\tlet vn: number = this.verticalNeck.value;\r\n\t\t\tmr = $path.lineTo({ x: Math.min(x1, x2), y: h * vn });\r\n\t\t\tml = $path.lineTo({ x: Math.max(x0, x3), y: h * vn });\r\n\t\t}\r\n\r\n\r\n\t\tlet path: string = $path.moveTo({ x: x0, y: y0 })\r\n\t\t\t+ mt\r\n\t\t\t+ $path.lineTo({ x: x1, y: y1 })\r\n\t\t\t+ mr\r\n\t\t\t+ $path.lineTo({ x: x2, y: y2 })\r\n\t\t\t+ mb\r\n\t\t\t+ $path.lineTo({ x: x3, y: y3 })\r\n\t\t\t+ ml\r\n\t\tthis.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Wdith of the top side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Width\r\n\t */\r\n\tpublic set topSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"topSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width\r\n\t */\r\n\tpublic get topSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Width\r\n\t */\r\n\tpublic set bottomSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"bottomSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width\r\n\t */\r\n\tpublic get bottomSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * Height of the left side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Height\r\n\t */\r\n\tpublic set leftSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"leftSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height\r\n\t */\r\n\tpublic get leftSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"leftSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * Height of the right side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Height\r\n\t */\r\n\tpublic set rightSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"rightSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height\r\n\t */\r\n\tpublic get rightSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"rightSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative vertical position of the \"neck\". If the top and bottom sides\r\n\t * are of different width, and `horizontalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t *\r\n\t * @param value  Horizontal neck position\r\n\t */\r\n\tpublic set horizontalNeck(value: Percent) {\r\n\t\tthis.setPropertyValue(\"horizontalNeck\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal neck position\r\n\t */\r\n\tpublic get horizontalNeck(): Percent {\r\n\t\treturn this.getPropertyValue(\"horizontalNeck\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative horizontal position of the \"neck\". If the left and right sides\r\n\t * are of different height, and `verticalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t *\r\n\t * @param value  Vertical neck position\r\n\t */\r\n\tpublic set verticalNeck(value: Percent) {\r\n\t\tthis.setPropertyValue(\"verticalNeck\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical neck position\r\n\t */\r\n\tpublic get verticalNeck(): Percent {\r\n\t\treturn this.getPropertyValue(\"verticalNeck\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Trapezoid\"] = Trapezoid;\r\n"]},"metadata":{},"sourceType":"module"}