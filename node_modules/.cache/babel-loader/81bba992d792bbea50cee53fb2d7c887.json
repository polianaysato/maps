{"ast":null,"code":"/**\r\n * Provides functionality used to build scrollbars.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../Container\";\nimport { ResizeButton } from \"../elements/ResizeButton\";\nimport { Button } from \"../elements/Button\";\nimport { getInteraction } from \"../interaction/Interaction\";\nimport { MouseCursorStyle } from \"../interaction/Mouse\";\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\nimport { registry } from \"../Registry\";\nimport { keyboard } from \"../utils/Keyboard\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { percent, Percent } from \"../utils/Percent\";\nimport * as $math from \"../utils/Math\";\nimport * as $ease from \"../utils/Ease\";\nimport * as $type from \"../utils/Type\";\nimport * as $utils from \"../utils/Utils\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Scrollbar is a generic control allowing to select a range of values or pan\r\n * the selection.\r\n *\r\n * @see {@link IScrollbarEvents} for a list of available events\r\n * @see {@link IScrollbarAdapters} for a list of available Adapters\r\n */\n\nvar Scrollbar =\n/** @class */\nfunction (_super) {\n  __extends(Scrollbar, _super);\n  /**\r\n   * Construtor\r\n   */\n\n\n  function Scrollbar() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Previously selected lower (start) value.\r\n     */\n\n\n    _this._previousStart = 0;\n    /**\r\n     * Previously selected upper (end) value.\r\n     */\n\n    _this._previousEnd = 1;\n    /**\r\n     * A value of previously selected lower value, used for doubleclick function.\r\n     */\n\n    _this._prevStart = 0;\n    /**\r\n     * A value of previously selected upper value, used for doubleclick function.\r\n     */\n\n    _this._prevEnd = 1;\n    /**\r\n     * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n     * performing zoom by user interaction).\r\n     */\n\n    _this._isBusy = false;\n    /**\r\n     * [_skipRangeEvents description]\r\n     *\r\n     * @todo Description\r\n     */\n\n    _this._skipRangeEvents = false;\n    /**\r\n     * Update the selection when dragging the grips.\r\n     *\r\n     * If set to `false` selection will be updated only when the grip is\r\n     * released.\r\n     *\r\n     * @default true\r\n     */\n\n    _this.updateWhileMoving = true;\n    _this.className = \"Scrollbar\";\n    _this.minHeight = 12;\n    _this.minWidth = 12;\n    _this.animationDuration = 0;\n    _this.animationEasing = $ease.cubicOut;\n\n    _this.margin(10, 10, 10, 10);\n\n    var interfaceColors = new InterfaceColorSet(); // background is also container as it might contain graphs, grid, etc\n\n    var background = _this.background;\n    background.cornerRadius(10, 10, 10, 10);\n    background.fill = interfaceColors.getFor(\"fill\");\n    background.fillOpacity = 0.5; // Make system tooltips appear by default\n\n    _this.showSystemTooltip = true;\n    _this.startGrip = new ResizeButton();\n    _this.endGrip = new ResizeButton(); // Default orientation...\n    // ... is set in `applyInternalDefaults()` because it accesses `language`\n    // and should only be started to access when parent is set\n    // Set events\n\n    _this.events.on(\"transformed\", function () {\n      _this.updateThumb();\n    }, _this, false); // Initial positions\n\n\n    _this.start = 0;\n    _this.end = 1; // Set roles\n\n    _this.role = \"scrollbar\";\n    _this.thumb.role = \"slider\";\n    _this.thumb.readerLive = \"polite\";\n    _this.startGrip.role = \"slider\";\n    _this.endGrip.role = \"slider\"; // otherwise range changed won't be registered\n\n    _this.events.once(\"inited\", function () {\n      _this._previousStart = undefined;\n\n      _this.dispatchRangeChange();\n    }, undefined, false);\n\n    _this.hideGrips = false;\n    _this.orientation = \"horizontal\"; // Min/max values for accessibility\n\n    _this.setSVGAttribute({\n      \"aria-valuemin\": \"0\"\n    });\n\n    _this.setSVGAttribute({\n      \"aria-valuemax\": \"100\"\n    });\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  Scrollbar.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Set screen reader tetxt accordingly\n\n\n    if (this.orientation === \"horizontal\") {\n      if (!$type.hasValue(this.readerTitle)) {\n        this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\n      }\n\n      if (!$type.hasValue(this.thumb.readerDescription)) {\n        this.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\n      }\n\n      if (!$type.hasValue(this.startGrip.readerDescription)) {\n        this.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\n      }\n\n      if (!$type.hasValue(this.endGrip.readerDescription)) {\n        this.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");\n      }\n\n      this.readerOrientation = \"horizontal\";\n    } else {\n      if (!$type.hasValue(this.readerTitle)) {\n        this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\n      }\n\n      if (!$type.hasValue(this.thumb.readerDescription)) {\n        this.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\n      }\n\n      if (!$type.hasValue(this.startGrip.readerDescription)) {\n        this.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\n      }\n\n      if (!$type.hasValue(this.endGrip.readerDescription)) {\n        this.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");\n      }\n\n      this.readerOrientation = \"vertical\";\n    }\n\n    this.readerControls = this.baseSprite.uidAttr();\n  };\n  /**\r\n   * Validates the layout of the scrollbar's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.validateLayout = function () {\n    this.updateSize();\n\n    _super.prototype.validateLayout.call(this); // when size changes, need to update extremes\n\n\n    this.updateExtremes();\n  };\n  /**\r\n   * Update background for the scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.processBackground = function () {\n    _super.prototype.processBackground.call(this);\n\n    var background = this.background;\n    background.clickable = true;\n    background.events.on(\"hit\", this.handleBgHit, this, undefined);\n  };\n  /**\r\n   * Zooms to the particular place when clicked/tapped on the scrollbar\r\n   * background.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  Scrollbar.prototype.handleBgHit = function (event) {\n    this.makeBusy();\n    var point = event.spritePoint;\n    point = $utils.spritePointToSprite(point, this.background, this);\n    var thumb = this.thumb;\n\n    if (this.orientation == \"horizontal\") {\n      var thumbX = point.x - thumb.pixelWidth / 2;\n      thumbX = $math.fitToRange(thumbX, 0, this.innerWidth - thumb.pixelWidth);\n      this._thumbAnimation = thumb.animate({\n        property: \"x\",\n        to: thumbX\n      }, this.animationDuration, this.animationEasing);\n    } else {\n      var thumbY = point.y - thumb.pixelHeight / 2;\n      thumbY = $math.fitToRange(thumbY, 0, this.innerHeight - thumb.pixelHeight);\n      this._thumbAnimation = thumb.animate({\n        property: \"y\",\n        to: thumbY\n      }, this.animationDuration, this.animationEasing);\n    }\n\n    if (this.animationDuration > 0) {\n      this._thumbAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\n    } else {\n      this._thumb.validate();\n\n      this.makeUnbusy();\n    }\n  };\n  /**\r\n   * Set scrollbar as busy. (currently zooming)\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.makeBusy = function () {\n    this._isBusy = true;\n    this._skipRangeEvents = false;\n\n    if (this._unbusyTimeout) {\n      this.removeDispose(this._unbusyTimeout);\n    }\n\n    this._unbusyTimeout = undefined;\n    this.stopAnimations();\n  };\n  /**\r\n   * Stops all animations, currently playing for the scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.stopAnimations = function () {\n    if (this._thumbAnimation) {\n      this._thumbAnimation.stop(true);\n    }\n\n    if (this._zoomAnimation) {\n      this._zoomAnimation.stop(true);\n    }\n  };\n  /**\r\n   * Cancels \"busy\" status of the Scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.makeUnbusy = function () {\n    /**\r\n     * We cannot make Scrollbar not busy right after release, because then axes\r\n     * will take over controll and Scrollbar will start to animate.\r\n     * Theorethically, it's not right to set timeout by `animationDuration`,\r\n     * however we can not know all the durations of elements we scroll, so we\r\n     * assume that animation duration will be the same as\r\n     * `interpolationDuration` or `rangeChange` duration.\r\n     */\n    this._unbusyTimeout = this.setTimeout(this.makeUnbusyReal.bind(this), this.animationDuration * 1.1);\n  };\n  /**\r\n   * [makeUnbusyReal description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.makeUnbusyReal = function () {\n    this._usingGrip = undefined;\n    this._isBusy = false;\n\n    if (!this.updateWhileMoving) {\n      this.dispatchRangeChange();\n    }\n  };\n  /**\r\n   * Disptatches rangechanged event if it really changed\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.dispatchRangeChange = function () {\n    if (this._previousEnd != this.end || this._previousStart != this.start) {\n      this._previousStart = this.start;\n      this._previousEnd = this.end;\n      this.dispatch(\"rangechanged\");\n    }\n  };\n  /**\r\n   * Updates the \"thumb\" element. A draggable element between the grips.\r\n   * @ignore\r\n   */\n\n\n  Scrollbar.prototype.updateThumb = function (dispatchEvents) {\n    if (dispatchEvents === void 0) {\n      dispatchEvents = true;\n    }\n\n    if (!this.parent) {\n      return;\n    }\n\n    var thumb = this.thumb;\n    var start = this.start;\n    var end = this.end;\n    var startGrip = this.startGrip;\n    var endGrip = this.endGrip;\n\n    if (this.orientation == \"horizontal\") {\n      var innerWidth_1 = this.innerWidth;\n      thumb.width = innerWidth_1 * (end - start);\n      thumb.maxX = innerWidth_1 - thumb.pixelWidth;\n      thumb.x = start * innerWidth_1;\n      startGrip.moveTo({\n        x: thumb.pixelX,\n        y: 0\n      }, undefined, undefined, true); // overrides dragging\n\n      endGrip.moveTo({\n        x: thumb.pixelX + thumb.pixelWidth,\n        y: 0\n      }, undefined, undefined, true);\n      startGrip.readerTitle = this.language.translate(\"From %1\", undefined, this.adapter.apply(\"positionValue\", {\n        value: Math.round(start * 100) + \"%\",\n        position: start\n      }).value);\n      startGrip.readerValueNow = \"\" + Math.round(start * 100);\n      startGrip.readerValueText = startGrip.readerTitle;\n      endGrip.readerTitle = this.language.translate(\"To %1\", undefined, this.adapter.apply(\"positionValue\", {\n        value: Math.round(end * 100) + \"%\",\n        position: end\n      }).value);\n      endGrip.readerValueNow = \"\" + Math.round(end * 100);\n      endGrip.readerValueText = endGrip.readerTitle;\n    } else {\n      var innerHeight_1 = this.innerHeight;\n      thumb.height = innerHeight_1 * (end - start);\n      thumb.maxY = innerHeight_1 - thumb.pixelHeight;\n      thumb.y = (1 - end) * innerHeight_1;\n      startGrip.moveTo({\n        x: 0,\n        y: thumb.pixelY + thumb.pixelHeight\n      }, undefined, undefined, true);\n      endGrip.moveTo({\n        x: 0,\n        y: thumb.pixelY\n      }, undefined, undefined, true);\n      startGrip.readerTitle = this.language.translate(\"To %1\", undefined, this.adapter.apply(\"positionValue\", {\n        value: Math.round((1 - start) * 100) + \"%\",\n        position: 1 - start\n      }).value);\n      startGrip.readerValueNow = \"\" + Math.round(start * 100);\n      startGrip.readerValueText = startGrip.readerTitle;\n      endGrip.readerTitle = this.language.translate(\"From %1\", undefined, this.adapter.apply(\"positionValue\", {\n        value: Math.round((1 - end) * 100) + \"%\",\n        position: 1 - end\n      }).value);\n      endGrip.readerValueNow = \"\" + Math.round(end * 100);\n      endGrip.readerValueText = endGrip.readerTitle;\n    } // Add accessibility\n\n\n    thumb.readerTitle = this.language.translate(\"From %1 to %2\", undefined, this.adapter.apply(\"positionValue\", {\n      value: Math.round(start * 100) + \"%\",\n      position: start\n    }).value, this.adapter.apply(\"positionValue\", {\n      value: Math.round(end * 100) + \"%\",\n      position: end\n    }).value);\n    thumb.readerValueNow = \"\" + Math.round(start * 100);\n    thumb.readerValueText = thumb.readerTitle;\n    this.readerValueNow = \"\" + Math.round(start * 100);\n    this.readerValueText = thumb.readerTitle;\n\n    if (!this._skipRangeEvents && this.updateWhileMoving && dispatchEvents) {\n      this.dispatchRangeChange();\n    }\n  };\n  /**\r\n   * Updates extremes of the scrollbar.\r\n   */\n\n\n  Scrollbar.prototype.updateExtremes = function () {\n    var orientation = this.orientation;\n    var minX = 0;\n    var minY = 0;\n    var maxX = 0;\n    var maxY = 0;\n\n    if (orientation == \"horizontal\") {\n      maxX = this.innerWidth;\n      minY = maxY = this.innerHeight / 2;\n    } else {\n      maxY = this.innerHeight;\n      minX = maxX = this.innerWidth / 2;\n    }\n\n    var startGrip = this.startGrip;\n    startGrip.minX = minX;\n    startGrip.maxX = maxX;\n    startGrip.minY = minY;\n    startGrip.maxY = maxY;\n    var endGrip = this.endGrip;\n    endGrip.minX = minX;\n    endGrip.maxX = maxX;\n    endGrip.minY = minY;\n    endGrip.maxY = maxY;\n    var thumb = this.thumb;\n    thumb.minX = minX;\n    thumb.maxX = maxX;\n    thumb.minY = minY;\n    thumb.maxY = maxY;\n  };\n  /**\r\n   * Updates size of the scrollbar.\r\n   */\n\n\n  Scrollbar.prototype.updateSize = function () {\n    var orientation = this.orientation;\n    var startGrip = this.startGrip;\n\n    if (startGrip) {\n      startGrip.orientation = orientation;\n    }\n\n    if (this.endGrip) {\n      this.endGrip.orientation = orientation;\n    }\n\n    var thumb = this.thumb;\n\n    if (thumb) {\n      if (orientation == \"horizontal\") {\n        if (!$type.isNumber(this._pixelWidth)) {\n          if (!(this.width instanceof Percent)) {\n            this.width = percent(100);\n          }\n        } // this teorethically might be wrong, if user indeed sets height of a horizontal scrollbar in percent\n        // however without this height might be equal to 100% if previous orientation was set to horizontal\n        // so this is ok solution, in case user really wants to have scrollbar height set in percent,\n        // he should do this after orientation.\n\n\n        if ($type.hasValue(this.percentHeight)) {\n          this.height = this.minHeight;\n        }\n\n        thumb.height = this.innerHeight;\n        thumb.verticalCenter = \"middle\";\n        thumb.horizontalCenter = \"left\";\n      } else {\n        if (!$type.isNumber(this._pixelHeight)) {\n          if (!(this.height instanceof Percent)) {\n            this.height = percent(100);\n          }\n        } // same as above with percentHeight\n\n\n        if ($type.hasValue(this.percentWidth)) {\n          this.width = this.minWidth;\n        }\n\n        thumb.width = this.innerWidth;\n        thumb.verticalCenter = \"top\";\n        thumb.horizontalCenter = \"middle\";\n      }\n    }\n  };\n\n  Object.defineProperty(Scrollbar.prototype, \"isBusy\", {\n    /**\r\n     * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n     * performing zoom by user interaction).\r\n     * @return boolean\r\n     */\n    get: function get() {\n      return this._isBusy;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"start\", {\n    /**\r\n     * @return Position (0-1)\r\n     */\n    get: function get() {\n      return Math.min(this.getPosition(this._start), this.getPosition(this._end));\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * POSITIONS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Relative position (0-1) of the start grip.\r\n     *\r\n     * @param position  Position (0-1)\r\n     */\n    set: function set(position) {\n      if (!this._isBusy) {\n        this.__start = position;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"__start\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function get() {\n      return this._start;\n    },\n\n    /**\r\n     * [__start description]\r\n     *\r\n     * @todo Description\r\n     * @param position [description]\r\n     */\n    set: function set(position) {\n      this._start = this.getPosition(position);\n      this.updateThumb();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"end\", {\n    /**\r\n     * @return Position (0-1)\r\n     */\n    get: function get() {\n      return Math.max(this.getPosition(this._start), this.getPosition(this._end));\n    },\n\n    /**\r\n     * Relative position (0-1) of the end grip.\r\n     *\r\n     * @param position  Position (0-1)\r\n     */\n    set: function set(position) {\n      if (!this._isBusy) {\n        this.__end = position;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"__end\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function get() {\n      return this._end;\n    },\n\n    /**\r\n     * [__end description]\r\n     *\r\n     * @todo Description\r\n     * @param position [description]\r\n     */\n    set: function set(position) {\n      this._end = this.getPosition(position);\n      this.updateThumb();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"range\", {\n    /**\r\n     * Current selection range.\r\n     *\r\n     * @readonly\r\n     * @return Range\r\n     */\n    get: function get() {\n      return {\n        start: this.start,\n        end: this.end,\n        priority: this._usingGrip\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Disables range change events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Scrollbar.prototype.skipRangeEvents = function () {\n    if (!this._isBusy) {\n      this._skipRangeEvents = true;\n    }\n  };\n  /**\r\n   * [fixRange description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   * @param range  Range\r\n   */\n\n\n  Scrollbar.prototype.fixRange = function (range) {\n    if (range.start != $math.round(this._start, 2) || range.end != $math.round(this._end, 2)) {\n      this._start = range.start;\n      this._end = range.end;\n      this._skipRangeEvents = true;\n      this.updateThumb();\n      this._skipRangeEvents = false;\n      this.thumb.validate();\n      this.thumb.background.validate();\n    }\n  };\n  /**\r\n   * [getPosition description]\r\n   *\r\n   * @todo Description\r\n   * @param position  [description]\r\n   * @return [description]\r\n   */\n\n\n  Scrollbar.prototype.getPosition = function (position) {\n    return $math.fitToRange($math.round(position, 4), 0, 1);\n  };\n\n  Object.defineProperty(Scrollbar.prototype, \"orientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"orientation\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * MISC\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Orientation of the scrollbar.\r\n     *\r\n     * Available options: \"horizontal\" (default) and \"vertical\".\r\n     *\r\n     * @default \"horizontal\"\r\n     * @param value  Orientation\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"orientation\", value)) {\n        // Set mouse cursors and screen reader tetxt accordingly\n        if (value === \"horizontal\") {\n          // Mouse styles\n          this.startGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\n          this.endGrip.cursorOverStyle = MouseCursorStyle.horizontalResize; // Reader text\n\n          /*this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\r\n          this.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\r\n          this.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\r\n          this.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");*/\n        } else {\n          // Mouse styles\n          this.startGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\n          this.endGrip.cursorOverStyle = MouseCursorStyle.verticalResize; // Reader text\n\n          /*this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\r\n          this.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\r\n          this.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\r\n          this.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");*/\n        }\n\n        this.updateByOrientation();\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Scrollbar.prototype.updateByOrientation = function () {};\n\n  Object.defineProperty(Scrollbar.prototype, \"startGrip\", {\n    /**\r\n     * @return Grip element\r\n     */\n    get: function get() {\n      return this._startGrip;\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * GRIPS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Start grip element. (button)\r\n     *\r\n     * @param button  Grip element\r\n     */\n    set: function set(button) {\n      if (this._startGrip) {\n        this.removeDispose(this._startGrip);\n      }\n\n      this._startGrip = button;\n      this.processGrip(button);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"endGrip\", {\n    /**\r\n     * @return Grip element\r\n     */\n    get: function get() {\n      return this._endGrip;\n    },\n\n    /**\r\n     * End grip element. (button)\r\n     *\r\n     * @param button  Grip element\r\n     */\n    set: function set(button) {\n      if (this._endGrip) {\n        this.removeDispose(this._endGrip);\n      }\n\n      this._endGrip = button;\n      this.processGrip(button);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates the grip button with properties and events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param button Grip button\r\n   */\n\n  Scrollbar.prototype.processGrip = function (button) {\n    button.parent = this;\n    button.isMeasured = false;\n    button.focusable = true;\n    button.shouldClone = false; // Set button defaults\n    //button.showSystemTooltip = true; // setting this here is not right because we break inheritance\n\n    button.zIndex = 100;\n    button.events.on(\"drag\", this.handleGripDrag, this, false);\n    button.events.on(\"dragstop\", this.makeUnbusy, this, false);\n    button.events.on(\"down\", this.makeBusy, this, false);\n    button.events.on(\"up\", this.makeUnbusy, this, false);\n\n    this._disposers.push(button);\n  };\n  /**\r\n   * Updates positions of related elements after grip element is dragged.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  Scrollbar.prototype.handleGripDrag = function (event) {\n    this.makeBusy();\n\n    if (event.target === this._startGrip) {\n      this._usingGrip = \"start\";\n    } else {\n      this._usingGrip = \"end\";\n    }\n\n    if (this.orientation == \"horizontal\") {\n      this._start = this.startGrip.pixelX / this.innerWidth;\n      this._end = this.endGrip.pixelX / this.innerWidth;\n    } else {\n      this._start = 1 - this.startGrip.pixelY / this.innerHeight;\n      this._end = 1 - this.endGrip.pixelY / this.innerHeight;\n    }\n\n    this.updateThumb();\n  };\n\n  Object.defineProperty(Scrollbar.prototype, \"thumb\", {\n    /**\r\n     * @return Thumb element\r\n     */\n    get: function get() {\n      if (!this._thumb) {\n        // Create scrollbar controls (setters will handle adding disposers)\n        var thumb = new Button();\n        thumb.background.cornerRadius(10, 10, 10, 10);\n        thumb.padding(0, 0, 0, 0);\n        this.thumb = thumb;\n      }\n\n      return this._thumb;\n    },\n\n    /**\r\n     * A \"thumb\" element.\r\n     *\r\n     * It's a draggable square space between the grips, that can be used to\r\n     * pan the selection.\r\n     *\r\n     * @param thumb  Thumb element\r\n     */\n    set: function set(thumb) {\n      var _this = this;\n\n      if (thumb) {\n        if (this._thumb) {\n          this.removeDispose(this._thumb);\n        }\n\n        this._thumb = thumb;\n        thumb.parent = this;\n        thumb.isMeasured = false;\n        thumb.inert = true;\n        thumb.draggable = true;\n        thumb.clickable = true;\n        thumb.hoverable = true;\n        thumb.focusable = true;\n        thumb.shouldClone = false;\n        thumb.zIndex = 0; // TODO remove closures ?\n        // Add events\n        // Add cursor styles to thumb\n\n        thumb.cursorOverStyle = MouseCursorStyle.grab;\n        thumb.cursorDownStyle = MouseCursorStyle.grabbing;\n        thumb.events.on(\"dragstart\", this.makeBusy, this, false);\n        thumb.events.on(\"dragstop\", this.makeUnbusy, this, false);\n        thumb.events.on(\"positionchanged\", this.handleThumbPosition, this, false);\n        thumb.events.on(\"sizechanged\", this.handleThumbPosition, this, false);\n        thumb.events.on(\"doublehit\", this.handleDoubleClick, this, false); // Add event for space and ENTER to toggle full zoom out and back\n        // (same as doubleclick)\n\n        this._disposers.push(getInteraction().body.events.on(\"keyup\", function (ev) {\n          if (keyboard.isKey(ev.event, [\"space\", \"enter\"]) && _this.thumb.isFocused) {\n            ev.event.preventDefault();\n\n            _this.handleDoubleClick();\n          }\n        }));\n\n        this._disposers.push(this._thumb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Zooms-in and out the selection on double-click of the thumb.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Scrollbar.prototype.handleDoubleClick = function () {\n    this.makeBusy();\n    var newStart = 0;\n    var newEnd = 1;\n\n    if (this.start != 0 || this.end != 1) {\n      this._prevStart = this.start;\n      this._prevEnd = this.end;\n    } else {\n      newStart = this._prevStart;\n      newEnd = this._prevEnd;\n    }\n\n    var zoomAnimation = this.animate([{\n      property: \"__start\",\n      to: newStart\n    }, {\n      property: \"__end\",\n      to: newEnd\n    }], this.animationDuration, this.animationEasing);\n\n    if (zoomAnimation && !zoomAnimation.isFinished()) {\n      zoomAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\n      this._zoomAnimation = zoomAnimation;\n    } else {\n      this.makeUnbusy();\n    }\n  };\n  /**\r\n   * Updates positions of other elements when thumb is moved.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.handleThumbPosition = function () {\n    var thumb = this.thumb;\n\n    if (this.orientation == \"horizontal\") {\n      var innerWidth_2 = this.innerWidth;\n      var w = thumb.innerWidth;\n      var x = thumb.pixelX;\n      this._start = x / innerWidth_2;\n      this._end = (x + w) / innerWidth_2;\n      this.updateThumb();\n    } else {\n      var innerHeight_2 = this.innerHeight;\n      var h = thumb.innerHeight;\n      var y = thumb.pixelY;\n      this._start = 1 - (y + h) / innerHeight_2;\n      this._end = 1 - y / innerHeight_2;\n      this.updateThumb();\n    }\n  };\n  /**\r\n   * Creates a background element for the scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Background\r\n   */\n\n\n  Scrollbar.prototype.createBackground = function () {\n    return new RoundedRectangle();\n  };\n\n  Object.defineProperty(Scrollbar.prototype, \"hideGrips\", {\n    /**\r\n     * @return Show only on hover?\r\n     */\n    get: function get() {\n      return this._hideGrips;\n    },\n\n    /**\r\n     * Use this property to set whether grips should be always visible (`false`),\r\n     * or they should just appear on scrollbar hover (`true`).\r\n     *\r\n     * @param value  Show only on hover?\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      this._hideGrips = value;\n\n      if (this._overDisposer) {\n        this.removeDispose(this._overDisposer);\n      }\n\n      if (this._outDisposer) {\n        this.removeDispose(this._outDisposer);\n      }\n\n      if (value) {\n        this._overDisposer = this.events.on(\"over\", function () {\n          _this.startGrip.show();\n\n          _this.endGrip.show();\n        }, undefined, false);\n        this._outDisposer = this.events.on(\"out\", function () {\n          _this.startGrip.hide();\n\n          _this.endGrip.hide();\n        }, undefined, false);\n        this.startGrip.hide();\n        this.endGrip.hide();\n      } else {\n        this.startGrip.show();\n        this.endGrip.show();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"animationDuration\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"animationDuration\");\n    },\n\n    /**\r\n     * Duration in milliseconds of scrollbar animation (happens when user clicks on a background of a scrollbar)\r\n     * @default 0\r\n     * @param value number\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"animationDuration\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"animationEasing\", {\n    /**\r\n     * @return {Function}\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"animationEasing\");\n    },\n\n    /**\r\n     * Animation easing function.\r\n     * @todo: review description and default\r\n     * @default $ease.cubicOut\r\n     * @param value (value: number) => number\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"animationEasing\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds easing functions to \"function\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n\n  Scrollbar.prototype.asFunction = function (field) {\n    return field == \"animationEasing\" || _super.prototype.asIs.call(this, field);\n  };\n\n  return Scrollbar;\n}(Container);\n\nexport { Scrollbar };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Scrollbar\"] = Scrollbar;","map":{"version":3,"mappings":"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","names":["Container","ResizeButton","Button","getInteraction","MouseCursorStyle","RoundedRectangle","registry","keyboard","InterfaceColorSet","percent","Percent","$math","$ease","$type","$utils","__extends","_super","_this","className","minHeight","minWidth","animationDuration","animationEasing","cubicOut","margin","interfaceColors","background","cornerRadius","fill","getFor","fillOpacity","showSystemTooltip","startGrip","endGrip","events","on","updateThumb","start","end","role","thumb","readerLive","once","_previousStart","undefined","dispatchRangeChange","hideGrips","orientation","setSVGAttribute","applyTheme","Scrollbar","applyInternalDefaults","call","hasValue","readerTitle","language","translate","readerDescription","readerOrientation","readerControls","baseSprite","uidAttr","updateSize","validateLayout","updateExtremes","processBackground","clickable","handleBgHit","event","makeBusy","point","spritePoint","spritePointToSprite","thumbX","x","pixelWidth","fitToRange","innerWidth","_thumbAnimation","animate","property","to","thumbY","y","pixelHeight","innerHeight","makeUnbusy","_thumb","validate","_isBusy","_skipRangeEvents","_unbusyTimeout","removeDispose","stopAnimations","stop","_zoomAnimation","setTimeout","makeUnbusyReal","bind","_usingGrip","updateWhileMoving","_previousEnd","dispatch","dispatchEvents","parent","innerWidth_1","width","maxX","moveTo","pixelX","adapter","apply","value","Math","round","position","readerValueNow","readerValueText","innerHeight_1","height","maxY","pixelY","minX","minY","isNumber","_pixelWidth","percentHeight","verticalCenter","horizontalCenter","_pixelHeight","percentWidth","Object","min","getPosition","_start","_end","__start","max","__end","priority","range","getPropertyValue","setPropertyValue","cursorOverStyle","horizontalResize","verticalResize","updateByOrientation","invalidate","_startGrip","button","processGrip","_endGrip","isMeasured","focusable","shouldClone","zIndex","handleGripDrag","_disposers","push","target","padding","inert","draggable","hoverable","grab","cursorDownStyle","grabbing","handleThumbPosition","handleDoubleClick","body","ev","isKey","isFocused","preventDefault","newStart","newEnd","_prevStart","_prevEnd","zoomAnimation","isFinished","innerWidth_2","w","innerHeight_2","h","_hideGrips","_overDisposer","_outDisposer","show","hide","field","asIs","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/core/elements/Scrollbar.ts"],"sourcesContent":["/**\r\n * Provides functionality used to build scrollbars.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { IRange } from \"../defs/IRange\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../Sprite\";\r\nimport { Orientation } from \"../defs/Orientation\";\r\nimport { ResizeButton } from \"../elements/ResizeButton\";\r\nimport { Button } from \"../elements/Button\";\r\nimport { getInteraction } from \"../interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../interaction/Mouse\";\r\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { Animation } from \"../utils/Animation\";\r\nimport { IDisposer } from \"../utils/Disposer\";\r\nimport { registry } from \"../Registry\";\r\nimport { keyboard } from \"../utils/Keyboard\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent, Percent } from \"../utils/Percent\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Scrollbar]].\r\n */\r\nexport interface IScrollbarProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Duration in milliseconds of Scrollbar animation.\r\n\t *\r\n\t * This affects how fast Scrollbar elements move/resize. For example when\r\n\t * chart zooms or pans, Scrollbar elements' positions need to be adjusted\r\n\t * as well. This setting will affect whether they will be relocated\r\n\t * instantenously (0), or will animte gradually.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tanimationDuration?: number;\r\n\r\n\t/**\r\n\t * An easing function to use when animating (moving/sizing) Scrollbar\r\n\t * elements.\r\n\t */\r\n\tanimationEasing?: (value: number) => number;\r\n\r\n\t/**\r\n\t * Orientation of a scrollbar\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[Scrollbar]].\r\n */\r\nexport interface IScrollbarEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when range of scrollbar selection changes.\r\n\t */\r\n\trangechanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Scrollbar]].\r\n */\r\nexport interface IScrollbarAdapters extends IContainerAdapters, IScrollbarProperties {\r\n\r\n\t/**\r\n\t * Applied to a position value when it is retrieved.\r\n\t */\r\n\tpositionValue: {\r\n\t\tvalue: any,\r\n\t\tposition: number\r\n\t}\r\n\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Scrollbar is a generic control allowing to select a range of values or pan\r\n * the selection.\r\n *\r\n * @see {@link IScrollbarEvents} for a list of available events\r\n * @see {@link IScrollbarAdapters} for a list of available Adapters\r\n */\r\nexport class Scrollbar extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IScrollbarEvents;\r\n\r\n\t/**\r\n\t * Holds a reference to a draggable rectangle that fills the space between\r\n\t * two selection grips. It can be used to pan the selection maintaining the\r\n\t * distance between start and end grips.\r\n\t */\r\n\tprotected _thumb: $type.Optional<Button>;\r\n\r\n\t/**\r\n\t * Orientation of the scrollbar.\r\n\t */\r\n\tprotected _orientation: Orientation;\r\n\r\n\t/**\r\n\t * A button (grip) instance to be used to select lower range value.\r\n\t */\r\n\tprotected _startGrip!: ResizeButton;\r\n\r\n\t/**\r\n\t * A button (grip) instance to be used to select upper range value.\r\n\t */\r\n\tprotected _endGrip!: ResizeButton;\r\n\r\n\t/**\r\n\t * Currently selected lower (start) value.\r\n\t */\r\n\tprotected _start!: number;\r\n\r\n\t/**\r\n\t * Currently selected upper (end) value.\r\n\t */\r\n\tprotected _end!: number;\r\n\r\n\t/**\r\n\t * Previously selected lower (start) value.\r\n\t */\r\n\tprotected _previousStart: $type.Optional<number> = 0;\r\n\r\n\t/**\r\n\t * Previously selected upper (end) value.\r\n\t */\r\n\tprotected _previousEnd: $type.Optional<number> = 1;\r\n\r\n\t/**\r\n\t * An [[Animation]] instance that moves \"thumb\".\r\n\t */\r\n\tprotected _thumbAnimation: $type.Optional<Animation>;\r\n\r\n\t/**\r\n\t * An [[Animation]] instance that moves zoom grip buttons.\r\n\t */\r\n\tprotected _zoomAnimation: $type.Optional<Animation>;\r\n\r\n\t/**\r\n\t * A value of previously selected lower value, used for doubleclick function.\r\n\t */\r\n\tprotected _prevStart: number = 0;\r\n\r\n\t/**\r\n\t * A value of previously selected upper value, used for doubleclick function.\r\n\t */\r\n\tprotected _prevEnd: number = 1;\r\n\r\n\t/**\r\n\t * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n\t * performing zoom by user interaction).\r\n\t */\r\n\tprotected _isBusy: boolean = false;\r\n\r\n\t/**\r\n\t * [_skipRangeEvents description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _skipRangeEvents: boolean = false;\r\n\r\n\t/**\r\n\t * Holds timeout reference that resets \"busy\" status.\r\n\t */\r\n\tprotected _unbusyTimeout: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * [undefined description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _usingGrip: \"start\" | \"end\" | undefined;\r\n\r\n\t/**\r\n\t * Sets the type of the element to use as background.\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Hide grips when not hovered over scrollbar?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tprotected _hideGrips!: boolean;\r\n\r\n\t/**\r\n\t * A disposer for the hover event.\r\n\t */\r\n\tprotected _overDisposer: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * A disposer for the out event.\r\n\t */\r\n\tprotected _outDisposer: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * Update the selection when dragging the grips.\r\n\t *\r\n\t * If set to `false` selection will be updated only when the grip is\r\n\t * released.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic updateWhileMoving: boolean = true;\r\n\r\n\t/**\r\n\t * Construtor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"Scrollbar\";\r\n\r\n\t\tthis.minHeight = 12;\r\n\t\tthis.minWidth = 12;\r\n\r\n\t\tthis.animationDuration = 0;\r\n\t\tthis.animationEasing = $ease.cubicOut;\r\n\r\n\t\tthis.margin(10, 10, 10, 10);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// background is also container as it might contain graphs, grid, etc\r\n\t\tlet background: RoundedRectangle = this.background;\r\n\t\tbackground.cornerRadius(10, 10, 10, 10);\r\n\t\tbackground.fill = interfaceColors.getFor(\"fill\");\r\n\t\tbackground.fillOpacity = 0.5;\r\n\r\n\t\t// Make system tooltips appear by default\r\n\t\tthis.showSystemTooltip = true;\r\n\r\n\t\tthis.startGrip = new ResizeButton();\r\n\t\tthis.endGrip = new ResizeButton();\r\n\r\n\t\t// Default orientation...\r\n\t\t// ... is set in `applyInternalDefaults()` because it accesses `language`\r\n\t\t// and should only be started to access when parent is set\r\n\r\n\t\t// Set events\r\n\t\tthis.events.on(\"transformed\", () => {\r\n\t\t\tthis.updateThumb()\r\n\t\t}, this, false);\r\n\r\n\t\t// Initial positions\r\n\t\tthis.start = 0;\r\n\t\tthis.end = 1;\r\n\r\n\t\t// Set roles\r\n\t\tthis.role = \"scrollbar\";\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\t\tthis.startGrip.role = \"slider\";\r\n\t\tthis.endGrip.role = \"slider\";\r\n\r\n\t\t// otherwise range changed won't be registered\r\n\t\tthis.events.once(\"inited\", () => {\r\n\t\t\tthis._previousStart = undefined;\r\n\t\t\tthis.dispatchRangeChange();\r\n\t\t}, undefined, false)\r\n\r\n\r\n\t\tthis.hideGrips = false;\r\n\r\n\t\tthis.orientation = \"horizontal\";\r\n\r\n\t\t// Min/max values for accessibility\r\n\t\tthis.setSVGAttribute({ \"aria-valuemin\": \"0\" });\r\n\t\tthis.setSVGAttribute({ \"aria-valuemax\": \"100\" });\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set screen reader tetxt accordingly\r\n\t\tif (this.orientation === \"horizontal\") {\r\n\t\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\t\tthis.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(this.thumb.readerDescription)) {\r\n\t\t\t\tthis.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(this.startGrip.readerDescription)) {\r\n\t\t\t\tthis.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(this.endGrip.readerDescription)) {\r\n\t\t\t\tthis.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.readerOrientation = \"horizontal\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\t\tthis.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(this.thumb.readerDescription)) {\r\n\t\t\t\tthis.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(this.startGrip.readerDescription)) {\r\n\t\t\t\tthis.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(this.endGrip.readerDescription)) {\r\n\t\t\t\tthis.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.readerOrientation = \"vertical\";\r\n\t\t}\r\n\r\n\t\tthis.readerControls = this.baseSprite.uidAttr();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the layout of the scrollbar's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\t\tthis.updateSize();\r\n\t\tsuper.validateLayout();\r\n\r\n\t\t// when size changes, need to update extremes\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * Update background for the scrollbar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processBackground(): void {\r\n\t\tsuper.processBackground();\r\n\t\tlet background = this.background;\r\n\r\n\t\tbackground.clickable = true;\r\n\t\tbackground.events.on(\"hit\", this.handleBgHit, this, undefined);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to the particular place when clicked/tapped on the scrollbar\r\n\t * background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleBgHit(event: ISpriteEvents[\"hit\"]): void {\r\n\t\tthis.makeBusy();\r\n\t\tlet point: IPoint = event.spritePoint;\r\n\t\tpoint = $utils.spritePointToSprite(point, this.background, this);\r\n\t\tlet thumb: Sprite = this.thumb;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tlet thumbX: number = point.x - thumb.pixelWidth / 2;\r\n\t\t\tthumbX = $math.fitToRange(thumbX, 0, this.innerWidth - thumb.pixelWidth);\r\n\t\t\tthis._thumbAnimation = thumb.animate({ property: \"x\", to: thumbX }, this.animationDuration, this.animationEasing);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet thumbY: number = point.y - thumb.pixelHeight / 2;\r\n\t\t\tthumbY = $math.fitToRange(thumbY, 0, this.innerHeight - thumb.pixelHeight);\r\n\t\t\tthis._thumbAnimation = thumb.animate({ property: \"y\", to: thumbY }, this.animationDuration, this.animationEasing);\r\n\t\t}\r\n\t\tif (this.animationDuration > 0) {\r\n\t\t\tthis._thumbAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._thumb.validate();\r\n\t\t\tthis.makeUnbusy();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set scrollbar as busy. (currently zooming)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic makeBusy(): void {\r\n\t\tthis._isBusy = true;\r\n\t\tthis._skipRangeEvents = false;\r\n\t\tif (this._unbusyTimeout) {\r\n\t\t\tthis.removeDispose(this._unbusyTimeout);\r\n\t\t}\r\n\t\tthis._unbusyTimeout = undefined;\r\n\t\tthis.stopAnimations();\r\n\t}\r\n\r\n\t/**\r\n\t * Stops all animations, currently playing for the scrollbar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic stopAnimations(): void {\r\n\t\tif (this._thumbAnimation) {\r\n\t\t\tthis._thumbAnimation.stop(true);\r\n\t\t}\r\n\t\tif (this._zoomAnimation) {\r\n\t\t\tthis._zoomAnimation.stop(true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Cancels \"busy\" status of the Scrollbar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic makeUnbusy(): void {\r\n\t\t/**\r\n\t\t * We cannot make Scrollbar not busy right after release, because then axes\r\n\t\t * will take over controll and Scrollbar will start to animate.\r\n\t\t * Theorethically, it's not right to set timeout by `animationDuration`,\r\n\t\t * however we can not know all the durations of elements we scroll, so we\r\n\t\t * assume that animation duration will be the same as\r\n\t\t * `interpolationDuration` or `rangeChange` duration.\r\n\t\t */\r\n\t\tthis._unbusyTimeout = this.setTimeout(this.makeUnbusyReal.bind(this), this.animationDuration * 1.1);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [makeUnbusyReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic makeUnbusyReal(): void {\r\n\t\tthis._usingGrip = undefined;\r\n\t\tthis._isBusy = false;\r\n\t\tif (!this.updateWhileMoving) {\r\n\t\t\tthis.dispatchRangeChange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Disptatches rangechanged event if it really changed\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected dispatchRangeChange() {\r\n\t\tif (this._previousEnd != this.end || this._previousStart != this.start) {\r\n\t\t\tthis._previousStart = this.start;\r\n\t\t\tthis._previousEnd = this.end;\r\n\t\t\tthis.dispatch(\"rangechanged\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates the \"thumb\" element. A draggable element between the grips.\r\n\t * @ignore\r\n\t */\r\n\tpublic updateThumb(dispatchEvents: boolean = true): void {\r\n\r\n\t\tif (!this.parent) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet thumb: Sprite = this.thumb;\r\n\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\r\n\t\tlet startGrip: ResizeButton = this.startGrip;\r\n\t\tlet endGrip: ResizeButton = this.endGrip;\r\n\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\r\n\t\t\tlet innerWidth: number = this.innerWidth;\r\n\r\n\t\t\tthumb.width = innerWidth * (end - start);\r\n\t\t\tthumb.maxX = innerWidth - thumb.pixelWidth;\r\n\t\t\tthumb.x = start * innerWidth;\r\n\r\n\t\t\tstartGrip.moveTo({ x: thumb.pixelX, y: 0 }, undefined, undefined, true); // overrides dragging\r\n\t\t\tendGrip.moveTo({ x: thumb.pixelX + thumb.pixelWidth, y: 0 }, undefined, undefined, true);\r\n\r\n\t\t\tstartGrip.readerTitle = this.language.translate(\r\n\t\t\t\t\"From %1\",\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis.adapter.apply(\"positionValue\", {\r\n\t\t\t\t\tvalue: Math.round(start * 100) + \"%\",\r\n\t\t\t\t\tposition: start\r\n\t\t\t\t}).value\r\n\t\t\t);\r\n\t\t\tstartGrip.readerValueNow = \"\" + Math.round(start * 100);\r\n\t\t\tstartGrip.readerValueText = startGrip.readerTitle;\r\n\r\n\t\t\tendGrip.readerTitle = this.language.translate(\r\n\t\t\t\t\"To %1\",\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis.adapter.apply(\"positionValue\", {\r\n\t\t\t\t\tvalue: Math.round(end * 100) + \"%\",\r\n\t\t\t\t\tposition: end\r\n\t\t\t\t}).value\r\n\t\t\t);\r\n\t\t\tendGrip.readerValueNow = \"\" + Math.round(end * 100);\r\n\t\t\tendGrip.readerValueText = endGrip.readerTitle;\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet innerHeight: number = this.innerHeight;\r\n\r\n\t\t\tthumb.height = innerHeight * (end - start);\r\n\t\t\tthumb.maxY = innerHeight - thumb.pixelHeight;\r\n\t\t\tthumb.y = (1 - end) * innerHeight;\r\n\r\n\t\t\tstartGrip.moveTo({ x: 0, y: thumb.pixelY + thumb.pixelHeight }, undefined, undefined, true);\r\n\t\t\tendGrip.moveTo({ x: 0, y: thumb.pixelY }, undefined, undefined, true);\r\n\r\n\t\t\tstartGrip.readerTitle = this.language.translate(\r\n\t\t\t\t\"To %1\",\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis.adapter.apply(\"positionValue\", {\r\n\t\t\t\t\tvalue: Math.round((1 - start) * 100) + \"%\",\r\n\t\t\t\t\tposition: (1 - start)\r\n\t\t\t\t}).value\r\n\t\t\t);\r\n\t\t\tstartGrip.readerValueNow = \"\" + Math.round(start * 100);\r\n\t\t\tstartGrip.readerValueText = startGrip.readerTitle;\r\n\r\n\t\t\tendGrip.readerTitle = this.language.translate(\r\n\t\t\t\t\"From %1\",\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis.adapter.apply(\"positionValue\", {\r\n\t\t\t\t\tvalue: Math.round((1 - end) * 100) + \"%\",\r\n\t\t\t\t\tposition: (1 - end)\r\n\t\t\t\t}).value\r\n\t\t\t);\r\n\t\t\tendGrip.readerValueNow = \"\" + Math.round(end * 100);\r\n\t\t\tendGrip.readerValueText = endGrip.readerTitle;\r\n\t\t}\r\n\r\n\t\t// Add accessibility\r\n\t\tthumb.readerTitle = this.language.translate(\r\n\t\t\t\"From %1 to %2\",\r\n\t\t\tundefined,\r\n\t\t\tthis.adapter.apply(\"positionValue\", {\r\n\t\t\t\tvalue: Math.round(start * 100) + \"%\",\r\n\t\t\t\tposition: start\r\n\t\t\t}).value,\r\n\t\t\tthis.adapter.apply(\"positionValue\", {\r\n\t\t\t\tvalue: Math.round(end * 100) + \"%\",\r\n\t\t\t\tposition: end\r\n\t\t\t}).value\r\n\t\t);\r\n\r\n\t\tthumb.readerValueNow = \"\" + Math.round(start * 100);\r\n\t\tthumb.readerValueText = thumb.readerTitle;\r\n\r\n\t\tthis.readerValueNow = \"\" + Math.round(start * 100);\r\n\t\tthis.readerValueText = thumb.readerTitle;\r\n\r\n\t\tif (!this._skipRangeEvents && this.updateWhileMoving && dispatchEvents) {\r\n\t\t\tthis.dispatchRangeChange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates extremes of the scrollbar.\r\n\t */\r\n\tprotected updateExtremes(): void {\r\n\t\tlet orientation = this.orientation;\r\n\t\tlet minX: number = 0;\r\n\t\tlet minY: number = 0;\r\n\t\tlet maxX: number = 0;\r\n\t\tlet maxY: number = 0;\r\n\r\n\t\tif (orientation == \"horizontal\") {\r\n\t\t\tmaxX = this.innerWidth;\r\n\t\t\tminY = maxY = this.innerHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmaxY = this.innerHeight;\r\n\t\t\tminX = maxX = this.innerWidth / 2;\r\n\t\t}\r\n\r\n\t\tlet startGrip: ResizeButton = this.startGrip;\r\n\t\tstartGrip.minX = minX;\r\n\t\tstartGrip.maxX = maxX;\r\n\t\tstartGrip.minY = minY;\r\n\t\tstartGrip.maxY = maxY;\r\n\r\n\t\tlet endGrip: ResizeButton = this.endGrip;\r\n\t\tendGrip.minX = minX;\r\n\t\tendGrip.maxX = maxX;\r\n\t\tendGrip.minY = minY;\r\n\t\tendGrip.maxY = maxY;\r\n\r\n\t\tlet thumb = this.thumb;\r\n\t\tthumb.minX = minX;\r\n\t\tthumb.maxX = maxX;\r\n\t\tthumb.minY = minY;\r\n\t\tthumb.maxY = maxY;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates size of the scrollbar.\r\n\t */\r\n\tprotected updateSize(): void {\r\n\t\tlet orientation = this.orientation;\r\n\r\n\t\tlet startGrip = this.startGrip;\r\n\t\tif (startGrip) {\r\n\t\t\tstartGrip.orientation = orientation;\r\n\t\t}\r\n\t\tif (this.endGrip) {\r\n\t\t\tthis.endGrip.orientation = orientation;\r\n\t\t}\r\n\r\n\t\tlet thumb: Sprite = this.thumb;\r\n\t\tif (thumb) {\r\n\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\tif (!$type.isNumber(this._pixelWidth)) {\r\n\t\t\t\t\tif (!(this.width instanceof Percent)) {\r\n\t\t\t\t\t\tthis.width = percent(100);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// this teorethically might be wrong, if user indeed sets height of a horizontal scrollbar in percent\r\n\t\t\t\t// however without this height might be equal to 100% if previous orientation was set to horizontal\r\n\t\t\t\t// so this is ok solution, in case user really wants to have scrollbar height set in percent,\r\n\t\t\t\t// he should do this after orientation.\r\n\t\t\t\tif ($type.hasValue(this.percentHeight)) {\r\n\t\t\t\t\tthis.height = this.minHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthumb.height = this.innerHeight;\r\n\r\n\t\t\t\tthumb.verticalCenter = \"middle\";\r\n\t\t\t\tthumb.horizontalCenter = \"left\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (!$type.isNumber(this._pixelHeight)) {\r\n\t\t\t\t\tif (!(this.height instanceof Percent)) {\r\n\t\t\t\t\t\tthis.height = percent(100);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// same as above with percentHeight\r\n\t\t\t\tif ($type.hasValue(this.percentWidth)) {\r\n\t\t\t\t\tthis.width = this.minWidth;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthumb.width = this.innerWidth;\r\n\t\t\t\tthumb.verticalCenter = \"top\";\r\n\t\t\t\tthumb.horizontalCenter = \"middle\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n\t * performing zoom by user interaction).\r\n\t * @return boolean\r\n\t */\r\n\tpublic get isBusy():boolean{\r\n\t\treturn this._isBusy;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * POSITIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Relative position (0-1) of the start grip.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t */\r\n\tpublic set start(position: number) {\r\n\t\tif (!this._isBusy) {\r\n\t\t\tthis.__start = position;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic get start(): number {\r\n\t\treturn Math.min(this.getPosition(this._start), this.getPosition(this._end));\r\n\t}\r\n\r\n\t/**\r\n\t * [__start description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t */\r\n\tprotected set __start(position: number) {\r\n\t\tthis._start = this.getPosition(position);\r\n\t\tthis.updateThumb();\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tprotected get __start(): number {\r\n\t\treturn this._start;\r\n\t}\r\n\r\n\t/**\r\n\t * Relative position (0-1) of the end grip.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t */\r\n\tpublic set end(position: number) {\r\n\t\tif (!this._isBusy) {\r\n\t\t\tthis.__end = position;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic get end(): number {\r\n\t\treturn Math.max(this.getPosition(this._start), this.getPosition(this._end));\r\n\t}\r\n\r\n\t/**\r\n\t * [__end description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t */\r\n\tprotected set __end(position: number) {\r\n\t\tthis._end = this.getPosition(position);\r\n\t\tthis.updateThumb();\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tprotected get __end(): number {\r\n\t\treturn this._end;\r\n\t}\r\n\r\n\t/**\r\n\t * Current selection range.\r\n\t *\r\n\t * @readonly\r\n\t * @return Range\r\n\t */\r\n\tpublic get range(): IRange {\r\n\t\treturn { start: this.start, end: this.end, priority: this._usingGrip };\r\n\t}\r\n\r\n\t/**\r\n\t * Disables range change events.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic skipRangeEvents(): void {\r\n\t\tif (!this._isBusy) {\r\n\t\t\tthis._skipRangeEvents = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [fixRange description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t * @param range  Range\r\n\t */\r\n\tpublic fixRange(range: IRange): void {\r\n\t\tif (range.start != $math.round(this._start, 2) || range.end != $math.round(this._end, 2)) {\r\n\t\t\tthis._start = range.start;\r\n\t\t\tthis._end = range.end;\r\n\r\n\t\t\tthis._skipRangeEvents = true;\r\n\t\t\tthis.updateThumb();\r\n\t\t\tthis._skipRangeEvents = false;\r\n\t\t\tthis.thumb.validate();\r\n\t\t\tthis.thumb.background.validate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getPosition description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param position  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getPosition(position: number): number {\r\n\t\treturn $math.fitToRange($math.round(position, 4), 0, 1);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * MISC\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Orientation of the scrollbar.\r\n\t *\r\n\t * Available options: \"horizontal\" (default) and \"vertical\".\r\n\t *\r\n\t * @default \"horizontal\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\r\n\t\tif (this.setPropertyValue(\"orientation\", value)) {\r\n\r\n\t\t\t// Set mouse cursors and screen reader tetxt accordingly\r\n\t\t\tif (value === \"horizontal\") {\r\n\r\n\t\t\t\t// Mouse styles\r\n\t\t\t\tthis.startGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\r\n\t\t\t\tthis.endGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\r\n\r\n\t\t\t\t// Reader text\r\n\t\t\t\t/*this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\r\n\t\t\t\tthis.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\r\n\t\t\t\tthis.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\r\n\t\t\t\tthis.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");*/\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// Mouse styles\r\n\t\t\t\tthis.startGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\r\n\t\t\t\tthis.endGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\r\n\r\n\t\t\t\t// Reader text\r\n\t\t\t\t/*this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\r\n\t\t\t\tthis.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\r\n\t\t\t\tthis.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\r\n\t\t\t\tthis.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");*/\r\n\r\n\t\t\t}\r\n\t\t\tthis.updateByOrientation();\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * GRIPS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Start grip element. (button)\r\n\t *\r\n\t * @param button  Grip element\r\n\t */\r\n\tpublic set startGrip(button: ResizeButton) {\r\n\t\tif (this._startGrip) {\r\n\t\t\tthis.removeDispose(this._startGrip);\r\n\t\t}\r\n\t\tthis._startGrip = button;\r\n\t\tthis.processGrip(button);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Grip element\r\n\t */\r\n\tpublic get startGrip(): ResizeButton {\r\n\t\treturn this._startGrip;\r\n\t}\r\n\r\n\t/**\r\n\t * End grip element. (button)\r\n\t *\r\n\t * @param button  Grip element\r\n\t */\r\n\tpublic set endGrip(button: ResizeButton) {\r\n\t\tif (this._endGrip) {\r\n\t\t\tthis.removeDispose(this._endGrip);\r\n\t\t}\r\n\t\tthis._endGrip = button;\r\n\t\tthis.processGrip(button);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Grip element\r\n\t */\r\n\tpublic get endGrip(): ResizeButton {\r\n\t\treturn this._endGrip;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates the grip button with properties and events.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param button Grip button\r\n\t */\r\n\tpublic processGrip(button: ResizeButton) {\r\n\t\tbutton.parent = this;\r\n\t\tbutton.isMeasured = false;\r\n\t\tbutton.focusable = true;\r\n\t\tbutton.shouldClone = false;\r\n\r\n\t\t// Set button defaults\r\n\t\t//button.showSystemTooltip = true; // setting this here is not right because we break inheritance\r\n\t\tbutton.zIndex = 100;\r\n\r\n\t\tbutton.events.on(\"drag\", this.handleGripDrag, this, false);\r\n\t\tbutton.events.on(\"dragstop\", this.makeUnbusy, this, false);\r\n\t\tbutton.events.on(\"down\", this.makeBusy, this, false);\r\n\t\tbutton.events.on(\"up\", this.makeUnbusy, this, false);\r\n\r\n\t\tthis._disposers.push(button);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positions of related elements after grip element is dragged.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleGripDrag(event: AMEvent<ResizeButton, ISpriteEvents>[\"drag\"]): void {\r\n\t\tthis.makeBusy();\r\n\r\n\t\tif (event.target === this._startGrip) {\r\n\t\t\tthis._usingGrip = \"start\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._usingGrip = \"end\";\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tthis._start = this.startGrip.pixelX / this.innerWidth;\r\n\t\t\tthis._end = this.endGrip.pixelX / this.innerWidth;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._start = 1 - this.startGrip.pixelY / this.innerHeight;\r\n\t\t\tthis._end = 1 - this.endGrip.pixelY / this.innerHeight;\r\n\t\t}\r\n\r\n\t\tthis.updateThumb();\r\n\t}\r\n\r\n\t/**\r\n\t * A \"thumb\" element.\r\n\t *\r\n\t * It's a draggable square space between the grips, that can be used to\r\n\t * pan the selection.\r\n\t *\r\n\t * @param thumb  Thumb element\r\n\t */\r\n\tpublic set thumb(thumb: Button) {\r\n\t\tif (thumb) {\r\n\r\n\t\t\tif (this._thumb) {\r\n\t\t\t\tthis.removeDispose(this._thumb);\r\n\t\t\t}\r\n\r\n\t\t\tthis._thumb = thumb;\r\n\t\t\tthumb.parent = this;\r\n\t\t\tthumb.isMeasured = false;\r\n\t\t\tthumb.inert = true;\r\n\t\t\tthumb.draggable = true;\r\n\t\t\tthumb.clickable = true;\r\n\t\t\tthumb.hoverable = true;\r\n\t\t\tthumb.focusable = true;\r\n\t\t\tthumb.shouldClone = false;\r\n\t\t\tthumb.zIndex = 0;\r\n\r\n\t\t\t// TODO remove closures ?\r\n\t\t\t// Add events\r\n\r\n\t\t\t// Add cursor styles to thumb\r\n\t\t\tthumb.cursorOverStyle = MouseCursorStyle.grab;\r\n\t\t\tthumb.cursorDownStyle = MouseCursorStyle.grabbing;\r\n\r\n\t\t\tthumb.events.on(\"dragstart\", this.makeBusy, this, false);\r\n\t\t\tthumb.events.on(\"dragstop\", this.makeUnbusy, this, false);\r\n\t\t\tthumb.events.on(\"positionchanged\", this.handleThumbPosition, this, false);\r\n\t\t\tthumb.events.on(\"sizechanged\", this.handleThumbPosition, this, false);\r\n\t\t\tthumb.events.on(\"doublehit\", this.handleDoubleClick, this, false);\r\n\r\n\t\t\t// Add event for space and ENTER to toggle full zoom out and back\r\n\t\t\t// (same as doubleclick)\r\n\t\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (keyboard.isKey(ev.event, [\"space\", \"enter\"]) && this.thumb.isFocused) {\r\n\t\t\t\t\tev.event.preventDefault();\r\n\t\t\t\t\tthis.handleDoubleClick();\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis._disposers.push(this._thumb);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Thumb element\r\n\t */\r\n\tpublic get thumb(): Button {\r\n\t\tif (!this._thumb) {\r\n\t\t\t// Create scrollbar controls (setters will handle adding disposers)\r\n\t\t\tlet thumb = new Button();\r\n\t\t\tthumb.background.cornerRadius(10, 10, 10, 10);\r\n\t\t\tthumb.padding(0, 0, 0, 0);\r\n\t\t\tthis.thumb = thumb;\r\n\t\t}\r\n\t\treturn this._thumb;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms-in and out the selection on double-click of the thumb.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDoubleClick(): void {\r\n\r\n\t\tthis.makeBusy();\r\n\r\n\t\tlet newStart: number = 0;\r\n\t\tlet newEnd: number = 1;\r\n\r\n\t\tif (this.start != 0 || this.end != 1) {\r\n\t\t\tthis._prevStart = this.start;\r\n\t\t\tthis._prevEnd = this.end;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tnewStart = this._prevStart;\r\n\t\t\tnewEnd = this._prevEnd;\r\n\t\t}\r\n\r\n\t\tlet zoomAnimation = this.animate([{ property: \"__start\", to: newStart }, { property: \"__end\", to: newEnd }], this.animationDuration, this.animationEasing);\r\n\r\n\t\tif (zoomAnimation && !zoomAnimation.isFinished()) {\r\n\t\t\tzoomAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\r\n\t\t\tthis._zoomAnimation = zoomAnimation;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.makeUnbusy();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positions of other elements when thumb is moved.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbPosition(): void {\r\n\t\tlet thumb = this.thumb;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tlet innerWidth = this.innerWidth;\r\n\t\t\tlet w = thumb.innerWidth;\r\n\t\t\tlet x = thumb.pixelX;\r\n\r\n\t\t\tthis._start = x / innerWidth;\r\n\t\t\tthis._end = (x + w) / innerWidth;\r\n\t\t\tthis.updateThumb();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet innerHeight = this.innerHeight;\r\n\t\t\tlet h = thumb.innerHeight;\r\n\t\t\tlet y = thumb.pixelY;\r\n\r\n\t\t\tthis._start = 1 - (y + h) / innerHeight;\r\n\t\t\tthis._end = 1 - y / innerHeight;\r\n\t\t\tthis.updateThumb();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for the scrollbar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n\t/**\r\n\t * Use this property to set whether grips should be always visible (`false`),\r\n\t * or they should just appear on scrollbar hover (`true`).\r\n\t *\r\n\t * @param value  Show only on hover?\r\n\t */\r\n\tpublic set hideGrips(value: boolean) {\r\n\r\n\t\tthis._hideGrips = value;\r\n\r\n\t\tif (this._overDisposer) {\r\n\t\t\tthis.removeDispose(this._overDisposer);\r\n\t\t}\r\n\t\tif (this._outDisposer) {\r\n\t\t\tthis.removeDispose(this._outDisposer);\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tthis._overDisposer = this.events.on(\"over\", () => {\r\n\t\t\t\tthis.startGrip.show();\r\n\t\t\t\tthis.endGrip.show();\r\n\t\t\t}, undefined, false)\r\n\t\t\tthis._outDisposer = this.events.on(\"out\", () => {\r\n\t\t\t\tthis.startGrip.hide();\r\n\t\t\t\tthis.endGrip.hide();\r\n\t\t\t}, undefined, false)\r\n\t\t\tthis.startGrip.hide();\r\n\t\t\tthis.endGrip.hide();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.startGrip.show();\r\n\t\t\tthis.endGrip.show();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Show only on hover?\r\n\t */\r\n\tpublic get hideGrips(): boolean {\r\n\t\treturn this._hideGrips;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Duration in milliseconds of scrollbar animation (happens when user clicks on a background of a scrollbar)\r\n\t * @default 0\r\n\t * @param value number\r\n\t */\r\n\tpublic set animationDuration(value: number) {\r\n\t\tthis.setPropertyValue(\"animationDuration\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get animationDuration(): number {\r\n\t\treturn this.getPropertyValue(\"animationDuration\");\r\n\t}\r\n\r\n\t/**\r\n\t * Animation easing function.\r\n\t * @todo: review description and default\r\n\t * @default $ease.cubicOut\r\n\t * @param value (value: number) => number\r\n\t */\r\n\tpublic set animationEasing(value: (value: number) => number) {\r\n\t\tthis.setPropertyValue(\"animationEasing\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Function}\r\n\t */\r\n\tpublic get animationEasing(): (value: number) => number {\r\n\t\treturn this.getPropertyValue(\"animationEasing\");\r\n\t}\r\n\r\n\t/**\r\n\t * Adds easing functions to \"function\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as function?\r\n\t */\r\n\tprotected asFunction(field: string): boolean {\r\n\t\treturn field == \"animationEasing\" || super.asIs(field);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Scrollbar\"] = Scrollbar;\r\n"]},"metadata":{},"sourceType":"module"}