{"ast":null,"code":"/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { registry, is } from \"./Registry\";\nimport { Container } from \"./Container\";\nimport { raf } from \"./utils/AsyncPending\";\nimport { triggerIdle } from \"./utils/AsyncPending\";\nimport * as $array from \"./utils/Array\";\nimport * as $object from \"./utils/Object\";\nimport * as $log from \"./utils/Log\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * The main class that handles system-wide tasks, like caching, heartbeats, etc.\r\n * @important\r\n */\n\nvar System =\n/** @class */\nfunction () {\n  /**\r\n   * Performs initialization of the System object.\r\n   *\r\n   * Called when the first [[Sprite]] object is created.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  function System() {\n    /**\r\n     * A flag indicating if the system is on pause.\r\n     */\n    this._isPaused = false;\n    /**\r\n     * Holds the list of currently playing animations.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    this.animations = [];\n    /**\r\n     * Unique ID of the object.\r\n     */\n\n    this.uid = registry.getUniqueId();\n    /**\r\n     * @todo Description\r\n     * @todo Needed?\r\n     * @ignore Exclude from docs\r\n     */\n\n    this.dummyCounter = 0;\n    this._frameRequested = false;\n    this.updateStepDuration = 45;\n    this.time = Date.now();\n  }\n  /**\r\n   * Reports time elapsed since timer was reset.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Needed?\r\n   * @param msg    Message to report in console\r\n   * @param reset  Reset time counter\r\n   */\n\n\n  System.prototype.reportTime = function (msg, reset) {\n    if (this.dummyCounter < 6) {//console.log(Date.now() - this.time, msg, this.dummyCounter2);\n    }\n\n    if (reset) {\n      this.time = Date.now();\n    }\n  };\n  /**\r\n   * Performs \"heartbeat\" operations `frameRate` number of times per second.\r\n   *\r\n   * When the chart element is invalidated, it is not immediately redrawn.\r\n   *\r\n   * Instead it waits for the next `update()` cycle to be re-validated.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Maybe should be private?\r\n   */\n\n\n  System.prototype.update = function () {\n    var _this = this;\n\n    if (this._isPaused) {\n      return;\n    }\n\n    this._frameRequested = false;\n    var time = Date.now();\n    registry.dispatchImmediately(\"enterframe\"); //this.validateLayouts();\n    //this.validatePositions();\n\n    /*\r\n            for (let key in registry.invalidLayouts) {\r\n                this.validateLayouts(key);\r\n            }\r\n            for (let key in registry.invalidPositions) {\r\n                this.validatePositions(key);\r\n            }\r\n    */\n\n    var skippedComponents = []; // data objects first - do all calculations\n    // only data is parsed in chunks, thats why we do for loop instead of a while like with other invalid items.\n    // important to go backwards, as items are removed!\n    // TODO use iterator instead\n\n    for (var key in registry.invalidDatas) {\n      if ($object.hasKey(registry.invalidDatas, key)) {\n        var invalidData = registry.invalidDatas[key];\n\n        while (invalidData.length > 0) {\n          var component = invalidData[0];\n          var dataProvider = component.dataProvider;\n\n          if (!component.isDisposed()) {\n            if (dataProvider && dataProvider.dataInvalid) {\n              try {\n                dataProvider.validateData();\n\n                if (dataProvider.dataValidationProgress < 1) {\n                  break;\n                }\n              } catch (e) {\n                $array.remove(invalidData, dataProvider);\n                dataProvider.raiseCriticalError(e);\n              }\n            } else {\n              try {\n                component.validateData();\n\n                if (component.dataValidationProgress < 1) {\n                  break;\n                }\n              } catch (e) {\n                $array.remove(invalidData, component);\n                component.raiseCriticalError(e);\n              }\n            }\n          } else {\n            $array.remove(invalidData, component);\n          }\n        }\n\n        if (Date.now() - time > this.updateStepDuration) {\n          break;\n        }\n      }\n    }\n\n    while (registry.invalidRawDatas.length > 0) {\n      var component = registry.invalidRawDatas[0];\n\n      if (!component.isDisposed()) {\n        try {\n          component.validateRawData();\n        } catch (e) {\n          $array.remove(registry.invalidRawDatas, component);\n          component.raiseCriticalError(e);\n        }\n      } else {\n        $array.remove(registry.invalidRawDatas, component);\n      }\n    } // TODO use iterator instead\n\n\n    while (registry.invalidDataItems.length > 0) {\n      var component = registry.invalidDataItems[0];\n      var dataProvider = component.dataProvider; // this is needed to avoid partial value validation when data is parsed in chunks\n\n      if (component.isDisposed() || component.dataInvalid || dataProvider && dataProvider.dataInvalid) {// void\n      } else {\n        try {\n          component.validateDataItems();\n        } catch (e) {\n          $array.remove(registry.invalidDataItems, component);\n          component.raiseCriticalError(e);\n        }\n      } // this might seem too much, as validateValues removes from invalidDataItems aswell, but just to be sure (in case validateData is overriden and no super is called)\n\n\n      $array.remove(registry.invalidDataItems, component);\n    } // TODO use iterator instead\n\n\n    while (registry.invalidDataRange.length > 0) {\n      var component = registry.invalidDataRange[0];\n      var dataProvider = component.dataProvider;\n\n      if (component.isDisposed() || component.dataInvalid || dataProvider && dataProvider.dataInvalid) {// void\n      } else {\n        try {\n          component.validateDataRange();\n\n          if (!component.skipRangeEvent) {\n            component.dispatchImmediately(\"datarangechanged\");\n          }\n\n          component.skipRangeEvent = false;\n        } catch (e) {\n          $array.remove(registry.invalidDataRange, component);\n          component.raiseCriticalError(e);\n        }\n      } // this might seem too much, as validateDataRange removes from invalidDataRange aswell, but just to be sure (in case validateData is overriden and no super is called)\n\n\n      $array.remove(registry.invalidDataRange, component);\n    }\n\n    var skippedSprites = []; // display objects later\n    // TODO use iterator instead\n\n    $object.each(registry.invalidLayouts, function (key) {\n      _this.validateLayouts(key);\n    });\n    $object.each(registry.invalidPositions, function (key) {\n      _this.validatePositions(key);\n    });\n    var hasSkipped = false;\n    time = Date.now();\n    $object.each(registry.invalidSprites, function (key, invalidSprites) {\n      var count = 0;\n\n      while (invalidSprites.length > 0) {\n        _this.validateLayouts(key);\n\n        _this.validatePositions(key);\n\n        count++;\n\n        if (count == 5) {\n          if (Date.now() - time > _this.updateStepDuration) {\n            break;\n          }\n\n          count = 0;\n        }\n\n        var sprite = invalidSprites[invalidSprites.length - 1]; // we need to check this, as validateLayout might validate sprite\n\n        if (sprite && !sprite.isDisposed()) {\n          if (!sprite._systemCheckIfValidate()) {\n            // void\n            skippedSprites.push(sprite);\n          } else {\n            if (!_this.checkIfValidate2(sprite)) {\n              // void\n              skippedSprites.push(sprite);\n            } else {\n              try {\n                sprite._systemUpdate(skippedSprites);\n              } catch (e) {\n                sprite.invalid = false;\n                $array.remove(invalidSprites, sprite);\n                sprite.raiseCriticalError(e);\n              }\n            }\n          } // this might seem too much, but it's ok\n\n\n          sprite.invalid = false;\n        }\n\n        $array.remove(invalidSprites, sprite);\n      }\n\n      registry.invalidSprites[key] = registry.invalidSprites[key].concat(skippedSprites);\n    });\n    $object.each(registry.invalidSprites, function (key, value) {\n      if (value.length > 0) {\n        hasSkipped = true;\n      }\n    });\n    $object.each(registry.invalidDatas, function (key, value) {\n      if (value.length > 0) {\n        hasSkipped = true;\n      }\n    }); // TODO make this more efficient\n    // TODO don't copy the array\n\n    $array.each($array.copy(this.animations), function (x) {\n      x.update();\n    }); //if(!hasSkipped){\n\n    $object.each(registry.invalidLayouts, function (key) {\n      _this.validateLayouts(key);\n    });\n    $object.each(registry.invalidPositions, function (key) {\n      _this.validatePositions(key);\n    }); //}\n\n    triggerIdle();\n    $object.each(registry.invalidLayouts, function (key) {\n      _this.validateLayouts(key);\n    });\n    $object.each(registry.invalidPositions, function (key) {\n      _this.validatePositions(key);\n    });\n    registry.dispatchImmediately(\"exitframe\");\n\n    if (hasSkipped || this.animations.length > 0 || skippedComponents.length > 0) {\n      this.requestFrame();\n    }\n\n    if (this.updateStepDuration < 200) {\n      var all0_1 = true;\n      $object.each(registry.invalidDatas, function (key, value) {\n        if (value.length > 0) {\n          all0_1 = false;\n        }\n      });\n      $object.each(registry.invalidSprites, function (key, value) {\n        if (value.length > 0) {\n          all0_1 = false;\n        }\n      });\n\n      if (all0_1) {\n        this.updateStepDuration = 200;\n      }\n    }\n  };\n\n  System.prototype.checkIfValidate2 = function (sprite) {\n    if (sprite.dataItem && sprite.dataItem.component && sprite.dataItem.component.dataInvalid && !sprite.dataItem.component.isTemplate) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /**\r\n   * Requests new animation frame\r\n   */\n\n\n  System.prototype.requestFrame = function () {\n    var _this = this;\n\n    if (!this._frameRequested) {\n      raf(function () {\n        _this.update();\n      });\n      this._frameRequested = true;\n    }\n  };\n  /**\r\n   * Call this method if you update data or config of a chart that is in\r\n   * hidden container, after revealing the container, so that labels and\r\n   * possibly other elements can correctly arrange themselves.\r\n   *\r\n   * @since 4.7.10\r\n   * @param  container  Target container\r\n   */\n\n\n  System.prototype.softInvalidate = function (container) {\n    var _this = this;\n\n    container.children.each(function (child) {\n      if (child instanceof Container) {\n        _this.softInvalidate(child);\n      }\n\n      if (child.measureFailed) {\n        if (is(child, \"Label\")) {\n          child.hardInvalidate();\n        } else {\n          child.invalidate();\n        }\n\n        child.measureFailed = false;\n      }\n    });\n  };\n  /**\r\n   * Triggers position re-validation on all [[Sprite]] elements that have\r\n   * invalid(ated) positions.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Maybe should be private?\r\n   */\n\n\n  System.prototype.validatePositions = function (id) {\n    // invalid positions\n    // TODO use iterator instead\n    var invalidPositions = registry.invalidPositions[id];\n\n    while (invalidPositions.length > 0) {\n      var sprite = invalidPositions[invalidPositions.length - 1];\n\n      if (!sprite.isDisposed()) {\n        try {\n          sprite._systemValidatePositions();\n        } catch (e) {\n          sprite.positionInvalid = false;\n          $array.remove(invalidPositions, sprite);\n          sprite.raiseCriticalError(e);\n        }\n      } else {\n        $array.remove(invalidPositions, sprite);\n      }\n    }\n  };\n  /**\r\n   * Triggers position re-validation on all [[Container]] elements that have\r\n   * invalid(ated) layouts.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Maybe should be private?\r\n   */\n\n\n  System.prototype.validateLayouts = function (id) {\n    // invalid positions\n    // TODO use iterator instead\n    var invalidLayouts = registry.invalidLayouts[id];\n\n    while (invalidLayouts.length > 0) {\n      var container = invalidLayouts[invalidLayouts.length - 1];\n\n      if (!container.isDisposed()) {\n        try {\n          container.children.each(function (sprite) {\n            sprite._systemValidateLayouts();\n          });\n          container.validateLayout();\n        } catch (e) {\n          container.layoutInvalid = false;\n          $array.remove(invalidLayouts, container);\n          container.raiseCriticalError(e);\n        }\n      } else {\n        $array.remove(invalidLayouts, container);\n      }\n    }\n  };\n  /**\r\n   * Outputs string to console if `verbose` is `true`.\r\n   *\r\n   * @param value Message to output to console\r\n   */\n\n\n  System.prototype.log = function (value) {\n    $log.log(value);\n  };\n\n  Object.defineProperty(System.prototype, \"isPaused\", {\n    /**\r\n     * @return Is system on pause?\r\n     */\n    get: function get() {\n      return this._isPaused;\n    },\n\n    /**\r\n     * Pauses all the processes of all the amCharts objects on the page\r\n     *\r\n     * @return is paused?\r\n     */\n    set: function set(value) {\n      this._isPaused = value;\n\n      if (!value) {\n        this._frameRequested = false;\n        this.requestFrame();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * amCharts Version.\r\n   *\r\n   * This follows npm's semver specification.\r\n   *\r\n   * @see {@link https://docs.npmjs.com/misc/semver}\r\n   */\n\n  System.VERSION = \"4.10.23\";\n  return System;\n}();\n\nexport { System };\n/**\r\n * A singleton global instance of [[System]].\r\n *\r\n * All code should use this, rather than instantiating their\r\n * own System objects.\r\n */\n\nexport var system = new System();","map":{"version":3,"mappings":"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","names":["registry","is","Container","raf","triggerIdle","$array","$object","$log","getUniqueId","time","Date","now","System","msg","reset","dummyCounter","_isPaused","_frameRequested","dispatchImmediately","skippedComponents","key","invalidDatas","hasKey","invalidData","length","component","dataProvider","isDisposed","dataInvalid","validateData","dataValidationProgress","e","remove","raiseCriticalError","updateStepDuration","invalidRawDatas","validateRawData","invalidDataItems","validateDataItems","invalidDataRange","validateDataRange","skipRangeEvent","skippedSprites","each","invalidLayouts","_this","validateLayouts","invalidPositions","validatePositions","hasSkipped","invalidSprites","count","sprite","_systemCheckIfValidate","push","checkIfValidate2","_systemUpdate","invalid","concat","value","copy","animations","x","update","requestFrame","all0_1","dataItem","isTemplate","container","children","child","softInvalidate","measureFailed","hardInvalidate","invalidate","id","_systemValidatePositions","positionInvalid","_systemValidateLayouts","validateLayout","layoutInvalid","log","Object","system"],"sourceRoot":"","sources":["../../../../src/.internal/core/System.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { registry, is } from \"./Registry\";\r\nimport { Sprite } from \"./Sprite\";\r\nimport { Container } from \"./Container\";\r\nimport { Component } from \"./Component\";\r\nimport { Label } from \"./elements/Label\";\r\nimport { raf } from \"./utils/AsyncPending\";\r\nimport { IAnimationObject } from \"./utils/Animation\";\r\nimport { triggerIdle } from \"./utils/AsyncPending\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\nimport * as $log from \"./utils/Log\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * The main class that handles system-wide tasks, like caching, heartbeats, etc.\r\n * @important\r\n */\r\nexport class System {\r\n\t/**\r\n\t * A flag indicating if the system is on pause.\r\n\t */\r\n\tprotected _isPaused: boolean = false;\r\n\r\n\t/**\r\n\t * Holds the list of currently playing animations.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic animations: Array<IAnimationObject> = [];\r\n\r\n\t/**\r\n\t * Unique ID of the object.\r\n\t */\r\n\tpublic uid: string = registry.getUniqueId();\r\n\r\n\t/**\r\n\t * amCharts Version.\r\n\t *\r\n\t * This follows npm's semver specification.\r\n\t *\r\n\t * @see {@link https://docs.npmjs.com/misc/semver}\r\n\t */\r\n\tstatic VERSION: string = \"4.10.23\";\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t * @todo Needed?\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dummyCounter: number = 0;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic time: number;\r\n\r\n\r\n\tprotected _frameRequested: boolean = false;\r\n\r\n\tpublic updateStepDuration: number = 45;\r\n\r\n\t/**\r\n\t * Performs initialization of the System object.\r\n\t *\r\n\t * Called when the first [[Sprite]] object is created.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic constructor() {\r\n\t\tthis.time = Date.now();\r\n\t}\r\n\r\n\t/**\r\n\t * Reports time elapsed since timer was reset.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Needed?\r\n\t * @param msg    Message to report in console\r\n\t * @param reset  Reset time counter\r\n\t */\r\n\tpublic reportTime(msg: string, reset?: boolean): void {\r\n\t\tif (this.dummyCounter < 6) {\r\n\t\t\t//console.log(Date.now() - this.time, msg, this.dummyCounter2);\r\n\t\t}\r\n\t\tif (reset) {\r\n\t\t\tthis.time = Date.now();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs \"heartbeat\" operations `frameRate` number of times per second.\r\n\t *\r\n\t * When the chart element is invalidated, it is not immediately redrawn.\r\n\t *\r\n\t * Instead it waits for the next `update()` cycle to be re-validated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic update(): void {\r\n\r\n\t\tif (this._isPaused) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._frameRequested = false;\r\n\r\n\t\tlet time = Date.now();\r\n\r\n\t\tregistry.dispatchImmediately(\"enterframe\");\r\n\r\n\t\t//this.validateLayouts();\r\n\t\t//this.validatePositions();\r\n\t\t/*\r\n\t\t\t\tfor (let key in registry.invalidLayouts) {\r\n\t\t\t\t\tthis.validateLayouts(key);\r\n\t\t\t\t}\r\n\t\t\t\tfor (let key in registry.invalidPositions) {\r\n\t\t\t\t\tthis.validatePositions(key);\r\n\t\t\t\t}\r\n\t\t*/\r\n\r\n\t\tlet skippedComponents: Component[] = [];\r\n\r\n\t\t// data objects first - do all calculations\r\n\t\t// only data is parsed in chunks, thats why we do for loop instead of a while like with other invalid items.\r\n\t\t// important to go backwards, as items are removed!\r\n\t\t// TODO use iterator instead\r\n\r\n\t\tfor (let key in registry.invalidDatas) {\r\n\t\t\tif ($object.hasKey(registry.invalidDatas, key)) {\r\n\t\t\t\tlet invalidData = registry.invalidDatas[key];\r\n\r\n\t\t\t\twhile (invalidData.length > 0) {\r\n\t\t\t\t\tlet component: Component = invalidData[0];\r\n\t\t\t\t\tlet dataProvider: $type.Optional<Component> = component.dataProvider;\r\n\r\n\t\t\t\t\tif (!component.isDisposed()) {\r\n\r\n\t\t\t\t\t\tif (dataProvider && dataProvider.dataInvalid) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tdataProvider.validateData();\r\n\t\t\t\t\t\t\t\tif (dataProvider.dataValidationProgress < 1) {\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (e) {\r\n\t\t\t\t\t\t\t\t$array.remove(invalidData, dataProvider);\r\n\t\t\t\t\t\t\t\tdataProvider.raiseCriticalError(e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tcomponent.validateData();\r\n\t\t\t\t\t\t\t\tif (component.dataValidationProgress < 1) {\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (e) {\r\n\t\t\t\t\t\t\t\t$array.remove(invalidData, component);\r\n\t\t\t\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t$array.remove(invalidData, component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (Date.now() - time > this.updateStepDuration) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twhile (registry.invalidRawDatas.length > 0) {\r\n\t\t\tlet component: Component = registry.invalidRawDatas[0];\r\n\t\t\tif (!component.isDisposed()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcomponent.validateRawData();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(registry.invalidRawDatas, component);\r\n\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$array.remove(registry.invalidRawDatas, component);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// TODO use iterator instead\r\n\t\twhile (registry.invalidDataItems.length > 0) {\r\n\t\t\tlet component: Component = registry.invalidDataItems[0];\r\n\r\n\t\t\tlet dataProvider: $type.Optional<Component> = component.dataProvider;\r\n\r\n\t\t\t// this is needed to avoid partial value validation when data is parsed in chunks\r\n\t\t\tif (component.isDisposed() || component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcomponent.validateDataItems();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(registry.invalidDataItems, component);\r\n\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// this might seem too much, as validateValues removes from invalidDataItems aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n\t\t\t$array.remove(registry.invalidDataItems, component);\r\n\t\t}\r\n\r\n\t\t// TODO use iterator instead\r\n\t\twhile (registry.invalidDataRange.length > 0) {\r\n\t\t\tlet component: Component = registry.invalidDataRange[0];\r\n\r\n\t\t\tlet dataProvider: $type.Optional<Component> = component.dataProvider;\r\n\r\n\t\t\tif (component.isDisposed() || component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcomponent.validateDataRange();\r\n\t\t\t\t\tif (!component.skipRangeEvent) {\r\n\t\t\t\t\t\tcomponent.dispatchImmediately(\"datarangechanged\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcomponent.skipRangeEvent = false;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(registry.invalidDataRange, component);\r\n\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// this might seem too much, as validateDataRange removes from invalidDataRange aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n\t\t\t$array.remove(registry.invalidDataRange, component);\r\n\t\t}\r\n\r\n\t\tlet skippedSprites: Sprite[] = [];\r\n\r\n\t\t// display objects later\r\n\t\t// TODO use iterator instead\r\n\r\n\t\t$object.each(registry.invalidLayouts, (key) => {\r\n\t\t\tthis.validateLayouts(key);\r\n\t\t});\r\n\r\n\t\t$object.each(registry.invalidPositions, (key) => {\r\n\t\t\tthis.validatePositions(key);\r\n\t\t});\r\n\r\n\r\n\t\tlet hasSkipped: boolean = false;\r\n\r\n\t\ttime = Date.now();\r\n\r\n\t\t$object.each(registry.invalidSprites, (key, invalidSprites) => {\r\n\t\t\tlet count = 0;\r\n\r\n\t\t\twhile (invalidSprites.length > 0) {\r\n\t\t\t\tthis.validateLayouts(key);\r\n\t\t\t\tthis.validatePositions(key);\r\n\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif (count == 5) {\r\n\t\t\t\t\tif (Date.now() - time > this.updateStepDuration) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcount = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet sprite: Sprite = invalidSprites[invalidSprites.length - 1];\r\n\r\n\t\t\t\t// we need to check this, as validateLayout might validate sprite\r\n\t\t\t\tif (sprite && !sprite.isDisposed()) {\r\n\t\t\t\t\tif (!sprite._systemCheckIfValidate()) {\r\n\t\t\t\t\t\t// void\r\n\t\t\t\t\t\tskippedSprites.push(sprite);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (!this.checkIfValidate2(sprite)) {\r\n\t\t\t\t\t\t\t// void\r\n\t\t\t\t\t\t\tskippedSprites.push(sprite);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tsprite._systemUpdate(skippedSprites);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (e) {\r\n\t\t\t\t\t\t\t\tsprite.invalid = false;\r\n\t\t\t\t\t\t\t\t$array.remove(invalidSprites, sprite);\r\n\t\t\t\t\t\t\t\tsprite.raiseCriticalError(e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// this might seem too much, but it's ok\r\n\t\t\t\t\tsprite.invalid = false;\r\n\t\t\t\t}\r\n\t\t\t\t$array.remove(invalidSprites, sprite);\r\n\t\t\t}\r\n\r\n\t\t\tregistry.invalidSprites[key] = registry.invalidSprites[key].concat(skippedSprites);\r\n\t\t});\r\n\r\n\t\t$object.each(registry.invalidSprites, (key, value) => {\r\n\t\t\tif (value.length > 0) {\r\n\t\t\t\thasSkipped = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$object.each(registry.invalidDatas, (key, value) => {\r\n\t\t\tif (value.length > 0) {\r\n\t\t\t\thasSkipped = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// TODO make this more efficient\r\n\t\t// TODO don't copy the array\r\n\t\t$array.each($array.copy(this.animations), (x) => {\r\n\t\t\tx.update();\r\n\t\t});\r\n\r\n\t\t//if(!hasSkipped){\r\n\t\t$object.each(registry.invalidLayouts, (key) => {\r\n\t\t\tthis.validateLayouts(key);\r\n\t\t});\r\n\r\n\t\t$object.each(registry.invalidPositions, (key) => {\r\n\t\t\tthis.validatePositions(key);\r\n\t\t});\r\n\t\t//}\r\n\r\n\t\ttriggerIdle();\r\n\r\n\t\t$object.each(registry.invalidLayouts, (key) => {\r\n\t\t\tthis.validateLayouts(key);\r\n\t\t});\r\n\r\n\t\t$object.each(registry.invalidPositions, (key) => {\r\n\t\t\tthis.validatePositions(key);\r\n\t\t});\r\n\r\n\r\n\t\tregistry.dispatchImmediately(\"exitframe\");\r\n\r\n\t\tif (hasSkipped || this.animations.length > 0 || skippedComponents.length > 0) {\r\n\t\t\tthis.requestFrame();\r\n\t\t}\r\n\r\n\t\tif (this.updateStepDuration < 200) {\r\n\t\t\tlet all0 = true;\r\n\r\n\t\t\t$object.each(registry.invalidDatas, (key, value) => {\r\n\t\t\t\tif (value.length > 0) {\r\n\t\t\t\t\tall0 = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t$object.each(registry.invalidSprites, (key, value) => {\r\n\t\t\t\tif (value.length > 0) {\r\n\t\t\t\t\tall0 = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (all0) {\r\n\t\t\t\tthis.updateStepDuration = 200;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic checkIfValidate2(sprite: Sprite): boolean {\r\n\t\tif (sprite.dataItem && sprite.dataItem.component && sprite.dataItem.component.dataInvalid && !sprite.dataItem.component.isTemplate) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Requests new animation frame\r\n\t */\r\n\tpublic requestFrame() {\r\n\t\tif (!this._frameRequested) {\r\n\r\n\t\t\traf(() => {\r\n\t\t\t\tthis.update();\r\n\t\t\t});\r\n\t\t\tthis._frameRequested = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Call this method if you update data or config of a chart that is in\r\n\t * hidden container, after revealing the container, so that labels and\r\n\t * possibly other elements can correctly arrange themselves.\r\n\t *\r\n\t * @since 4.7.10\r\n\t * @param  container  Target container\r\n\t */\r\n\tpublic softInvalidate(container: Container) {\r\n\t\tcontainer.children.each((child) => {\r\n\t\t\tif (child instanceof Container) {\r\n\t\t\t\tthis.softInvalidate(child);\r\n\t\t\t}\r\n\t\t\tif (child.measureFailed) {\r\n\t\t\t\tif (is<Label>(child, \"Label\")) {\r\n\t\t\t\t\tchild.hardInvalidate();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tchild.invalidate();\r\n\t\t\t\t}\r\n\t\t\t\tchild.measureFailed = false;\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers position re-validation on all [[Sprite]] elements that have\r\n\t * invalid(ated) positions.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic validatePositions(id: string): void {\r\n\t\t// invalid positions\r\n\t\t// TODO use iterator instead\r\n\t\tlet invalidPositions = registry.invalidPositions[id];\r\n\r\n\t\twhile (invalidPositions.length > 0) {\r\n\t\t\tlet sprite: Sprite = invalidPositions[invalidPositions.length - 1];\r\n\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tsprite._systemValidatePositions();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\tsprite.positionInvalid = false;\r\n\t\t\t\t\t$array.remove(invalidPositions, sprite);\r\n\t\t\t\t\tsprite.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$array.remove(invalidPositions, sprite);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers position re-validation on all [[Container]] elements that have\r\n\t * invalid(ated) layouts.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic validateLayouts(id: string): void {\r\n\t\t// invalid positions\r\n\t\t// TODO use iterator instead\r\n\t\tlet invalidLayouts = registry.invalidLayouts[id];\r\n\t\twhile (invalidLayouts.length > 0) {\r\n\t\t\tlet container: Container = invalidLayouts[invalidLayouts.length - 1];\r\n\t\t\tif (!container.isDisposed()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcontainer.children.each((sprite) => {\r\n\t\t\t\t\t\tsprite._systemValidateLayouts();\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tcontainer.validateLayout();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\tcontainer.layoutInvalid = false;\r\n\t\t\t\t\t$array.remove(invalidLayouts, container);\r\n\t\t\t\t\tcontainer.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$array.remove(invalidLayouts, container);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outputs string to console if `verbose` is `true`.\r\n\t *\r\n\t * @param value Message to output to console\r\n\t */\r\n\tpublic log(value: any): void {\r\n\t\t$log.log(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Pauses all the processes of all the amCharts objects on the page\r\n\t *\r\n\t * @return is paused?\r\n\t */\r\n\tpublic set isPaused(value: boolean) {\r\n\t\tthis._isPaused = value;\r\n\t\tif (!value) {\r\n\t\t\tthis._frameRequested = false;\r\n\t\t\tthis.requestFrame();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is system on pause?\r\n\t */\r\n\tpublic get isPaused(): boolean {\r\n\t\treturn this._isPaused;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * A singleton global instance of [[System]].\r\n *\r\n * All code should use this, rather than instantiating their\r\n * own System objects.\r\n */\r\nexport const system: System = new System();\r\n"]},"metadata":{},"sourceType":"module"}