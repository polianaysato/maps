{"ast":null,"code":"/**\r\n * Column series module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { XYSeries, XYSeriesDataItem } from \"./XYSeries\";\nimport { visualProperties } from \"../../core/Sprite\";\nimport { Container } from \"../../core/Container\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Dictionary } from \"../../core/utils/Dictionary\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\nimport { registry } from \"../../core/Registry\";\nimport { Column } from \"../elements/Column\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar ColumnSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(ColumnSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ColumnSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ColumnSeriesDataItem\";\n    _this.locations[\"dateX\"] = 0.5;\n    _this.locations[\"dateY\"] = 0.5;\n    _this.locations[\"categoryX\"] = 0.5;\n    _this.locations[\"categoryY\"] = 0.5;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(ColumnSeriesDataItem.prototype, \"column\", {\n    /**\r\n     * @return Column\r\n     */\n    get: function get() {\n      return this._column;\n    },\n\n    /**\r\n     * A column used to draw a column for this data item.\r\n     *\r\n     * @param column\r\n     */\n    set: function set(column) {\n      this.setColumn(column);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ColumnSeriesDataItem.prototype.setColumn = function (column) {\n    var _this = this;\n\n    if (this._column && column != this._column) {\n      $array.remove(this.sprites, this._column);\n    }\n\n    this._column = column;\n\n    if (column) {\n      var prevDataItem = column.dataItem;\n\n      if (prevDataItem && prevDataItem != this) {\n        prevDataItem.column = undefined;\n      }\n\n      this.addSprite(column);\n\n      this._disposers.push(new Disposer(function () {\n        // TODO investigate why component is undefined\n        // https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\n        if (_this.component) {\n          _this.component.columns.removeValue(column);\n        }\n      }));\n    }\n  };\n\n  Object.defineProperty(ColumnSeriesDataItem.prototype, \"width\", {\n    get: function get() {\n      var width = this.properties.width;\n\n      if (this._adapterO) {\n        width = this._adapterO.apply(\"width\", width);\n      }\n\n      return width;\n    },\n    set: function set(value) {\n      if (this.properties.width != value) {\n        this.properties.width = value;\n\n        if (this.component) {\n          this.component.validateDataElement(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeriesDataItem.prototype, \"height\", {\n    get: function get() {\n      var height = this.properties.height;\n\n      if (this._adapterO) {\n        height = this._adapterO.apply(\"height\", height);\n      }\n\n      return height;\n    },\n    set: function set(value) {\n      if (this.properties.height != value) {\n        this.properties.height = value;\n\n        if (this.component) {\n          this.component.validateDataElement(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeriesDataItem.prototype, \"rangesColumns\", {\n    /**\r\n     * A dictionary storing axes ranges columns by axis uid\r\n     */\n    get: function get() {\n      if (!this._rangesColumns) {\n        this._rangesColumns = new Dictionary();\n      }\n\n      return this._rangesColumns;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ColumnSeriesDataItem;\n}(XYSeriesDataItem);\n\nexport { ColumnSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar ColumnSeries =\n/** @class */\nfunction (_super) {\n  __extends(ColumnSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ColumnSeries() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Start location within cell for columns.\r\n     */\n\n\n    _this._startLocation = 0;\n    /**\r\n     * End location within cell for columns.\r\n     */\n\n    _this._endLocation = 1;\n    _this.className = \"ColumnSeries\";\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.strokeOpacity = 0;\n    _this.fillOpacity = 1;\n    _this.clustered = true;\n\n    var columnsContainer = _this.mainContainer.createChild(Container);\n\n    columnsContainer.shouldClone = false;\n    columnsContainer.isMeasured = false;\n    columnsContainer.layout = \"none\";\n    _this._columnsContainer = columnsContainer;\n    _this.columns.template.pixelPerfect = false;\n    _this.tooltipColorSource = _this.columns.template;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(ColumnSeries.prototype, \"columnsContainer\", {\n    /**\r\n     * A container that columns are created in.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function get() {\n      return this._columnsContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n  ColumnSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Column Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  ColumnSeries.prototype.createDataItem = function () {\n    return new ColumnSeriesDataItem();\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ColumnSeries.prototype.validate = function () {\n    //@todo Check if we can do better than use `instanceof`\n    // find start/end locations based on clustered/stacked settings\n    // go through chart series instead of base axis series, because axis series doesn't maintain order\n    var _this = this;\n\n    this.group.node.removeAttribute(\"fill\");\n\n    if (this.chart && this.xAxis && this.yAxis) {\n      var baseAxisSeries = this.chart.series;\n      var clusterCount_1 = 0;\n      var index_1 = 0;\n      var sortedByAxis_1 = [];\n      $iter.each(baseAxisSeries.iterator(), function (series) {\n        if (series instanceof ColumnSeries) {\n          if (_this.baseAxis == series.baseAxis) {\n            var index_2;\n\n            if (_this.baseAxis == _this.xAxis) {\n              index_2 = _this.chart.yAxes.indexOf(series.yAxis);\n            } else {\n              index_2 = _this.chart.xAxes.indexOf(series.xAxis);\n            }\n\n            sortedByAxis_1.push({\n              series: series,\n              axis: index_2\n            });\n          }\n        }\n      });\n      sortedByAxis_1.sort(function (a, b) {\n        return a.axis - b.axis;\n      });\n      var prevAxisIndex_1;\n      $array.each(sortedByAxis_1, function (sortedItem) {\n        var series = sortedItem.series;\n\n        if (series instanceof ColumnSeries) {\n          if (!series.stacked && series.clustered || prevAxisIndex_1 != sortedItem.axis && series.clustered) {\n            clusterCount_1++;\n          }\n\n          if (series == _this) {\n            index_1 = clusterCount_1 - 1;\n          }\n        }\n\n        prevAxisIndex_1 = sortedItem.axis;\n      });\n\n      if (!this.clustered) {\n        index_1 = 0;\n        clusterCount_1 = 1;\n      }\n\n      var renderer = this.baseAxis.renderer;\n      var cellStartLocation = renderer.cellStartLocation;\n      var cellEndLocation = renderer.cellEndLocation;\n      this._startLocation = cellStartLocation + index_1 / clusterCount_1 * (cellEndLocation - cellStartLocation);\n      this._endLocation = cellStartLocation + (index_1 + 1) / clusterCount_1 * (cellEndLocation - cellStartLocation);\n      var xAxis = this.xAxis;\n      var yAxis = this.yAxis;\n\n      if (xAxis instanceof CategoryAxis && yAxis instanceof ValueAxis) {\n        if (xAxis.sortBySeries == this) {\n          this.sortCategoryAxis(xAxis, \"valueY\");\n        }\n      }\n\n      if (yAxis instanceof CategoryAxis && xAxis instanceof ValueAxis) {\n        if (yAxis.sortBySeries == this) {\n          this.sortCategoryAxis(yAxis, \"valueX\");\n        }\n      }\n    }\n\n    _super.prototype.validate.call(this);\n\n    for (var i = 0; i < this.startIndex; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      this.disableUnusedColumns(dataItem);\n    }\n\n    for (var i = this.dataItems.length - 1; i > this.endIndex; i--) {\n      var dataItem = this.dataItems.getIndex(i);\n      this.disableUnusedColumns(dataItem);\n    }\n\n    this._propertiesChanged = false;\n  };\n\n  ColumnSeries.prototype.sortCategoryAxis = function (axis, key) {\n    var _this = this;\n\n    this.dataItems.values.sort(function (x, y) {\n      return y.values[key].workingValue - x.values[key].workingValue;\n    });\n    var i = 0;\n    this.dataItems.each(function (dataItem) {\n      dataItem._index = i;\n      i++;\n    });\n    axis.dataItems.each(function (dataItem) {\n      var axis = dataItem.component;\n      var currentPosition = axis.categoryToPosition(dataItem.category) - dataItem.deltaPosition;\n      var seriesDataItem = axis.getSeriesDataItemByCategory(dataItem.category, _this);\n\n      if (seriesDataItem) {\n        var index = _this.dataItems.indexOf(seriesDataItem);\n\n        dataItem._index = index;\n        var deltaPosition = $math.round((index + 0.5) / _this.dataItems.length - currentPosition, 3);\n\n        if (dataItem.deltaAnimation && !dataItem.deltaAnimation.isDisposed() && dataItem.deltaAnimation.animationOptions[0].to == deltaPosition) {// void\n        } else if (deltaPosition != $math.round(dataItem.deltaPosition, 3)) {\n          if (dataItem.deltaAnimation) {\n            dataItem.deltaAnimation.stop();\n          }\n\n          dataItem.deltaAnimation = dataItem.animate({\n            property: \"deltaPosition\",\n            from: -deltaPosition,\n            to: 0\n          }, axis.interpolationDuration, axis.interpolationEasing);\n\n          _this._disposers.push(dataItem.deltaAnimation);\n        }\n      }\n    });\n    axis.dataItems.values.sort(function (x, y) {\n      return x.index - y.index;\n    });\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  ColumnSeries.prototype.validateDataElement = function (dataItem) {\n    // important oder here, first real, then super. we need this to know size\n    if (this.chart && this.xAxis && this.yAxis) {\n      this.validateDataElementReal(dataItem);\n\n      _super.prototype.validateDataElement.call(this, dataItem);\n    }\n  };\n  /**\r\n   * Returns relative start location for the data item.\r\n   *\r\n   * @param dataItem  Data item\r\n   * @return Location (0-1)\r\n   */\n\n\n  ColumnSeries.prototype.getStartLocation = function (dataItem) {\n    var startLocation = this._startLocation;\n\n    if (this.baseAxis == this.xAxis) {\n      startLocation += dataItem.locations[this.xOpenField] - 0.5;\n    } else {\n      startLocation += dataItem.locations[this.yOpenField] - 0.5;\n    }\n\n    return startLocation;\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  /*\r\n  public handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n     if (this.simplifiedProcessing) {\r\n         this.validateDataElement(dataItem);\r\n     }\r\n     else {\r\n         super.handleDataItemWorkingValueChange(dataItem, name);\r\n     }\r\n  }*/\n\n  /**\r\n   * Returns relative end location for the data item.\r\n   *\r\n   * @param dataItem  Data item\r\n   * @return Location (0-1)\r\n   */\n\n\n  ColumnSeries.prototype.getEndLocation = function (dataItem) {\n    var endLocation = this._endLocation;\n\n    if (this.baseAxis == this.xAxis) {\n      endLocation += dataItem.locations[this.xField] - 0.5;\n    } else {\n      endLocation += dataItem.locations[this.yField] - 0.5;\n    }\n\n    return endLocation;\n  };\n  /**\r\n   * Validates data item's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  ColumnSeries.prototype.validateDataElementReal = function (dataItem) {\n    var _this = this; //\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\n\n\n    var l;\n    var r;\n    var t;\n    var b;\n    var startLocation = this.getStartLocation(dataItem);\n    var endLocation = this.getEndLocation(dataItem);\n    var xField = this.xField;\n    var xOpenField = this.xOpenField;\n    var yField = this.yField;\n    var yOpenField = this.yOpenField;\n    var template = this.columns.template;\n    var percentWidth = template.percentWidth;\n    var percentHeight = template.percentHeight;\n    var pixelWidth = template.pixelWidth;\n    var pixelHeight = template.pixelHeight;\n    var maxWidth = template.maxWidth;\n    var maxHeight = template.maxHeight;\n    var paddingLeft = template.pixelPaddingLeft;\n    var paddingRight = template.pixelPaddingRight;\n    var paddingTop = template.pixelPaddingTop;\n    var paddingBottom = template.pixelPaddingBottom;\n    var outOfBounds = false;\n    var diw = dataItem.width;\n\n    if ($type.hasValue(diw)) {\n      if ($type.isNumber(diw)) {\n        pixelWidth = diw;\n      }\n\n      if (diw instanceof Percent) {\n        percentWidth = diw.value * 100;\n      }\n    }\n\n    var dih = dataItem.height;\n\n    if ($type.hasValue(dih)) {\n      if ($type.isNumber(dih)) {\n        pixelHeight = dih;\n      }\n\n      if (dih instanceof Percent) {\n        percentHeight = dih.value * 100;\n      }\n    } // two category axes\n\n\n    if (this.xAxis instanceof CategoryAxis && this.yAxis instanceof CategoryAxis) {\n      if (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\n        return;\n      }\n\n      startLocation = 0;\n      endLocation = 1;\n\n      if (!$type.isNaN(percentWidth)) {\n        var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\n        startLocation += offset;\n        endLocation -= offset;\n      }\n\n      l = this.xAxis.getX(dataItem, xOpenField, startLocation);\n      r = this.xAxis.getX(dataItem, xField, endLocation); // in case width is set in pixels\n\n      if ($type.isNaN(percentWidth)) {\n        var offset = (r - l - pixelWidth) / 2;\n        l += offset;\n        r -= offset;\n      } // in case max width is set in pixels\n\n\n      if (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\n        var offset = (r - l - maxWidth) / 2;\n        l += offset;\n        r -= offset;\n      }\n\n      startLocation = 0;\n      endLocation = 1;\n\n      if (!$type.isNaN(percentHeight)) {\n        var offset = $math.round((1 - percentHeight / 100) / 2, 5);\n        startLocation += offset;\n        endLocation -= offset;\n      }\n\n      t = this.yAxis.getY(dataItem, yOpenField, startLocation);\n      b = this.yAxis.getY(dataItem, yField, endLocation); // in case width is set in pixels\n\n      if ($type.isNaN(percentHeight)) {\n        var offset = (b - t - pixelHeight) / 2;\n        b += offset;\n        t -= offset;\n      } // in case max width is set in pixels\n\n\n      if (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\n        var offset = (b - t - maxHeight) / 2;\n        b += offset;\n        t -= offset;\n      }\n\n      r = this.fixHorizontalCoordinate(r);\n      l = this.fixHorizontalCoordinate(l);\n      t = this.fixVerticalCoordinate(t);\n      b = this.fixVerticalCoordinate(b);\n    } else if (this.baseAxis == this.xAxis) {\n      if (!dataItem.hasValue(this._yValueFields)) {\n        return;\n      } // in case width is set in percent\n\n\n      if (!$type.isNaN(percentWidth)) {\n        var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\n        startLocation += offset;\n        endLocation -= offset;\n      }\n\n      l = this.xAxis.getX(dataItem, xOpenField, startLocation);\n      r = this.xAxis.getX(dataItem, xField, endLocation); // in case width is set in pixels\n\n      if ($type.isNaN(percentWidth)) {\n        var offset = (r - l - pixelWidth) / 2;\n        l += offset;\n        r -= offset;\n      } // in case width is set in pixels\n\n\n      if (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\n        var offset = (r - l - maxWidth) / 2;\n        l += offset;\n        r -= offset;\n      }\n\n      var bottomLocation = dataItem.locations[yOpenField];\n      var topLocation = dataItem.locations[yField]; // otherwise gantt chart will start items in the middle of a cell\n\n      if (this.yAxis instanceof ValueAxis) {\n        if (this.dataFields[this.yField] != this.dataFields[this.yOpenField]) {\n          bottomLocation = 0;\n          topLocation = 0;\n        }\n      }\n\n      b = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\n      t = this.yAxis.getY(dataItem, yField, topLocation); // used to save location for bullets, but it's not a good approach\n      // dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\n\n      var axisLenght = Math.ceil(this.yAxis.axisLength);\n\n      if (t < 0 && b < 0 || t > axisLenght && b > axisLenght) {\n        outOfBounds = true;\n      }\n\n      t = this.fixVerticalCoordinate(t);\n      b = this.fixVerticalCoordinate(b);\n\n      if (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\n        outOfBounds = true;\n      }\n    } // horizontal bars\n    else {\n      if (!dataItem.hasValue(this._xValueFields)) {\n        return;\n      }\n\n      if (!$type.isNaN(percentHeight)) {\n        var offset = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\n        startLocation += offset;\n        endLocation -= offset;\n      }\n\n      t = this.yAxis.getY(dataItem, yOpenField, startLocation);\n      b = this.yAxis.getY(dataItem, yField, endLocation); // in case height is set in pixels\n\n      if ($type.isNaN(percentHeight)) {\n        var offset = (b - t - pixelHeight) / 2;\n        b -= offset;\n        t += offset;\n      } // in case height is set in pixels\n\n\n      if (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\n        var offset = (b - t - maxHeight) / 2;\n        b -= offset;\n        t += offset;\n      }\n\n      var rightLocation = dataItem.locations[xField];\n      var leftLocation = dataItem.locations[xOpenField]; // otherwise gantt chart will start items in the middle of a cell\n\n      if (this.xAxis instanceof ValueAxis) {\n        if (this.dataFields[this.xField] != this.dataFields[this.xOpenField]) {\n          rightLocation = 0;\n          leftLocation = 0;\n        }\n      }\n\n      r = this.xAxis.getX(dataItem, xField, rightLocation);\n      l = this.xAxis.getX(dataItem, xOpenField, leftLocation); // used to save location for bullets, but it's not a good approach\n      // dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\n\n      var axisLenght = Math.ceil(this.xAxis.axisLength);\n\n      if (r < 0 && l < 0 || r > axisLenght && l > axisLenght) {\n        outOfBounds = true;\n      }\n\n      r = this.fixHorizontalCoordinate(r);\n      l = this.fixHorizontalCoordinate(l);\n\n      if (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\n        outOfBounds = true;\n      }\n    }\n\n    var w = Math.abs(r - l);\n    var h = Math.abs(b - t);\n    var x = Math.min(l, r);\n    var y = Math.min(t, b);\n\n    if (!outOfBounds) {\n      var column_1;\n\n      if (!dataItem.column) {\n        column_1 = this.columns.create(); //$object.forceCopyProperties(this.columns.template, column, visualProperties);\n\n        $object.copyProperties(this, column_1, visualProperties); // need this because 3d columns are not in the same container\n\n        $object.copyProperties(this.columns.template, column_1, visualProperties); // second time, no force, so that columns.template would override series properties\n\n        dataItem.addSprite(column_1);\n        dataItem.column = column_1;\n        column_1.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\n        // accessibility\n\n        if (this.itemsFocusable()) {\n          if (!$type.hasValue(this.role)) {\n            this.role = \"menu\";\n          }\n\n          if (!$type.hasValue(column_1.role)) {\n            column_1.role = \"menuitem\";\n          }\n\n          column_1.focusable = true;\n        } else {\n          if (!$type.hasValue(this.role)) {\n            this.role = \"list\";\n          }\n\n          if (!$type.hasValue(column_1.role)) {\n            column_1.role = \"listitem\";\n          }\n\n          column_1.focusable = false;\n        }\n\n        if (column_1.focusable) {\n          column_1.events.on(\"focus\", function (ev) {\n            column_1.readerTitle = _this.populateString(_this.itemReaderText, dataItem);\n          }, undefined, false);\n          column_1.events.on(\"blur\", function (ev) {\n            column_1.readerTitle = \"\";\n          }, undefined, false);\n        }\n\n        if (column_1.hoverable) {\n          column_1.events.on(\"over\", function (ev) {\n            column_1.readerTitle = _this.populateString(_this.itemReaderText, dataItem);\n          }, undefined, false);\n          column_1.events.on(\"out\", function (ev) {\n            column_1.readerTitle = \"\";\n          }, undefined, false);\n        }\n\n        column_1.parent = this.columnsContainer;\n        column_1.virtualParent = this;\n      } else {\n        column_1 = dataItem.column;\n\n        if (this._propertiesChanged) {\n          $object.copyProperties(this, column_1, visualProperties);\n          $object.copyProperties(this.columns.template, column_1, visualProperties);\n          $array.each(visualProperties, function (property) {\n            column_1[property] = column_1[property];\n          });\n        }\n      }\n\n      column_1.width = w;\n      column_1.height = h;\n      column_1.x = x;\n      column_1.y = y;\n      column_1.realX = l;\n      column_1.realY = t;\n      column_1.realWidth = r - l;\n      column_1.realHeight = b - t;\n      this.setColumnStates(column_1);\n\n      if (column_1.invalid) {\n        column_1.validate(); // validate as if it was used previously, it will flicker with previous dimensions\n      }\n\n      column_1.__disabled = false; //column.returnAfterTemp();\n\n      $iter.each(this.axisRanges.iterator(), function (axisRange) {\n        var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\n\n        if (!rangeColumn) {\n          rangeColumn = _this.columns.create(); //$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\n\n          $object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\n\n          dataItem.addSprite(rangeColumn);\n          dataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\n          rangeColumn.paper = _this.paper; // sometimes pattern is not drawn if is set with adapter without this.\n        }\n\n        rangeColumn.parent = axisRange.contents;\n        rangeColumn.width = w;\n        rangeColumn.height = h;\n        rangeColumn.x = x;\n        rangeColumn.y = y;\n\n        _this.setColumnStates(rangeColumn);\n\n        if (rangeColumn.invalid) {\n          rangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\n        }\n\n        rangeColumn.__disabled = false; //rangeColumn.returnAfterTemp();\n      });\n    } else {\n      this.disableUnusedColumns(dataItem);\n    }\n\n    dataItem.itemWidth = w;\n    dataItem.itemHeight = h;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  ColumnSeries.prototype.disableUnusedColumns = function (dataItem) {\n    if (dataItem) {\n      if (dataItem.column) {\n        // otherwise might flicker when enabling\n        dataItem.column.width = 0;\n        dataItem.column.height = 0;\n        dataItem.column.__disabled = true;\n      }\n\n      $iter.each(this.axisRanges.iterator(), function (axisRange) {\n        var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\n\n        if (rangeColumn) {\n          // otherwise might flicker when enabling\n          rangeColumn.width = 0;\n          rangeColumn.height = 0;\n          rangeColumn.__disabled = true;\n        }\n      });\n    }\n  };\n  /**\r\n   * Apply different state/coloring to columns based on the change value.\r\n   *\r\n   * @param sprite  Sprite to apply state to\r\n   * @todo Do not apply accessibility to wicks of the candlesticks\r\n   */\n\n\n  ColumnSeries.prototype.setColumnStates = function (sprite) {\n    if (this._dropFromOpenState || this._dropFromPreviousState || this._riseFromOpenState || this._riseFromPreviousState) {\n      var dataItem = sprite.dataItem;\n\n      if (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\n        var open_1;\n        var value = void 0;\n        var change = void 0;\n\n        if (this.baseAxis == this.yAxis) {\n          if (this.xOpenField && this.xField && this.xAxis instanceof ValueAxis) {\n            open_1 = dataItem.getValue(this.xOpenField);\n            value = dataItem.getValue(this.xField);\n          }\n\n          change = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\n        } else {\n          if (this.yOpenField && this.yField && this.yAxis instanceof ValueAxis) {\n            open_1 = dataItem.getValue(this.yOpenField);\n            value = dataItem.getValue(this.yField);\n          }\n\n          change = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\n        }\n\n        if (value < open_1) {\n          dataItem.droppedFromOpen = true;\n          sprite.defaultState.copyFrom(this._dropFromOpenState);\n          sprite.setState(this._dropFromOpenState, 0);\n        } else {\n          dataItem.droppedFromOpen = false;\n          sprite.defaultState.copyFrom(this._riseFromOpenState);\n          sprite.setState(this._riseFromOpenState, 0);\n        }\n\n        if (change < 0) {\n          dataItem.droppedFromPrevious = true;\n          sprite.defaultState.copyFrom(this._dropFromPreviousState);\n          sprite.setState(this._dropFromPreviousState, 0);\n        } else {\n          dataItem.droppedFromPrevious = false;\n          sprite.defaultState.copyFrom(this._riseFromPreviousState);\n          sprite.setState(this._riseFromPreviousState, 0);\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(ColumnSeries.prototype, \"columns\", {\n    /**\r\n     * A list of column elements in the series.\r\n     *\r\n     * @return Columns\r\n     */\n    get: function get() {\n      if (!this._columns) {\n        this._columns = new ListTemplate(this.createColumnTemplate());\n\n        this._disposers.push(new ListDisposer(this._columns));\n\n        this._disposers.push(this._columns.template);\n      }\n\n      return this._columns;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and returns a column element to use as a template.\r\n   *\r\n   * @return Column template\r\n   */\n\n  ColumnSeries.prototype.createColumnTemplate = function () {\n    return new Column();\n  };\n\n  Object.defineProperty(ColumnSeries.prototype, \"clustered\", {\n    /**\r\n     * @return Clustered?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"clustered\");\n    },\n\n    /**\r\n     * Cluster this series columns?\r\n     *\r\n     * Setting to `false` will make columns overlap with other series.\r\n     *\r\n     * @default true\r\n     * @param value  Clustered?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"clustered\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeries.prototype, \"dropFromOpenState\", {\n    /**\r\n     * @return State\r\n     */\n    get: function get() {\n      if (!this._dropFromOpenState) {\n        this._dropFromOpenState = this.states.create(\"dropFromOpenState\");\n      }\n\n      return this._dropFromOpenState;\n    },\n\n    /**\r\n     * A state to apply to a column when close value is lower than open value.\r\n     *\r\n     * Can be used to differentiate appearance based on value relations.\r\n     *\r\n     * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n     *\r\n     * @readonly You can modify state object, but can't overwrite it\r\n     * @param  value  State\r\n     */\n    set: function set(value) {\n      this._dropFromOpenState = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeries.prototype, \"dropFromPreviousState\", {\n    /**\r\n     * @return State\r\n     */\n    get: function get() {\n      if (!this._dropFromPreviousState) {\n        this._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\n      }\n\n      return this._dropFromPreviousState;\n    },\n\n    /**\r\n     * A state to apply to a column when its value is lower value of a previous\r\n     * column.\r\n     *\r\n     * Can be used to differentiate appearance based on value relations.\r\n     *\r\n     * @readonly You can modify state object, but can't overwrite it\r\n     * @param  value  State\r\n     */\n    set: function set(value) {\n      this._dropFromPreviousState = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeries.prototype, \"riseFromOpenState\", {\n    /**\r\n     * @return State\r\n     */\n    get: function get() {\n      if (!this._riseFromOpenState) {\n        this._riseFromOpenState = this.states.create(\"riseFromOpenState\");\n      }\n\n      return this._riseFromOpenState;\n    },\n\n    /**\r\n     * A state to apply to a column when close value is same or higher than open\r\n     * value.\r\n     *\r\n     * Can be used to differentiate appearance based on value relations.\r\n     *\r\n     * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n     *\r\n     * @readonly You can modify state object, but can't overwrite it\r\n     * @param  value  State\r\n     */\n    set: function set(value) {\n      this._riseFromOpenState = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeries.prototype, \"riseFromPreviousState\", {\n    /**\r\n     * @return State\r\n     */\n    get: function get() {\n      if (!this._riseFromPreviousState) {\n        this._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\n      }\n\n      return this._riseFromPreviousState;\n    },\n\n    /**\r\n     * A state to apply to a column when its value is same or higher than value\r\n     * of a previous column.\r\n     *\r\n     * Can be used to differentiate appearance based on value relations.\r\n     *\r\n     * @readonly You can modify state object, but can't overwrite it\r\n     * @param  value  State\r\n     */\n    set: function set(value) {\n      this._riseFromPreviousState = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates value of the related legend item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n  ColumnSeries.prototype.updateLegendValue = function (dataItem, notRange) {\n    var _this = this;\n\n    _super.prototype.updateLegendValue.call(this, dataItem, notRange);\n\n    if (this.legendDataItem) {\n      var marker = this.legendDataItem.marker;\n      var fromOpenState_1;\n      var fromPreviousState_1;\n\n      if (dataItem) {\n        if (dataItem.droppedFromOpen) {\n          fromOpenState_1 = this._dropFromOpenState;\n        } else {\n          fromOpenState_1 = this._riseFromOpenState;\n        }\n\n        if (dataItem.droppedFromPrevious) {\n          fromPreviousState_1 = this._dropFromPreviousState;\n        } else {\n          fromPreviousState_1 = this._riseFromPreviousState;\n        }\n      }\n\n      $iter.each(marker.children.iterator(), function (child) {\n        if (dataItem) {\n          child.setState(fromPreviousState_1);\n          child.setState(fromOpenState_1);\n        } else {\n          // todo: think what to do here, maybe apply above states based on totals?\n          child.setState(_this._riseFromPreviousState);\n          child.setState(_this._riseFromOpenState);\n        }\n      });\n    }\n  };\n  /**\r\n   * Creates elements in related legend container, that mimics the look of this\r\n   * Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Legend item container\r\n   */\n\n\n  ColumnSeries.prototype.createLegendMarker = function (marker) {\n    var w = marker.pixelWidth;\n    var h = marker.pixelHeight;\n    marker.removeChildren();\n    var column = marker.createChild(RoundedRectangle);\n    column.shouldClone = false;\n    $object.copyProperties(this, column, visualProperties);\n    column.copyFrom(this.columns.template);\n    column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\n\n    column.width = w;\n    column.height = h;\n    var legendDataItem = marker.dataItem;\n    legendDataItem.color = this.fill;\n    legendDataItem.colorOrig = this.fill;\n  };\n  /**\r\n   * Copies all properties from another instance of [[ColumnSeries]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  ColumnSeries.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.columns.template.copyFrom(source.columns.template);\n  };\n  /**\r\n  * returns bullet x location\r\n  * @ignore\r\n  */\n\n\n  ColumnSeries.prototype.getBulletLocationX = function (bullet, field) {\n    if (this.baseAxis == this.xAxis) {\n      var bulletLocationX = bullet.locationX;\n\n      if (!$type.isNumber(bulletLocationX)) {\n        bulletLocationX = 0.5;\n      }\n\n      var endLocation = this.getEndLocation(bullet.dataItem);\n      var startLocation = this.getStartLocation(bullet.dataItem);\n      return endLocation - (endLocation - startLocation) * bulletLocationX;\n    } else {\n      return _super.prototype.getBulletLocationX.call(this, bullet, field);\n    }\n  };\n  /**\r\n  * returns bullet y location\r\n  * @ignore\r\n  */\n\n\n  ColumnSeries.prototype.getBulletLocationY = function (bullet, field) {\n    if (this.baseAxis == this.yAxis) {\n      var bulletLocationY = bullet.locationY;\n\n      if (!$type.isNumber(bulletLocationY)) {\n        bulletLocationY = 0.5;\n      }\n\n      var endLocation = this.getEndLocation(bullet.dataItem);\n      var startLocation = this.getStartLocation(bullet.dataItem);\n      return endLocation - (endLocation - startLocation) * bulletLocationY;\n    } else {\n      return _super.prototype.getBulletLocationY.call(this, bullet, field);\n    }\n  };\n\n  ColumnSeries.prototype.getAdjustedXLocation = function (dataItem, field, bulletLocationX) {\n    //if (this.baseAxis == this.xAxis) {\n    if (!$type.isNumber(bulletLocationX)) {\n      if (dataItem) {\n        bulletLocationX = dataItem.locations[field];\n      } else {\n        bulletLocationX = 0.5;\n      }\n    }\n\n    return this._endLocation - (this._endLocation - this._startLocation) * (1 - bulletLocationX); //}\n    //else {\n    //\treturn super.getAdjustedXLocation(dataItem, field);\n    //}\n  };\n\n  ColumnSeries.prototype.getAdjustedYLocation = function (dataItem, field, bulletLocationY) {\n    //if (this.baseAxis == this.yAxis) {\n    if (!$type.isNumber(bulletLocationY)) {\n      if (dataItem) {\n        bulletLocationY = dataItem.locations[field];\n      } else {\n        bulletLocationY = 0.5;\n      }\n    }\n\n    return this._endLocation - (this._endLocation - this._startLocation) * bulletLocationY; //}\n    //else {\n    //\treturn super.getAdjustedYLocation(dataItem, field);\n    //}\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ColumnSeries.prototype.fixVerticalCoordinate = function (coordinate) {\n    var paddingBottom = this.columns.template.pixelPaddingBottom;\n    var paddingTop = this.columns.template.pixelPaddingTop;\n    var minY = -paddingTop;\n    var maxY = this.yAxis.axisLength + paddingBottom;\n    return $math.fitToRange(coordinate, minY, maxY);\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ColumnSeries.prototype.fixHorizontalCoordinate = function (coordinate) {\n    var paddingLeft = this.columns.template.pixelPaddingLeft;\n    var paddingRight = this.columns.template.pixelPaddingRight;\n    var minX = -paddingLeft;\n    var maxX = this.xAxis.axisLength + paddingRight;\n    return $math.fitToRange(coordinate, minX, maxX);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  ColumnSeries.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    this.columns.clear();\n  };\n\n  return ColumnSeries;\n}(XYSeries);\n\nexport { ColumnSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;","map":{"version":3,"mappings":"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","names":["XYSeries","XYSeriesDataItem","visualProperties","Container","ListTemplate","ListDisposer","Dictionary","ValueAxis","CategoryAxis","registry","Column","RoundedRectangle","percent","Percent","$math","$object","$iter","$array","$type","Disposer","__extends","_super","_this","className","locations","applyTheme","Object","ColumnSeriesDataItem","_column","column","setColumn","remove","sprites","prevDataItem","dataItem","undefined","addSprite","_disposers","push","component","columns","removeValue","width","properties","_adapterO","apply","value","validateDataElement","height","_rangesColumns","strokeOpacity","fillOpacity","clustered","columnsContainer","mainContainer","createChild","shouldClone","isMeasured","layout","_columnsContainer","template","pixelPerfect","tooltipColorSource","ColumnSeries","applyInternalDefaults","call","hasValue","readerTitle","language","translate","group","node","removeAttribute","chart","xAxis","yAxis","baseAxisSeries","series","clusterCount_1","index_1","sortedByAxis_1","each","iterator","baseAxis","index_2","yAxes","indexOf","xAxes","axis","sort","a","b","prevAxisIndex_1","sortedItem","stacked","renderer","cellStartLocation","cellEndLocation","_startLocation","_endLocation","sortBySeries","sortCategoryAxis","validate","i","startIndex","dataItems","getIndex","disableUnusedColumns","length","endIndex","_propertiesChanged","key","values","x","y","workingValue","_index","currentPosition","categoryToPosition","category","deltaPosition","seriesDataItem","getSeriesDataItemByCategory","index","round","deltaAnimation","isDisposed","animationOptions","to","stop","animate","property","from","interpolationDuration","interpolationEasing","validateDataElementReal","startLocation","xOpenField","yOpenField","endLocation","xField","yField","l","r","t","getStartLocation","getEndLocation","percentWidth","percentHeight","pixelWidth","pixelHeight","maxWidth","maxHeight","paddingLeft","pixelPaddingLeft","paddingRight","pixelPaddingRight","paddingTop","pixelPaddingTop","paddingBottom","pixelPaddingBottom","outOfBounds","diw","isNumber","dih","_xValueFields","_yValueFields","isNaN","offset","getX","Math","abs","getY","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","dataFields","axisLenght","ceil","axisLength","rightLocation","leftLocation","w","h","min","column_1","create","copyProperties","paper","itemsFocusable","role","focusable","events","on","ev","populateString","itemReaderText","hoverable","parent","virtualParent","realX","realY","realWidth","realHeight","setColumnStates","invalid","__disabled","axisRanges","axisRange","rangeColumn","rangesColumns","getKey","uid","contents","setKey","itemWidth","itemHeight","sprite","_dropFromOpenState","_dropFromPreviousState","_riseFromOpenState","_riseFromPreviousState","open_1","change","getValue","axisFieldName","droppedFromOpen","defaultState","copyFrom","setState","droppedFromPrevious","_columns","createColumnTemplate","getPropertyValue","setPropertyValue","states","notRange","updateLegendValue","legendDataItem","marker","fromOpenState_1","fromPreviousState_1","children","child","removeChildren","padding","color","fill","colorOrig","source","bullet","field","bulletLocationX","locationX","getBulletLocationX","bulletLocationY","locationY","getBulletLocationY","coordinate","minY","maxY","fitToRange","minX","maxX","disposeData","clear","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/series/ColumnSeries.ts"],"sourcesContent":["/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\nimport { IDataItemAdapters } from \"../../core/DataItem\";\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesDataItemAdapters extends IDataItemAdapters {\r\n\twidth: number | Percent;\r\n\theight: number | Percent;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesDataItemAdapters;\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t// TODO investigate why component is undefined\r\n\t\t\t\t// https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic set width(value: number | Percent) {\r\n\t\tif (this.properties.width != value) {\r\n\t\t\tthis.properties.width = value;\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.validateDataElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get width(): number | Percent {\r\n\t\tlet width = this.properties.width;\r\n\t\tif (this._adapterO) {\r\n\t\t\twidth = this._adapterO.apply(\"width\", width);\r\n\t\t}\r\n\t\treturn width;\r\n\t}\r\n\r\n\r\n\tpublic set height(value: number | Percent) {\r\n\t\tif (this.properties.height != value) {\r\n\t\t\tthis.properties.height = value;\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.validateDataElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get height(): number | Percent {\r\n\t\tlet height = this.properties.height;\r\n\t\tif (this._adapterO) {\r\n\t\t\theight = this._adapterO.apply(\"height\", height);\r\n\t\t}\r\n\t\treturn height;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields {\r\n\twidth?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\r\n\t\tthis.group.node.removeAttribute(\"fill\");\r\n\r\n\t\tif (this.chart && this.xAxis && this.yAxis) {\r\n\t\t\tlet baseAxisSeries = this.chart.series;\r\n\t\t\tlet clusterCount: number = 0;\r\n\t\t\tlet index: number = 0;\r\n\r\n\t\t\tlet sortedByAxis: { series: XYSeries, axis: number }[] = [];\r\n\t\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\t\tlet index: number;\r\n\t\t\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\t\t\tindex = this.chart.yAxes.indexOf(series.yAxis);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tindex = this.chart.xAxes.indexOf(series.xAxis);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tsortedByAxis.push({ series: series, axis: index })\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tsortedByAxis.sort((a, b) => a.axis - b.axis);\r\n\t\t\tlet prevAxisIndex: number;\r\n\r\n\t\t\t$array.each(sortedByAxis, (sortedItem) => {\r\n\t\t\t\tlet series = sortedItem.series;\r\n\t\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || (prevAxisIndex != sortedItem.axis && series.clustered)) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tprevAxisIndex = sortedItem.axis;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.clustered) {\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tclusterCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\t\tlet xAxis = this.xAxis;\r\n\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\tif (xAxis instanceof CategoryAxis && yAxis instanceof ValueAxis) {\r\n\t\t\t\tif (xAxis.sortBySeries == this) {\r\n\t\t\t\t\tthis.sortCategoryAxis(xAxis, \"valueY\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis instanceof CategoryAxis && xAxis instanceof ValueAxis) {\r\n\t\t\t\tif (yAxis.sortBySeries == this) {\r\n\t\t\t\t\tthis.sortCategoryAxis(yAxis, \"valueX\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tthis._propertiesChanged = false;\r\n\t}\r\n\r\n\tprotected sortCategoryAxis(axis: CategoryAxis, key: string) {\r\n\t\tthis.dataItems.values.sort((x, y) => {\r\n\t\t\treturn (<any>y).values[key].workingValue - (<any>x).values[key].workingValue;\r\n\t\t})\r\n\t\tlet i = 0;\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tdataItem._index = i;\r\n\t\t\ti++;\r\n\t\t})\r\n\r\n\t\taxis.dataItems.each((dataItem) => {\r\n\t\t\tlet axis = dataItem.component;\r\n\t\t\tlet currentPosition = axis.categoryToPosition(dataItem.category) - dataItem.deltaPosition;\r\n\r\n\t\t\tlet seriesDataItem = axis.getSeriesDataItemByCategory(dataItem.category, this);\r\n\r\n\t\t\tif (seriesDataItem) {\r\n\t\t\t\tlet index = this.dataItems.indexOf(<ColumnSeriesDataItem>seriesDataItem);\r\n\r\n\t\t\t\tdataItem._index = index;\r\n\r\n\t\t\t\tlet deltaPosition = $math.round((index + 0.5) / this.dataItems.length - currentPosition, 3);\r\n\r\n\t\t\t\tif (dataItem.deltaAnimation && !dataItem.deltaAnimation.isDisposed() && dataItem.deltaAnimation.animationOptions[0].to == deltaPosition) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse if (deltaPosition != $math.round(dataItem.deltaPosition, 3)) {\r\n\t\t\t\t\tif (dataItem.deltaAnimation) {\r\n\t\t\t\t\t\tdataItem.deltaAnimation.stop();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataItem.deltaAnimation = dataItem.animate({ property: \"deltaPosition\", from: -deltaPosition, to: 0 }, axis.interpolationDuration, axis.interpolationEasing);\r\n\t\t\t\t\tthis._disposers.push(dataItem.deltaAnimation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\taxis.dataItems.values.sort((x, y) => {\r\n\t\t\treturn x.index - y.index;\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tif (this.chart && this.xAxis && this.yAxis) {\r\n\t\t\tthis.validateDataElementReal(dataItem);\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\t/*\r\n   public handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t   if (this.simplifiedProcessing) {\r\n\t\t   this.validateDataElement(dataItem);\r\n\t   }\r\n\t   else {\r\n\t\t   super.handleDataItemWorkingValueChange(dataItem, name);\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet outOfBounds: boolean = false;\r\n\r\n\t\tlet diw = dataItem.width;\r\n\t\tif ($type.hasValue(diw)) {\r\n\t\t\tif ($type.isNumber(diw)) {\r\n\t\t\t\tpixelWidth = diw;\r\n\t\t\t}\r\n\t\t\tif (diw instanceof Percent) {\r\n\t\t\t\tpercentWidth = diw.value * 100;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet dih = dataItem.height;\r\n\t\tif ($type.hasValue(dih)) {\r\n\t\t\tif ($type.isNumber(dih)) {\r\n\t\t\t\tpixelHeight = dih;\r\n\t\t\t}\r\n\t\t\tif (dih instanceof Percent) {\r\n\t\t\t\tpercentHeight = dih.value * 100;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.yField] != (<any>this.dataFields)[this.yOpenField]) {\r\n\t\t\t\t\tbottomLocation = 0;\r\n\t\t\t\t\ttopLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.yAxis.axisLength);\r\n\r\n\t\t\tif ((t < 0 && b < 0) || (t > axisLenght && b > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.xField] != (<any>this.dataFields)[this.xOpenField]) {\r\n\t\t\t\t\trightLocation = 0;\r\n\t\t\t\t\tleftLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.xAxis.axisLength);\r\n\r\n\t\t\tif ((r < 0 && l < 0) || (r > axisLenght && l > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t\tcolumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\r\n\t\t\t\t// accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tif (!$type.hasValue(this.role)) {\r\n\t\t\t\t\t\tthis.role = \"menu\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!$type.hasValue(column.role)) {\r\n\t\t\t\t\t\tcolumn.role = \"menuitem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcolumn.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!$type.hasValue(this.role)) {\r\n\t\t\t\t\t\tthis.role = \"list\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!$type.hasValue(column.role)) {\r\n\t\t\t\t\t\tcolumn.role = \"listitem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcolumn.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (column.focusable) {\r\n\t\t\t\t\tcolumn.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (column.hoverable) {\r\n\t\t\t\t\tcolumn.events.on(\"over\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"out\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\t\tcolumn.virtualParent = this;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t\tif (this._propertiesChanged) {\r\n\t\t\t\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t\t$array.each(visualProperties, (property) => {\r\n\t\t\t\t\t\t(<any>column)[property] = column[property];\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\tdataItem.column.width = 0;\r\n\t\t\t\tdataItem.column.height = 0;\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\t\tif (this._dropFromOpenState || this._dropFromPreviousState || this._riseFromOpenState || this._riseFromPreviousState) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tlet open: number;\r\n\t\t\t\tlet value: number;\r\n\t\t\t\tlet change: number;\r\n\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (this.xOpenField && this.xField && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this.yOpenField && this.yField && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (value < open) {\r\n\t\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (change < 0) {\r\n\t\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set dropFromOpenState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._dropFromOpenState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set dropFromPreviousState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._dropFromPreviousState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set riseFromOpenState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._riseFromOpenState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set riseFromPreviousState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._riseFromPreviousState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\tsuper.updateLegendValue(dataItem, notRange);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.fill;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet bulletLocationX = bullet.locationX;\r\n\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tlet endLocation = this.getEndLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\t\t\tlet startLocation = this.getStartLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\r\n\t\t\treturn endLocation - (endLocation - startLocation) * bulletLocationX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet bulletLocationY = bullet.locationY;\r\n\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tlet endLocation = this.getEndLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\t\t\tlet startLocation = this.getStartLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\r\n\t\t\treturn endLocation - (endLocation - startLocation) * bulletLocationY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getAdjustedXLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationX?: number) {\r\n\t\t//if (this.baseAxis == this.xAxis) {\r\n\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tbulletLocationX = dataItem.locations[field];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._endLocation - (this._endLocation - this._startLocation) * (1 - bulletLocationX);\r\n\t\t//}\r\n\t\t//else {\r\n\t\t//\treturn super.getAdjustedXLocation(dataItem, field);\r\n\t\t//}\r\n\t}\r\n\r\n\tprotected getAdjustedYLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationY?: number) {\r\n\t\t//if (this.baseAxis == this.yAxis) {\r\n\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tbulletLocationY = dataItem.locations[field];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._endLocation - (this._endLocation - this._startLocation) * bulletLocationY;\r\n\t\t//}\r\n\t\t//else {\r\n\t\t//\treturn super.getAdjustedYLocation(dataItem, field);\r\n\t\t//}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.columns.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n"]},"metadata":{},"sourceType":"module"}