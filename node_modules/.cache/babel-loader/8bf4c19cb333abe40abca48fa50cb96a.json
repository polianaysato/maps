{"ast":null,"code":"/**\r\n * Module for a multi-part arched line.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Polyline } from \"./Polyline\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a multi-part arched line.\r\n *\r\n * @see {@link IPolyarcEvents} for a list of available events\r\n * @see {@link IPolyarcAdapters} for a list of available Adapters\r\n */\n\nvar Polyarc =\n/** @class */\nfunction (_super) {\n  __extends(Polyarc, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Polyarc() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Polyarc\";\n    _this.controlPointDistance = 0.5;\n    _this.controlPointPosition = 0.5;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Creats and adds an SVG path for the arc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Polyarc.prototype.makePath = function () {\n    this._distance = 0;\n    var segments = this.segments;\n\n    if (segments && segments.length > 0) {\n      var path = \"\";\n      this._realSegments = [];\n\n      for (var i = 0, len = segments.length; i < len; i++) {\n        var points = segments[i];\n        var realPoints = [];\n\n        this._realSegments.push(realPoints);\n\n        if (points.length > 0) {\n          path += $path.moveTo(points[0]);\n\n          for (var p = 1; p < points.length; p++) {\n            var pointA = points[p - 1];\n            var pointB = points[p];\n            var distanceAB = $math.getDistance(pointB, pointA);\n            var cpDistance = distanceAB * this.controlPointDistance;\n            var controlPointPosition = this.controlPointPosition;\n            var angle = -$math.getAngle(pointA, pointB);\n            var cpx = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * $math.sin(angle);\n            var cpy = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * $math.cos(angle);\n            var controlPoint1 = {\n              x: cpx,\n              y: cpy\n            };\n            var cpx2 = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * $math.sin(angle);\n            var cpy2 = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * $math.cos(angle);\n            var controlPoint2 = {\n              x: cpx2,\n              y: cpy2\n            };\n            path += $path.cubicCurveTo(pointB, controlPoint1, controlPoint2); // we add a lot of points in order to get the position/angle later\n\n            var stepCount = Math.ceil(distanceAB);\n            var prevPoint = pointA;\n\n            if (stepCount > 0) {\n              for (var i_1 = 0; i_1 <= stepCount; i_1++) {\n                var point = $math.getPointOnCubicCurve(pointA, pointB, controlPoint1, controlPoint2, i_1 / stepCount);\n                realPoints.push(point);\n                this._distance += $math.getDistance(prevPoint, point);\n                prevPoint = point;\n              }\n            } else {\n              realPoints.push(pointA);\n            }\n          }\n        }\n      }\n\n      this.path = path;\n    }\n  };\n\n  Object.defineProperty(Polyarc.prototype, \"controlPointPosition\", {\n    /**\r\n     * @return Position (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"controlPointPosition\");\n    },\n\n    /**\r\n     * Relative position along the line the control point is. (0-1)\r\n     *\r\n     * @default 0.5\r\n     * @param value  Position (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"controlPointPosition\", value);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Polyarc.prototype, \"controlPointDistance\", {\n    /**\r\n     * @return Distance (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"controlPointDistance\");\n    },\n\n    /**\r\n     * Relative distance of the control point. (0-1)\r\n     *\r\n     * Default is half the length of the line. (0.5)\r\n     *\r\n     * @default 0.5\r\n     * @param value  Distance (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"controlPointDistance\", value);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Polyarc;\n}(Polyline);\n\nexport { Polyarc };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Polyarc\"] = Polyarc;","map":{"version":3,"mappings":"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","names":["Polyline","registry","$math","$path","__extends","_super","_this","className","controlPointDistance","controlPointPosition","applyTheme","Polyarc","_distance","segments","length","path","_realSegments","i","len","points","realPoints","push","moveTo","p","pointA","pointB","distanceAB","getDistance","cpDistance","angle","getAngle","cpx","x","sin","cpy","y","cos","controlPoint1","cpx2","cpy2","controlPoint2","cubicCurveTo","stepCount","Math","ceil","prevPoint","i_1","point","getPointOnCubicCurve","Object","getPropertyValue","value","setPropertyValue","makePath","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/core/elements/Polyarc.ts"],"sourcesContent":["/**\r\n * Module for a multi-part arched line.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Polyline, IPolylineProperties, IPolylineAdapters, IPolylineEvents } from \"./Polyline\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Polyarc]].\r\n */\r\nexport interface IPolyarcProperties extends IPolylineProperties {\r\n\r\n\t/**\r\n\t * Relative position along the line the control point is. (0-1)\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tcontrolPointPosition: number;\r\n\r\n\t/**\r\n\t * Relative distance of the control point. (0-1)\r\n\t *\r\n\t * Default is half the length of the line. (0.5)\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tcontrolPointDistance: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Polyarc]].\r\n */\r\nexport interface IPolyarcEvents extends IPolylineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Polyarc]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPolyarcAdapters extends IPolylineAdapters, IPolyarcProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a multi-part arched line.\r\n *\r\n * @see {@link IPolyarcEvents} for a list of available events\r\n * @see {@link IPolyarcAdapters} for a list of available Adapters\r\n */\r\nexport class Polyarc extends Polyline {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPolyarcProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPolyarcAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPolyarcEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Polyarc\";\r\n\r\n\t\tthis.controlPointDistance = 0.5;\r\n\t\tthis.controlPointPosition = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creats and adds an SVG path for the arc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic makePath(): void {\r\n\t\tthis._distance = 0;\r\n\t\tlet segments = this.segments;\r\n\r\n\t\tif (segments && segments.length > 0) {\r\n\t\t\tlet path: string = \"\";\r\n\t\t\tthis._realSegments = [];\r\n\r\n\t\t\tfor (let i = 0, len = segments.length; i < len; i++) {\r\n\t\t\t\tlet points: IPoint[] = segments[i];\r\n\t\t\t\tlet realPoints: IPoint[] = [];\r\n\t\t\t\tthis._realSegments.push(realPoints);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tpath += $path.moveTo(points[0]);\r\n\r\n\t\t\t\t\tfor (let p = 1; p < points.length; p++) {\r\n\t\t\t\t\t\tlet pointA: IPoint = points[p - 1];\r\n\t\t\t\t\t\tlet pointB: IPoint = points[p];\r\n\r\n\t\t\t\t\t\tlet distanceAB: number = $math.getDistance(pointB, pointA);\r\n\t\t\t\t\t\tlet cpDistance: number = distanceAB * this.controlPointDistance;\r\n\t\t\t\t\t\tlet controlPointPosition: number = this.controlPointPosition;\r\n\t\t\t\t\t\tlet angle: number = -$math.getAngle(pointA, pointB);\r\n\r\n\t\t\t\t\t\tlet cpx: number = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * $math.sin(angle);\r\n\t\t\t\t\t\tlet cpy: number = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * $math.cos(angle);\r\n\t\t\t\t\t\tlet controlPoint1: IPoint = { x: cpx, y: cpy };\r\n\r\n\t\t\t\t\t\tlet cpx2: number = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * $math.sin(angle);\r\n\t\t\t\t\t\tlet cpy2: number = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * $math.cos(angle);\r\n\t\t\t\t\t\tlet controlPoint2: IPoint = { x: cpx2, y: cpy2 };\r\n\r\n\t\t\t\t\t\tpath += $path.cubicCurveTo(pointB, controlPoint1, controlPoint2);\r\n\r\n\t\t\t\t\t\t// we add a lot of points in order to get the position/angle later\r\n\t\t\t\t\t\tlet stepCount: number = Math.ceil(distanceAB);\r\n\t\t\t\t\t\tlet prevPoint: IPoint = pointA;\r\n\t\t\t\t\t\tif (stepCount > 0) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i <= stepCount; i++) {\r\n\t\t\t\t\t\t\t\tlet point: IPoint = $math.getPointOnCubicCurve(pointA, pointB, controlPoint1, controlPoint2, i / stepCount);\r\n\t\t\t\t\t\t\t\trealPoints.push(point);\r\n\t\t\t\t\t\t\t\tthis._distance += $math.getDistance(prevPoint, point);\r\n\t\t\t\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\trealPoints.push(pointA);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Relative position along the line the control point is. (0-1)\r\n\t *\r\n\t * @default 0.5\r\n\t * @param value  Position (0-1)\r\n\t */\r\n\tpublic set controlPointPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointPosition\", value);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic get controlPointPosition(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative distance of the control point. (0-1)\r\n\t *\r\n\t * Default is half the length of the line. (0.5)\r\n\t *\r\n\t * @default 0.5\r\n\t * @param value  Distance (0-1)\r\n\t */\r\n\tpublic set controlPointDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointDistance\", value);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance (0-1)\r\n\t */\r\n\tpublic get controlPointDistance(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointDistance\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyarc\"] = Polyarc;\r\n"]},"metadata":{},"sourceType":"module"}