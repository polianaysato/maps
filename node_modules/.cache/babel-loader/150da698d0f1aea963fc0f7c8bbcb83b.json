{"ast":null,"code":"/**\r\n * Handles date and time formatting\r\n */\nimport { __extends } from \"tslib\";\nimport { Language } from \"../utils/Language\";\nimport { BaseObject } from \"../Base\";\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\nimport { registry } from \"../Registry\";\nimport * as $strings from \"../utils/Strings\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $type from \"../utils/Type\";\nimport * as $time from \"../utils/Time\";\n/**\r\n * Handles date and time formatting.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n * @todo Better type casting of passed in date?\r\n * @todo Quarter support?\r\n * @todo When parsing named months make the search case-insensitive\r\n * @todo Escape a.m./p.m. properly when used in RegEx\r\n */\n\nvar DateFormatter =\n/** @class */\nfunction (_super) {\n  __extends(DateFormatter, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function DateFormatter() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Date format.\r\n     */\n\n\n    _this._dateFormat = \"yyyy-MM-dd\";\n    /**\r\n     * Input date format.\r\n     */\n\n    _this._inputDateFormat = \"yyyy-MM-dd\";\n    /**\r\n     * Assume UTC time zone.\r\n     */\n\n    _this._utc = false;\n    /**\r\n     * If `timezone` is set, this will hold minute fraction of the timezone.\r\n     *\r\n     * @readonly\r\n     * @ignore\r\n     */\n\n    _this.timezoneMinutes = 0;\n    /**\r\n     * First day of week.\r\n     *\r\n     * 0 - Sunday\r\n     * 1 - Monday\r\n     *\r\n     * Etc.\r\n     */\n\n    _this._firstDayOfWeek = 1;\n    /**\r\n     * A list of month names.\r\n     */\n\n    _this.months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    /**\r\n     * A list of short month names.\r\n     */\n\n    _this.monthsShort = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May(short)\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    /**\r\n     * A list of weekday names.\r\n     */\n\n    _this.weekdays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    /**\r\n     * A list of short weekday names.\r\n     */\n\n    _this.weekdaysShort = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    /**\r\n     * Output format to produce. If the format calls for applying color to the\r\n     * formatted value, this setting will determine what markup to use: SVG or\r\n     * HTML.\r\n     *\r\n     * Available options: svg, html.\r\n     *\r\n     * @default \"svg\"\r\n     */\n\n    _this._outputFormat = \"svg\";\n    /**\r\n     * Should the first letter of the formatted date be capitalized?\r\n     *\r\n     * @default true\r\n     */\n\n    _this.capitalize = true;\n    _this.className = \"DateFormatter\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(DateFormatter.prototype, \"language\", {\n    /**\r\n     * @return Language\r\n     */\n    get: function () {\n      return this._language;\n    },\n\n    /**\r\n     * A reference to [[Language]] object.\r\n     *\r\n     * @param  value  Language\r\n     */\n    set: function (value) {\n      this._language = value;\n      this.dateFormat = this._language.translate(\"_date\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Formats the date value according to specified format.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n   * @param source  Date value\r\n   * @param format  Format\r\n   * @return Formatted date string\r\n   */\n\n  DateFormatter.prototype.format = function (source, format, applyTimezone) {\n    // No language?\n    if (!this.language) {\n      if (this.sprite) {\n        this.language = this.sprite.language;\n      } else {\n        this.language = new Language();\n      }\n    } // No format passed in or it's empty\n\n\n    if (typeof format === \"undefined\" || format === \"\") {\n      format = this._dateFormat;\n    } // Init return value\n\n\n    var formatted; // Do casting if required\n    // This will take care of timestamps as well as Date objects\n\n    var date;\n\n    if ($type.isString(source)) {\n      // If it's a string, let's try parsing it using our own functionality\n      date = this.parse(source);\n    } else {\n      date = $utils.anyToDate(source);\n    } // Is it a built-in format or Intl.DateTimeFormat\n\n\n    if ($type.isObject(format)) {\n      try {\n        if (this.intlLocales) {\n          return new Intl.DateTimeFormat(this.intlLocales, format).format(date);\n        } else {\n          return new Intl.DateTimeFormat(undefined, format).format(date);\n        }\n      } catch (e) {\n        return \"Invalid\";\n      }\n    } else {\n      // Clean format\n      format = $utils.cleanFormat(format); // get format info (it will also deal with parser caching)\n\n      var info = this.parseFormat(format); // Should we apply custom time zone?\n\n      if ($type.hasValue(this.timezoneOffset)) {\n        date.setMinutes(date.getMinutes() + date.getTimezoneOffset() - this.timezoneOffset);\n      } else if ($type.hasValue(this.timezone) && applyTimezone !== false) {\n        date = $time.setTimezone(date, this.timezone);\n      } // Check if it's a valid date\n\n\n      if (!$type.isNumber(date.getTime())) {\n        return this.language.translate(\"Invalid date\");\n      } // Apply format\n\n\n      formatted = this.applyFormat(date, info, this.language); // Capitalize\n\n      if (this.capitalize) {\n        formatted = formatted.replace(/^.{1}/, formatted.substr(0, 1).toUpperCase());\n      }\n    } // We're done\n\n\n    return formatted;\n  };\n  /**\r\n   * Parses format into structured infromation.\r\n   *\r\n   * @param format Format template\r\n   */\n\n\n  DateFormatter.prototype.parseFormat = function (format) {\n    // Check cache\n    var cached = this.getCache(format);\n\n    if ($type.hasValue(cached)) {\n      return cached;\n    } // Init format parse info holder\n\n\n    var info = {\n      \"template\": \"\",\n      \"parts\": []\n    }; // Let TextFormatter split into chunks\n\n    var chunks = getTextFormatter().chunk(format, true);\n\n    for (var i = 0; i < chunks.length; i++) {\n      var chunk = chunks[i];\n\n      if (chunk.type === \"value\") {\n        // Just \"Date\"?\n        if (chunk.text.match(/^date$/i) && $type.isString(this._dateFormat)) {\n          chunk.text = this._dateFormat;\n        } // Find all possible parts\n\n\n        var matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g); // Found?\n\n        if (matches) {\n          // Populate template\n          for (var x = 0; x < matches.length; x++) {\n            info.parts.push(matches[x]);\n            chunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\n          }\n        }\n      } // Apply to template\n\n\n      info.template += chunk.text;\n    } // Apply style formatting\n    //info.template = getTextFormatter().format(info.template, this.outputFormat);\n    // Save cache\n\n\n    this.setCache(format, info);\n    return info;\n  };\n  /**\r\n   * Applies format to Date.\r\n   *\r\n   * @param date      Date object\r\n   * @param info      Parsed format information\r\n   * @param language  Language\r\n   * @return Formatted date string\r\n   */\n\n\n  DateFormatter.prototype.applyFormat = function (date, info, language) {\n    // Init return value\n    var res = info.template; // Get values\n\n    var fullYear,\n        month,\n        weekday,\n        day,\n        hours,\n        minutes,\n        seconds,\n        milliseconds,\n        offset = date.getTimezoneOffset(),\n        timestamp = date.getTime();\n\n    if (this.utc) {\n      fullYear = date.getUTCFullYear();\n      month = date.getUTCMonth();\n      weekday = date.getUTCDay();\n      day = date.getUTCDate();\n      hours = date.getUTCHours();\n      minutes = date.getUTCMinutes();\n      seconds = date.getUTCSeconds();\n      milliseconds = date.getUTCMilliseconds();\n    } else {\n      fullYear = date.getFullYear();\n      month = date.getMonth();\n      weekday = date.getDay();\n      day = date.getDate();\n      hours = date.getHours();\n      minutes = date.getMinutes();\n      seconds = date.getSeconds();\n      milliseconds = date.getMilliseconds();\n    } // Go through each part and format/replace it in template\n\n\n    for (var i = 0, len = info.parts.length; i < len; i++) {\n      var value = \"\";\n\n      switch (info.parts[i]) {\n        case \"G\":\n          value = language.translate(fullYear < 0 ? \"_era_bc\" : \"_era_ad\");\n          break;\n\n        case \"yyyy\":\n          value = Math.abs(fullYear).toString();\n\n          if (fullYear < 0) {\n            value += language.translate(\"_era_bc\");\n          }\n\n          break;\n\n        case \"yyy\":\n        case \"yy\":\n        case \"y\":\n          value = Math.abs(fullYear).toString().substr(-info.parts[i].length);\n\n          if (fullYear < 0) {\n            value += language.translate(\"_era_bc\");\n          }\n\n          break;\n\n        case \"YYYY\":\n        case \"YYY\":\n        case \"YY\":\n        case \"Y\":\n          var week = $utils.getWeek(date);\n          var year = fullYear;\n\n          if (week == 1 && weekday > 4) {\n            year--;\n          }\n\n          if (info.parts[i] == \"YYYY\") {\n            value = Math.abs(year).toString();\n          } else {\n            value = Math.abs(year).toString().substr(-info.parts[i].length);\n          }\n\n          if (year < 0) {\n            value += language.translate(\"_era_bc\");\n          }\n\n          break;\n\n        case \"u\":\n          // @todo\n          break;\n\n        case \"q\":\n          value = \"\" + Math.ceil((date.getMonth() + 1) / 3);\n          break;\n\n        case \"MMMMM\":\n          value = language.translate(this.months[month]).substr(0, 1);\n          break;\n\n        case \"MMMM\":\n          value = language.translate(this.months[month]);\n          break;\n\n        case \"MMM\":\n          value = language.translate(this.monthsShort[month]);\n          break;\n\n        case \"MM\":\n          value = $utils.padString(month + 1, 2, \"0\");\n          break;\n\n        case \"M\":\n          value = (month + 1).toString();\n          break;\n\n        case \"ww\":\n          value = $utils.padString($utils.getWeek(date, this.utc), 2, \"0\");\n          break;\n\n        case \"w\":\n          value = $utils.getWeek(date, this.utc).toString();\n          break;\n\n        case \"W\":\n          value = $utils.getMonthWeek(date, this.utc).toString();\n          break;\n\n        case \"dd\":\n          value = $utils.padString(day, 2, \"0\");\n          break;\n\n        case \"d\":\n          value = day.toString();\n          break;\n\n        case \"DD\":\n        case \"DDD\":\n          value = $utils.padString($utils.getYearDay(date, this.utc).toString(), info.parts[i].length, \"0\");\n          break;\n\n        case \"D\":\n          value = $utils.getYearDay(date, this.utc).toString();\n          break;\n\n        case \"F\":\n          // @todo\n          break;\n\n        case \"g\":\n          // @todo\n          break;\n\n        case \"t\":\n          value = language.translateFunc(\"_dateOrd\").call(this, day);\n          break;\n\n        case \"E\":\n          value = (weekday || 7).toString();\n          break;\n\n        case \"EE\":\n          value = $utils.padString((weekday || 7).toString(), 2, \"0\");\n          break;\n\n        case \"EEE\":\n        case \"eee\":\n          value = language.translate(this.weekdaysShort[weekday]);\n          break;\n\n        case \"EEEE\":\n        case \"eeee\":\n          value = language.translate(this.weekdays[weekday]);\n          break;\n\n        case \"EEEEE\":\n        case \"eeeee\":\n          value = language.translate(this.weekdays[weekday]).substr(0, 1);\n          break;\n\n        case \"e\":\n        case \"ee\":\n          value = (weekday - this.firstDayOfWeek + 1).toString();\n\n          if (info.parts[i] == \"ee\") {\n            value = $utils.padString(value, 2, \"0\");\n          }\n\n          break;\n\n        case \"a\":\n          if (hours >= 12) {\n            value = language.translate(\"PM\");\n          } else {\n            value = language.translate(\"AM\");\n          }\n\n          break;\n\n        case \"aa\":\n          if (hours >= 12) {\n            value = language.translate(\"P.M.\");\n          } else {\n            value = language.translate(\"A.M.\");\n          }\n\n          break;\n\n        case \"aaa\":\n          if (hours >= 12) {\n            value = language.translate(\"P\");\n          } else {\n            value = language.translate(\"A\");\n          }\n\n          break;\n\n        case \"h\":\n          value = $utils.get12Hours(hours).toString();\n          break;\n\n        case \"hh\":\n          value = $utils.padString($utils.get12Hours(hours), 2, \"0\");\n          break;\n\n        case \"H\":\n          value = hours.toString();\n          break;\n\n        case \"HH\":\n          value = $utils.padString(hours, 2, \"0\");\n          break;\n\n        case \"K\":\n          value = $utils.get12Hours(hours, 0).toString();\n          break;\n\n        case \"KK\":\n          value = $utils.padString($utils.get12Hours(hours, 0), 2, \"0\");\n          break;\n\n        case \"k\":\n          value = (hours + 1).toString();\n          break;\n\n        case \"kk\":\n          value = $utils.padString(hours + 1, 2, \"0\");\n          break;\n\n        case \"m\":\n          value = minutes.toString();\n          break;\n\n        case \"mm\":\n          value = $utils.padString(minutes, 2, \"0\");\n          break;\n\n        case \"s\":\n          value = seconds.toString();\n          break;\n\n        case \"ss\":\n          value = $utils.padString(seconds, 2, \"0\");\n          break;\n\n        case \"S\":\n        case \"SS\":\n        case \"SSS\":\n          value = Math.round(milliseconds / 1000 * Math.pow(10, info.parts[i].length)).toString();\n          break;\n\n        case \"x\":\n          value = timestamp.toString();\n          break;\n\n        case \"n\":\n        case \"nn\":\n        case \"nnn\":\n          value = $utils.padString(milliseconds, info.parts[i].length, \"0\");\n          break;\n\n        case \"z\":\n          value = $utils.getTimeZone(date, false, false, this.utc);\n          break;\n\n        case \"zz\":\n          value = $utils.getTimeZone(date, true, false, this.utc);\n          break;\n\n        case \"zzz\":\n          value = $utils.getTimeZone(date, false, true, this.utc);\n          break;\n\n        case \"zzzz\":\n          value = $utils.getTimeZone(date, true, true, this.utc);\n          break;\n\n        case \"Z\":\n        case \"ZZ\":\n          var tz = Math.abs(offset) / 60;\n          var tzh = Math.floor(tz);\n          var tzm = tz * 60 - tzh * 60;\n\n          if (this.utc) {\n            tzh = 0;\n            tzm = 0;\n          }\n\n          if (info.parts[i] == \"Z\") {\n            value = \"GMT\";\n            value += offset > 0 ? \"-\" : \"+\";\n            value += $utils.padString(tzh, 2) + \":\" + $utils.padString(tzm, 2);\n          } else {\n            value = offset > 0 ? \"-\" : \"+\";\n            value += $utils.padString(tzh, 2) + $utils.padString(tzm, 2);\n          }\n\n          break;\n\n        case \"i\":\n          value = date.toISOString();\n          break;\n\n        case \"I\":\n          value = date.toUTCString();\n          break;\n      }\n\n      res = res.replace($strings.PLACEHOLDER, value);\n    }\n\n    return res;\n  };\n  /**\r\n   * Parses any input value into Date object.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/#Parsing_Dates} Tutorial on date/time parsing\r\n   * @param source  Source value\r\n   * @param format  Source format\r\n   * @return Date object\r\n   */\n\n\n  DateFormatter.prototype.parse = function (source, format) {\n    // Format set?\n    if (!$type.hasValue(format)) {\n      format = this.inputDateFormat;\n    } // Is it already a Date\n\n\n    if (source instanceof Date) {\n      return source;\n    } // Is it a numeric timestamp\n\n\n    if (typeof source === \"number\") {\n      return new Date(source);\n    } // No? Let's check if it's string, and try converting to it if nec\n\n\n    if (typeof source !== \"string\") {\n      source = source.toString();\n    } // no language?\n\n\n    if (!this.language) {\n      if (this.sprite) {\n        this.language = this.sprite.language;\n      } else {\n        this.language = new Language();\n      }\n    } // Init return value\n\n\n    var res; // Init RegEx for parsing\n\n    var reg = \"\"; // Clean format\n\n    format = $utils.cleanFormat(format); // Clip format to length of the source string\n\n    format = format.substr(0, source.length); // Parse format\n\n    var info = this.parseFormat(format); // Init parsed items holder\n\n    var parsedIndexes = {\n      \"year\": -1,\n      \"year3\": -1,\n      \"year2\": -1,\n      \"year1\": -1,\n      \"month\": -1,\n      \"monthShort\": -1,\n      \"monthLong\": -1,\n      \"weekdayShort\": -1,\n      \"weekdayLong\": -1,\n      \"day\": -1,\n      \"yearDay\": -1,\n      \"week\": -1,\n      \"hourBase0\": -1,\n      \"hour12Base0\": -1,\n      \"hourBase1\": -1,\n      \"hour12Base1\": -1,\n      \"minute\": -1,\n      \"second\": -1,\n      \"millisecond\": -1,\n      \"millisecondDigits\": -1,\n      \"am\": -1,\n      \"zone\": -1,\n      \"timestamp\": -1,\n      \"iso\": -1\n    }; // Init values\n\n    var resValues = {\n      \"year\": 1970,\n      \"month\": 0,\n      \"day\": 1,\n      \"hour\": 0,\n      \"minute\": 0,\n      \"second\": 0,\n      \"millisecond\": 0,\n      \"timestamp\": null,\n      \"offset\": 0,\n      \"utc\": this.utc\n    }; // Index adjuster\n\n    var indexAdjust = 0,\n        index = 0; // Iterate through all of the parts\n\n    for (var i = 0; i < info.parts.length; i++) {\n      // Set current match index\n      index = i + indexAdjust + 1;\n\n      switch (info.parts[i]) {\n        case \"yyyy\":\n        case \"YYYY\":\n          reg += \"([0-9]{4})\";\n          parsedIndexes.year = index;\n          break;\n\n        case \"yyy\":\n        case \"YYY\":\n          reg += \"([0-9]{3})\";\n          parsedIndexes.year3 = index;\n          break;\n\n        case \"yy\":\n        case \"YY\":\n          reg += \"([0-9]{2})\";\n          parsedIndexes.year2 = index;\n          break;\n\n        case \"y\":\n        case \"Y\":\n          reg += \"([0-9]{1})\";\n          parsedIndexes.year1 = index;\n          break;\n\n        case \"MMMM\":\n          reg += \"(\" + this.getStringList(this.months).join(\"|\") + \")\";\n          parsedIndexes.monthLong = index;\n          break;\n\n        case \"MMM\":\n          reg += \"(\" + this.getStringList(this.monthsShort).join(\"|\") + \")\";\n          parsedIndexes.monthShort = index;\n          break;\n\n        case \"MM\":\n        case \"M\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.month = index;\n          break;\n\n        case \"ww\":\n        case \"w\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.week = index;\n          break;\n\n        case \"dd\":\n        case \"d\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.day = index;\n          break;\n\n        case \"DDD\":\n        case \"DD\":\n        case \"D\":\n          reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n          parsedIndexes.yearDay = index;\n          break;\n\n        case \"dddd\":\n          reg += \"(\" + this.getStringList(this.weekdays).join(\"|\") + \")\";\n          parsedIndexes.weekdayLong = index;\n          break;\n\n        case \"ddd\":\n          reg += \"(\" + this.getStringList(this.weekdaysShort).join(\"|\") + \")\";\n          parsedIndexes.weekdayShort = index;\n          break;\n\n        case \"aaa\":\n        case \"aa\":\n        case \"a\":\n          // TODO: fix (escape regex)\n          reg += \"(\" + this.getStringList([\"AM\", \"PM\", \"A\\.M\\.\", \"P\\.M\\.\", \"A\", \"P\"]).join(\"|\") + \")\";\n          parsedIndexes.am = index;\n          break;\n\n        case \"hh\":\n        case \"h\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hour12Base1 = index;\n          break;\n\n        case \"HH\":\n        case \"H\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hourBase0 = index;\n          break;\n\n        case \"KK\":\n        case \"K\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hour12Base0 = index;\n          break;\n\n        case \"kk\":\n        case \"k\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hourBase1 = index;\n          break;\n\n        case \"mm\":\n        case \"m\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.minute = index;\n          break;\n\n        case \"ss\":\n        case \"s\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.second = index;\n          break;\n\n        case \"SSS\":\n        case \"SS\":\n        case \"S\":\n          reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n          parsedIndexes.millisecond = index;\n          parsedIndexes.millisecondDigits = info.parts[i].length;\n          break;\n\n        case \"nnn\":\n        case \"nn\":\n        case \"n\":\n          reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n          parsedIndexes.millisecond = index;\n          break;\n\n        case \"x\":\n          reg += \"([0-9]{1,})\";\n          parsedIndexes.timestamp = index;\n          break;\n\n        case \"Z\":\n          reg += \"GMT([-+]+[0-9]{2}:[0-9]{2})\";\n          parsedIndexes.zone = index;\n          break;\n\n        case \"ZZ\":\n          reg += \"([\\\\-+]+[0-9]{2}[0-9]{2})\";\n          parsedIndexes.zone = index;\n          break;\n\n        case \"i\":\n          reg += \"([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\\.?([0-9]{0,3})([zZ]|[+\\-][0-9]{2}:?[0-9]{2}|$)\";\n          parsedIndexes.iso = index;\n          indexAdjust += 7;\n          break;\n\n        case \"G\":\n        case \"YYYY\":\n        case \"YYY\":\n        case \"YY\":\n        case \"Y\":\n        case \"MMMMM\":\n        case \"W\":\n        case \"EEEEE\":\n        case \"EEEE\":\n        case \"EEE\":\n        case \"EE\":\n        case \"E\":\n        case \"eeeee\":\n        case \"eeee\":\n        case \"eee\":\n        case \"ee\":\n        case \"e\":\n        case \"zzzz\":\n        case \"zzz\":\n        case \"zz\":\n        case \"z\":\n        case \"t\":\n          // Ignore\n          indexAdjust--;\n          break;\n      }\n\n      reg += \"[^0-9]*\";\n    } // Try matching\n\n\n    var regex = new RegExp(reg);\n    var matches = source.match(regex);\n\n    if (matches) {\n      // Populate the date object\n      // Full year\n      if (parsedIndexes.year > -1) {\n        resValues.year = parseInt(matches[parsedIndexes.year]);\n      } // 3-digit year\n\n\n      if (parsedIndexes.year3 > -1) {\n        var val = parseInt(matches[parsedIndexes.year3]);\n        val += 1000;\n        resValues.year = val;\n      } // 2-digit year\n\n\n      if (parsedIndexes.year2 > -1) {\n        var val = parseInt(matches[parsedIndexes.year2]);\n\n        if (val > 50) {\n          val += 1000;\n        } else {\n          val += 2000;\n        }\n\n        resValues.year = val;\n      } // 1-digit year\n\n\n      if (parsedIndexes.year1 > -1) {\n        var val = parseInt(matches[parsedIndexes.year1]);\n        val = Math.floor(new Date().getFullYear() / 10) * 10 + val;\n        resValues.year = val;\n      } // Full month\n\n\n      if (parsedIndexes.monthLong > -1) {\n        resValues.month = this.resolveMonth(matches[parsedIndexes.monthLong]);\n      } // Short month\n\n\n      if (parsedIndexes.monthShort > -1) {\n        resValues.month = this.resolveShortMonth(matches[parsedIndexes.monthShort]);\n      } // Numeric month\n\n\n      if (parsedIndexes.month > -1) {\n        resValues.month = parseInt(matches[parsedIndexes.month]) - 1;\n      } // Weekday\n      // @todo\n      // Week\n\n\n      if (parsedIndexes.week > -1 && parsedIndexes.day === -1) {\n        // We parse weeks ONLY if day is not explicitly set\n        // TODO: this needs work\n        // (but maybe later - I can hardly imagine anyone passing their dates in weeks)\n        resValues.month = 0;\n        resValues.day = $utils.getDayFromWeek(parseInt(matches[parsedIndexes.week]), resValues.year, 1, this.utc);\n      } // Day\n\n\n      if (parsedIndexes.day > -1) {\n        resValues.day = parseInt(matches[parsedIndexes.day]);\n      } // Year day\n\n\n      if (parsedIndexes.yearDay > -1) {\n        resValues.month = 0;\n        resValues.day = parseInt(matches[parsedIndexes.yearDay]);\n      } // 24 Hour (0-23)\n\n\n      if (parsedIndexes.hourBase0 > -1) {\n        resValues.hour = parseInt(matches[parsedIndexes.hourBase0]);\n      } // 24 Hour (1-24)\n\n\n      if (parsedIndexes.hourBase1 > -1) {\n        resValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;\n      } // 12 Hour (0-11)\n\n\n      if (parsedIndexes.hour12Base0 > -1) {\n        var val = parseInt(matches[parsedIndexes.hour12Base0]);\n\n        if (val == 11) {\n          val = 0;\n        }\n\n        if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {\n          val += 12;\n        }\n\n        resValues.hour = val;\n      } // 12 Hour (1-12)\n\n\n      if (parsedIndexes.hour12Base1 > -1) {\n        var val = parseInt(matches[parsedIndexes.hour12Base1]);\n\n        if (val == 12) {\n          val = 0;\n        }\n\n        if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {\n          val += 12;\n        }\n\n        resValues.hour = val;\n      } // Minute\n\n\n      if (parsedIndexes.minute > -1) {\n        resValues.minute = parseInt(matches[parsedIndexes.minute]);\n      } // Second\n\n\n      if (parsedIndexes.second > -1) {\n        resValues.second = parseInt(matches[parsedIndexes.second]);\n      } // Millisecond\n\n\n      if (parsedIndexes.millisecond > -1) {\n        var val = parseInt(matches[parsedIndexes.millisecond]);\n\n        if (parsedIndexes.millisecondDigits == 2) {\n          val *= 10;\n        } else if (parsedIndexes.millisecondDigits == 1) {\n          val *= 100;\n        }\n\n        resValues.millisecond = val;\n      } // Timestamp\n\n\n      if (parsedIndexes.timestamp > -1) {\n        resValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);\n        var ts = new Date(resValues.timestamp);\n        resValues.year = ts.getUTCFullYear();\n        resValues.month = ts.getUTCMonth();\n        resValues.day = ts.getUTCDate();\n        resValues.hour = ts.getUTCHours();\n        resValues.minute = ts.getUTCMinutes();\n        resValues.second = ts.getUTCSeconds();\n        resValues.millisecond = ts.getUTCMilliseconds();\n      } // Adjust time zone\n\n\n      if (parsedIndexes.zone > -1) {\n        resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.zone]);\n      } // ISO\n\n\n      if (parsedIndexes.iso > -1) {\n        resValues.year = $type.toNumber(matches[parsedIndexes.iso + 0]);\n        resValues.month = $type.toNumber(matches[parsedIndexes.iso + 1]) - 1;\n        resValues.day = $type.toNumber(matches[parsedIndexes.iso + 2]);\n        resValues.hour = $type.toNumber(matches[parsedIndexes.iso + 3]);\n        resValues.minute = $type.toNumber(matches[parsedIndexes.iso + 4]);\n        resValues.second = $type.toNumber(matches[parsedIndexes.iso + 5]);\n        resValues.millisecond = $type.toNumber(matches[parsedIndexes.iso + 6]);\n\n        if (matches[parsedIndexes.iso + 7] == \"Z\" || matches[parsedIndexes.iso + 7] == \"z\") {\n          resValues.utc = true;\n        } else if (matches[parsedIndexes.iso + 7] != \"\") {\n          resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.iso + 7]);\n        }\n      } // Create Date object\n\n\n      if (resValues.utc) {\n        res = new Date(Date.UTC(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute, resValues.second, resValues.millisecond));\n      } else {\n        res = new Date(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute + resValues.offset, resValues.second, resValues.millisecond);\n      }\n    } else {\n      // Didn't match anything\n      // Let's try dropping it into Date constructor and hope for the best\n      res = new Date(source);\n    }\n\n    return res;\n  };\n\n  DateFormatter.prototype.resolveTimezoneOffset = function (date, zone) {\n    var value = zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/);\n\n    if (value) {\n      var match = $type.getValue(zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/));\n      var dir = match[1];\n      var hour = match[2];\n      var minute = match[3];\n      var offset = parseInt(hour) * 60 + parseInt(minute); // Adjust offset\n      // Making it negative does not seem to make sense, but it's right\n      // because of how JavaScript calculates GMT offsets\n\n      if (dir == \"+\") {\n        offset *= -1;\n      } // Check the difference in offset\n\n\n      var originalOffset = (date || new Date()).getTimezoneOffset();\n      var diff = offset - originalOffset;\n      return diff;\n    }\n\n    return 0;\n  };\n  /**\r\n   * Resolves month name (i.e. \"December\") into a month number (11).\r\n   *\r\n   * @param value  Month name\r\n   * @return Month number\r\n   */\n\n\n  DateFormatter.prototype.resolveMonth = function (value) {\n    // Let's try English first\n    var month = this.months.indexOf(value);\n\n    if (month > -1) {\n      return month;\n    } // Try the translation\n\n\n    if (this.language && !this.language.isDefault()) {\n      month = this.language.translateAll(this.months).indexOf(value);\n\n      if (month > -1) {\n        return month;\n      }\n    }\n\n    return 0;\n  };\n  /**\r\n   * Resolves short month name (i.e. \"Dec\") into a month number.\r\n   *\r\n   * @param value  Short month name\r\n   * @return Month number\r\n   */\n\n\n  DateFormatter.prototype.resolveShortMonth = function (value) {\n    // Let's try English first\n    var month = this.monthsShort.indexOf(value);\n\n    if (month > -1) {\n      return month;\n    } // Maybe long month (workaround for May)\n\n\n    month = this.months.indexOf(value);\n\n    if (month > -1) {\n      return month;\n    } // Try the translation\n\n\n    if (this.language && !this.language.isDefault()) {\n      month = this.language.translateAll(this.monthsShort).indexOf(value);\n\n      if (month > -1) {\n        return month;\n      }\n    }\n\n    return 0;\n  };\n  /**\r\n   * Checks if passed in string represents AM/PM notation in many of its\r\n   * versions.\r\n   *\r\n   * @param value  Source string\r\n   * @return Is it AM/PM?\r\n   */\n\n\n  DateFormatter.prototype.isAm = function (value) {\n    var list = this.getStringList([\"AM\", \"A.M.\", \"A\"]);\n    return list.indexOf(value.toUpperCase()) > -1;\n  };\n  /**\r\n   * Invalidates related [[Sprite]] causing it to redraw.\r\n   */\n\n\n  DateFormatter.prototype.invalidateSprite = function () {\n    if (this.sprite) {\n      this.sprite.invalidate();\n    }\n  };\n  /**\r\n   * Translates list of strings.\r\n   *\r\n   * @param list  Source strings\r\n   * @return Translated strings\r\n   */\n\n\n  DateFormatter.prototype.getStringList = function (list) {\n    var res = [];\n\n    for (var i = 0; i < list.length; i++) {\n      // translate?\n      if (this.language) {\n        res.push($utils.escapeForRgex(this.language.translate(list[i])));\n      } else {\n        res.push($utils.escapeForRgex(list[i]));\n      }\n    }\n\n    return res;\n  };\n\n  Object.defineProperty(DateFormatter.prototype, \"dateFormat\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function () {\n      return this._dateFormat;\n    },\n\n    /**\r\n     * Date format to use.\r\n     *\r\n     * If format is not supplied in-line in the string, this setting will be\r\n     * used.\r\n     *\r\n     * @default \"yyyy-MM-dd\"\r\n     * @param value Date format\r\n     */\n    set: function (value) {\n      this._dateFormat = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"inputDateFormat\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function () {\n      return this._inputDateFormat;\n    },\n\n    /**\r\n     * Date format to use when parsing dates.\r\n     *\r\n     * @default \"yyyy-MM-dd\"\r\n     * @param value Date format\r\n     */\n    set: function (value) {\n      this._inputDateFormat = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"intlLocales\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function () {\n      return this._intlLocales;\n    },\n\n    /**\r\n     * Locales if you are using date formats in `Intl.DateTimeFormatOptions` syntax.\r\n     *\r\n     * @param value Locales\r\n     */\n    set: function (value) {\n      this._intlLocales = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"utc\", {\n    /**\r\n     * @return Use UTC?\r\n     */\n    get: function () {\n      return this._utc;\n    },\n\n    /**\r\n     * Should formatter use UTC functions?\r\n     *\r\n     * If UTC is used, all date/time values will be independent on client's\r\n     * time zone.\r\n     *\r\n     * @param value Use UTC?\r\n     */\n    set: function (value) {\n      this._utc = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"timezoneOffset\", {\n    /**\r\n     * @return Offset (minutes)\r\n     */\n    get: function () {\n      return this._timezoneOffset;\n    },\n\n    /**\r\n     * If set, will apply specific offset in minutes before formatting the date\r\n     * text.\r\n     *\r\n     * The value is a number of minutes from target time zone to UTC.\r\n     *\r\n     * E.g. `300` will recalculate Dates in \"GMT-5\" time zone.\r\n     *\r\n     * @param  value  Offset (minutes)\r\n     */\n    set: function (value) {\n      if (this._timezoneOffset != value) {\n        this._timezoneOffset = value;\n        this.invalidateSprite();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"timezone\", {\n    /**\r\n     * @return Timezone\r\n     */\n    get: function () {\n      return this._timezone;\n    },\n\n    /**\r\n     * If set, will format date/time in specific time zone.\r\n     *\r\n     * The value should be named time zone, e.g.:\r\n     * `\"America/Vancouver\"`, `\"Australia/Sydney\"`, `\"UTC\"`.\r\n     *\r\n     * @since 4.10.1\r\n     * @param  value  Timezone\r\n     */\n    set: function (value) {\n      if (this._timezone != value) {\n        this._timezone = value;\n        this.timezoneMinutes = $time.getTimezoneMinutes(value);\n        this.invalidateSprite();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"firstDayOfWeek\", {\n    /**\r\n     * @return First day of week\r\n     */\n    get: function () {\n      return this._firstDayOfWeek;\n    },\n\n    /**\r\n     * First day of the week:\r\n     *\r\n     * * 0 - Sunday\r\n     * * 1 - Monday\r\n     * * 2 - Tuesday\r\n     *\r\n     * Etc.\r\n     *\r\n     * @param value First day of week\r\n     */\n    set: function (value) {\n      this._firstDayOfWeek = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"outputFormat\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Format\r\n     */\n    get: function () {\n      return this._outputFormat;\n    },\n\n    /**\r\n     * Output format for the formatted date.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Format\r\n     */\n    set: function (value) {\n      this._outputFormat = value.toLowerCase();\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DateFormatter;\n}(BaseObject);\n\nexport { DateFormatter };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"DateFormatter\"] = DateFormatter;","map":{"version":3,"mappings":"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","names":["Language","BaseObject","getTextFormatter","registry","$strings","$utils","$type","$time","__extends","_super","_this","className","applyTheme","Object","DateFormatter","_language","value","dateFormat","translate","source","format","applyTimezone","language","sprite","_dateFormat","formatted","date","isString","parse","anyToDate","isObject","intlLocales","Intl","DateTimeFormat","undefined","e","cleanFormat","info","parseFormat","hasValue","timezoneOffset","setMinutes","getMinutes","getTimezoneOffset","timezone","setTimezone","isNumber","getTime","applyFormat","capitalize","replace","substr","toUpperCase","cached","getCache","chunks","chunk","i","length","type","text","match","matches","x","parts","push","PLACEHOLDER","template","setCache","res","fullYear","month","weekday","day","hours","minutes","seconds","milliseconds","offset","timestamp","utc","getUTCFullYear","getUTCMonth","getUTCDay","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getFullYear","getMonth","getDay","getDate","getHours","getSeconds","getMilliseconds","len","Math","abs","toString","week","getWeek","year","ceil","months","monthsShort","padString","getMonthWeek","getYearDay","translateFunc","call","weekdaysShort","weekdays","firstDayOfWeek","get12Hours","round","pow","getTimeZone","tz","tzh","floor","tzm","toISOString","toUTCString","inputDateFormat","Date","reg","parsedIndexes","resValues","indexAdjust","index","year3","year2","year1","getStringList","join","monthLong","monthShort","yearDay","weekdayLong","weekdayShort","am","hour12Base1","hourBase0","hour12Base0","hourBase1","minute","second","millisecond","millisecondDigits","zone","iso","regex","RegExp","parseInt","val","resolveMonth","resolveShortMonth","getDayFromWeek","hour","isAm","ts","resolveTimezoneOffset","toNumber","UTC","getValue","dir","originalOffset","diff","indexOf","isDefault","translateAll","list","invalidate","escapeForRgex","invalidateSprite","_inputDateFormat","_intlLocales","_utc","_timezoneOffset","_timezone","timezoneMinutes","getTimezoneMinutes","_firstDayOfWeek","_outputFormat","toLowerCase","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/core/formatters/DateFormatter.ts"],"sourcesContent":["/**\r\n * Handles date and time formatting\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Language, ILocaleProperties } from \"../utils/Language\";\r\nimport { BaseObject } from \"../Base\";\r\nimport { ITextChunk, getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $time from \"../utils/Time\";\r\n\r\n/**\r\n * Interface describing parsed date format definition.\r\n */\r\nexport interface DateFormatInfo {\r\n\t\"template\": string;\r\n\t\"parts\": any[];\r\n}\r\n\r\n/**\r\n * Month names.\r\n */\r\nexport type MonthNames = \"January\" | \"February\" | \"March\" | \"April\" | \"May\" | \"June\" | \"July\" | \"August\" | \"September\" | \"October\" | \"November\" | \"December\";\r\n\r\n/**\r\n * Short month names.\r\n *\r\n * @param {string}\r\n */\r\nexport type ShortMonthNames = \"Jan\" | \"Feb\" | \"Mar\" | \"Apr\" | \"May(short)\" | \"Jun\" | \"Jul\" | \"Aug\" | \"Sep\" | \"Oct\" | \"Nov\" | \"Dec\";\r\n\r\n/**\r\n * Weekedays.\r\n */\r\nexport type Weekdays = \"Sunday\" | \"Monday\" | \"Tuesday\" | \"Wednesday\" | \"Thursday\" | \"Friday\" | \"Saturday\";\r\n\r\n/**\r\n * Short weekday names.\r\n */\r\nexport type ShortWeekdays = \"Sun\" | \"Mon\" | \"Tue\" | \"Wed\" | \"Thu\" | \"Fri\" | \"Sat\";\r\n\r\n/**\r\n * Handles date and time formatting.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n * @todo Better type casting of passed in date?\r\n * @todo Quarter support?\r\n * @todo When parsing named months make the search case-insensitive\r\n * @todo Escape a.m./p.m. properly when used in RegEx\r\n */\r\nexport class DateFormatter extends BaseObject {\r\n\r\n\t/**\r\n\t * Date format.\r\n\t */\r\n\tprotected _dateFormat: string | Intl.DateTimeFormatOptions = \"yyyy-MM-dd\";\r\n\r\n\t/**\r\n\t * Locales to use when formatting using Intl.DateFormatter\r\n\t */\r\n\tprotected _intlLocales: string;\r\n\r\n\t/**\r\n\t * Input date format.\r\n\t */\r\n\tprotected _inputDateFormat: string = \"yyyy-MM-dd\";\r\n\r\n\t/**\r\n\t * Assume UTC time zone.\r\n\t */\r\n\tprotected _utc: boolean = false;\r\n\r\n\t/**\r\n\t * Timezone offset.\r\n\t */\r\n\tprotected _timezoneOffset: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Timezone.\r\n\t */\r\n\tprotected _timezone: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * If `timezone` is set, this will hold minute fraction of the timezone.\r\n\t * \r\n\t * @readonly\r\n\t * @ignore\r\n\t */\r\n\tpublic timezoneMinutes: number = 0;\r\n\r\n\t/**\r\n\t * First day of week.\r\n\t *\r\n\t * 0 - Sunday\r\n\t * 1 - Monday\r\n\t *\r\n\t * Etc.\r\n\t */\r\n\tprotected _firstDayOfWeek: number = 1;\r\n\r\n\t/**\r\n\t * A list of month names.\r\n\t */\r\n\tpublic months: Array<MonthNames> = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n\t/**\r\n\t * A list of short month names.\r\n\t */\r\n\tpublic monthsShort: Array<ShortMonthNames> = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May(short)\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\n\t/**\r\n\t * A list of weekday names.\r\n\t */\r\n\tpublic weekdays: Array<Weekdays> = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n\t/**\r\n\t * A list of short weekday names.\r\n\t */\r\n\tpublic weekdaysShort: Array<ShortWeekdays> = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\n\t/**\r\n\t * Output format to produce. If the format calls for applying color to the\r\n\t * formatted value, this setting will determine what markup to use: SVG or\r\n\t * HTML.\r\n\t *\r\n\t * Available options: svg, html.\r\n\t *\r\n\t * @default \"svg\"\r\n\t */\r\n\tprotected _outputFormat: string = \"svg\";\r\n\r\n\t/**\r\n\t * Holds reference to parent [[Sprite]] object.\r\n\t */\r\n\tpublic sprite: $type.Optional<Sprite>;\r\n\r\n\t/**\r\n\t * Holds reference to [[Language]] object.\r\n\t */\r\n\tpublic _language: $type.Optional<Language>;\r\n\r\n\t/**\r\n\t * Should the first letter of the formatted date be capitalized?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic capitalize: boolean = true;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateFormatter\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to [[Language]] object.\r\n\t *\r\n\t * @param  value  Language\r\n\t */\r\n\tpublic set language(value: $type.Optional<Language>) {\r\n\t\tthis._language = value;\r\n\t\tthis.dateFormat = this._language.translate(\"_date\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Language\r\n\t */\r\n\tpublic get language(): $type.Optional<Language> {\r\n\t\treturn this._language;\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the date value according to specified format.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n\t * @param source  Date value\r\n\t * @param format  Format\r\n\t * @return Formatted date string\r\n\t */\r\n\tpublic format(source: any, format?: string | Intl.DateTimeFormatOptions, applyTimezone?: boolean): string {\r\n\r\n\t\t// No language?\r\n\t\tif (!this.language) {\r\n\t\t\tif (this.sprite) {\r\n\t\t\t\tthis.language = this.sprite.language;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.language = new Language();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// No format passed in or it's empty\r\n\t\tif (typeof format === \"undefined\" || format === \"\") {\r\n\t\t\tformat = this._dateFormat;\r\n\t\t}\r\n\r\n\t\t// Init return value\r\n\t\tlet formatted;\r\n\r\n\t\t// Do casting if required\r\n\t\t// This will take care of timestamps as well as Date objects\r\n\t\tlet date: Date;\r\n\t\tif ($type.isString(source)) {\r\n\t\t\t// If it's a string, let's try parsing it using our own functionality\r\n\t\t\tdate = this.parse(source);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdate = $utils.anyToDate(source);\r\n\t\t}\r\n\r\n\t\t// Is it a built-in format or Intl.DateTimeFormat\r\n\t\tif ($type.isObject(format)) {\r\n\r\n\t\t\ttry {\r\n\t\t\t\tif (this.intlLocales) {\r\n\t\t\t\t\treturn new Intl.DateTimeFormat(this.intlLocales, <Intl.DateTimeFormatOptions>format).format(date);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn new Intl.DateTimeFormat(undefined, <Intl.DateTimeFormatOptions>format).format(date);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\treturn \"Invalid\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\t// Clean format\r\n\t\t\tformat = $utils.cleanFormat(format);\r\n\r\n\t\t\t// get format info (it will also deal with parser caching)\r\n\t\t\tlet info = this.parseFormat(format);\r\n\r\n\t\t\t// Should we apply custom time zone?\r\n\t\t\tif ($type.hasValue(this.timezoneOffset)) {\r\n\t\t\t\tdate.setMinutes(date.getMinutes() + date.getTimezoneOffset() - this.timezoneOffset);\r\n\t\t\t}\r\n\t\t\telse if ($type.hasValue(this.timezone) && applyTimezone !== false) {\r\n\t\t\t\tdate = $time.setTimezone(date, this.timezone);\r\n\t\t\t}\r\n\r\n\t\t\t// Check if it's a valid date\r\n\t\t\tif (!$type.isNumber(date.getTime())) {\r\n\t\t\t\treturn this.language.translate(\"Invalid date\");\r\n\t\t\t}\r\n\r\n\t\t\t// Apply format\r\n\t\t\tformatted = this.applyFormat(date, info, this.language);\r\n\r\n\t\t\t// Capitalize\r\n\t\t\tif (this.capitalize) {\r\n\t\t\t\tformatted = formatted.replace(\r\n\t\t\t\t\t/^.{1}/, formatted.substr(0, 1).toUpperCase()\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// We're done\r\n\t\treturn formatted;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses format into structured infromation.\r\n\t *\r\n\t * @param format Format template\r\n\t */\r\n\tprotected parseFormat(format: string): DateFormatInfo {\r\n\r\n\t\t// Check cache\r\n\t\tlet cached = this.getCache(format);\r\n\t\tif ($type.hasValue(cached)) {\r\n\t\t\treturn cached;\r\n\t\t}\r\n\r\n\t\t// Init format parse info holder\r\n\t\tlet info: DateFormatInfo = {\r\n\t\t\t\"template\": \"\",\r\n\t\t\t\"parts\": <any>[]\r\n\t\t};\r\n\r\n\t\t// Let TextFormatter split into chunks\r\n\t\tlet chunks: ITextChunk[] = getTextFormatter().chunk(format, true);\r\n\t\tfor (let i: number = 0; i < chunks.length; i++) {\r\n\t\t\tlet chunk: ITextChunk = chunks[i];\r\n\r\n\t\t\tif (chunk.type === \"value\") {\r\n\r\n\t\t\t\t// Just \"Date\"?\r\n\t\t\t\tif (chunk.text.match(/^date$/i) && $type.isString(this._dateFormat)) {\r\n\t\t\t\t\tchunk.text = this._dateFormat;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Find all possible parts\r\n\t\t\t\tlet matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);\r\n\r\n\t\t\t\t// Found?\r\n\t\t\t\tif (matches) {\r\n\r\n\t\t\t\t\t// Populate template\r\n\t\t\t\t\tfor (let x = 0; x < matches.length; x++) {\r\n\t\t\t\t\t\tinfo.parts.push(matches[x]);\r\n\t\t\t\t\t\tchunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Apply to template\r\n\t\t\tinfo.template += chunk.text;\r\n\t\t}\r\n\r\n\t\t// Apply style formatting\r\n\t\t//info.template = getTextFormatter().format(info.template, this.outputFormat);\r\n\r\n\t\t// Save cache\r\n\t\tthis.setCache(format, info);\r\n\r\n\t\treturn info;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies format to Date.\r\n\t *\r\n\t * @param date      Date object\r\n\t * @param info      Parsed format information\r\n\t * @param language  Language\r\n\t * @return Formatted date string\r\n\t */\r\n\tprotected applyFormat(date: Date, info: DateFormatInfo, language: Language): string {\r\n\r\n\t\t// Init return value\r\n\t\tlet res = info.template;\r\n\r\n\t\t// Get values\r\n\t\tlet fullYear: number,\r\n\t\t\tmonth: number,\r\n\t\t\tweekday: number,\r\n\t\t\tday: number,\r\n\t\t\thours: number,\r\n\t\t\tminutes: number,\r\n\t\t\tseconds: number,\r\n\t\t\tmilliseconds: number,\r\n\t\t\toffset: number = date.getTimezoneOffset(),\r\n\t\t\ttimestamp: number = date.getTime();\r\n\t\tif (this.utc) {\r\n\t\t\tfullYear = date.getUTCFullYear();\r\n\t\t\tmonth = date.getUTCMonth();\r\n\t\t\tweekday = date.getUTCDay();\r\n\t\t\tday = date.getUTCDate();\r\n\t\t\thours = date.getUTCHours();\r\n\t\t\tminutes = date.getUTCMinutes();\r\n\t\t\tseconds = date.getUTCSeconds();\r\n\t\t\tmilliseconds = date.getUTCMilliseconds();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfullYear = date.getFullYear();\r\n\t\t\tmonth = date.getMonth();\r\n\t\t\tweekday = date.getDay();\r\n\t\t\tday = date.getDate();\r\n\t\t\thours = date.getHours();\r\n\t\t\tminutes = date.getMinutes();\r\n\t\t\tseconds = date.getSeconds();\r\n\t\t\tmilliseconds = date.getMilliseconds();\r\n\t\t}\r\n\r\n\t\t// Go through each part and format/replace it in template\r\n\t\tfor (let i = 0, len = info.parts.length; i < len; i++) {\r\n\t\t\tlet value: string = \"\";\r\n\t\t\tswitch (info.parts[i]) {\r\n\r\n\t\t\t\tcase \"G\":\r\n\t\t\t\t\tvalue = language.translate(\r\n\t\t\t\t\t\tfullYear < 0\r\n\t\t\t\t\t\t\t? \"_era_bc\"\r\n\t\t\t\t\t\t\t: \"_era_ad\"\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"yyyy\":\r\n\t\t\t\t\tvalue = Math.abs(fullYear).toString();\r\n\t\t\t\t\tif (fullYear < 0) {\r\n\t\t\t\t\t\tvalue += language.translate(\"_era_bc\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"yyy\":\r\n\t\t\t\tcase \"yy\":\r\n\t\t\t\tcase \"y\":\r\n\t\t\t\t\tvalue = Math.abs(fullYear).toString().substr(-info.parts[i].length);\r\n\t\t\t\t\tif (fullYear < 0) {\r\n\t\t\t\t\t\tvalue += language.translate(\"_era_bc\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"YYYY\":\r\n\t\t\t\tcase \"YYY\":\r\n\t\t\t\tcase \"YY\":\r\n\t\t\t\tcase \"Y\":\r\n\t\t\t\t\tlet week = $utils.getWeek(date);\r\n\t\t\t\t\tlet year = fullYear;\r\n\t\t\t\t\tif (week == 1 && (weekday > 4)) {\r\n\t\t\t\t\t\tyear--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (info.parts[i] == \"YYYY\") {\r\n\t\t\t\t\t\tvalue = Math.abs(year).toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue = Math.abs(year).toString().substr(-info.parts[i].length);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (year < 0) {\r\n\t\t\t\t\t\tvalue += language.translate(\"_era_bc\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"u\":\r\n\t\t\t\t\t// @todo\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"q\":\r\n\t\t\t\t\tvalue = \"\" + Math.ceil((date.getMonth() + 1) / 3);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"MMMMM\":\r\n\t\t\t\t\tvalue = language.translate(this.months[month]).substr(0, 1);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"MMMM\":\r\n\t\t\t\t\tvalue = language.translate(this.months[month]);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"MMM\":\r\n\t\t\t\t\tvalue = language.translate(this.monthsShort[month]);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"MM\":\r\n\t\t\t\t\tvalue = $utils.padString(month + 1, 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"M\":\r\n\t\t\t\t\tvalue = (month + 1).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ww\":\r\n\t\t\t\t\tvalue = $utils.padString($utils.getWeek(date, this.utc), 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"w\":\r\n\t\t\t\t\tvalue = $utils.getWeek(date, this.utc).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"W\":\r\n\t\t\t\t\tvalue = $utils.getMonthWeek(date, this.utc).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"dd\":\r\n\t\t\t\t\tvalue = $utils.padString(day, 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"d\":\r\n\t\t\t\t\tvalue = day.toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"DD\":\r\n\t\t\t\tcase \"DDD\":\r\n\t\t\t\t\tvalue = $utils.padString($utils.getYearDay(date, this.utc).toString(), info.parts[i].length, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"D\":\r\n\t\t\t\t\tvalue = $utils.getYearDay(date, this.utc).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"F\":\r\n\t\t\t\t\t// @todo\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"g\":\r\n\t\t\t\t\t// @todo\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"t\":\r\n\t\t\t\t\tvalue = language.translateFunc(\"_dateOrd\").call(this, day);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"E\":\r\n\t\t\t\t\tvalue = (weekday || 7).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"EE\":\r\n\t\t\t\t\tvalue = $utils.padString((weekday || 7).toString(), 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"EEE\":\r\n\t\t\t\tcase \"eee\":\r\n\t\t\t\t\tvalue = language.translate(this.weekdaysShort[weekday]);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"EEEE\":\r\n\t\t\t\tcase \"eeee\":\r\n\t\t\t\t\tvalue = language.translate(this.weekdays[weekday]);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"EEEEE\":\r\n\t\t\t\tcase \"eeeee\":\r\n\t\t\t\t\tvalue = language.translate(this.weekdays[weekday]).substr(0, 1);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"e\":\r\n\t\t\t\tcase \"ee\":\r\n\t\t\t\t\tvalue = (weekday - this.firstDayOfWeek + 1).toString();\r\n\t\t\t\t\tif (info.parts[i] == \"ee\") {\r\n\t\t\t\t\t\tvalue = $utils.padString(value, 2, \"0\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"a\":\r\n\t\t\t\t\tif (hours >= 12) {\r\n\t\t\t\t\t\tvalue = language.translate(\"PM\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue = language.translate(\"AM\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"aa\":\r\n\t\t\t\t\tif (hours >= 12) {\r\n\t\t\t\t\t\tvalue = language.translate(\"P.M.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue = language.translate(\"A.M.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"aaa\":\r\n\t\t\t\t\tif (hours >= 12) {\r\n\t\t\t\t\t\tvalue = language.translate(\"P\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue = language.translate(\"A\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"h\":\r\n\t\t\t\t\tvalue = $utils.get12Hours(hours).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"hh\":\r\n\t\t\t\t\tvalue = $utils.padString($utils.get12Hours(hours), 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"H\":\r\n\t\t\t\t\tvalue = hours.toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"HH\":\r\n\t\t\t\t\tvalue = $utils.padString(hours, 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"K\":\r\n\t\t\t\t\tvalue = $utils.get12Hours(hours, 0).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"KK\":\r\n\t\t\t\t\tvalue = $utils.padString($utils.get12Hours(hours, 0), 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"k\":\r\n\t\t\t\t\tvalue = (hours + 1).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"kk\":\r\n\t\t\t\t\tvalue = $utils.padString(hours + 1, 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"m\":\r\n\t\t\t\t\tvalue = minutes.toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"mm\":\r\n\t\t\t\t\tvalue = $utils.padString(minutes, 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"s\":\r\n\t\t\t\t\tvalue = seconds.toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ss\":\r\n\t\t\t\t\tvalue = $utils.padString(seconds, 2, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"S\":\r\n\t\t\t\tcase \"SS\":\r\n\t\t\t\tcase \"SSS\":\r\n\t\t\t\t\tvalue = Math.round((milliseconds / 1000) * Math.pow(10, info.parts[i].length)).toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"x\":\r\n\t\t\t\t\tvalue = timestamp.toString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"n\":\r\n\t\t\t\tcase \"nn\":\r\n\t\t\t\tcase \"nnn\":\r\n\t\t\t\t\tvalue = $utils.padString(milliseconds, info.parts[i].length, \"0\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"z\":\r\n\t\t\t\t\tvalue = $utils.getTimeZone(date, false, false, this.utc);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"zz\":\r\n\t\t\t\t\tvalue = $utils.getTimeZone(date, true, false, this.utc);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"zzz\":\r\n\t\t\t\t\tvalue = $utils.getTimeZone(date, false, true, this.utc);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"zzzz\":\r\n\t\t\t\t\tvalue = $utils.getTimeZone(date, true, true, this.utc);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"Z\":\r\n\t\t\t\tcase \"ZZ\":\r\n\t\t\t\t\tlet tz = Math.abs(offset) / 60;\r\n\t\t\t\t\tlet tzh = Math.floor(tz);\r\n\t\t\t\t\tlet tzm = tz * 60 - tzh * 60;\r\n\r\n\t\t\t\t\tif (this.utc) {\r\n\t\t\t\t\t\ttzh = 0;\r\n\t\t\t\t\t\ttzm = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (info.parts[i] == \"Z\") {\r\n\t\t\t\t\t\tvalue = \"GMT\";\r\n\t\t\t\t\t\tvalue += offset > 0 ? \"-\" : \"+\";\r\n\t\t\t\t\t\tvalue += $utils.padString(tzh, 2) + \":\" + $utils.padString(tzm, 2);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue = offset > 0 ? \"-\" : \"+\";\r\n\t\t\t\t\t\tvalue += $utils.padString(tzh, 2) + $utils.padString(tzm, 2);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"i\":\r\n\t\t\t\t\tvalue = date.toISOString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"I\":\r\n\t\t\t\t\tvalue = date.toUTCString();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\t\t\tres = res.replace($strings.PLACEHOLDER, value);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses any input value into Date object.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/#Parsing_Dates} Tutorial on date/time parsing\r\n\t * @param source  Source value\r\n\t * @param format  Source format\r\n\t * @return Date object\r\n\t */\r\n\tpublic parse(source: any, format?: string): Date {\r\n\r\n\t\t// Format set?\r\n\t\tif (!$type.hasValue(format)) {\r\n\t\t\tformat = this.inputDateFormat;\r\n\t\t}\r\n\r\n\t\t// Is it already a Date\r\n\t\tif (source instanceof Date) {\r\n\t\t\treturn source;\r\n\t\t}\r\n\r\n\t\t// Is it a numeric timestamp\r\n\t\tif (typeof source === \"number\") {\r\n\t\t\treturn new Date(source);\r\n\t\t}\r\n\r\n\t\t// No? Let's check if it's string, and try converting to it if nec\r\n\t\tif (typeof source !== \"string\") {\r\n\t\t\tsource = source.toString();\r\n\t\t}\r\n\r\n\t\t// no language?\r\n\t\tif (!this.language) {\r\n\t\t\tif (this.sprite) {\r\n\t\t\t\tthis.language = this.sprite.language;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.language = new Language;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Init return value\r\n\t\tlet res: Date;\r\n\r\n\t\t// Init RegEx for parsing\r\n\t\tlet reg: string = \"\";\r\n\r\n\t\t// Clean format\r\n\t\tformat = $utils.cleanFormat(format);\r\n\r\n\t\t// Clip format to length of the source string\r\n\t\tformat = format.substr(0, source.length);\r\n\r\n\t\t// Parse format\r\n\t\tlet info = this.parseFormat(format);\r\n\r\n\t\t// Init parsed items holder\r\n\t\tlet parsedIndexes = {\r\n\t\t\t\"year\": -1,\r\n\t\t\t\"year3\": -1,\r\n\t\t\t\"year2\": -1,\r\n\t\t\t\"year1\": -1,\r\n\t\t\t\"month\": -1,\r\n\t\t\t\"monthShort\": -1,\r\n\t\t\t\"monthLong\": -1,\r\n\t\t\t\"weekdayShort\": -1,\r\n\t\t\t\"weekdayLong\": -1,\r\n\t\t\t\"day\": -1,\r\n\t\t\t\"yearDay\": -1,\r\n\t\t\t\"week\": -1,\r\n\t\t\t\"hourBase0\": -1,\r\n\t\t\t\"hour12Base0\": -1,\r\n\t\t\t\"hourBase1\": -1,\r\n\t\t\t\"hour12Base1\": -1,\r\n\t\t\t\"minute\": -1,\r\n\t\t\t\"second\": -1,\r\n\t\t\t\"millisecond\": -1,\r\n\t\t\t\"millisecondDigits\": -1,\r\n\t\t\t\"am\": -1,\r\n\t\t\t\"zone\": -1,\r\n\t\t\t\"timestamp\": -1,\r\n\t\t\t\"iso\": -1\r\n\t\t};\r\n\r\n\t\t// Init values\r\n\t\tlet resValues = {\r\n\t\t\t\"year\": 1970,\r\n\t\t\t\"month\": 0,\r\n\t\t\t\"day\": 1,\r\n\t\t\t\"hour\": 0,\r\n\t\t\t\"minute\": 0,\r\n\t\t\t\"second\": 0,\r\n\t\t\t\"millisecond\": 0,\r\n\t\t\t\"timestamp\": <any>null,\r\n\t\t\t\"offset\": 0,\r\n\t\t\t\"utc\": this.utc\r\n\t\t}\r\n\r\n\t\t// Index adjuster\r\n\t\tlet indexAdjust: number = 0,\r\n\t\t\tindex: number = 0;\r\n\r\n\t\t// Iterate through all of the parts\r\n\t\tfor (let i: number = 0; i < info.parts.length; i++) {\r\n\r\n\t\t\t// Set current match index\r\n\t\t\tindex = i + indexAdjust + 1;\r\n\r\n\t\t\tswitch (info.parts[i]) {\r\n\r\n\t\t\t\tcase \"yyyy\":\r\n\t\t\t\tcase \"YYYY\":\r\n\t\t\t\t\treg += \"([0-9]{4})\";\r\n\t\t\t\t\tparsedIndexes.year = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"yyy\":\r\n\t\t\t\tcase \"YYY\":\r\n\t\t\t\t\treg += \"([0-9]{3})\";\r\n\t\t\t\t\tparsedIndexes.year3 = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"yy\":\r\n\t\t\t\tcase \"YY\":\r\n\t\t\t\t\treg += \"([0-9]{2})\";\r\n\t\t\t\t\tparsedIndexes.year2 = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"y\":\r\n\t\t\t\tcase \"Y\":\r\n\t\t\t\t\treg += \"([0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.year1 = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"MMMM\":\r\n\t\t\t\t\treg += \"(\" + this.getStringList(this.months).join(\"|\") + \")\";\r\n\t\t\t\t\tparsedIndexes.monthLong = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"MMM\":\r\n\t\t\t\t\treg += \"(\" + this.getStringList(this.monthsShort).join(\"|\") + \")\";\r\n\t\t\t\t\tparsedIndexes.monthShort = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"MM\":\r\n\t\t\t\tcase \"M\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.month = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ww\":\r\n\t\t\t\tcase \"w\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.week = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"dd\":\r\n\t\t\t\tcase \"d\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.day = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"DDD\":\r\n\t\t\t\tcase \"DD\":\r\n\t\t\t\tcase \"D\":\r\n\t\t\t\t\treg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.yearDay = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\r\n\t\t\t\tcase \"dddd\":\r\n\t\t\t\t\treg += \"(\" + this.getStringList(this.weekdays).join(\"|\") + \")\";\r\n\t\t\t\t\tparsedIndexes.weekdayLong = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ddd\":\r\n\t\t\t\t\treg += \"(\" + this.getStringList(this.weekdaysShort).join(\"|\") + \")\";\r\n\t\t\t\t\tparsedIndexes.weekdayShort = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"aaa\":\r\n\t\t\t\tcase \"aa\":\r\n\t\t\t\tcase \"a\":\r\n\t\t\t\t\t// TODO: fix (escape regex)\r\n\t\t\t\t\treg += \"(\" + this.getStringList([\"AM\", \"PM\", \"A\\.M\\.\", \"P\\.M\\.\", \"A\", \"P\"]).join(\"|\") + \")\";\r\n\t\t\t\t\tparsedIndexes.am = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"hh\":\r\n\t\t\t\tcase \"h\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.hour12Base1 = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"HH\":\r\n\t\t\t\tcase \"H\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.hourBase0 = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"KK\":\r\n\t\t\t\tcase \"K\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.hour12Base0 = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"kk\":\r\n\t\t\t\tcase \"k\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.hourBase1 = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"mm\":\r\n\t\t\t\tcase \"m\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.minute = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ss\":\r\n\t\t\t\tcase \"s\":\r\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.second = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"SSS\":\r\n\t\t\t\tcase \"SS\":\r\n\t\t\t\tcase \"S\":\r\n\t\t\t\t\treg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.millisecond = index;\r\n\t\t\t\t\tparsedIndexes.millisecondDigits = info.parts[i].length;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"nnn\":\r\n\t\t\t\tcase \"nn\":\r\n\t\t\t\tcase \"n\":\r\n\t\t\t\t\treg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\r\n\t\t\t\t\tparsedIndexes.millisecond = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"x\":\r\n\t\t\t\t\treg += \"([0-9]{1,})\";\r\n\t\t\t\t\tparsedIndexes.timestamp = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"Z\":\r\n\t\t\t\t\treg += \"GMT([-+]+[0-9]{2}:[0-9]{2})\";\r\n\t\t\t\t\tparsedIndexes.zone = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ZZ\":\r\n\t\t\t\t\treg += \"([\\\\-+]+[0-9]{2}[0-9]{2})\";\r\n\t\t\t\t\tparsedIndexes.zone = index;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"i\":\r\n\t\t\t\t\treg += \"([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\\.?([0-9]{0,3})([zZ]|[+\\-][0-9]{2}:?[0-9]{2}|$)\";\r\n\t\t\t\t\tparsedIndexes.iso = index;\r\n\t\t\t\t\tindexAdjust += 7;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"G\":\r\n\t\t\t\tcase \"YYYY\":\r\n\t\t\t\tcase \"YYY\":\r\n\t\t\t\tcase \"YY\":\r\n\t\t\t\tcase \"Y\":\r\n\t\t\t\tcase \"MMMMM\":\r\n\t\t\t\tcase \"W\":\r\n\t\t\t\tcase \"EEEEE\":\r\n\t\t\t\tcase \"EEEE\":\r\n\t\t\t\tcase \"EEE\":\r\n\t\t\t\tcase \"EE\":\r\n\t\t\t\tcase \"E\":\r\n\t\t\t\tcase \"eeeee\":\r\n\t\t\t\tcase \"eeee\":\r\n\t\t\t\tcase \"eee\":\r\n\t\t\t\tcase \"ee\":\r\n\t\t\t\tcase \"e\":\r\n\t\t\t\tcase \"zzzz\":\r\n\t\t\t\tcase \"zzz\":\r\n\t\t\t\tcase \"zz\":\r\n\t\t\t\tcase \"z\":\r\n\t\t\t\tcase \"t\":\r\n\t\t\t\t\t// Ignore\r\n\t\t\t\t\tindexAdjust--;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treg += \"[^0-9]*\";\r\n\t\t}\r\n\r\n\t\t// Try matching\r\n\t\tlet regex = new RegExp(reg);\r\n\t\tlet matches: RegExpMatchArray = source.match(regex);\r\n\r\n\t\tif (matches) {\r\n\t\t\t// Populate the date object\r\n\r\n\t\t\t// Full year\r\n\t\t\tif (parsedIndexes.year > -1) {\r\n\t\t\t\tresValues.year = parseInt(matches[parsedIndexes.year]);\r\n\t\t\t}\r\n\r\n\t\t\t// 3-digit year\r\n\t\t\tif (parsedIndexes.year3 > -1) {\r\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.year3]);\r\n\t\t\t\tval += 1000;\r\n\t\t\t\tresValues.year = val;\r\n\t\t\t}\r\n\r\n\t\t\t// 2-digit year\r\n\t\t\tif (parsedIndexes.year2 > -1) {\r\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.year2]);\r\n\t\t\t\tif (val > 50) {\r\n\t\t\t\t\tval += 1000;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tval += 2000;\r\n\t\t\t\t}\r\n\t\t\t\tresValues.year = val;\r\n\t\t\t}\r\n\r\n\t\t\t// 1-digit year\r\n\t\t\tif (parsedIndexes.year1 > -1) {\r\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.year1]);\r\n\t\t\t\tval = Math.floor((new Date().getFullYear()) / 10) * 10 + val;\r\n\t\t\t\tresValues.year = val;\r\n\t\t\t}\r\n\r\n\t\t\t// Full month\r\n\t\t\tif (parsedIndexes.monthLong > -1) {\r\n\t\t\t\tresValues.month = this.resolveMonth(<any>matches[parsedIndexes.monthLong]);\r\n\t\t\t}\r\n\r\n\t\t\t// Short month\r\n\t\t\tif (parsedIndexes.monthShort > -1) {\r\n\t\t\t\tresValues.month = this.resolveShortMonth(<any>matches[parsedIndexes.monthShort]);\r\n\t\t\t}\r\n\r\n\t\t\t// Numeric month\r\n\t\t\tif (parsedIndexes.month > -1) {\r\n\t\t\t\tresValues.month = parseInt(matches[parsedIndexes.month]) - 1;\r\n\t\t\t}\r\n\r\n\t\t\t// Weekday\r\n\t\t\t// @todo\r\n\r\n\t\t\t// Week\r\n\t\t\tif ((parsedIndexes.week > -1) && (parsedIndexes.day === -1)) {\r\n\t\t\t\t// We parse weeks ONLY if day is not explicitly set\r\n\t\t\t\t// TODO: this needs work\r\n\t\t\t\t// (but maybe later - I can hardly imagine anyone passing their dates in weeks)\r\n\t\t\t\tresValues.month = 0;\r\n\t\t\t\tresValues.day = $utils.getDayFromWeek(\r\n\t\t\t\t\tparseInt(matches[parsedIndexes.week]),\r\n\t\t\t\t\tresValues.year,\r\n\t\t\t\t\t1,\r\n\t\t\t\t\tthis.utc\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// Day\r\n\t\t\tif (parsedIndexes.day > -1) {\r\n\t\t\t\tresValues.day = parseInt(matches[parsedIndexes.day]);\r\n\t\t\t}\r\n\r\n\t\t\t// Year day\r\n\t\t\tif (parsedIndexes.yearDay > -1) {\r\n\t\t\t\tresValues.month = 0;\r\n\t\t\t\tresValues.day = parseInt(matches[parsedIndexes.yearDay]);\r\n\t\t\t}\r\n\r\n\t\t\t// 24 Hour (0-23)\r\n\t\t\tif (parsedIndexes.hourBase0 > -1) {\r\n\t\t\t\tresValues.hour = parseInt(matches[parsedIndexes.hourBase0]);\r\n\t\t\t}\r\n\r\n\t\t\t// 24 Hour (1-24)\r\n\t\t\tif (parsedIndexes.hourBase1 > -1) {\r\n\t\t\t\tresValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;\r\n\t\t\t}\r\n\r\n\t\t\t// 12 Hour (0-11)\r\n\t\t\tif (parsedIndexes.hour12Base0 > -1) {\r\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.hour12Base0]);\r\n\t\t\t\tif (val == 11) {\r\n\t\t\t\t\tval = 0;\r\n\t\t\t\t}\r\n\t\t\t\tif ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {\r\n\t\t\t\t\tval += 12;\r\n\t\t\t\t}\r\n\t\t\t\tresValues.hour = val;\r\n\t\t\t}\r\n\r\n\t\t\t// 12 Hour (1-12)\r\n\t\t\tif (parsedIndexes.hour12Base1 > -1) {\r\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.hour12Base1]);\r\n\t\t\t\tif (val == 12) {\r\n\t\t\t\t\tval = 0;\r\n\t\t\t\t}\r\n\t\t\t\tif ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {\r\n\t\t\t\t\tval += 12;\r\n\t\t\t\t}\r\n\t\t\t\tresValues.hour = val;\r\n\t\t\t}\r\n\r\n\t\t\t// Minute\r\n\t\t\tif (parsedIndexes.minute > -1) {\r\n\t\t\t\tresValues.minute = parseInt(matches[parsedIndexes.minute]);\r\n\t\t\t}\r\n\r\n\t\t\t// Second\r\n\t\t\tif (parsedIndexes.second > -1) {\r\n\t\t\t\tresValues.second = parseInt(matches[parsedIndexes.second]);\r\n\t\t\t}\r\n\r\n\t\t\t// Millisecond\r\n\t\t\tif (parsedIndexes.millisecond > -1) {\r\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.millisecond]);\r\n\t\t\t\tif (parsedIndexes.millisecondDigits == 2) {\r\n\t\t\t\t\tval *= 10;\r\n\t\t\t\t}\r\n\t\t\t\telse if (parsedIndexes.millisecondDigits == 1) {\r\n\t\t\t\t\tval *= 100;\r\n\t\t\t\t}\r\n\t\t\t\tresValues.millisecond = val;\r\n\t\t\t}\r\n\r\n\t\t\t// Timestamp\r\n\t\t\tif (parsedIndexes.timestamp > -1) {\r\n\t\t\t\tresValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);\r\n\r\n\t\t\t\tconst ts = new Date(resValues.timestamp);\r\n\t\t\t\tresValues.year = ts.getUTCFullYear();\r\n\t\t\t\tresValues.month = ts.getUTCMonth();\r\n\t\t\t\tresValues.day = ts.getUTCDate();\r\n\t\t\t\tresValues.hour = ts.getUTCHours();\r\n\t\t\t\tresValues.minute = ts.getUTCMinutes();\r\n\t\t\t\tresValues.second = ts.getUTCSeconds();\r\n\t\t\t\tresValues.millisecond = ts.getUTCMilliseconds();\r\n\t\t\t}\r\n\r\n\t\t\t// Adjust time zone\r\n\t\t\tif (parsedIndexes.zone > -1) {\r\n\t\t\t\tresValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.zone]);\r\n\t\t\t}\r\n\r\n\t\t\t// ISO\r\n\t\t\tif (parsedIndexes.iso > -1) {\r\n\r\n\t\t\t\tresValues.year = $type.toNumber(matches[parsedIndexes.iso + 0]);\r\n\t\t\t\tresValues.month = $type.toNumber(matches[parsedIndexes.iso + 1]) - 1;\r\n\t\t\t\tresValues.day = $type.toNumber(matches[parsedIndexes.iso + 2]);\r\n\t\t\t\tresValues.hour = $type.toNumber(matches[parsedIndexes.iso + 3]);\r\n\t\t\t\tresValues.minute = $type.toNumber(matches[parsedIndexes.iso + 4]);\r\n\t\t\t\tresValues.second = $type.toNumber(matches[parsedIndexes.iso + 5]);\r\n\t\t\t\tresValues.millisecond = $type.toNumber(matches[parsedIndexes.iso + 6]);\r\n\r\n\t\t\t\tif (matches[parsedIndexes.iso + 7] == \"Z\" || matches[parsedIndexes.iso + 7] == \"z\") {\r\n\t\t\t\t\tresValues.utc = true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (matches[parsedIndexes.iso + 7] != \"\") {\r\n\t\t\t\t\tresValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.iso + 7]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Create Date object\r\n\t\t\tif (resValues.utc) {\r\n\t\t\t\tres = new Date(Date.UTC(\r\n\t\t\t\t\tresValues.year,\r\n\t\t\t\t\tresValues.month,\r\n\t\t\t\t\tresValues.day,\r\n\t\t\t\t\tresValues.hour,\r\n\t\t\t\t\tresValues.minute,\r\n\t\t\t\t\tresValues.second,\r\n\t\t\t\t\tresValues.millisecond\r\n\t\t\t\t));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tres = new Date(\r\n\t\t\t\t\tresValues.year,\r\n\t\t\t\t\tresValues.month,\r\n\t\t\t\t\tresValues.day,\r\n\t\t\t\t\tresValues.hour,\r\n\t\t\t\t\tresValues.minute + resValues.offset,\r\n\t\t\t\t\tresValues.second,\r\n\t\t\t\t\tresValues.millisecond\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Didn't match anything\r\n\t\t\t// Let's try dropping it into Date constructor and hope for the best\r\n\t\t\tres = new Date(source);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprotected resolveTimezoneOffset(date: Date, zone: string): number {\r\n\t\tlet value = zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/);\r\n\t\tif (value) {\r\n\t\t\tlet match = $type.getValue(zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/));\r\n\t\t\tlet dir = match[1];\r\n\t\t\tlet hour = match[2];\r\n\t\t\tlet minute = match[3];\r\n\t\t\tlet offset = parseInt(hour) * 60 + parseInt(minute);\r\n\r\n\t\t\t// Adjust offset\r\n\t\t\t// Making it negative does not seem to make sense, but it's right\r\n\t\t\t// because of how JavaScript calculates GMT offsets\r\n\t\t\tif (dir == \"+\") {\r\n\t\t\t\toffset *= -1;\r\n\t\t\t}\r\n\r\n\t\t\t// Check the difference in offset\r\n\t\t\tlet originalOffset = (date || new Date()).getTimezoneOffset();\r\n\t\t\tlet diff = offset - originalOffset;\r\n\t\t\treturn diff;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Resolves month name (i.e. \"December\") into a month number (11).\r\n\t *\r\n\t * @param value  Month name\r\n\t * @return Month number\r\n\t */\r\n\tprotected resolveMonth(value: MonthNames): number {\r\n\r\n\t\t// Let's try English first\r\n\t\tlet month: number = this.months.indexOf(value);\r\n\t\tif (month > -1) {\r\n\t\t\treturn month;\r\n\t\t}\r\n\r\n\t\t// Try the translation\r\n\t\tif (this.language && !this.language.isDefault()) {\r\n\t\t\tmonth = this.language.translateAll(this.months).indexOf(value);\r\n\t\t\tif (month > -1) {\r\n\t\t\t\treturn month\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Resolves short month name (i.e. \"Dec\") into a month number.\r\n\t *\r\n\t * @param value  Short month name\r\n\t * @return Month number\r\n\t */\r\n\tprotected resolveShortMonth(value: ShortMonthNames): number {\r\n\r\n\t\t// Let's try English first\r\n\t\tlet month: number = this.monthsShort.indexOf(value);\r\n\t\tif (month > -1) {\r\n\t\t\treturn month;\r\n\t\t}\r\n\r\n\t\t// Maybe long month (workaround for May)\r\n\t\tmonth = this.months.indexOf(<any>value);\r\n\t\tif (month > -1) {\r\n\t\t\treturn month;\r\n\t\t}\r\n\r\n\t\t// Try the translation\r\n\t\tif (this.language && !this.language.isDefault()) {\r\n\t\t\tmonth = this.language.translateAll(this.monthsShort).indexOf(value);\r\n\t\t\tif (month > -1) {\r\n\t\t\t\treturn month\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if passed in string represents AM/PM notation in many of its\r\n\t * versions.\r\n\t *\r\n\t * @param value  Source string\r\n\t * @return Is it AM/PM?\r\n\t */\r\n\tprotected isAm(value: string): boolean {\r\n\t\tlet list = this.getStringList([\"AM\", \"A.M.\", \"A\"]);\r\n\t\treturn list.indexOf(value.toUpperCase()) > -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates related [[Sprite]] causing it to redraw.\r\n\t */\r\n\tprotected invalidateSprite(): void {\r\n\t\tif (this.sprite) {\r\n\t\t\tthis.sprite.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Translates list of strings.\r\n\t *\r\n\t * @param list  Source strings\r\n\t * @return Translated strings\r\n\t */\r\n\tprotected getStringList(list: Array<keyof ILocaleProperties>): Array<string> {\r\n\t\tlet res: string[] = [];\r\n\t\tfor (let i: number = 0; i < list.length; i++) {\r\n\t\t\t// translate?\r\n\t\t\tif (this.language) {\r\n\t\t\t\tres.push($utils.escapeForRgex(this.language.translate(list[i])));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tres.push($utils.escapeForRgex(list[i]));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Date format to use.\r\n\t *\r\n\t * If format is not supplied in-line in the string, this setting will be\r\n\t * used.\r\n\t *\r\n\t * @default \"yyyy-MM-dd\"\r\n\t * @param value Date format\r\n\t */\r\n\tpublic set dateFormat(value: string | Intl.DateTimeFormatOptions) {\r\n\t\tthis._dateFormat = value;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get dateFormat(): string | Intl.DateTimeFormatOptions {\r\n\t\treturn this._dateFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Date format to use when parsing dates.\r\n\t *\r\n\t * @default \"yyyy-MM-dd\"\r\n\t * @param value Date format\r\n\t */\r\n\tpublic set inputDateFormat(value: string) {\r\n\t\tthis._inputDateFormat = value;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get inputDateFormat(): string {\r\n\t\treturn this._inputDateFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Locales if you are using date formats in `Intl.DateTimeFormatOptions` syntax.\r\n\t *\r\n\t * @param value Locales\r\n\t */\r\n\tpublic set intlLocales(value: string) {\r\n\t\tthis._intlLocales = value;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get intlLocales(): string {\r\n\t\treturn this._intlLocales;\r\n\t}\r\n\r\n\t/**\r\n\t * Should formatter use UTC functions?\r\n\t *\r\n\t * If UTC is used, all date/time values will be independent on client's\r\n\t * time zone.\r\n\t *\r\n\t * @param value Use UTC?\r\n\t */\r\n\tpublic set utc(value: boolean) {\r\n\t\tthis._utc = value;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use UTC?\r\n\t */\r\n\tpublic get utc(): boolean {\r\n\t\treturn this._utc;\r\n\t}\r\n\r\n\t/**\r\n\t * If set, will apply specific offset in minutes before formatting the date\r\n\t * text.\r\n\t *\r\n\t * The value is a number of minutes from target time zone to UTC.\r\n\t *\r\n\t * E.g. `300` will recalculate Dates in \"GMT-5\" time zone.\r\n\t *\r\n\t * @param  value  Offset (minutes)\r\n\t */\r\n\tpublic set timezoneOffset(value: $type.Optional<number>) {\r\n\t\tif (this._timezoneOffset != value) {\r\n\t\t\tthis._timezoneOffset = value;\r\n\t\t\tthis.invalidateSprite();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Offset (minutes)\r\n\t */\r\n\tpublic get timezoneOffset(): $type.Optional<number> {\r\n\t\treturn this._timezoneOffset;\r\n\t}\r\n\r\n\t/**\r\n\t * If set, will format date/time in specific time zone.\r\n\t *\r\n\t * The value should be named time zone, e.g.:\r\n\t * `\"America/Vancouver\"`, `\"Australia/Sydney\"`, `\"UTC\"`.\r\n\t *\r\n\t * @since 4.10.1\r\n\t * @param  value  Timezone\r\n\t */\r\n\tpublic set timezone(value: $type.Optional<string>) {\r\n\t\tif (this._timezone != value) {\r\n\t\t\tthis._timezone = value;\r\n\t\t\tthis.timezoneMinutes = $time.getTimezoneMinutes(value);\r\n\t\t\tthis.invalidateSprite();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Timezone\r\n\t */\r\n\tpublic get timezone(): $type.Optional<string> {\r\n\t\treturn this._timezone;\r\n\t}\r\n\r\n\t/**\r\n\t * First day of the week:\r\n\t *\r\n\t * * 0 - Sunday\r\n\t * * 1 - Monday\r\n\t * * 2 - Tuesday\r\n\t *\r\n\t * Etc.\r\n\t *\r\n\t * @param value First day of week\r\n\t */\r\n\tpublic set firstDayOfWeek(value: number) {\r\n\t\tthis._firstDayOfWeek = value;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return First day of week\r\n\t */\r\n\tpublic get firstDayOfWeek(): number {\r\n\t\treturn this._firstDayOfWeek;\r\n\t}\r\n\r\n\t/**\r\n\t * Output format for the formatted date.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Format\r\n\t */\r\n\tpublic set outputFormat(value: string) {\r\n\t\tthis._outputFormat = value.toLowerCase();\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Format\r\n\t */\r\n\tpublic get outputFormat(): string {\r\n\t\treturn this._outputFormat;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateFormatter\"] = DateFormatter;\r\n"]},"metadata":{},"sourceType":"module"}