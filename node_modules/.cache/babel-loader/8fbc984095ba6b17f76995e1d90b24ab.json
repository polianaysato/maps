{"ast":null,"code":"/**\r\n * Functionality related simulating of dragging of elements using keyboard.\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { getInteraction } from \"./Interaction\";\nimport { system } from \"../System\";\nimport * as $array from \"../utils/Array\";\n/**\r\n * [[InteractionKeyboardObject]] is used to simulate dragging of the `draggable`\r\n * element using keyboard arrows.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nvar InteractionKeyboardObject =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param io An InteractionObject\r\n   */\n  function InteractionKeyboardObject(io, ev) {\n    /**\r\n     * Indicates if this object has already been deleted. Any\r\n     * destruction/disposal code should take this into account when deciding\r\n     * wheter to run potentially costly disposal operations if they already have\r\n     * been run.\r\n     */\n    this._disposed = false;\n    /**\r\n     * Indicates direction of current horizontal movement.\r\n     *\r\n     * 0 - not moving horizontally\r\n     * 1 - moving right\r\n     * -1 - moving left\r\n     */\n\n    this.directionX = 0;\n    /**\r\n     * Indicates direction of current vertical movement.\r\n     *\r\n     * 0 - not moving vertically\r\n     * 1 - moving down\r\n     * -1 - moving up\r\n     */\n\n    this.directionY = 0;\n    this.interaction = io;\n    this.keyboardEvent = ev;\n    this._startedOn = new Date().getTime();\n    getInteraction().processDragStart(io);\n    system.animations.push(this);\n    this.update();\n  }\n  /**\r\n   * It's an update method which is called by the system if\r\n   * [[InteractionObject]] is used as animation.\r\n   *\r\n   * This will update coordinates of the element based on the movement\r\n   * directions.\r\n   */\n\n\n  InteractionKeyboardObject.prototype.update = function () {\n    // Init and get settings\n    var io = this.interaction;\n    var speed = getInteraction().getKeyboardOption(io, \"speed\"),\n        accelleration = getInteraction().getKeyboardOption(io, \"accelleration\"),\n        accellerationDelay = getInteraction().getKeyboardOption(io, \"accellerationDelay\"),\n        shift = {\n      x: 0,\n      y: 0\n    }; // If SHIFT key is pressed we slash speed by half and disable accelleration\n\n    if (this.keyboardEvent.shiftKey) {\n      speed *= 0.5;\n      accelleration = 1;\n    } // If CTRL is pressed we increase speed by x2\n    else if (this.keyboardEvent.ctrlKey) {\n      speed *= 2;\n    } // Get elapsed time\n\n\n    var ms = new Date().getTime() - this._startedOn;\n\n    var accelleratedMs = ms - accellerationDelay; // Add accellerated movement\n\n    if (accelleration > 0 && accelleratedMs > 0) {\n      var accellerationFactor = ms / accellerationDelay;\n      ms = accellerationDelay;\n      shift.x += this.directionX * (speed * accelleration * accellerationFactor * accelleratedMs);\n      shift.y += this.directionY * (speed * accelleration * accellerationFactor * accelleratedMs);\n    } // Calculate position\n\n\n    shift.x += this.directionX * (speed * ms);\n    shift.y += this.directionY * (speed * ms); // Simulate move on Interaction\n\n    getInteraction().handleTransformMove(io, shift, {\n      x: 0,\n      y: 0\n    }, this.keyboardEvent, true, false);\n  };\n  /**\r\n   * Returns if this object has been already been disposed.\r\n   *\r\n   * @return Is disposed?\r\n   */\n\n\n  InteractionKeyboardObject.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Disposes this object. Removes from system animations.\r\n   */\n\n\n  InteractionKeyboardObject.prototype.dispose = function () {\n    if (!this._disposed) {\n      getInteraction().processDragStop(this.interaction);\n      $array.remove(system.animations, this);\n    }\n  };\n\n  return InteractionKeyboardObject;\n}();\n\nexport { InteractionKeyboardObject };","map":{"version":3,"mappings":"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","names":["getInteraction","system","$array","io","ev","interaction","keyboardEvent","_startedOn","Date","getTime","processDragStart","animations","push","update","InteractionKeyboardObject","speed","getKeyboardOption","accelleration","accellerationDelay","shift","x","y","shiftKey","ctrlKey","ms","accelleratedMs","accellerationFactor","directionX","directionY","handleTransformMove","_disposed","processDragStop","remove"],"sourceRoot":"","sources":["../../../../../src/.internal/core/interaction/InteractionKeyboardObject.ts"],"sourcesContent":["/**\r\n * Functionality related simulating of dragging of elements using keyboard.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { getInteraction } from \"./Interaction\";\r\nimport { InteractionObject } from \"./InteractionObject\";\r\nimport { IAnimationObject } from \"../utils/Animation\";\r\nimport { system } from \"../System\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IDisposer } from \"../utils/Disposer\";\r\nimport * as $array from \"../utils/Array\";\r\n\r\n/**\r\n * [[InteractionKeyboardObject]] is used to simulate dragging of the `draggable`\r\n * element using keyboard arrows.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class InteractionKeyboardObject implements IAnimationObject, IDisposer {\r\n\r\n\t/**\r\n\t * A [[InteractionObject]] representation of an element we're performing\r\n\t * animation on.\r\n\t */\r\n\tpublic interaction: InteractionObject;\r\n\r\n\t/**\r\n\t * Indicates if this object has already been deleted. Any\r\n\t * destruction/disposal code should take this into account when deciding\r\n\t * wheter to run potentially costly disposal operations if they already have\r\n\t * been run.\r\n\t */\r\n\tprotected _disposed: boolean = false;\r\n\r\n\t/**\r\n\t * Timestamp on when animation started.\r\n\t */\r\n\tprivate _startedOn: number;\r\n\r\n\t/**\r\n\t * Indicates direction of current horizontal movement.\r\n\t *\r\n\t * 0 - not moving horizontally\r\n\t * 1 - moving right\r\n\t * -1 - moving left\r\n\t */\r\n\tpublic directionX: 0 | 1 | -1 = 0;\r\n\r\n\t/**\r\n\t * Indicates direction of current vertical movement.\r\n\t *\r\n\t * 0 - not moving vertically\r\n\t * 1 - moving down\r\n\t * -1 - moving up\r\n\t */\r\n\tpublic directionY: 0 | 1 | -1 = 0;\r\n\r\n\t/**\r\n\t * Holds reference to original keyboard event.\r\n\t */\r\n\tpublic keyboardEvent: KeyboardEvent;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param io An InteractionObject\r\n\t */\r\n\tconstructor(io: InteractionObject, ev: KeyboardEvent) {\r\n\t\tthis.interaction = io;\r\n\t\tthis.keyboardEvent = ev;\r\n\t\tthis._startedOn = new Date().getTime();\r\n\t\tgetInteraction().processDragStart(io);\r\n\t\tsystem.animations.push(this);\r\n\t\tthis.update();\r\n\t}\r\n\r\n\t/**\r\n\t * It's an update method which is called by the system if\r\n\t * [[InteractionObject]] is used as animation.\r\n\t *\r\n\t * This will update coordinates of the element based on the movement\r\n\t * directions.\r\n\t */\r\n\tpublic update(): void {\r\n\r\n\t\t// Init and get settings\r\n\t\tlet io = this.interaction;\r\n\t\tlet speed = getInteraction().getKeyboardOption(io, \"speed\"),\r\n\t\t\taccelleration = getInteraction().getKeyboardOption(io, \"accelleration\"),\r\n\t\t\taccellerationDelay = getInteraction().getKeyboardOption(io, \"accellerationDelay\"),\r\n\t\t\tshift: IPoint = {\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0\r\n\t\t\t};\r\n\r\n\t\t// If SHIFT key is pressed we slash speed by half and disable accelleration\r\n\t\tif (this.keyboardEvent.shiftKey) {\r\n\t\t\tspeed *= 0.5;\r\n\t\t\taccelleration = 1;\r\n\t\t}\r\n\t\t// If CTRL is pressed we increase speed by x2\r\n\t\telse if (this.keyboardEvent.ctrlKey) {\r\n\t\t\tspeed *= 2;\r\n\t\t}\r\n\r\n\t\t// Get elapsed time\r\n\t\tlet ms = new Date().getTime() - this._startedOn;\r\n\t\tlet accelleratedMs = ms - accellerationDelay;\r\n\r\n\t\t// Add accellerated movement\r\n\t\tif ((accelleration > 0) && (accelleratedMs > 0)) {\r\n\t\t\tlet accellerationFactor = ms / accellerationDelay;\r\n\t\t\tms = accellerationDelay;\r\n\t\t\tshift.x += this.directionX * (speed * accelleration * accellerationFactor * accelleratedMs);\r\n\t\t\tshift.y += this.directionY * (speed * accelleration * accellerationFactor * accelleratedMs);\r\n\t\t}\r\n\r\n\t\t// Calculate position\r\n\t\tshift.x += this.directionX * (speed * ms);\r\n\t\tshift.y += this.directionY * (speed * ms);\r\n\r\n\t\t// Simulate move on Interaction\r\n\t\tgetInteraction().handleTransformMove(io, shift, { x: 0, y: 0 }, this.keyboardEvent, true, false);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this object has been already been disposed.\r\n\t *\r\n\t * @return Is disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes this object. Removes from system animations.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tgetInteraction().processDragStop(this.interaction);\r\n\t\t\t$array.remove(system.animations, this);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}