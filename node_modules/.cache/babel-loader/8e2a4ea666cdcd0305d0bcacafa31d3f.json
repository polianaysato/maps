{"ast":null,"code":"/**\r\n * Defines Pie Chart Series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\nimport { Slice } from \"../../core/elements/Slice\"; //import { Slice3D } from \"../../core/elements/3D/Slice3D\";\n\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\nimport { PieTick } from \"../elements/PieTick\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Percent, percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo: sequenced?\n\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar PieSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(PieSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PieSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PieSeriesDataItem\";\n    _this.values.radiusValue = {};\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(PieSeriesDataItem.prototype, \"radiusValue\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function get() {\n      return this.values.radiusValue.value;\n    },\n\n    /**\r\n     * Slice's radius, if other than default.\r\n     *\r\n     * @param value  Radius\r\n     */\n    set: function set(value) {\n      this.setValue(\"radiusValue\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Hide the data item (and corresponding visual elements).\r\n   *\r\n   * @param duration  Duration (ms)\r\n   * @param delay     Delay hiding (ms)\r\n   * @param toValue   Target value for animation\r\n   * @param fields    Fields to animate while hiding\r\n   */\n\n  PieSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    return _super.prototype.hide.call(this, duration, delay, 0, [\"value\", \"radiusValue\"]);\n  };\n  /**\r\n   * Show hidden data item (and corresponding visual elements).\r\n   *\r\n   * @param duration  Duration (ms)\r\n   * @param delay     Delay hiding (ms)\r\n   * @param fields    Fields to animate while hiding\r\n   */\n\n\n  PieSeriesDataItem.prototype.show = function (duration, delay, fields) {\n    return _super.prototype.show.call(this, duration, delay, [\"value\", \"radiusValue\"]);\n  };\n\n  return PieSeriesDataItem;\n}(PercentSeriesDataItem);\n\nexport { PieSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar PieSeries =\n/** @class */\nfunction (_super) {\n  __extends(PieSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PieSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PieSeries\";\n    _this.alignLabels = true; //this.startAngle = -90;\n    //this.endAngle = 270;\n\n    _this.layout = \"none\";\n    _this.labels.template.radius = percent(5);\n\n    _this.addDisposer(_this.labels.template.events.on(\"enabled\", _this.invalidate, _this, false));\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * creates slice\r\n   */\n\n\n  PieSeries.prototype.createSlice = function () {\n    return new Slice();\n  };\n  /**\r\n   * creates tick\r\n   */\n\n\n  PieSeries.prototype.createTick = function () {\n    return new PieTick();\n  };\n  /**\r\n   * creates label\r\n   */\n\n\n  PieSeries.prototype.createLabel = function () {\n    return new AxisLabelCircular();\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  PieSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Pie Slice Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  PieSeries.prototype.createDataItem = function () {\n    return new PieSeriesDataItem();\n  };\n  /**\r\n   * Inits slice.\r\n   *\r\n   * @param slice to init\r\n   */\n\n\n  PieSeries.prototype.initSlice = function (slice) {\n    slice.isMeasured = false;\n    slice.defaultState.properties.scale = 1;\n    slice.observe(\"scale\", this.handleSliceScale, this);\n    slice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\n    slice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\n    var hoverState = slice.states.create(\"hover\");\n    hoverState.properties.scale = 1.05;\n    var defaultState = slice.defaultState;\n    defaultState.properties.shiftRadius = 0;\n    slice.togglable = true;\n    slice.events.on(\"toggled\", function (event) {\n      event.target.hideTooltip(); // The following takes care of removing hover on subsequent click of\n      // a slice\n\n      if (event.target.interactions.lastHitPointer && event.target.interactions.lastHitPointer.touch && !event.target.isActive) {\n        event.target.isHover = false;\n      }\n    });\n    var activeState = slice.states.create(\"active\");\n    activeState.properties.shiftRadius = 0.10;\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PieSeries.prototype.validate = function () {\n    this._leftItems = [];\n    this._rightItems = [];\n    this._currentStartAngle = this.startAngle;\n    this._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\n    this._maxRadiusPercent = 0;\n\n    for (var i = this.startIndex; i < this.endIndex; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      var radiusValuePercent = dataItem.values.radiusValue.percent;\n\n      if (radiusValuePercent > this._maxRadiusPercent) {\n        this._maxRadiusPercent = radiusValuePercent;\n      }\n    }\n\n    _super.prototype.validate.call(this);\n\n    if (this.alignLabels) {\n      if (this.startAngle > this.endAngle) {\n        this._rightItems.reverse();\n      } else {\n        this._leftItems.reverse();\n      }\n\n      this._rightItems.sort(function (a, b) {\n        var aAngle = (a.slice.middleAngle + 360) % 360;\n        var bAngle = (b.slice.middleAngle + 360) % 360;\n\n        if (aAngle > 270) {\n          aAngle -= 360;\n        }\n\n        if (bAngle > 270) {\n          bAngle -= 360;\n        }\n\n        if (aAngle < bAngle) {\n          return -1;\n        } else if (aAngle > bAngle) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n\n      this._leftItems.sort(function (a, b) {\n        var aAngle = (a.slice.middleAngle + 360) % 360;\n        var bAngle = (b.slice.middleAngle + 360) % 360;\n\n        if (aAngle < bAngle) {\n          return 1;\n        } else if (aAngle > bAngle) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n\n      this.arrangeLabels(this._rightItems);\n      this.arrangeLabels2(this._rightItems);\n      this.arrangeLabels(this._leftItems);\n      this.arrangeLabels2(this._leftItems);\n    }\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  PieSeries.prototype.validateDataElement = function (dataItem) {\n    if (this.pixelRadius > 0) {\n      if (this.ignoreZeroValues && (dataItem.value == 0 || dataItem.value == null)) {\n        dataItem.__disabled = true;\n      } else {\n        dataItem.__disabled = false;\n      } // SLICE\n\n\n      var slice = dataItem.slice;\n      slice.radius = this.pixelRadius;\n\n      if ($type.isNumber(dataItem.radiusValue)) {\n        slice.radius = this.pixelInnerRadius + (this.pixelRadius - this.pixelInnerRadius) * dataItem.values.radiusValue.percent / this._maxRadiusPercent;\n      }\n\n      if (!(slice.innerRadius instanceof Percent)) {\n        slice.innerRadius = this.pixelInnerRadius;\n      }\n\n      slice.startAngle = this._currentStartAngle;\n      slice.arc = Math.abs(dataItem.values.value.percent) * (this.endAngle - this.startAngle) / 100; // LABEL\n\n      if (!this.labels.template.disabled) {\n        var label = dataItem.label;\n        var tick = dataItem.tick;\n        tick.slice = slice;\n        tick.label = label;\n        var normalizedMiddleAngle = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\n\n        var point = void 0;\n\n        if (this.alignLabels) {\n          var labelRadius = label.pixelRadius(slice.radius);\n          var x = tick.length + labelRadius;\n          label.dx = 0;\n          label.dy = 0;\n          label.verticalCenter = \"middle\";\n          var arcRect = this._arcRect; // right half\n\n          if (normalizedMiddleAngle > 270 || normalizedMiddleAngle <= 90) {\n            x += (arcRect.width + arcRect.x) * this.pixelRadius;\n            label.horizontalCenter = \"left\";\n\n            this._rightItems.push(dataItem);\n          } // left half\n          else {\n            x -= arcRect.x * this.pixelRadius;\n            label.horizontalCenter = \"right\";\n\n            this._leftItems.push(dataItem);\n\n            x *= -1;\n          }\n\n          var distance = slice.radius + tick.length + labelRadius;\n          point = {\n            x: x,\n            y: slice.iy * distance\n          };\n          label.moveTo(point);\n        } else {\n          var depth = slice[\"depth\"];\n\n          if (!$type.isNumber(depth)) {\n            depth = 0;\n          }\n\n          label.fixPosition(slice.middleAngle, slice.radius, slice.radiusY, 0, -depth);\n        }\n      }\n\n      this._currentStartAngle += slice.arc; // do this at the end, otherwise bullets won't be positioned properly\n\n      _super.prototype.validateDataElement.call(this, dataItem);\n    }\n  };\n\n  Object.defineProperty(PieSeries.prototype, \"radius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius for the series' slices in pixels or [[Percent]].\r\n     *\r\n     * @param value  Radius\r\n     */\n    set: function set(value) {\n      if (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries.prototype, \"pixelRadius\", {\n    /**\r\n     * @return Radius\r\n     * @ignore\r\n     */\n    get: function get() {\n      return this._pixelRadius;\n    },\n\n    /**\r\n     * @ignore\r\n     */\n    set: function set(value) {\n      if (this._pixelRadius != value) {\n        this._pixelRadius = value;\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * @return Pixel inner radius\r\n     * @ignore\r\n     */\n    get: function get() {\n      return this._pixelInnerRadius;\n    },\n\n    /**\r\n     * @ignore\r\n     */\n    set: function set(value) {\n      if (this._pixelInnerRadius != value) {\n        this._pixelInnerRadius = value;\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries.prototype, \"innerRadius\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius for the series' slices in pixels.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Redo so that users can set it\r\n     * @param value  Radius\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries.prototype, \"startAngle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function get() {\n      var startAngle = this.getPropertyValue(\"startAngle\");\n\n      if ($type.isNumber(startAngle)) {\n        return startAngle;\n      } else {\n        return this._startAngleInternal;\n      }\n    },\n\n    /**\r\n     * Start angle for the series' slices in degrees. (0-360)\r\n     *\r\n     * @param value  Angle\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries.prototype, \"endAngle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function get() {\n      var endAngle = this.getPropertyValue(\"endAngle\");\n\n      if ($type.isNumber(endAngle)) {\n        return endAngle;\n      } else {\n        return this._endAngleInternal;\n      }\n    },\n\n    /**\r\n     * End angle for the series' slices in degrees. (0-360)\r\n     *\r\n     * @param value  Angle\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Positions series bullet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet  Bullet\r\n   */\n\n  PieSeries.prototype.positionBullet = function (bullet) {\n    _super.prototype.positionBullet.call(this, bullet);\n\n    var dataItem = bullet.dataItem;\n    var slice = dataItem.slice;\n    var locationX = bullet.locationX;\n\n    if (!$type.isNumber(locationX)) {\n      locationX = 0.5;\n    }\n\n    var locationY = bullet.locationY;\n\n    if (!$type.isNumber(locationY)) {\n      locationY = 1;\n    }\n\n    var angle = slice.startAngle + slice.arc * locationX;\n    bullet.x = locationY * slice.radius * $math.cos(angle);\n    bullet.y = locationY * slice.radiusY * $math.sin(angle);\n  };\n  /**\r\n   * Repositions bullet and labels when slice moves.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  PieSeries.prototype.handleSliceMove = function (event) {\n    if (!this.alignLabels) {\n      var slice = event.target;\n      var dataItem = slice.dataItem; // moving textelement, as label dx and dy are already employed for aligning\n      //@labeltodo\n\n      if (dataItem) {\n        var label = dataItem.label;\n\n        if (label) {\n          label.dx = label.fdx + slice.dx + slice.pixelX;\n          label.dy = label.fdy + slice.dy + slice.pixelY;\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(PieSeries.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function get() {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n\n      var chart = this.chart;\n\n      if (chart) {\n        return $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\n      }\n\n      return $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PieSeries;\n}(PercentSeries);\n\nexport { PieSeries };\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;","map":{"version":3,"mappings":"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","names":["PercentSeries","PercentSeriesDataItem","Slice","AxisLabelCircular","PieTick","registry","$math","$type","Percent","percent","__extends","_super","_this","className","values","radiusValue","applyTheme","Object","PieSeriesDataItem","value","setValue","duration","delay","toValue","fields","hide","call","show","alignLabels","layout","labels","template","radius","addDisposer","events","on","invalidate","PieSeries","applyInternalDefaults","hasValue","readerTitle","language","translate","slice","isMeasured","defaultState","properties","scale","observe","handleSliceScale","handleSliceMove","tooltipText","hoverState","states","create","shiftRadius","togglable","event","target","hideTooltip","interactions","lastHitPointer","touch","isActive","isHover","activeState","_leftItems","_rightItems","_currentStartAngle","startAngle","_arcRect","getArcRect","endAngle","_maxRadiusPercent","i","startIndex","endIndex","dataItem","dataItems","getIndex","radiusValuePercent","validate","reverse","sort","a","b","aAngle","middleAngle","bAngle","arrangeLabels","arrangeLabels2","pixelRadius","ignoreZeroValues","__disabled","isNumber","pixelInnerRadius","innerRadius","arc","Math","abs","disabled","label","tick","normalizedMiddleAngle","point","labelRadius","x","length","dx","dy","verticalCenter","arcRect","width","horizontalCenter","push","distance","y","iy","moveTo","depth","fixPosition","radiusY","validateDataElement","getPropertyValue","setPercentProperty","invalidateDataItems","_pixelRadius","_pixelInnerRadius","_startAngleInternal","setPropertyValue","normalizeAngle","_endAngleInternal","bullet","positionBullet","locationX","locationY","angle","cos","sin","fdx","pixelX","fdy","pixelY","definedBBox","chart","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/series/PieSeries.ts"],"sourcesContent":["/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\n//import { Slice3D } from \"../../core/elements/3D/Slice3D\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"../elements/PieTick\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t */\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t */\r\n\tpublic _tick: PieTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param toValue   Target value for animation\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends IPercentSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends IPercentSeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends PercentSeries {\r\n\r\n\tpublic _slice: Slice;\r\n\r\n\tpublic _tick: PieTick;\r\n\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\tpublic _chart: PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * [_pixelRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t */\r\n\tprotected _pixelRadius: number;\r\n\r\n\t/**\r\n\t * [_pixelInnerRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _startAngleInternal: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _endAngleInternal: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\t//this.startAngle = -90;\r\n\t\t//this.endAngle = 270;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.labels.template.radius = percent(5);\r\n\r\n\t\tthis.addDisposer(this.labels.template.events.on(\"enabled\", this.invalidate, this, false));\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice();\r\n\t}\r\n\r\n\t/**\r\n\t * creates tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new PieTick();\r\n\t}\r\n\r\n\t/**\r\n\t * creates label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits slice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\r\n\t\t\t// The following takes care of removing hover on subsequent click of\r\n\t\t\t// a slice\r\n\t\t\tif (event.target.interactions.lastHitPointer\r\n\t\t\t\t&& event.target.interactions.lastHitPointer.touch\r\n\t\t\t\t&& !event.target.isActive) {\r\n\t\t\t\tevent.target.isHover = false;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis._rightItems.sort((a, b) => {\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle > 270) {\r\n\t\t\t\t\taAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bAngle > 270) {\r\n\t\t\t\t\tbAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (aAngle > bAngle) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis._leftItems.sort((a, b) => {\r\n\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (aAngle > bAngle) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels2(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t\tthis.arrangeLabels2(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.pixelRadius > 0) {\r\n\r\n\t\t\tif (this.ignoreZeroValues && (dataItem.value == 0 || dataItem.value == null)) {\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t}\r\n\r\n\t\t\t// SLICE\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\tslice.radius = this.pixelRadius;\r\n\r\n\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\tslice.radius = this.pixelInnerRadius + (this.pixelRadius - this.pixelInnerRadius) * dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t}\r\n\t\t\tif (!(slice.innerRadius instanceof Percent)) {\r\n\t\t\t\tslice.innerRadius = this.pixelInnerRadius;\r\n\t\t\t}\r\n\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\tslice.arc = Math.abs(dataItem.values.value.percent) * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t// LABEL\r\n\t\t\tif (!this.labels.template.disabled) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\t\tlet tick = dataItem.tick;\r\n\t\t\t\ttick.slice = slice;\r\n\t\t\t\ttick.label = label;\r\n\r\n\t\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\t\tlet point: IPoint;\r\n\r\n\t\t\t\tif (this.alignLabels) {\r\n\t\t\t\t\tlet labelRadius = label.pixelRadius(slice.radius);\r\n\t\t\t\t\tlet x: number = tick.length + labelRadius;\r\n\t\t\t\t\tlabel.dx = 0;\r\n\t\t\t\t\tlabel.dy = 0;\r\n\t\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t\t// right half\r\n\t\t\t\t\tif (normalizedMiddleAngle > 270 || normalizedMiddleAngle <= 90) {\r\n\t\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.pixelRadius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// left half\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tx -= arcRect.x * this.pixelRadius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\t\tx *= -1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet distance = slice.radius + tick.length + labelRadius;\r\n\t\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t\t\tlabel.moveTo(point);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet depth = (<any>slice)[\"depth\"];\r\n\t\t\t\t\tif (!$type.isNumber(depth)) {\r\n\t\t\t\t\t\tdepth = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.fixPosition(slice.middleAngle, slice.radius, slice.radiusY, 0, -depth);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels or [[Percent]].\r\n\t *\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn this._pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelRadius(value: number) {\r\n\t\tif (this._pixelRadius != value) {\r\n\t\t\tthis._pixelRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pixel inner radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelInnerRadius(value: number) {\r\n\t\tif (this._pixelInnerRadius != value) {\r\n\t\t\tthis._pixelInnerRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\tlet startAngle = this.getPropertyValue(\"startAngle\");\r\n\t\tif ($type.isNumber(startAngle)) {\r\n\t\t\treturn startAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._startAngleInternal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\tlet endAngle = this.getPropertyValue(\"endAngle\");\r\n\t\tif ($type.isNumber(endAngle)) {\r\n\t\t\treturn endAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._endAngleInternal;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\r\n\t\tbullet.x = locationY * slice.radius * $math.cos(angle);\r\n\t\tbullet.y = locationY * slice.radiusY * $math.sin(angle);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\r\n\t\t\tlet slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tlabel.dx = label.fdx + slice.dx + slice.pixelX;\r\n\t\t\t\t\tlabel.dy = label.fdy + slice.dy + slice.pixelY;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\r\n\t\t}\r\n\r\n\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n"]},"metadata":{},"sourceType":"module"}