{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { XYCursor } from \"./XYCursor\";\nimport { Percent, percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\n\nvar RadarCursor =\n/** @class */\nfunction (_super) {\n  __extends(RadarCursor, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function RadarCursor() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"RadarCursor\";\n    _this.radius = percent(100);\n    _this.innerRadius = percent(0); // Apply theme\n\n    _this.applyTheme();\n\n    _this.mask = undefined;\n    return _this;\n  }\n  /**\r\n   * Checks if point is within bounds of a container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param point  Point to check\r\n   * @return Fits within container?\r\n   */\n\n\n  RadarCursor.prototype.fitsToBounds = function (point) {\n    var radius = $math.getDistance(point); //if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\n    //return false;\n    //}\n\n    if (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) {\n      // ok to add/remove some\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(RadarCursor.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * Starting angle of the cursor's radial line.\r\n     *\r\n     * @param value Start angle\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"startAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarCursor.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * End angle of the cursor's radial line.\r\n     *\r\n     * @param value End angle\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  RadarCursor.prototype.triggerMoveReal = function (point, force) {\n    if (!this.xAxis || this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled)) {\n      this.updateLineX(this.point);\n    }\n\n    if (!this.yAxis || this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled)) {\n      this.updateLineY(this.point);\n    }\n\n    this.updateSelection();\n\n    _super.prototype.triggerMoveReal.call(this, point, force);\n  };\n  /**\r\n   * (Re)draws the horizontal (circular) cursor's line.\r\n   *\r\n   * @param point New target point\r\n   */\n\n\n  RadarCursor.prototype.updateLineX = function (point) {\n    var radius = this.pixelRadius;\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    var innerRadius = this.pixelInnerRadius;\n\n    if (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\n      var angle = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\n      var path = void 0;\n\n      if (this.lineX && this.lineX.visible) {\n        this.lineX.moveTo({\n          x: 0,\n          y: 0\n        }); // fill\n\n        if (this.xAxis && this.fullWidthLineX) {\n          var startPoint = this.xAxis.currentItemStartPoint;\n          var endPoint = this.xAxis.currentItemEndPoint;\n\n          if (startPoint && endPoint) {\n            var fillStartAngle = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\n            var fillEndAngle = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\n            var arc = fillEndAngle - fillStartAngle; // clockwise\n            // this is needed, normalizeAngle doesn't solve it\n\n            if (startAngle < endAngle) {\n              if (arc < 0) {\n                arc += 360;\n              }\n            } // ccw\n            else {\n              if (arc > 0) {\n                arc -= 360;\n              }\n            }\n\n            angle -= arc / 2;\n            path = $path.moveTo({\n              x: innerRadius * $math.cos(angle),\n              y: innerRadius * $math.sin(angle)\n            }) + $path.lineTo({\n              x: radius * $math.cos(angle),\n              y: radius * $math.sin(angle)\n            }) + $path.arcTo(angle, arc, radius) + $path.lineTo({\n              x: innerRadius * $math.cos(angle + arc),\n              y: innerRadius * $math.sin(angle + arc)\n            }) + $path.arcTo(angle + arc, -arc, innerRadius);\n          }\n        } // line\n\n\n        if (!path) {\n          path = $path.moveTo({\n            x: innerRadius * $math.cos(angle),\n            y: innerRadius * $math.sin(angle)\n          }) + $path.lineTo({\n            x: radius * $math.cos(angle),\n            y: radius * $math.sin(angle)\n          });\n        }\n\n        this.lineX.path = path;\n      }\n    }\n  };\n  /**\r\n   * (Re)draws the vertical (radial) cursor's line.\r\n   *\r\n   * @param point New target point\r\n   */\n\n\n  RadarCursor.prototype.updateLineY = function (point) {\n    if (this.lineY && this.lineY.visible) {\n      var startAngle = this.startAngle;\n      var endAngle = this.endAngle;\n      var truePixelRadius = this.truePixelRadius;\n      var radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\n\n      if ($type.isNumber(radius) && $type.isNumber(startAngle)) {\n        this.lineY.moveTo({\n          x: 0,\n          y: 0\n        });\n        var path = void 0;\n        var arc = endAngle - startAngle;\n\n        if (this.yAxis && this.fullWidthLineY) {\n          // fill\n          var startPoint = this.yAxis.currentItemStartPoint;\n          var endPoint = this.yAxis.currentItemEndPoint;\n\n          if (startPoint && endPoint) {\n            var innerRadius = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\n            radius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\n            path = $path.moveTo({\n              x: radius * $math.cos(startAngle),\n              y: radius * $math.sin(startAngle)\n            }) + $path.arcTo(startAngle, arc, radius);\n            path += $path.moveTo({\n              x: innerRadius * $math.cos(endAngle),\n              y: innerRadius * $math.sin(endAngle)\n            }) + $path.arcTo(endAngle, -arc, innerRadius);\n          }\n        }\n\n        if (!path) {\n          path = $path.moveTo({\n            x: radius * $math.cos(startAngle),\n            y: radius * $math.sin(startAngle)\n          }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\n        }\n\n        this.lineY.path = path;\n      }\n    }\n  };\n  /**\r\n   * Updates selection dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  RadarCursor.prototype.updateSelection = function () {\n    if (this._usesSelection) {\n      var downPoint = this.downPoint;\n\n      if (downPoint) {\n        var point = this.point;\n        var radius = this.pixelRadius;\n        var truePixelRadius = this.truePixelRadius;\n        var innerRadius = this.pixelInnerRadius;\n        var startAngle = Math.min(this.startAngle, this.endAngle);\n        var endAngle = Math.max(this.startAngle, this.endAngle);\n        var downAngle = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\n        var angle = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\n        var downRadius = $math.getDistance(downPoint);\n\n        if (downRadius < truePixelRadius) {\n          var currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\n          this._prevAngle = angle;\n          var path = $path.moveTo({\n            x: 0,\n            y: 0\n          });\n          var downSin = $math.sin(downAngle);\n          var downCos = $math.cos(downAngle);\n          var sin = $math.sin(angle);\n          var cos = $math.cos(angle);\n          var behavior = this.behavior;\n\n          if (behavior == \"zoomX\" || behavior == \"selectX\") {\n            path += $path.lineTo({\n              x: radius * downCos,\n              y: radius * downSin\n            }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({\n              x: innerRadius * cos,\n              y: innerRadius * sin\n            }) + $path.arcTo(angle, downAngle - angle, innerRadius);\n          } else if (behavior == \"zoomY\" || behavior == \"selectY\") {\n            path = $path.moveTo({\n              x: currentRadius * $math.cos(startAngle),\n              y: currentRadius * $math.sin(startAngle)\n            }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({\n              x: downRadius * $math.cos(endAngle),\n              y: downRadius * $math.sin(endAngle)\n            }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\n          } else if (behavior == \"zoomXY\") {\n            path = $path.moveTo({\n              x: currentRadius * $math.cos(downAngle),\n              y: currentRadius * $math.sin(downAngle)\n            }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({\n              x: downRadius * $math.cos(angle),\n              y: downRadius * $math.sin(angle)\n            }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\n          }\n\n          this.selection.path = path;\n        }\n\n        this.selection.moveTo({\n          x: 0,\n          y: 0\n        });\n      }\n    }\n  };\n  /**\r\n   * Updates cursors current positions.\r\n   */\n\n\n  RadarCursor.prototype.getPositions = function () {\n    // positions are used by axes or series\n    var chart = this.chart;\n\n    if (chart) {\n      var innerRadius = this.pixelInnerRadius;\n      var radius = this.truePixelRadius - innerRadius;\n      var startAngle = this.startAngle;\n      var endAngle = this.endAngle;\n      var angle = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\n      var xPosition = (angle - startAngle) / (endAngle - startAngle);\n      this.xPosition = xPosition;\n      this.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\n    }\n  };\n  /**\r\n   * Overriding inherited method, so that nothing happens when it's triggered.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  RadarCursor.prototype.updatePoint = function (point) {};\n  /**\r\n   * Updates Cursor's position when axis tooltip changes horizontal position.\r\n   *\r\n   * @param event Axis event\r\n   */\n\n\n  RadarCursor.prototype.handleXTooltipPosition = function (event) {\n    if (this.xAxis.cursorTooltipEnabled) {\n      var tooltip = this.xAxis.tooltip;\n      this.updateLineX($utils.svgPointToSprite({\n        x: tooltip.pixelX,\n        y: tooltip.pixelY\n      }, this));\n    }\n  };\n  /**\r\n   * Updates Cursor's position when axis tooltip changes vertical position.\r\n   *\r\n   * @todo Description\r\n   * @param event Axis event\r\n   */\n\n\n  RadarCursor.prototype.handleYTooltipPosition = function (event) {\n    if (this.yAxis.cursorTooltipEnabled) {\n      var tooltip = this.yAxis.tooltip;\n      this.updateLineY($utils.svgPointToSprite({\n        x: tooltip.pixelX,\n        y: tooltip.pixelY\n      }, this));\n    }\n  };\n  /**\r\n   * needs to be overriden\r\n   * @ignore\r\n   */\n\n\n  RadarCursor.prototype.updateLinePositions = function (point) {};\n  /**\r\n   * [getRanges description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  RadarCursor.prototype.getRanges = function () {\n    var downPoint = this.downPoint;\n\n    if (downPoint) {\n      var upPoint = this.upPoint;\n      var chart = this.chart;\n\n      if (chart) {\n        var radius = this.pixelRadius;\n        var startAngle = this.startAngle;\n        var endAngle = this.endAngle;\n        var downAngle = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\n        var upAngle = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\n        var downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\n        var upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\n        var startX = 0;\n        var endX = 1;\n        var startY = 0;\n        var endY = 1;\n        var behavior = this.behavior;\n\n        if (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\n          var arc = endAngle - startAngle;\n          startX = $math.round((downAngle - startAngle) / arc, 5);\n          endX = $math.round((upAngle - startAngle) / arc, 5);\n        }\n\n        if (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\n          startY = $math.round(downRadius / radius, 5);\n          endY = $math.round(upRadius / radius, 5);\n        }\n\n        this.xRange = {\n          start: Math.min(startX, endX),\n          end: Math.max(startX, endX)\n        };\n        this.yRange = {\n          start: Math.min(startY, endY),\n          end: Math.max(startY, endY)\n        };\n\n        if (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {// void\n        } else {\n          this.selection.hide();\n        }\n      }\n    }\n  };\n  /**\r\n   * Overriding inherited method, so that nothing happens when `updateSize`\r\n   * is triggered.\r\n   *\r\n   * RadarCursor is quite complicated and needs own sizing logic.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  RadarCursor.prototype.updateSize = function () {};\n\n  Object.defineProperty(RadarCursor.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius of the cursor's circular line.\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"radius\", value, false, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarCursor.prototype, \"pixelRadius\", {\n    /**\r\n     * Outer radius of the circular line in pixels.\r\n     *\r\n     * @return Outer radius (px)\r\n     * @readonly\r\n     */\n    get: function get() {\n      return $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarCursor.prototype, \"truePixelRadius\", {\n    /**\r\n     * [truePixelRadius description]\r\n     *\r\n     * @todo Description\r\n     * @return Outer radius (px)\r\n     * @readonly\r\n     */\n    get: function get() {\n      return $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarCursor.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the cursor's circular line.\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Inner radius\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarCursor.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * Inner radius of the circular line in pixels.\r\n     *\r\n     * @return Inner radius (px)\r\n     * @readonly\r\n     */\n    get: function get() {\n      var innerRadius = this.innerRadius;\n\n      if (innerRadius instanceof Percent) {\n        innerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\n      }\n\n      return $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  RadarCursor.prototype.fixPoint = function (point) {\n    // overriding xy method\n    return point;\n  };\n\n  return RadarCursor;\n}(XYCursor);\n\nexport { RadarCursor };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;","map":{"version":3,"mappings":"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","names":["XYCursor","Percent","percent","registry","$path","$math","$utils","$type","__extends","_super","_this","className","radius","innerRadius","applyTheme","mask","undefined","RadarCursor","point","getDistance","truePixelRadius","pixelInnerRadius","Object","getPropertyValue","value","setPropertyValue","force","xAxis","cursorTooltipEnabled","tooltip","disabled","updateLineX","yAxis","updateLineY","updateSelection","triggerMoveReal","call","pixelRadius","startAngle","endAngle","isNumber","angle","fitAngleToRange","getAngle","path","lineX","visible","moveTo","x","y","fullWidthLineX","startPoint","currentItemStartPoint","endPoint","currentItemEndPoint","fillStartAngle","fillEndAngle","arc","cos","sin","lineTo","arcTo","lineY","fitToRange","fullWidthLineY","_usesSelection","downPoint","Math","min","max","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","behavior","closePath","selection","chart","xPosition","yPosition","event","svgPointToSprite","pixelX","pixelY","upPoint","upAngle","upRadius","startX","endX","startY","endY","round","xRange","start","end","yRange","hide","setPercentProperty","relativeRadiusToValue","relativeToValue","innerWidth","innerHeight","innerRadiusModifyer","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/cursors/RadarCursor.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.mask = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point to check\r\n\t * @return Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint, force?:boolean) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point, force);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n"]},"metadata":{},"sourceType":"module"}