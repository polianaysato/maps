{"ast":null,"code":"/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { __extends } from \"tslib\";\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar PieSeries3DDataItem =\n/** @class */\nfunction (_super) {\n  __extends(PieSeries3DDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PieSeries3DDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PieSeries3DDataItem\";\n    _this.values.depthValue = {};\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(PieSeries3DDataItem.prototype, \"depthValue\", {\n    /**\r\n     * @return Depth\r\n     */\n    get: function get() {\n      return this.values[\"depthValue\"].value;\n    },\n\n    /**\r\n     * Slice depth (height).\r\n     *\r\n     * @param value  Depth\r\n     */\n    set: function set(value) {\n      this.setValue(\"depthValue\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PieSeries3DDataItem;\n}(PieSeriesDataItem);\n\nexport { PieSeries3DDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar PieSeries3D =\n/** @class */\nfunction (_super) {\n  __extends(PieSeries3D, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PieSeries3D() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PieSeries3D\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  PieSeries3D.prototype.createDataItem = function () {\n    return new PieSeries3DDataItem();\n  };\n  /**\r\n   * creates slice\r\n   */\n\n\n  PieSeries3D.prototype.createSlice = function () {\n    return new Slice3D();\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  PieSeries3D.prototype.validateDataElement = function (dataItem) {\n    var slice = dataItem.slice;\n    var depth = this.depth;\n\n    if (!$type.isNumber(depth)) {\n      depth = this.chart.depth;\n    }\n\n    var depthPercent = dataItem.values.depthValue.percent;\n\n    if (!$type.isNumber(depthPercent)) {\n      depthPercent = 100;\n    }\n\n    slice.depth = depthPercent * depth / 100;\n    var angle = this.angle;\n\n    if (!$type.isNumber(angle)) {\n      angle = this.chart.angle;\n    }\n\n    slice.angle = angle;\n\n    _super.prototype.validateDataElement.call(this, dataItem);\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PieSeries3D.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    for (var i = this._workingStartIndex; i < this._workingEndIndex; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      var slice = dataItem.slice;\n      var startAngle = slice.startAngle; // find quarter\n      //q0 || q1\n\n      if (startAngle >= -90 && startAngle < 90) {\n        slice.toFront();\n      } //q2 || q3\n      else if (startAngle >= 90) {\n        slice.toBack();\n      }\n    }\n  };\n\n  Object.defineProperty(PieSeries3D.prototype, \"depth\", {\n    /**\r\n     * @return Depth (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"depth\");\n    },\n\n    /**\r\n     * Depth (height) of the pie slice in pixels.\r\n     *\r\n     * @param value  Depth (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"depth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries3D.prototype, \"angle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"angle\");\n    },\n\n    /**\r\n     * Angle of the view point of the 3D pie. (0-360)\r\n     *\r\n     * @param value  Angle\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"angle\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Positions series bullet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet  Bullet\r\n   */\n\n  PieSeries3D.prototype.positionBullet = function (bullet) {\n    _super.prototype.positionBullet.call(this, bullet);\n\n    var dataItem = bullet.dataItem;\n    var slice = dataItem.slice;\n    bullet.y = bullet.pixelY - slice.depth;\n  };\n\n  return PieSeries3D;\n}(PieSeries);\n\nexport { PieSeries3D };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;","map":{"version":3,"mappings":"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","names":["PieSeries","PieSeriesDataItem","Slice3D","registry","$type","__extends","_super","_this","className","values","depthValue","applyTheme","Object","PieSeries3DDataItem","value","setValue","PieSeries3D","dataItem","slice","depth","isNumber","chart","depthPercent","percent","angle","validateDataElement","call","validate","i","_workingStartIndex","_workingEndIndex","dataItems","getIndex","startAngle","toFront","toBack","getPropertyValue","setPropertyValue","bullet","positionBullet","y","pixelY","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/series/PieSeries3D.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = this._workingStartIndex; i < this._workingEndIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tconst startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tbullet.y = bullet.pixelY - slice.depth;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n"]},"metadata":{},"sourceType":"module"}