{"ast":null,"code":"/**\r\n * Functionality for drawing simple ClockHands\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\n\nvar ClockHand =\n/** @class */\nfunction (_super) {\n  __extends(ClockHand, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ClockHand() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * An Axis hand is related to.\r\n     */\n\n\n    _this._axis = new MutableValueDisposer();\n    _this.className = \"ClockHand\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.fill = interfaceColors.getFor(\"alternativeBackground\");\n    _this.stroke = _this.fill;\n    var pin = new Circle();\n    pin.radius = 5;\n    _this.pin = pin;\n    _this.isMeasured = false;\n    _this.startWidth = 5;\n    _this.endWidth = 1;\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.radius = percent(100);\n    _this.innerRadius = percent(0);\n    var hand = new Trapezoid();\n    _this.hand = hand;\n\n    _this._disposers.push(_this._axis); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Re(validates) the clock hand, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ClockHand.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    var hand = this.hand;\n    hand.width = this.pixelWidth;\n    var h = Math.max(this.startWidth, this.endWidth);\n    hand.height = h;\n    hand.leftSide = percent(this.startWidth / h * 100);\n    hand.rightSide = percent(this.endWidth / h * 100);\n\n    if (this.axis) {\n      var renderer = this.axis.renderer;\n      var x0 = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\n      var x1 = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\n      hand.x = x0;\n      hand.y = -h / 2;\n      hand.width = x1 - x0;\n    }\n  };\n\n  Object.defineProperty(ClockHand.prototype, \"pin\", {\n    /**\r\n     * @return Pin element\r\n     */\n    get: function get() {\n      return this._pin;\n    },\n\n    /**\r\n     * A circle element used as hand's base. (pin)\r\n     *\r\n     * @param pin  Pin element\r\n     */\n    set: function set(pin) {\n      if (this._pin) {\n        this.removeDispose(this._pin);\n      }\n\n      if (pin) {\n        this._pin = pin;\n        pin.parent = this;\n\n        this._disposers.push(pin);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"hand\", {\n    /**\r\n     * @return Hand element\r\n     */\n    get: function get() {\n      return this._hand;\n    },\n\n    /**\r\n     * A trapezoid shape used for hand itself.\r\n     *\r\n     * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n     * `endWidth` properties.\r\n     *\r\n     * Set `endWidth` to 1 (px) to make it pointy.\r\n     *\r\n     * @param hand  Hand element\r\n     */\n    set: function set(hand) {\n      if (this._hand) {\n        this.removeDispose(this._hand);\n      }\n\n      if (hand) {\n        this._hand = hand;\n        hand.parent = this;\n\n        this._disposers.push(hand);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"radius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Radius of the hand's outer end. (tip)\r\n     *\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(0)\r\n     * @param value  Radius\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"innerRadius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Radius of the hand's inner end. (base)\r\n     *\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(0)\r\n     * @param value  Radius\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"startWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"startWidth\");\n    },\n\n    /**\r\n     * Width, in pixels, of the clock hand's inner end. (base)\r\n     *\r\n     * @default 5\r\n     * @param value  Width (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"startWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"endWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"endWidth\");\n    },\n\n    /**\r\n     * Width, in pixels, of the clock hand's outer end. (tip)\r\n     *\r\n     * @default 1\r\n     * @param value  Width (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"endWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"rotationDirection\", {\n    /**\r\n     * @return rotationDirection\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"rotationDirection\");\n    },\n\n    /**\r\n     * Rotation direction\r\n     *\r\n     * @default any\r\n     * @param value\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"rotationDirection\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves clock hand to particular value.\r\n   *\r\n   * If `duration` is set to a number in milliseconds, the hand will move\r\n   * to the new position gracefully, rather than jumping rigth to it.\r\n   *\r\n   * Alternatively, you can also set `value` directly.\r\n   *\r\n   * @param value     New value\r\n   * @param duration  Animation duration (ms)\r\n   * @param easing  Animation easing function\r\n   */\n\n  ClockHand.prototype.showValue = function (value, duration, easing) {\n    this._value = value;\n\n    if (value != undefined) {\n      if (!$type.isNumber(duration)) {\n        duration = 0;\n      }\n\n      if (this.axis) {\n        var renderer = this.axis.renderer;\n        var newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\n        var currentAngle = this.rotation;\n\n        if (this.rotationDirection == \"clockWise\") {\n          if (newAngle < currentAngle) {\n            this.rotation = currentAngle - 360;\n          }\n        }\n\n        if (this.rotationDirection == \"counterClockWise\") {\n          if (newAngle > currentAngle) {\n            this.rotation = currentAngle + 360;\n          }\n        }\n\n        this.animate({\n          property: \"rotation\",\n          to: newAngle\n        }, duration, easing);\n      }\n    }\n  };\n\n  Object.defineProperty(ClockHand.prototype, \"currentPosition\", {\n    /**\r\n     * Returns hand's relative position on axis\r\n     */\n    get: function get() {\n      if (this.axis) {\n        var renderer = this.axis.renderer;\n        return renderer.angleToPosition(this.rotation);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function get() {\n      return this._value;\n    },\n\n    /**\r\n     * A current value clock hand is pointing to.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function set(value) {\n      this.showValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"axis\", {\n    /**\r\n     * @return Axis\r\n     */\n    get: function get() {\n      return this._axis.get();\n    },\n\n    /**\r\n     * An Axis clock hand is associated with.\r\n     *\r\n     * Hand's `value` relates to values on the Axis.\r\n     *\r\n     * @param axis  Axis\r\n     */\n    set: function set(axis) {\n      if (this.axis != axis) {\n        this._axis.set(axis, new MultiDisposer([axis.events.on(\"datavalidated\", this.updateValue, this, false), axis.events.on(\"datarangechanged\", this.updateValue, this, false), axis.events.on(\"dataitemsvalidated\", this.updateValue, this, false), axis.events.on(\"propertychanged\", this.invalidate, this, false)]));\n      }\n\n      if (axis) {\n        var chart = axis.chart;\n\n        if (chart) {\n          this.rotation = chart.startAngle;\n        }\n      }\n\n      this.parent = axis.renderer;\n      this.zIndex = 5;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Triggers `value` accessor, so that Hand animates to new position, in case\r\n   * value has changed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  ClockHand.prototype.updateValue = function () {\n    this.value = this.value;\n  };\n  /**\r\n  * Processes JSON-based config before it is applied to the object.\r\n  *\r\n  * @ignore Exclude from docs\r\n  * @param config  Config\r\n  */\n\n\n  ClockHand.prototype.processConfig = function (config) {\n    if (config) {\n      // Connect clock hands with axes\n      if ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\n        config.axis = this.map.getKey(config.axis);\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return ClockHand;\n}(Container);\n\nexport { ClockHand };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;","map":{"version":3,"mappings":"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","names":["Container","Circle","Trapezoid","MutableValueDisposer","MultiDisposer","percent","registry","InterfaceColorSet","$utils","$type","__extends","_super","_this","className","interfaceColors","fill","getFor","stroke","pin","radius","isMeasured","startWidth","endWidth","width","height","innerRadius","hand","_disposers","push","_axis","applyTheme","ClockHand","validate","call","pixelWidth","h","Math","max","leftSide","rightSide","axis","renderer","x0","relativeRadiusToValue","pixelRadius","x1","x","y","Object","_pin","removeDispose","parent","_hand","getPropertyValue","value","setPercentProperty","setPropertyValue","duration","easing","_value","undefined","isNumber","newAngle","positionToAngle","anyToPosition","currentAngle","rotation","rotationDirection","animate","property","to","angleToPosition","showValue","get","set","events","on","updateValue","invalidate","chart","startAngle","zIndex","config","hasValue","isString","map","hasKey","getKey","processConfig","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/elements/ClockHand.ts"],"sourcesContent":["/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"counterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns hand's relative position on axis\r\n\t */\r\n\tpublic get currentPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\treturn renderer.angleToPosition(this.rotation);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n"]},"metadata":{},"sourceType":"module"}