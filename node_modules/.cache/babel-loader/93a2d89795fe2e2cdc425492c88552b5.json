{"ast":null,"code":"/**\r\n * Cone module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../Container\";\nimport { Sprite, visualProperties } from \"../../Sprite\";\nimport { Ellipse } from \"../../elements/Ellipse\";\nimport { LinearGradientModifier } from \"../../rendering/fills/LinearGradientModifier\";\nimport { percent } from \"../../utils/Percent\";\nimport * as $object from \"../../utils/Object\";\nimport * as $path from \"../../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Builds a round cone/cylinder.\r\n *\r\n * @see {@link IConeEvents} for a list of available events\r\n * @see {@link IConeAdapters} for a list of available Adapters\r\n */\n\nvar Cone =\n/** @class */\nfunction (_super) {\n  __extends(Cone, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Cone() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Cone\";\n    _this.angle = 30;\n    _this.radius = percent(100);\n    _this.topRadius = percent(100);\n    _this.top = _this.createChild(Ellipse);\n    _this.top.shouldClone = false;\n    _this.bottom = _this.createChild(Ellipse);\n    _this.bottom.shouldClone = false;\n    _this.body = _this.createChild(Sprite);\n    _this.body.shouldClone = false;\n\n    _this.body.setElement(_this.paper.add(\"path\"));\n\n    _this.layout = \"none\";\n    _this.bodyFillModifier = new LinearGradientModifier();\n    _this.bodyFillModifier.lightnesses = [0, -0.25, 0];\n    _this.body.fillModifier = _this.bodyFillModifier;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Cone.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    $object.copyProperties(this, this.top, visualProperties);\n    $object.copyProperties(this, this.bottom, visualProperties);\n    $object.copyProperties(this, this.body, visualProperties);\n    var w = this.innerWidth;\n    var h = this.innerHeight;\n    var bottom = this.bottom;\n    var top = this.top;\n    var angle = this.angle;\n    var radiusBase;\n    var dx;\n    var dy;\n\n    if (this.orientation == \"horizontal\") {\n      radiusBase = h / 2;\n      bottom.y = h / 2;\n      top.y = h / 2;\n      top.x = w;\n      dx = (90 - angle) / 90;\n      dy = 0;\n      this.bodyFillModifier.gradient.rotation = 90;\n    } else {\n      dx = 0;\n      dy = (90 - angle) / 90;\n      radiusBase = w / 2;\n      bottom.y = h;\n      bottom.x = w / 2;\n      top.x = w / 2;\n      this.bodyFillModifier.gradient.rotation = 0;\n    }\n\n    var radius = this.radius.value * radiusBase;\n    var topRadius = this.topRadius.value * radiusBase;\n    bottom.radius = radius - radius * dx;\n    bottom.radiusY = radius - radius * dy;\n    top.radius = topRadius - topRadius * dx;\n    top.radiusY = topRadius - topRadius * dy;\n    var path;\n\n    if (this.orientation == \"horizontal\") {\n      path = $path.moveTo({\n        x: 0,\n        y: h / 2 - bottom.radiusY\n      }) + $path.arcTo(-90, -180, bottom.radius, bottom.radiusY) + $path.lineTo({\n        x: w,\n        y: h / 2 + top.radiusY\n      }) + $path.arcTo(90, 180, top.radius, top.radiusY) + $path.closePath();\n    } else {\n      path = $path.moveTo({\n        x: w / 2 - top.radius,\n        y: 0\n      }) + $path.arcTo(180, -180, top.radius, top.radiusY) + $path.lineTo({\n        x: w / 2 + bottom.radius,\n        y: h\n      }) + $path.arcTo(0, 180, bottom.radius, bottom.radiusY) + $path.closePath();\n    }\n\n    this.body.path = path;\n  };\n\n  Object.defineProperty(Cone.prototype, \"angle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"angle\");\n    },\n\n    /**\r\n     * Angle of the point of view to the 3D element. (0-360)\r\n     *\r\n     * @default 30\r\n     * @param value  Angle\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"angle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Cone.prototype, \"radius\", {\n    /**\r\n     * @return Bottom radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * A relative radius of the cone's bottom (base).\r\n     *\r\n     * It is relevant to the inner width or height of the element.\r\n     *\r\n     * @default Percent(100)\r\n     * @param value  Bottom radius\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"radius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Cone.prototype, \"topRadius\", {\n    /**\r\n     * @return Top radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"topRadius\");\n    },\n\n    /**\r\n     * A relative radius of the cone's top (tip).\r\n     *\r\n     * It is relevant to the inner width or height of the element.\r\n     *\r\n     * @default Percent(0)\r\n     * @param value  Top radius\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"topRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Cone.prototype, \"orientation\", {\n    /**\r\n     * Orientation\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"orientation\");\n    },\n\n    /**\r\n     * Orientation of the cone\r\n     *\r\n     * @default \"vertical\"\r\n     * @param value  Orientation\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"orientation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Cone;\n}(Container);\n\nexport { Cone };","map":{"version":3,"mappings":"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","names":["Container","Sprite","visualProperties","Ellipse","LinearGradientModifier","percent","$object","$path","__extends","_super","_this","className","angle","radius","topRadius","top","createChild","shouldClone","bottom","body","setElement","paper","add","layout","bodyFillModifier","lightnesses","fillModifier","applyTheme","Cone","draw","call","copyProperties","w","innerWidth","h","innerHeight","radiusBase","dx","dy","orientation","y","x","gradient","rotation","value","radiusY","path","moveTo","arcTo","lineTo","closePath","Object","getPropertyValue","setPropertyValue"],"sourceRoot":"","sources":["../../../../../../src/.internal/core/elements/3d/Cone.ts"],"sourcesContent":["/**\r\n * Cone module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../Container\";\r\nimport { Sprite, visualProperties } from \"../../Sprite\";\r\nimport { Ellipse } from \"../../elements/Ellipse\";\r\nimport { LinearGradientModifier } from \"../../rendering/fills/LinearGradientModifier\";\r\nimport { percent, Percent } from \"../../utils/Percent\";\r\nimport * as $object from \"../../utils/Object\";\r\nimport * as $path from \"../../rendering/Path\";\r\nimport { Orientation } from \"../../defs/Orientation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cone]].\r\n */\r\nexport interface IConeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t */\r\n\tangle?: number;\r\n\r\n\t/**\r\n\t * A relative radius of the cone's bottom (base).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius?: Percent;\r\n\r\n\t/**\r\n\t * A relative radius of the cone's top (tip).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\ttopRadius?: Percent;\r\n\r\n\t/**\r\n\t * Orientation of the cone\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Cone]].\r\n */\r\nexport interface IConeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Cone]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeAdapters extends IContainerAdapters, IConeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Builds a round cone/cylinder.\r\n *\r\n * @see {@link IConeEvents} for a list of available events\r\n * @see {@link IConeAdapters} for a list of available Adapters\r\n */\r\nexport class Cone extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeEvents;\r\n\r\n\t/**\r\n\t * Bottom ellement.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic bottom: Ellipse;\r\n\r\n\t/**\r\n\t * Top element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic top: Ellipse;\r\n\r\n\t/**\r\n\t * Body element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic body: Sprite;\r\n\r\n\t/**\r\n\t * Gradient for the fill of the body.\r\n\t */\r\n\tpublic bodyFillModifier: LinearGradientModifier;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Cone\";\r\n\r\n\t\tthis.angle = 30;\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.topRadius = percent(100);\r\n\r\n\t\tthis.top = this.createChild(Ellipse);\r\n\t\tthis.top.shouldClone = false;\r\n\r\n\t\tthis.bottom = this.createChild(Ellipse);\r\n\t\tthis.bottom.shouldClone = false;\r\n\r\n\t\tthis.body = this.createChild(Sprite);\r\n\t\tthis.body.shouldClone = false;\r\n\r\n\t\tthis.body.setElement(this.paper.add(\"path\"));\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.bodyFillModifier = new LinearGradientModifier();\r\n\t\tthis.bodyFillModifier.lightnesses = [0, -0.25, 0];\r\n\t\tthis.body.fillModifier = this.bodyFillModifier;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\t$object.copyProperties(this, this.top, visualProperties);\r\n\t\t$object.copyProperties(this, this.bottom, visualProperties);\r\n\t\t$object.copyProperties(this, this.body, visualProperties);\r\n\r\n\t\tlet w: number = this.innerWidth;\r\n\t\tlet h: number = this.innerHeight;\r\n\r\n\t\tlet bottom: Ellipse = this.bottom;\r\n\t\tlet top: Ellipse = this.top;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tlet radiusBase: number;\r\n\t\tlet dx: number;\r\n\t\tlet dy: number;\r\n\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tradiusBase = h / 2;\r\n\t\t\tbottom.y = h / 2;\r\n\t\t\ttop.y = h / 2;\r\n\t\t\ttop.x = w;\r\n\t\t\tdx = (90 - angle) / 90;\r\n\t\t\tdy = 0;\r\n\t\t\tthis.bodyFillModifier.gradient.rotation = 90;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdx = 0;\r\n\t\t\tdy = (90 - angle) / 90;\r\n\r\n\t\t\tradiusBase = w / 2;\r\n\t\t\tbottom.y = h;\r\n\t\t\tbottom.x = w / 2;\r\n\t\t\ttop.x = w / 2;\r\n\t\t\tthis.bodyFillModifier.gradient.rotation = 0;\r\n\t\t}\r\n\r\n\t\tlet radius: number = this.radius.value * radiusBase;\r\n\t\tlet topRadius: number = this.topRadius.value * radiusBase;\r\n\r\n\t\tbottom.radius = radius - radius * dx;\r\n\t\tbottom.radiusY = radius - radius * dy;\r\n\r\n\t\ttop.radius = topRadius - topRadius * dx;\r\n\t\ttop.radiusY = topRadius - topRadius * dy;\r\n\r\n\t\tlet path: string;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tpath = $path.moveTo({ x: 0, y: h / 2 - bottom.radiusY }) + $path.arcTo(-90, -180, bottom.radius, bottom.radiusY) + $path.lineTo({ x: w, y: h / 2 + top.radiusY }) + $path.arcTo(90, 180, top.radius, top.radiusY) + $path.closePath();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.moveTo({ x: w / 2 - top.radius, y: 0 }) + $path.arcTo(180, -180, top.radius, top.radiusY) + $path.lineTo({ x: w / 2 + bottom.radius, y: h }) + $path.arcTo(0, 180, bottom.radius, bottom.radiusY) + $path.closePath();\r\n\t\t}\r\n\r\n\t\tthis.body.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative radius of the cone's bottom (base).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Bottom radius\r\n\t */\r\n\tpublic set radius(value: Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bottom radius\r\n\t */\r\n\tpublic get radius(): Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative radius of the cone's top (tip).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Top radius\r\n\t */\r\n\tpublic set topRadius(value: Percent) {\r\n\t\tthis.setPropertyValue(\"topRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top radius\r\n\t */\r\n\tpublic get topRadius(): Percent {\r\n\t\treturn this.getPropertyValue(\"topRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the cone\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}