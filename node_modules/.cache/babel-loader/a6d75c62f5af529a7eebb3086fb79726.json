{"ast":null,"code":"/**\r\n * A collection of utility functions for various type checks and conversion\r\n * @todo Review unused functions for removal\r\n * @hidden\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { percent, isPercent } from \"./Percent\";\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Returns `true` if value is not a number (NaN).\r\n *\r\n * @param value Input value\r\n * @return Is NaN?\r\n * @deprecated Is not used anywhere. JS built-in isNaN is used everywhere. Maybe we don't need this, or if we do, then we should use it everywhere\r\n */\n\nexport function isNaN(value) {\n  return Number(value) !== value;\n}\n/**\r\n * Returns a type of the value.\r\n *\r\n * @param value  Input value\r\n * @return Type of the value\r\n */\n\nexport function getType(value) {\n  return {}.toString.call(value);\n}\n/**\r\n * Returns a default value if the passed in value is empty.\r\n *\r\n * @param value     Input value\r\n * @param optional  Default value\r\n * @return Value or default value whichever is available\r\n * @deprecated Not used anywhere\r\n */\n\nexport function getDefault(value, optional) {\n  return value || optional;\n}\n/**\r\n * Checks if the passed in value is a string.\r\n *\r\n * @param value  Value\r\n * @return Is string?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\n\nexport function checkString(value) {\n  if (typeof value === \"string\") {\n    return true;\n  } else {\n    throw new Error(\"Expected a string but got \" + getType(value));\n  }\n}\n/**\r\n * Checks if the passed in value is a boolean.\r\n *\r\n * @param value  Value\r\n * @return Is boolean?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\n\nexport function checkBoolean(value) {\n  if (typeof value === \"boolean\") {\n    return true;\n  } else {\n    throw new Error(\"Expected a boolean but got \" + getType(value));\n  }\n}\n/**\r\n * Checks if the passed in value is a number.\r\n *\r\n * @param value  Value\r\n * @return Is number?\r\n * @throws {Error}\r\n */\n\nexport function checkNumber(value) {\n  if (typeof value === \"number\") {\n    if (isNaN(value)) {\n      throw new Error(\"Expected a number but got NaN\");\n    }\n  } else {\n    throw new Error(\"Expected a number but got \" + getType(value));\n  }\n\n  return true;\n}\n/**\r\n * Checks if the passed in value is an object.\r\n *\r\n * @param value  Value\r\n * @return Is object?\r\n * @throws {Error}\r\n * @todo Is the input type correct?\r\n * @deprecated Not used anywhere\r\n */\n\nexport function checkObject(value) {\n  var t = getType(value);\n\n  if (t === \"[object Object]\") {\n    return true;\n  } else {\n    throw new Error(\"Expected an object but got \" + t);\n  }\n}\n/**\r\n * Checks if the passed in value is an array.\r\n *\r\n * @param value  Value\r\n * @return Is array?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\n\nexport function checkArray(value) {\n  if (Array.isArray(value)) {\n    return true;\n  } else {\n    throw new Error(\"Expected an array but got \" + getType(value));\n  }\n}\n/**\r\n * Checks if the passed in value is a Date object.\r\n *\r\n * @param value  Value\r\n * @return Is Date object?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\n\nexport function checkDate(value) {\n  var t = getType(value);\n\n  if (t === \"[object Date]\") {\n    return true;\n  } else {\n    throw new Error(\"Expected a date but got \" + t);\n  }\n}\n/**\r\n * ============================================================================\r\n * TYPE CASTING\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Casts string or a number into string.\r\n *\r\n * @param value  Input\r\n * @return String value\r\n * @deprecated Not used anywhere\r\n */\n\nexport function castString(value) {\n  if (typeof value === \"string\") {\n    return value;\n  } else if (typeof value === \"number\") {\n    return \"\" + value;\n  } else {\n    throw new Error(\"Expected a string or number but got \" + getType(value));\n  }\n}\n/**\r\n * Casts string or a number into a number.\r\n *\r\n * @param value   Input value\r\n * @return Number  value\r\n * @throws {Error}\r\n */\n\nexport function castNumber(value) {\n  if (typeof value === \"string\") {\n    var number = +value;\n\n    if (isNaN(number)) {\n      throw new Error(\"Cannot cast string \" + JSON.stringify(value) + \" to a number\");\n    } else {\n      return number;\n    }\n  } else if (typeof value === \"number\") {\n    if (isNaN(value)) {\n      throw new Error(\"Expected a number but got NaN\");\n    } else {\n      return value;\n    }\n  } else {\n    var t = getType(value);\n\n    if (t === \"[object Date]\") {\n      return value.getTime();\n    } else {\n      throw new Error(\"Expected a string, number, or date but got \" + t);\n    }\n  }\n}\n/**\r\n * Casts number, string or Date into a Date object.\r\n *\r\n * @param value  Input value\r\n * @return Date object\r\n * @deprecated Not used anywhere\r\n * @throws {Error}\r\n * @hidden\r\n * @deprecated\r\n */\n\n/*export function castDate(value: string | number | Date, formatter?: DateFormatter): Date {\r\n    if (typeof value === \"string\") {\r\n        if (formatter) {\r\n            return formatter.parse(value);\r\n        }\r\n        return new Date(value);\r\n\r\n    } else if (typeof value === \"number\") {\r\n        return new Date(value);\r\n\r\n    } else {\r\n        const t = getType(value);\r\n\r\n        if (t === \"[object Date]\") {\r\n            return value;\r\n\r\n        } else {\r\n            throw new Error(\"Expected a string, number, or date but got \" + t);\r\n        }\r\n    }\r\n}*/\n\n/**\r\n * ============================================================================\r\n * QUICK CONVERSION\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Converts any value into `boolean`.\r\n *\r\n * @param value  Source value\r\n * @return `true` or `false`\r\n */\n\nexport function toBoolean(value) {\n  return value ? true : false;\n}\n/**\r\n * Converts any value into a `number`.\r\n *\r\n * @param value  Source value\r\n * @return Number representation of value\r\n */\n\nexport function toNumber(value) {\n  if (hasValue(value) && !isNumber(value)) {\n    var converted = Number(value);\n\n    if (isNaN(converted) && isString(value) && value != \"\") {\n      return toNumber(value.replace(/[^0-9.\\-]+/g, ''));\n    }\n\n    return converted;\n  }\n\n  return value;\n}\n/**\r\n * Converts any value into a string (text).\r\n *\r\n * @param value  Source value\r\n * @return String representation of the input\r\n */\n\nexport function toText(value) {\n  if (hasValue(value) && !isString(value)) {\n    if (isNumber(value)) {\n      return castString(value);\n    } else if (isObject(value)) {\n      return value.toString();\n    }\n  }\n\n  return value;\n}\n/**\r\n * Converts any value to a number or [[Percent]].\r\n *\r\n * If the parameter is a string and contains \"%\", it will\r\n * convert it into a [[Percent]].\r\n *\r\n * Otherwise, it will convert into a number.\r\n *\r\n * @param value  Number or percent\r\n * @return Percent object\r\n */\n\nexport function toNumberOrPercent(value) {\n  if (!hasValue(value) || isNumber(value) || isPercent(value)) {\n    return value;\n  }\n\n  if (isString(value) && value.indexOf(\"%\") != -1) {\n    return percent(toNumber(value));\n  }\n\n  return toNumber(value);\n}\n/**\r\n * Checks if a variable has a value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Has value?\r\n */\n\nexport function hasValue(a) {\n  return a != null;\n}\n/**\r\n * Returns a value or throws an {Error} exception if the variable has not\r\n * value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Value\r\n */\n\nexport function getValue(a) {\n  if (hasValue(a)) {\n    return a;\n  } else {\n    throw new Error(\"Value doesn't exist\");\n  }\n}\n/**\r\n * Returns a value, or returns the default value if it doesn't have a value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Value\r\n */\n\nexport function getValueDefault(a, defaultValue) {\n  if (hasValue(a)) {\n    return a;\n  } else {\n    return defaultValue;\n  }\n}\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Checks if parameter is `Date`.\r\n *\r\n * @param value  Input value\r\n * @return Is Date?\r\n */\n\nexport function isDate(value) {\n  return getType(value) === \"[object Date]\";\n}\n/**\r\n * Checks if parameter is `string`.\r\n *\r\n * @param value  Input value\r\n * @return Is string?\r\n */\n\nexport function isString(value) {\n  return typeof value === \"string\";\n}\n/**\r\n * Checks if parameter is `number`.\r\n *\r\n * @param value  Input value\r\n * @return Is number?\r\n */\n\nexport function isNumber(value) {\n  return typeof value === \"number\" && Number(value) == value;\n}\n/**\r\n * Checks if parameter is `object`.\r\n *\r\n * @param value  Input value\r\n * @return Is object?\r\n */\n\nexport function isObject(value) {\n  return typeof value === \"object\" && value != null;\n}\n/**\r\n * Checks if parameter is `Array`.\r\n *\r\n * @param value  Input value\r\n * @return Is Array?\r\n */\n\nexport function isArray(value) {\n  return Array.isArray(value);\n}","map":{"version":3,"mappings":"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","names":["percent","isPercent","isNaN","value","Number","getType","toString","call","getDefault","optional","checkString","Error","checkBoolean","checkNumber","checkObject","t","checkArray","Array","isArray","checkDate","castString","castNumber","number","JSON","stringify","getTime","toBoolean","toNumber","hasValue","isNumber","converted","isString","replace","toText","isObject","toNumberOrPercent","indexOf","a","getValue","getValueDefault","defaultValue","isDate"],"sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Type.ts"],"sourcesContent":["/**\r\n * A collection of utility functions for various type checks and conversion\r\n * @todo Review unused functions for removal\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { percent, Percent, isPercent } from \"./Percent\";\r\n\r\n\r\n/**\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n */\r\nexport type Public<T> = {[P in keyof T]: T[P]};\r\n\r\n\r\n/**\r\n * `Keyof<T>` is the same as `keyof T` except it only accepts string keys, not numbers or symbols.\r\n */\r\nexport type Keyof<T> = Extract<keyof T, string>;\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns `true` if value is not a number (NaN).\r\n *\r\n * @param value Input value\r\n * @return Is NaN?\r\n * @deprecated Is not used anywhere. JS built-in isNaN is used everywhere. Maybe we don't need this, or if we do, then we should use it everywhere\r\n */\r\nexport function isNaN(value: number): boolean {\r\n\treturn Number(value) !== value;\r\n}\r\n\r\n/**\r\n * Represents a type for all available JavaScript variable types.\r\n */\r\nexport type Type\r\n\t= \"[object Object]\"\r\n\t| \"[object Array]\"\r\n\t| \"[object String]\"\r\n\t| \"[object Number]\"\r\n\t| \"[object Boolean]\"\r\n\t| \"[object Date]\";\r\n\r\n/**\r\n * Returns a type of the value.\r\n *\r\n * @param value  Input value\r\n * @return Type of the value\r\n */\r\nexport function getType<A>(value: A): Type {\r\n\treturn ({}).toString.call(value) as Type;\r\n}\r\n\r\n/**\r\n * Returns a default value if the passed in value is empty.\r\n *\r\n * @param value     Input value\r\n * @param optional  Default value\r\n * @return Value or default value whichever is available\r\n * @deprecated Not used anywhere\r\n */\r\nexport function getDefault<A>(value: null | undefined | A, optional: A): A {\r\n\treturn value || optional;\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is a string.\r\n *\r\n * @param value  Value\r\n * @return Is string?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkString(value: any): value is string {\r\n\tif (typeof value === \"string\") {\r\n\t\treturn true;\r\n\t} else {\r\n\t\tthrow new Error(\"Expected a string but got \" + getType(value));\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is a boolean.\r\n *\r\n * @param value  Value\r\n * @return Is boolean?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkBoolean(value: any): value is boolean {\r\n\tif (typeof value === \"boolean\") {\r\n\t\treturn true;\r\n\t} else {\r\n\t\tthrow new Error(\"Expected a boolean but got \" + getType(value));\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is a number.\r\n *\r\n * @param value  Value\r\n * @return Is number?\r\n * @throws {Error}\r\n */\r\nexport function checkNumber(value: any): value is number {\r\n\tif (typeof value === \"number\") {\r\n\t\tif (isNaN(value)) {\r\n\t\t\tthrow new Error(\"Expected a number but got NaN\");\r\n\t\t}\r\n\t} else {\r\n\t\tthrow new Error(\"Expected a number but got \" + getType(value));\r\n\t}\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is an object.\r\n *\r\n * @param value  Value\r\n * @return Is object?\r\n * @throws {Error}\r\n * @todo Is the input type correct?\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkObject(value: {}): value is {} {\r\n\tconst t = getType(value);\r\n\r\n\tif (t === \"[object Object]\") {\r\n\t\treturn true;\r\n\r\n\t} else {\r\n\t\tthrow new Error(\"Expected an object but got \" + t);\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is an array.\r\n *\r\n * @param value  Value\r\n * @return Is array?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkArray<A>(value: Array<A>): value is Array<A> {\r\n\tif (Array.isArray(value)) {\r\n\t\treturn true;\r\n\r\n\t} else {\r\n\t\tthrow new Error(\"Expected an array but got \" + getType(value));\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is a Date object.\r\n *\r\n * @param value  Value\r\n * @return Is Date object?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkDate(value: Date): value is Date {\r\n\tconst t = getType(value);\r\n\r\n\tif (t === \"[object Date]\") {\r\n\t\treturn true;\r\n\r\n\t} else {\r\n\t\tthrow new Error(\"Expected a date but got \" + t);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * TYPE CASTING\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Casts string or a number into string.\r\n *\r\n * @param value  Input\r\n * @return String value\r\n * @deprecated Not used anywhere\r\n */\r\nexport function castString(value: string | number): string {\r\n\tif (typeof value === \"string\") {\r\n\t\treturn value;\r\n\r\n\t} else if (typeof value === \"number\") {\r\n\t\treturn \"\" + value;\r\n\r\n\t} else {\r\n\t\tthrow new Error(\"Expected a string or number but got \" + getType(value));\r\n\t}\r\n}\r\n\r\n/**\r\n * Casts string or a number into a number.\r\n *\r\n * @param value   Input value\r\n * @return Number  value\r\n * @throws {Error}\r\n */\r\nexport function castNumber(value: string | number | Date): number {\r\n\tif (typeof value === \"string\") {\r\n\t\tconst number = +value;\r\n\r\n\t\tif (isNaN(number)) {\r\n\t\t\tthrow new Error(\"Cannot cast string \" + JSON.stringify(value) + \" to a number\");\r\n\r\n\t\t} else {\r\n\t\t\treturn number;\r\n\t\t}\r\n\r\n\t} else if (typeof value === \"number\") {\r\n\t\tif (isNaN(value)) {\r\n\t\t\tthrow new Error(\"Expected a number but got NaN\");\r\n\r\n\t\t} else {\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t} else {\r\n\t\tconst t = getType(value);\r\n\r\n\t\tif (t === \"[object Date]\") {\r\n\t\t\treturn value.getTime();\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Expected a string, number, or date but got \" + t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Casts number, string or Date into a Date object.\r\n *\r\n * @param value  Input value\r\n * @return Date object\r\n * @deprecated Not used anywhere\r\n * @throws {Error}\r\n * @hidden\r\n * @deprecated\r\n */\r\n/*export function castDate(value: string | number | Date, formatter?: DateFormatter): Date {\r\n\tif (typeof value === \"string\") {\r\n\t\tif (formatter) {\r\n\t\t\treturn formatter.parse(value);\r\n\t\t}\r\n\t\treturn new Date(value);\r\n\r\n\t} else if (typeof value === \"number\") {\r\n\t\treturn new Date(value);\r\n\r\n\t} else {\r\n\t\tconst t = getType(value);\r\n\r\n\t\tif (t === \"[object Date]\") {\r\n\t\t\treturn value;\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Expected a string, number, or date but got \" + t);\r\n\t\t}\r\n\t}\r\n}*/\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * QUICK CONVERSION\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n\r\n/**\r\n * Converts any value into `boolean`.\r\n *\r\n * @param value  Source value\r\n * @return `true` or `false`\r\n */\r\nexport function toBoolean(value: any): boolean {\r\n\treturn value ? true : false;\r\n}\r\n\r\n/**\r\n * Converts any value into a `number`.\r\n *\r\n * @param value  Source value\r\n * @return Number representation of value\r\n */\r\nexport function toNumber(value: any): number {\r\n\tif (hasValue(value) && !isNumber(value)) {\r\n\t\tlet converted = Number(value);\r\n\t\tif (isNaN(converted) && isString(value) && value != \"\") {\r\n\t\t\treturn toNumber(value.replace(/[^0-9.\\-]+/g, ''));\r\n\t\t}\r\n\t\treturn converted;\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Converts any value into a string (text).\r\n *\r\n * @param value  Source value\r\n * @return String representation of the input\r\n */\r\nexport function toText(value: any): string {\r\n\tif (hasValue(value) && !isString(value)) {\r\n\t\tif (isNumber(value)) {\r\n\t\t\treturn castString(value);\r\n\t\t}\r\n\t\telse if (isObject(value)) {\r\n\t\t\treturn value.toString();\r\n\t\t}\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Converts any value to a number or [[Percent]].\r\n *\r\n * If the parameter is a string and contains \"%\", it will\r\n * convert it into a [[Percent]].\r\n *\r\n * Otherwise, it will convert into a number.\r\n *\r\n * @param value  Number or percent\r\n * @return Percent object\r\n */\r\nexport function toNumberOrPercent(value: any): number | Percent {\r\n\tif (!hasValue(value) || isNumber(value) || isPercent(value)) {\r\n\t\treturn value;\r\n\t}\r\n\tif (isString(value) && value.indexOf(\"%\") != -1) {\r\n\t\treturn percent(toNumber(value));\r\n\t}\r\n\treturn toNumber(value);\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * VALUE PRESENCE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines an optional value that can be of any type or `undefined`.\r\n */\r\nexport type Optional<A> = A | undefined;\r\n\r\n/**\r\n * Checks if a variable has a value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Has value?\r\n */\r\nexport function hasValue<A>(a: Optional<A> | null): a is A {\r\n\treturn a != null;\r\n}\r\n\r\n/**\r\n * Returns a value or throws an {Error} exception if the variable has not\r\n * value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Value\r\n */\r\nexport function getValue<A>(a: Optional<A> | null): A {\r\n\tif (hasValue(a)) {\r\n\t\treturn a;\r\n\r\n\t} else {\r\n\t\tthrow new Error(\"Value doesn't exist\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns a value, or returns the default value if it doesn't have a value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Value\r\n */\r\nexport function getValueDefault<A>(a: Optional<A> | null, defaultValue: A): A {\r\n\tif (hasValue(a)) {\r\n\t\treturn a;\r\n\r\n\t} else {\r\n\t\treturn defaultValue;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Checks if parameter is `Date`.\r\n *\r\n * @param value  Input value\r\n * @return Is Date?\r\n */\r\nexport function isDate(value: any): value is Date {\r\n\treturn getType(value) === \"[object Date]\";\r\n}\r\n\r\n/**\r\n * Checks if parameter is `string`.\r\n *\r\n * @param value  Input value\r\n * @return Is string?\r\n */\r\nexport function isString(value: any): value is string {\r\n\treturn typeof value === \"string\";\r\n}\r\n\r\n/**\r\n * Checks if parameter is `number`.\r\n *\r\n * @param value  Input value\r\n * @return Is number?\r\n */\r\nexport function isNumber(value: any): value is number {\r\n\treturn typeof value === \"number\" && Number(value) == value;\r\n}\r\n\r\n/**\r\n * Checks if parameter is `object`.\r\n *\r\n * @param value  Input value\r\n * @return Is object?\r\n */\r\nexport function isObject(value: any): value is object {\r\n\treturn typeof value === \"object\" && value != null;\r\n}\r\n\r\n/**\r\n * Checks if parameter is `Array`.\r\n *\r\n * @param value  Input value\r\n * @return Is Array?\r\n */\r\nexport function isArray(value: any): value is Array<any> {\r\n\treturn Array.isArray(value);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}