{"ast":null,"code":"/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport { registry } from \"../../core/Registry\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\n\nvar Column =\n/** @class */\nfunction (_super) {\n  __extends(Column, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Column() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Column\";\n    _this.width = percent(80);\n    _this.height = percent(80); //this.isMeasured = true; // for correct position of the tooltip\n\n    _this.events.disableType(\"transformed\"); // not to bug parent\n\n\n    _this.applyOnClones = true;\n    _this.strokeOpacity = 1;\n    _this.layout = \"none\";\n\n    _this.createAssets(); // otherwise users will have to set layout themselves if they'll want to align, scale etc children\n\n\n    _this.events.on(\"childadded\", _this.handleKidAdded, _this, false);\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Column.prototype.handleKidAdded = function () {\n    if (this.layout == \"none\") {\n      this.layout = \"absolute\";\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Column.prototype.createAssets = function () {\n    this.column = this.createChild(RoundedRectangle);\n    this.column.shouldClone = false;\n    this.column.isMeasured = false;\n    this.column.cornerRadius(0, 0, 0, 0);\n\n    this._disposers.push(this.column);\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Column.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    var column = this.column;\n\n    if (column) {\n      column.width = $math.min(this.pixelWidth, this.maxWidth);\n      column.height = $math.min(this.pixelHeight, this.maxHeight);\n\n      if (column.invalid) {\n        column.validate(); // important!\n      }\n    }\n  };\n  /**\r\n   * Copies all parameters from another [[Column]].\r\n   *\r\n   * @param source Source Column\r\n   */\n\n\n  Column.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (this.column) {\n      this.column.copyFrom(source.column);\n    }\n  };\n\n  Object.defineProperty(Column.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function get() {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n\n      if (this.column) {\n        return {\n          x: 0,\n          y: 0,\n          width: this.column.measuredWidth,\n          height: this.column.measuredHeight\n        };\n      } else {\n        return {\n          x: 0,\n          y: 0,\n          width: $math.min(this.pixelWidth, this.maxWidth),\n          height: $math.min(this.pixelHeight, this.maxHeight)\n        };\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Column;\n}(Container);\n\nexport { Column };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Column\"] = Column;","map":{"version":3,"mappings":"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","names":["Container","RoundedRectangle","registry","percent","$math","__extends","_super","_this","className","width","height","events","disableType","applyOnClones","strokeOpacity","layout","createAssets","on","handleKidAdded","Column","column","createChild","shouldClone","isMeasured","cornerRadius","_disposers","push","validate","call","min","pixelWidth","maxWidth","pixelHeight","maxHeight","invalid","source","copyFrom","Object","definedBBox","x","y","measuredWidth","measuredHeight","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/elements/Column.ts"],"sourcesContent":["/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnEvents;\r\n\r\n\t/**\r\n\t * column element\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realWidth: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realHeight: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realX: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realY: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\t//this.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.events.disableType(\"transformed\"); // not to bug parent\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", this.handleKidAdded, this, false);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleKidAdded() {\r\n\t\tif (this.layout == \"none\") {\r\n\t\t\tthis.layout = \"absolute\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.isMeasured = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t\tthis._disposers.push(this.column);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet column = this.column;\r\n\t\tif (column) {\r\n\t\t\tcolumn.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tcolumn.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t\tif(column.invalid){\r\n\t\t\t\tcolumn.validate(); // important!\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Copies all parameters from another [[Column]].\r\n\t *\r\n\t * @param source Source Column\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tif (this.column) {\r\n\t\t\treturn { x: 0, y: 0, width: this.column.measuredWidth, height: this.column.measuredHeight };\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: $math.min(this.pixelWidth, this.maxWidth), height: $math.min(this.pixelHeight, this.maxHeight) };\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n"]},"metadata":{},"sourceType":"module"}