{"ast":null,"code":"/**\r\n * Module for building 3D serial charts.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\nimport { Container } from \"../../core/Container\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar XYChart3DDataItem =\n/** @class */\nfunction (_super) {\n  __extends(XYChart3DDataItem, _super);\n\n  function XYChart3DDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"XYChart3DDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return XYChart3DDataItem;\n}(XYChartDataItem);\n\nexport { XYChart3DDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\n\nvar XYChart3D =\n/** @class */\nfunction (_super) {\n  __extends(XYChart3D, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYChart3D() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Type of the axis renderer to use for X axes.\r\n     */\n\n\n    _this._axisRendererX = AxisRendererX3D;\n    /**\r\n     * Type of the axis renderer to use for Y axes.\r\n     */\n\n    _this._axisRendererY = AxisRendererY3D;\n    _this.className = \"XYChart3D\"; // Set defaults\n\n    _this.depth = 30;\n    _this.angle = 30; // Creeate container for columns\n\n    var columnsContainer = _this.seriesContainer.createChild(Container);\n\n    columnsContainer.shouldClone = false;\n    columnsContainer.isMeasured = false;\n    columnsContainer.layout = \"none\";\n    _this.columnsContainer = columnsContainer;\n    _this.columnsContainer.mask = _this.createChild(Sprite); // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * This is done because for some reason IE doesn't change mask if path of a\r\n   * mask changes.\r\n   */\n\n\n  XYChart3D.prototype.updateSeriesMasks = function () {\n    _super.prototype.updateSeriesMasks.call(this);\n\n    if ($utils.isIE()) {\n      var columnsContainer = this.columnsContainer;\n      var mask = columnsContainer.mask;\n      columnsContainer.mask = undefined;\n      columnsContainer.mask = mask;\n    }\n  };\n\n  Object.defineProperty(XYChart3D.prototype, \"depth\", {\n    /**\r\n     * @return Depth (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"depth\");\n    },\n\n    /**\r\n     * Depth of the 3D chart / columns in pixels.\r\n     *\r\n     * @param value  Depth (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"depth\", value);\n      this.fixLayout();\n      this.invalidateDataUsers();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart3D.prototype, \"angle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"angle\");\n    },\n\n    /**\r\n     * Angle the chart is viewed at.\r\n     *\r\n     * @todo Description (review)\r\n     * @param value  Angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"angle\", value);\n      this.fixLayout();\n      this.invalidateDataUsers();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart3D.prototype, \"dx3D\", {\n    /**\r\n     * A calculated horizontal 3D offset (px).\r\n     *\r\n     * @readonly\r\n     * @return Offset (px)\r\n     */\n    get: function () {\n      return $math.cos(this.angle) * this.depth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart3D.prototype, \"dy3D\", {\n    /**\r\n     * A calculated vertical 3D offset (px).\r\n     *\r\n     * @readonly\r\n     * @return Offset (px)\r\n     */\n    get: function () {\n      return -$math.sin(this.angle) * this.depth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * (Re)validates layout\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  XYChart3D.prototype.validateLayout = function () {\n    _super.prototype.validateLayout.call(this);\n\n    this.fixColumns();\n  };\n  /**\r\n   * Updates the layout (padding and scrollbar positions) to accommodate for\r\n   * 3D depth and angle.\r\n   */\n\n\n  XYChart3D.prototype.fixLayout = function () {\n    this.chartContainer.paddingTop = -this.dy3D;\n    this.chartContainer.paddingRight = this.dx3D;\n\n    if (this.scrollbarX) {\n      this.scrollbarX.dy = this.dy3D;\n      this.scrollbarX.dx = this.dx3D;\n    }\n\n    if (this.scrollbarY) {\n      this.scrollbarY.dy = this.dy3D;\n      this.scrollbarY.dx = this.dx3D;\n    }\n\n    this.fixColumns();\n\n    _super.prototype.fixLayout.call(this);\n  };\n  /**\r\n   * Updates column positions, offset and dimensions based on chart's angle\r\n   * and depth.\r\n   */\n\n\n  XYChart3D.prototype.fixColumns = function () {\n    var _this = this;\n\n    var count = 1;\n    var i = 0;\n    $iter.each(this.series.iterator(), function (series) {\n      if (series instanceof ColumnSeries3D) {\n        if (!series.clustered && i > 0) {\n          count++;\n        }\n\n        series.depthIndex = count - 1;\n        i++;\n      }\n    });\n    var s = 0;\n    $iter.each(this.series.iterator(), function (series) {\n      if (series instanceof ColumnSeries3D) {\n        series.depth = _this.depth / count;\n        series.angle = _this.angle;\n\n        if (series.columnsContainer == _this.columnsContainer) {\n          series.dx = _this.depth / count * $math.cos(_this.angle) * series.depthIndex;\n          series.dy = -_this.depth / count * $math.sin(_this.angle) * series.depthIndex;\n        }\n\n        var inversed_1 = false;\n\n        if (series.baseAxis == series.xAxis && series.xAxis.renderer.inversed || series.baseAxis == series.yAxis && series.yAxis.renderer.inversed) {\n          inversed_1 = true;\n        }\n\n        var i_1 = 1;\n        series.dataItems.each(function (dataItem) {\n          var column = dataItem.column;\n\n          if (column) {\n            if (inversed_1) {\n              column.zIndex = 1000 * (1000 - i_1) + s - series.depthIndex * 100;\n            } else {\n              column.zIndex = 1000 * i_1 + s - series.depthIndex * 100;\n            }\n          }\n\n          i_1++;\n        });\n\n        if (inversed_1) {\n          s--;\n        } else {\n          s++;\n        }\n      }\n    });\n    this.maskColumns();\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  XYChart3D.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up series\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          config.series[i].type = config.series[i].type || \"ColumnSeries3D\";\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  XYChart3D.prototype.maskColumns = function () {\n    var w = this.plotContainer.pixelWidth;\n    var h = this.plotContainer.pixelHeight;\n    var dx = this.dx3D;\n    var dy = this.dy3D;\n    var path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: dx,\n      y: dy\n    }) + $path.lineTo({\n      x: w + dx,\n      y: dy\n    }) + $path.lineTo({\n      x: w + dx,\n      y: h + dy\n    }) + $path.lineTo({\n      x: w,\n      y: h\n    }) + $path.lineTo({\n      x: w,\n      y: h\n    }) + $path.lineTo({\n      x: 0,\n      y: h\n    }) + $path.closePath();\n    var columnsContainer = this.columnsContainer;\n\n    if (columnsContainer && columnsContainer.mask) {\n      columnsContainer.mask.path = path;\n    }\n  };\n\n  return XYChart3D;\n}(XYChart);\n\nexport { XYChart3D };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;","map":{"version":3,"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAASA,OAAT,EAA4FC,eAA5F,QAAmH,WAAnH;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AAEA;;;;;;;AAOA;;;;;;AAKA;AAAA;AAAA;AAAuCC;;AAEtC;AAAA,gBACCC,qBAAO,IADR;;AAECC,SAAI,CAACC,SAAL,GAAiB,mBAAjB;;AACAD,SAAI,CAACE,UAAL;;;AACA;;AACF;AAPA,EAAuChB,eAAvC;;;AAoDA;;;;;;;AAOA;;;;;;;;;AAQA;AAAA;AAAA;AAA+BY;AAuC9B;;;;;AAGA;AAAA,gBAEC;AACAC,yBAAO,IAHR;AApBA;;;;;AAGUC,2BAAyCX,eAAzC;AAEV;;;;AAGUW,2BAAyCV,eAAzC;AAgBTU,SAAI,CAACC,SAAL,GAAiB,WAAjB,CAJD,CAMC;;AACAD,SAAI,CAACG,KAAL,GAAa,EAAb;AACAH,SAAI,CAACI,KAAL,GAAa,EAAb,CARD,CAUC;;AACA,QAAIC,gBAAgB,GAAGL,KAAI,CAACM,eAAL,CAAqBC,WAArB,CAAiCpB,SAAjC,CAAvB;;AACAkB,oBAAgB,CAACG,WAAjB,GAA+B,KAA/B;AACAH,oBAAgB,CAACI,UAAjB,GAA8B,KAA9B;AACAJ,oBAAgB,CAACK,MAAjB,GAA0B,MAA1B;AACAV,SAAI,CAACK,gBAAL,GAAwBA,gBAAxB;AAEAL,SAAI,CAACK,gBAAL,CAAsBM,IAAtB,GAA6BX,KAAI,CAACO,WAAL,CAAiBnB,MAAjB,CAA7B,CAjBD,CAmBC;;AACAY,SAAI,CAACE,UAAL;;;AAEA;AAED;;;;;;AAIUU,0CAAV;AACCb,qBAAMc,iBAAN,CAAuBC,IAAvB,CAAuB,IAAvB;;AACA,QAAIjB,MAAM,CAACkB,IAAP,EAAJ,EAAmB;AAClB,UAAIV,gBAAgB,GAAG,KAAKA,gBAA5B;AACA,UAAIM,IAAI,GAAGN,gBAAgB,CAACM,IAA5B;AACAN,sBAAgB,CAACM,IAAjB,GAAwBK,SAAxB;AACAX,sBAAgB,CAACM,IAAjB,GAAwBA,IAAxB;AACA;AACD,GARS;;AAeVM,wBAAWL,mBAAX,EAAW,OAAX,EAAgB;AAMhB;;;SAGA;AACC,aAAO,KAAKM,gBAAL,CAAsB,OAAtB,CAAP;AACA,KAXe;;AALhB;;;;;SAKA,UAAiBC,KAAjB,EAA8B;AAC7B,WAAKC,gBAAL,CAAsB,OAAtB,EAA+BD,KAA/B;AACA,WAAKE,SAAL;AACA,WAAKC,mBAAL;AACA,KAJe;oBAAA;;AAAA,GAAhB;AAmBAL,wBAAWL,mBAAX,EAAW,OAAX,EAAgB;AAMhB;;;SAGA;AACC,aAAO,KAAKM,gBAAL,CAAsB,OAAtB,CAAP;AACA,KAXe;;AANhB;;;;;;SAMA,UAAiBC,KAAjB,EAA8B;AAC7B,WAAKC,gBAAL,CAAsB,OAAtB,EAA+BD,KAA/B;AACA,WAAKE,SAAL;AACA,WAAKC,mBAAL;AACA,KAJe;oBAAA;;AAAA,GAAhB;AAmBAL,wBAAWL,mBAAX,EAAW,MAAX,EAAe;AANf;;;;;;SAMA;AACC,aAAOlB,KAAK,CAAC6B,GAAN,CAAU,KAAKnB,KAAf,IAAwB,KAAKD,KAApC;AACA,KAFc;oBAAA;;AAAA,GAAf;AAUAc,wBAAWL,mBAAX,EAAW,MAAX,EAAe;AANf;;;;;;SAMA;AACC,aAAO,CAAClB,KAAK,CAAC8B,GAAN,CAAU,KAAKpB,KAAf,CAAD,GAAyB,KAAKD,KAArC;AACA,KAFc;oBAAA;;AAAA,GAAf;AAIA;;;;;;AAKOS,uCAAP;AACCb,qBAAM0B,cAAN,CAAoBX,IAApB,CAAoB,IAApB;;AACA,SAAKY,UAAL;AACA,GAHM;AAKP;;;;;;AAIUd,kCAAV;AAEC,SAAKe,cAAL,CAAoBC,UAApB,GAAiC,CAAC,KAAKC,IAAvC;AACA,SAAKF,cAAL,CAAoBG,YAApB,GAAmC,KAAKC,IAAxC;;AAEA,QAAI,KAAKC,UAAT,EAAqB;AACpB,WAAKA,UAAL,CAAgBC,EAAhB,GAAqB,KAAKJ,IAA1B;AACA,WAAKG,UAAL,CAAgBE,EAAhB,GAAqB,KAAKH,IAA1B;AACA;;AAED,QAAI,KAAKI,UAAT,EAAqB;AACpB,WAAKA,UAAL,CAAgBF,EAAhB,GAAqB,KAAKJ,IAA1B;AACA,WAAKM,UAAL,CAAgBD,EAAhB,GAAqB,KAAKH,IAA1B;AACA;;AAED,SAAKL,UAAL;;AAEA3B,qBAAMsB,SAAN,CAAeP,IAAf,CAAe,IAAf;AACA,GAlBS;AAoBV;;;;;;AAIUF,mCAAV;AAAA;;AACC,QAAIwB,KAAK,GAAW,CAApB;AACA,QAAIC,CAAC,GAAG,CAAR;AACA5C,SAAK,CAAC6C,IAAN,CAAW,KAAKC,MAAL,CAAYC,QAAZ,EAAX,EAAmC,UAACD,MAAD,EAAO;AACzC,UAAIA,MAAM,YAAYhD,cAAtB,EAAsC;AAErC,YAAI,CAACgD,MAAM,CAACE,SAAR,IAAqBJ,CAAC,GAAG,CAA7B,EAAgC;AAC/BD,eAAK;AACL;;AAEDG,cAAM,CAACG,UAAP,GAAoBN,KAAK,GAAG,CAA5B;AACAC,SAAC;AACD;AACD,KAVD;AAYA,QAAIM,CAAC,GAAW,CAAhB;AAEAlD,SAAK,CAAC6C,IAAN,CAAW,KAAKC,MAAL,CAAYC,QAAZ,EAAX,EAAmC,UAACD,MAAD,EAAO;AACzC,UAAIA,MAAM,YAAYhD,cAAtB,EAAsC;AAErCgD,cAAM,CAACpC,KAAP,GAAeH,KAAI,CAACG,KAAL,GAAciC,KAA7B;AACAG,cAAM,CAACnC,KAAP,GAAeJ,KAAI,CAACI,KAApB;;AACA,YAAImC,MAAM,CAAClC,gBAAP,IAA2BL,KAAI,CAACK,gBAApC,EAAsD;AACrDkC,gBAAM,CAACL,EAAP,GAAYlC,KAAI,CAACG,KAAL,GAAciC,KAAd,GAAuB1C,KAAK,CAAC6B,GAAN,CAAUvB,KAAI,CAACI,KAAf,CAAvB,GAAgDmC,MAAM,CAACG,UAAnE;AACAH,gBAAM,CAACN,EAAP,GAAY,CAACjC,KAAI,CAACG,KAAN,GAAeiC,KAAf,GAAwB1C,KAAK,CAAC8B,GAAN,CAAUxB,KAAI,CAACI,KAAf,CAAxB,GAAiDmC,MAAM,CAACG,UAApE;AACA;;AAED,YAAIE,UAAQ,GAAG,KAAf;;AACA,YAAKL,MAAM,CAACM,QAAP,IAAmBN,MAAM,CAACO,KAA1B,IAAmCP,MAAM,CAACO,KAAP,CAAaC,QAAb,CAAsBC,QAA1D,IAAwET,MAAM,CAACM,QAAP,IAAmBN,MAAM,CAACU,KAA1B,IAAmCV,MAAM,CAACU,KAAP,CAAaF,QAAb,CAAsBC,QAArI,EAAgJ;AAC/IJ,oBAAQ,GAAG,IAAX;AACA;;AAED,YAAIM,GAAC,GAAW,CAAhB;AACAX,cAAM,CAACY,SAAP,CAAiBb,IAAjB,CAAsB,UAACc,QAAD,EAAS;AAC9B,cAAIC,MAAM,GAAGD,QAAQ,CAACC,MAAtB;;AACA,cAAIA,MAAJ,EAAY;AACX,gBAAIT,UAAJ,EAAc;AACbS,oBAAM,CAACC,MAAP,GAAgB,QAAQ,OAAOJ,GAAf,IAAoBP,CAApB,GAAwBJ,MAAM,CAACG,UAAP,GAAoB,GAA5D;AACA,aAFD,MAGK;AACJW,oBAAM,CAACC,MAAP,GAAgB,OAAOJ,GAAP,GAAWP,CAAX,GAAeJ,MAAM,CAACG,UAAP,GAAoB,GAAnD;AACA;AACD;;AACDQ,aAAC;AACD,SAXD;;AAYA,YAAIN,UAAJ,EAAc;AACbD,WAAC;AACD,SAFD,MAGK;AACJA,WAAC;AACD;AACD;AACD,KAnCD;AAoCA,SAAKY,WAAL;AACA,GAtDS;AAwDV;;;;;;;;AAMO3C,sCAAP,UAAqB4C,MAArB,EAAsD;AAErD,QAAIA,MAAJ,EAAY;AAEX;AACA,UAAI7D,KAAK,CAAC8D,QAAN,CAAeD,MAAM,CAACjB,MAAtB,KAAiC5C,KAAK,CAAC+D,OAAN,CAAcF,MAAM,CAACjB,MAArB,CAArC,EAAmE;AAClE,aAAK,IAAIF,CAAC,GAAG,CAAR,EAAWsB,GAAG,GAAGH,MAAM,CAACjB,MAAP,CAAcqB,MAApC,EAA4CvB,CAAC,GAAGsB,GAAhD,EAAqDtB,CAAC,EAAtD,EAA0D;AACzDmB,gBAAM,CAACjB,MAAP,CAAcF,CAAd,EAAiBwB,IAAjB,GAAwBL,MAAM,CAACjB,MAAP,CAAcF,CAAd,EAAiBwB,IAAjB,IAAyB,gBAAjD;AACA;AACD;AAED;;AAED9D,qBAAM+D,aAAN,CAAmBhD,IAAnB,CAAmB,IAAnB,EAAoB0C,MAApB;AAEA,GAfM;;AAiBG5C,oCAAV;AACC,QAAImD,CAAC,GAAW,KAAKC,aAAL,CAAmBC,UAAnC;AACA,QAAIC,CAAC,GAAW,KAAKF,aAAL,CAAmBG,WAAnC;AAEA,QAAIjC,EAAE,GAAW,KAAKH,IAAtB;AACA,QAAIE,EAAE,GAAW,KAAKJ,IAAtB;AAEA,QAAIuC,IAAI,GAAGxE,KAAK,CAACyE,MAAN,CAAa;AAAEC,OAAC,EAAE,CAAL;AAAQC,OAAC,EAAE;AAAX,KAAb,IAA+B3E,KAAK,CAAC4E,MAAN,CAAa;AAAEF,OAAC,EAAEpC,EAAL;AAASqC,OAAC,EAAEtC;AAAZ,KAAb,CAA/B,GAAgErC,KAAK,CAAC4E,MAAN,CAAa;AAAEF,OAAC,EAAEP,CAAC,GAAG7B,EAAT;AAAaqC,OAAC,EAAEtC;AAAhB,KAAb,CAAhE,GAAqGrC,KAAK,CAAC4E,MAAN,CAAa;AAAEF,OAAC,EAAEP,CAAC,GAAG7B,EAAT;AAAaqC,OAAC,EAAEL,CAAC,GAAGjC;AAApB,KAAb,CAArG,GAA8IrC,KAAK,CAAC4E,MAAN,CAAa;AAAEF,OAAC,EAAEP,CAAL;AAAQQ,OAAC,EAAEL;AAAX,KAAb,CAA9I,GAA6KtE,KAAK,CAAC4E,MAAN,CAAa;AAAEF,OAAC,EAAEP,CAAL;AAAQQ,OAAC,EAAEL;AAAX,KAAb,CAA7K,GAA4MtE,KAAK,CAAC4E,MAAN,CAAa;AAAEF,OAAC,EAAE,CAAL;AAAQC,OAAC,EAAEL;AAAX,KAAb,CAA5M,GAA2OtE,KAAK,CAAC6E,SAAN,EAAtP;AAEA,QAAIpE,gBAAgB,GAAG,KAAKA,gBAA5B;;AACA,QAAIA,gBAAgB,IAAIA,gBAAgB,CAACM,IAAzC,EAA+C;AAC9CN,sBAAgB,CAACM,IAAjB,CAAsByD,IAAtB,GAA6BA,IAA7B;AACA;AACD,GAbS;;AAcX;AA5QA,EAA+BnF,OAA/B;;;AA8QA;;;;;;;AAMAO,QAAQ,CAACkF,iBAAT,CAA2B,WAA3B,IAA0C9D,SAA1C","names":["XYChart","XYChartDataItem","Container","Sprite","AxisRendererX3D","AxisRendererY3D","ColumnSeries3D","registry","$iter","$math","$type","$path","$utils","__extends","_super","_this","className","applyTheme","depth","angle","columnsContainer","seriesContainer","createChild","shouldClone","isMeasured","layout","mask","XYChart3D","updateSeriesMasks","call","isIE","undefined","Object","getPropertyValue","value","setPropertyValue","fixLayout","invalidateDataUsers","cos","sin","validateLayout","fixColumns","chartContainer","paddingTop","dy3D","paddingRight","dx3D","scrollbarX","dy","dx","scrollbarY","count","i","each","series","iterator","clustered","depthIndex","s","inversed_1","baseAxis","xAxis","renderer","inversed","yAxis","i_1","dataItems","dataItem","column","zIndex","maskColumns","config","hasValue","isArray","len","length","type","processConfig","w","plotContainer","pixelWidth","h","pixelHeight","path","moveTo","x","y","lineTo","closePath","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/types/XYChart3D.ts"],"sourcesContent":["/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tsuper.updateSeriesMasks();\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tlet columnsContainer = this.columnsContainer;\r\n\t\t\tlet mask = columnsContainer.mask;\r\n\t\t\tcolumnsContainer.mask = undefined;\r\n\t\t\tcolumnsContainer.mask = mask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates layout\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\r\n\t\tthis.chartContainer.paddingTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\r\n\t\tsuper.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count);\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tif (series.columnsContainer == this.columnsContainer) {\r\n\t\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet inversed = false;\r\n\t\t\t\tif ((series.baseAxis == series.xAxis && series.xAxis.renderer.inversed) || (series.baseAxis == series.yAxis && series.yAxis.renderer.inversed)) {\r\n\t\t\t\t\tinversed = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tlet column = dataItem.column;\r\n\t\t\t\t\tif (column) {\r\n\t\t\t\t\t\tif (inversed) {\r\n\t\t\t\t\t\t\tcolumn.zIndex = 1000 * (1000 - i) + s - series.depthIndex * 100;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\t\t\t\tif (inversed) {\r\n\t\t\t\t\ts--;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ts++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n"]},"metadata":{},"sourceType":"module"}