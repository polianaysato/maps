{"ast":null,"code":"/**\r\n * Sankey diagram module.\r\n */\nimport { __extends, __read, __spread } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { SankeyNode } from \"../elements/SankeyNode\";\nimport { SankeyLink } from \"../elements/SankeyLink\";\nimport { Animation } from \"../../core/utils/Animation\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $object from \"../../core/utils/Object\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo rearange notes after dragged\n\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar SankeyDiagramDataItem =\n/** @class */\nfunction (_super) {\n  __extends(SankeyDiagramDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SankeyDiagramDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"SankeyDiagramDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return SankeyDiagramDataItem;\n}(FlowDiagramDataItem);\n\nexport { SankeyDiagramDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\n\nvar SankeyDiagram =\n/** @class */\nfunction (_super) {\n  __extends(SankeyDiagram, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SankeyDiagram() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"SankeyDiagram\";\n    _this.orientation = \"horizontal\";\n    _this.nodeAlign = \"middle\";\n    _this.nodesContainer.width = percent(100);\n    _this.nodesContainer.height = percent(100);\n    _this.linksContainer.width = percent(100);\n    _this.linksContainer.height = percent(100); // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * (Re)validates chart's data, effectively causing the chart to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  SankeyDiagram.prototype.validateData = function () {\n    var _this = this;\n\n    this._valueHeight = undefined;\n\n    _super.prototype.validateData.call(this);\n\n    this._levelCount = 0;\n    this.nodes.each(function (key, node) {\n      node.level = undefined;\n    });\n    this.nodes.each(function (key, node) {\n      node.level = _this.getNodeLevel(node, 0);\n      _this._levelCount = $math.max(_this._levelCount, node.level);\n    });\n  };\n  /**\r\n   * Returns node's highest level.\r\n   *\r\n   * @param node   Node\r\n   * @param level  Current level\r\n   * @return New level\r\n   */\n\n\n  SankeyDiagram.prototype.getNodeLevel = function (node, level) {\n    var _this = this;\n\n    var levels = [level];\n    $iter.each(node.incomingDataItems.iterator(), function (link) {\n      if (link.fromNode) {\n        if ($type.isNumber(link.fromNode.level)) {\n          levels.push(link.fromNode.level + 1);\n        } else {\n          _this._counter = 0;\n\n          _this.checkLoop(link.fromNode);\n\n          if (_this._counter < _this.dataItems.length) {\n            levels.push(_this.getNodeLevel(link.fromNode, level + 1));\n          }\n        }\n      }\n    });\n    return Math.max.apply(Math, __spread(levels));\n  };\n  /**\r\n   * Checks if there's no loop in the ancestor chain.\r\n   *\r\n   * @param  node  Node\r\n   */\n\n\n  SankeyDiagram.prototype.checkLoop = function (node) {\n    var _this = this;\n\n    this._counter++;\n\n    if (this._counter > this.dataItems.length) {\n      return;\n    }\n\n    $iter.each(node.incomingDataItems.iterator(), function (link) {\n      _this.checkLoop(link.fromNode);\n    });\n  };\n  /**\r\n   * Calculates relation between pixel height and total value.\r\n   *\r\n   * In Sankey the actual thickness of links and height of nodes will depend\r\n   * on their values.\r\n   */\n\n\n  SankeyDiagram.prototype.calculateValueHeight = function () {\n    var _this = this; // calculate sums of each level\n\n\n    this._levelSum = {};\n    this._levelNodesCount = {};\n    this.maxSum = 0;\n    var total = this.dataItem.values.value.sum;\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n\n      _this.getNodeValue(node);\n    });\n    this.nodes.each(function (key, node) {\n      var level = node.level;\n      var value = Math.max(node.totalIncoming, node.totalOutgoing);\n\n      if (value / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n\n      if ($type.isNumber(_this._levelSum[level])) {\n        _this._levelSum[level] += value;\n      } else {\n        _this._levelSum[level] = value;\n      }\n\n      if ($type.isNumber(_this._levelNodesCount[level])) {\n        _this._levelNodesCount[level]++;\n      } else {\n        _this._levelNodesCount[level] = 1;\n      }\n    });\n    var availableHeight;\n\n    if (this.orientation == \"horizontal\") {\n      availableHeight = this.chartContainer.maxHeight - 1;\n    } else {\n      availableHeight = this.chartContainer.maxWidth - 1;\n    }\n\n    var maxSumLevel;\n    var minHeight;\n    $object.each(this._levelSum, function (key, value) {\n      var realValue = value;\n      var levelNodeCount = _this._levelNodesCount[key];\n      var valueHeight = (availableHeight - (levelNodeCount - 1) * _this.nodePadding) / realValue;\n\n      if (valueHeight == Infinity) {\n        valueHeight = 0;\n      }\n\n      if (minHeight > valueHeight || !$type.isNumber(minHeight)) {\n        minHeight = valueHeight;\n        _this.maxSum = realValue;\n        maxSumLevel = $type.toNumber(key);\n      }\n    });\n    this._maxSumLevel = maxSumLevel;\n    var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\n    var valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\n\n    if (valueHeight == Infinity) {\n      valueHeight = 0;\n    }\n\n    if (!$type.isNumber(this.valueHeight)) {\n      this.valueHeight = valueHeight;\n    } else {\n      var finalHeight = void 0;\n\n      try {\n        finalHeight = this._heightAnimation.animationOptions[0].to;\n      } catch (err) {} // without animations it will be non-smooth as maxValue jumps from one column to another\n\n\n      if (finalHeight != valueHeight) {\n        var duration = this.interpolationDuration;\n\n        try {\n          duration = this.nodes.template.states.getKey(\"active\").transitionDuration;\n        } catch (err) {}\n\n        this._heightAnimation = new Animation(this, {\n          property: \"valueHeight\",\n          from: this.valueHeight,\n          to: valueHeight\n        }, duration, this.interpolationEasing).start();\n\n        this._disposers.push(this._heightAnimation);\n      }\n    }\n  };\n  /**\r\n   * Redraws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  SankeyDiagram.prototype.validate = function () {\n    var _this = this;\n\n    _super.prototype.validate.call(this);\n\n    this.calculateValueHeight();\n    var container = this.nodesContainer;\n    var nextCoordinate = {};\n    var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\n    var total = this.dataItem.values.value.sum;\n    var availableHeight;\n\n    if (this.orientation == \"horizontal\") {\n      availableHeight = this.chartContainer.maxHeight - 1;\n    } else {\n      availableHeight = this.chartContainer.maxWidth - 1;\n    }\n\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      var level = node.level;\n      var levelCoordinate = 0;\n      var nodeCount = _this._levelNodesCount[level];\n\n      switch (_this.nodeAlign) {\n        case \"bottom\":\n          levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding;\n          break;\n\n        case \"middle\":\n          levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding / 2;\n          break;\n      }\n\n      if (_this.maxSum == 0) {\n        switch (_this.nodeAlign) {\n          case \"bottom\":\n            levelCoordinate = availableHeight - nodeCount * (_this.minNodeSize * availableHeight + _this.nodePadding);\n            break;\n\n          case \"middle\":\n            levelCoordinate = availableHeight / 2 - nodeCount / 2 * (_this.minNodeSize * availableHeight + _this.nodePadding);\n            break;\n        }\n      }\n\n      node.parent = container;\n      var delta;\n      var x;\n      var y;\n      var value = Math.max(node.totalIncoming, node.totalOutgoing);\n\n      if (value / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n\n      if (_this.orientation == \"horizontal\") {\n        delta = (_this.innerWidth - node.pixelWidth) / _this._levelCount;\n        x = delta * node.level;\n        y = nextCoordinate[level] || levelCoordinate;\n        var h = value * _this.valueHeight;\n\n        if (total == 0 && h == 0) {\n          h = _this.minNodeSize * availableHeight;\n        }\n\n        node.height = h;\n        node.minX = x;\n        node.maxX = x;\n        nextCoordinate[level] = y + h + _this.nodePadding;\n      } else {\n        delta = (_this.innerHeight - node.pixelHeight) / _this._levelCount;\n        x = nextCoordinate[level] || levelCoordinate;\n        y = delta * node.level;\n        var w = value * _this.valueHeight;\n\n        if (total == 0 && w == 0) {\n          w = _this.minNodeSize * availableHeight;\n        }\n\n        node.width = w;\n        node.minY = y;\n        node.maxY = y;\n        nextCoordinate[level] = x + w + _this.nodePadding;\n      }\n\n      node.x = x;\n      node.y = y;\n    });\n  };\n  /**\r\n   * Performs actual operations to reveal this element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param duration Fade in duration (ms)\r\n   * @return Fade in duration (ms)\r\n   */\n\n\n  SankeyDiagram.prototype.showReal = function (duration) {\n    var _this = this;\n\n    if (this.preventShow) {\n      return;\n    }\n\n    if (this.interpolationDuration > 0) {\n      var container_1 = this.nodesContainer;\n      var i_1 = 0;\n      $iter.each(this.links.iterator(), function (link) {\n        link.hide(0);\n      });\n      $iter.each(this._sorted, function (strNode) {\n        var node = strNode[1];\n        var property;\n\n        if (_this.orientation == \"horizontal\") {\n          node.dx = -(container_1.pixelWidth - node.pixelWidth) / Math.max(_this._levelCount, 1);\n          property = \"dx\";\n        } else {\n          node.dy = -(container_1.pixelHeight - node.pixelHeight) / Math.max(_this._levelCount, 1);\n          property = \"dy\";\n        }\n\n        var delay = 0;\n        var duration = _this.interpolationDuration;\n\n        if (_this.sequencedInterpolation) {\n          delay = _this.sequencedInterpolationDelay * i_1 + duration * i_1 / $iter.length(_this.nodes.iterator());\n        }\n\n        node.opacity = 0;\n        node.invalidateLinks();\n        node.animate([{\n          property: \"opacity\",\n          from: 0,\n          to: 1\n        }, {\n          property: property,\n          to: 0\n        }], _this.interpolationDuration, _this.interpolationEasing).delay(delay);\n        $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\n          var animation = dataItem.link.show(_this.interpolationDuration);\n\n          if (animation && !animation.isFinished()) {\n            animation.delay(delay);\n          }\n        });\n        $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\n          if (!dataItem.fromNode) {\n            var animation = dataItem.link.show(_this.interpolationDuration);\n\n            if (animation && !animation.isFinished()) {\n              animation.delay(delay);\n            }\n          }\n        });\n        i_1++;\n      });\n    }\n\n    return _super.prototype.showReal.call(this);\n  };\n  /**\r\n   * Changes the sort type of the nodes.\r\n   *\r\n   * This will actually reshuffle nodes using nice animation.\r\n   */\n\n\n  SankeyDiagram.prototype.changeSorting = function () {\n    var _this = this;\n\n    this.sortNodes();\n    var nextCoordinate = {};\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      var level = node.level;\n      var levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2;\n      var property;\n      var nodeHeight;\n\n      if (_this.orientation == \"horizontal\") {\n        property = \"y\";\n        nodeHeight = node.pixelHeight;\n      } else {\n        property = \"x\";\n        nodeHeight = node.pixelWidth;\n      }\n\n      node.animate({\n        property: property,\n        to: nextCoordinate[level] || levelCoordinate\n      }, _this.interpolationDuration, _this.interpolationEasing);\n      nextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + _this.nodePadding;\n      node.invalidateLinks();\n    });\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  SankeyDiagram.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Sankey diagram\");\n    }\n  };\n  /**\r\n   * Creates and returns a new data item.\r\n   *\r\n   * @return Data item\r\n   */\n\n\n  SankeyDiagram.prototype.createDataItem = function () {\n    return new SankeyDiagramDataItem();\n  };\n\n  Object.defineProperty(SankeyDiagram.prototype, \"nodeAlign\", {\n    /**\r\n     * @returns Returns nodeAlign value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nodeAlign\");\n    },\n\n    /**\r\n     * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n     *\r\n     * @param value  Node sorting\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"nodeAlign\", value);\n      this.changeSorting();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyDiagram.prototype, \"orientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n\n    /**\r\n     * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n     *\r\n     * @param value Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"orientation\", value, true);\n      var nameLabel = this.nodes.template.nameLabel;\n\n      if (value == \"vertical\") {\n        this.nodes.template.width = undefined;\n        nameLabel.label.horizontalCenter = \"middle\";\n        nameLabel.locationX = 0.5;\n      } else {\n        this.nodes.template.height = undefined;\n        nameLabel.label.horizontalCenter = \"left\";\n        nameLabel.locationX = 1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  SankeyDiagram.prototype.createNode = function () {\n    var node = new SankeyNode();\n\n    this._disposers.push(node);\n\n    return node;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  SankeyDiagram.prototype.createLink = function () {\n    var link = new SankeyLink();\n\n    this._disposers.push(link);\n\n    return link;\n  };\n\n  Object.defineProperty(SankeyDiagram.prototype, \"valueHeight\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._valueHeight;\n    },\n\n    /**\r\n     * @ignore\r\n     */\n    set: function (value) {\n      if (value != this._valueHeight) {\n        this._valueHeight = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  SankeyDiagram.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    this._sorted = this.nodes.iterator();\n  };\n\n  return SankeyDiagram;\n}(FlowDiagram);\n\nexport { SankeyDiagram };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;","map":{"version":3,"mappings":"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","names":["FlowDiagram","FlowDiagramDataItem","percent","registry","SankeyNode","SankeyLink","Animation","$iter","$math","$type","$object","__extends","_super","_this","className","applyTheme","orientation","nodeAlign","nodesContainer","width","height","linksContainer","SankeyDiagram","_valueHeight","undefined","validateData","call","_levelCount","nodes","each","key","node","level","getNodeLevel","max","levels","incomingDataItems","iterator","link","fromNode","isNumber","push","_counter","checkLoop","dataItems","length","Math","apply","__spread","_levelSum","_levelNodesCount","maxSum","total","dataItem","values","value","sum","_sorted","strNode","getNodeValue","totalIncoming","totalOutgoing","minNodeSize","availableHeight","chartContainer","maxHeight","maxWidth","maxSumLevel","minHeight","realValue","levelNodeCount","valueHeight","nodePadding","Infinity","toNumber","_maxSumLevel","maxSumLevelNodeCount","finalHeight","_heightAnimation","animationOptions","to","err","duration","interpolationDuration","template","states","getKey","transitionDuration","property","from","interpolationEasing","start","_disposers","validate","calculateValueHeight","container","nextCoordinate","levelCoordinate","nodeCount","parent","delta","x","y","innerWidth","pixelWidth","h","minX","maxX","innerHeight","pixelHeight","w","minY","maxY","preventShow","container_1","i_1","links","hide","dx","dy","delay","sequencedInterpolation","sequencedInterpolationDelay","opacity","invalidateLinks","animate","outgoingDataItems","animation","show","isFinished","showReal","sortNodes","nodeHeight","applyInternalDefaults","hasValue","readerTitle","language","translate","SankeyDiagramDataItem","Object","getPropertyValue","setPropertyValue","changeSorting","nameLabel","label","horizontalCenter","locationX","invalidate","disposeData","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/types/SankeyDiagram.ts"],"sourcesContent":["/**\r\n * Sankey diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SankeyNode } from \"../elements/SankeyNode\";\r\nimport { SankeyLink } from \"../elements/SankeyLink\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SankeyDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SankeyDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: SankeyNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: SankeyNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[SankeyDiagram]]\r\n */\r\nexport interface ISankeyDiagramProperties extends IFlowDiagramProperties {\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort at all\r\n\t */\r\n\tnodeAlign?: \"top\" | \"bottom\" | \"middle\";\r\n\r\n\r\n\t/**\r\n\t * Orientation of the chart.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyDiagramAdapters extends IFlowDiagramAdapters, ISankeyDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\r\nexport class SankeyDiagram extends FlowDiagram {\r\n\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISankeyDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyDiagramEvents;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelSum: { [index: number]: number };\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelNodesCount: { [index: number]: number };\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: SankeyNode;\r\n\r\n\t/**\r\n\t * [maxSum description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic maxSum: number;\r\n\r\n\t/**\r\n\t * level with max sum\r\n\t */\r\n\tprotected _maxSumLevel: number;\r\n\r\n\t/**\r\n\t * [valueHeight description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _valueHeight: number;\r\n\r\n\t/**\r\n\t * A total number of levels, present on this chart.\r\n\t */\r\n\tprotected _levelCount: number;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, this[\"_node\"]]>;\r\n\r\n\tprotected _heightAnimation: Animation;\r\n\r\n\tprotected _level: number;\r\n\r\n\tprotected _counter: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagram\";\r\n\t\tthis.orientation = \"horizontal\";\r\n\t\tthis.nodeAlign = \"middle\";\r\n\r\n\t\tthis.nodesContainer.width = percent(100);\r\n\t\tthis.nodesContainer.height = percent(100);\r\n\r\n\t\tthis.linksContainer.width = percent(100);\r\n\t\tthis.linksContainer.height = percent(100);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis._valueHeight = undefined;\t\t\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis._levelCount = 0;\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = undefined;\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = this.getNodeLevel(node, 0);\r\n\t\t\tthis._levelCount = $math.max(this._levelCount, node.level);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns node's highest level.\r\n\t *\r\n\t * @param node   Node\r\n\t * @param level  Current level\r\n\t * @return New level\r\n\t */\r\n\tprotected getNodeLevel(node: this[\"_node\"], level: number): number {\r\n\t\tlet levels: number[] = [level];\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tif (link.fromNode) {\r\n\t\t\t\tif ($type.isNumber(link.fromNode.level)) {\r\n\t\t\t\t\tlevels.push(link.fromNode.level + 1);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._counter = 0;\r\n\t\t\t\t\tthis.checkLoop(link.fromNode);\r\n\t\t\t\t\tif (this._counter < this.dataItems.length) {\r\n\t\t\t\t\t\tlevels.push(this.getNodeLevel(link.fromNode, level + 1));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn Math.max(...levels);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if there's no loop in the ancestor chain.\r\n\t * \r\n\t * @param  node  Node\r\n\t */\r\n\tprotected checkLoop(node: this[\"_node\"]): void {\r\n\t\tthis._counter++;\r\n\r\n\t\tif (this._counter > this.dataItems.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tthis.checkLoop(link.fromNode);\r\n\t\t})\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates relation between pixel height and total value.\r\n\t *\r\n\t * In Sankey the actual thickness of links and height of nodes will depend\r\n\t * on their values.\r\n\t */\r\n\tprotected calculateValueHeight() {\r\n\t\t// calculate sums of each level\r\n\t\tthis._levelSum = {};\r\n\t\tthis._levelNodesCount = {};\r\n\t\tthis.maxSum = 0;\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelSum[level])) {\r\n\t\t\t\tthis._levelSum[level] += value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelSum[level] = value;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelNodesCount[level])) {\r\n\t\t\t\tthis._levelNodesCount[level]++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelNodesCount[level] = 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet maxSumLevel: number;\r\n\t\tlet minHeight: number;\r\n\r\n\t\t$object.each(this._levelSum, (key, value) => {\r\n\t\t\tlet realValue = value;\r\n\r\n\t\t\tlet levelNodeCount = this._levelNodesCount[key];\r\n\t\t\tlet valueHeight = (availableHeight - (levelNodeCount - 1) * this.nodePadding) / realValue;\r\n\r\n\t\t\tif (valueHeight == Infinity) {\r\n\t\t\t\tvalueHeight = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (minHeight > valueHeight || !$type.isNumber(minHeight)) {\r\n\t\t\t\tminHeight = valueHeight;\r\n\t\t\t\tthis.maxSum = realValue;\r\n\t\t\t\tmaxSumLevel = $type.toNumber(key);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._maxSumLevel = maxSumLevel;\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\r\n\r\n\t\tif (valueHeight == Infinity) {\r\n\t\t\tvalueHeight = 0;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(this.valueHeight)) {\r\n\t\t\tthis.valueHeight = valueHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet finalHeight;\r\n\t\t\ttry {\r\n\t\t\t\tfinalHeight = this._heightAnimation.animationOptions[0].to;\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\r\n\t\t\t}\r\n\t\t\t// without animations it will be non-smooth as maxValue jumps from one column to another\r\n\t\t\tif (finalHeight != valueHeight) {\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tduration = this.nodes.template.states.getKey(\"active\").transitionDuration;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (err) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._heightAnimation = new Animation(this, { property: \"valueHeight\", from: this.valueHeight, to: valueHeight }, duration, this.interpolationEasing).start();\r\n\t\t\t\tthis._disposers.push(this._heightAnimation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.calculateValueHeight();\r\n\r\n\t\tlet container = this.nodesContainer;\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\t\t\tlet levelCoordinate: number = 0;\r\n\r\n\t\t\tlet nodeCount = this._levelNodesCount[level];\r\n\r\n\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight - (nodeCount - maxSumLevelNodeCount) * this.nodePadding;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * this.nodePadding / 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.maxSum == 0) {\r\n\t\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\t\tlevelCoordinate = availableHeight - nodeCount * (this.minNodeSize * availableHeight + this.nodePadding);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"middle\":\r\n\t\t\t\t\t\tlevelCoordinate = availableHeight / 2 - nodeCount / 2 * (this.minNodeSize * availableHeight + this.nodePadding);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tnode.parent = container;\r\n\r\n\t\t\tlet delta: number;\r\n\t\t\tlet x: number;\r\n\t\t\tlet y: number;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tdelta = (this.innerWidth - node.pixelWidth) / this._levelCount;\r\n\r\n\t\t\t\tx = delta * node.level;\r\n\t\t\t\ty = nextCoordinate[level] || levelCoordinate;\r\n\r\n\t\t\t\tlet h = value * this.valueHeight;\r\n\r\n\t\t\t\tif (total == 0 && h == 0) {\r\n\t\t\t\t\th = this.minNodeSize * availableHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.height = h;\r\n\t\t\t\tnode.minX = x;\r\n\t\t\t\tnode.maxX = x;\r\n\t\t\t\tnextCoordinate[level] = y + h + this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdelta = (this.innerHeight - node.pixelHeight) / this._levelCount;\r\n\r\n\t\t\t\tx = nextCoordinate[level] || levelCoordinate;\r\n\t\t\t\ty = delta * node.level;\r\n\r\n\t\t\t\tlet w = value * this.valueHeight;\r\n\r\n\t\t\t\tif (total == 0 && w == 0) {\r\n\t\t\t\t\tw = this.minNodeSize * availableHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.width = w;\r\n\t\t\t\tnode.minY = y;\r\n\t\t\t\tnode.maxY = y;\r\n\t\t\t\tnextCoordinate[level] = x + w + this.nodePadding;\r\n\t\t\t}\r\n\t\t\tnode.x = x;\r\n\t\t\tnode.y = y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Performs actual operations to reveal this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param duration Fade in duration (ms)\r\n\t * @return Fade in duration (ms)\r\n\t */\r\n\tprotected showReal(duration?: number): $type.Optional<Animation> {\r\n\r\n\t\tif (this.preventShow) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.interpolationDuration > 0) {\r\n\t\t\tlet container = this.nodesContainer;\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\t$iter.each(this.links.iterator(), (link) => {\r\n\t\t\t\tlink.hide(0);\r\n\t\t\t})\r\n\r\n\t\t\t$iter.each(this._sorted, (strNode) => {\r\n\r\n\t\t\t\tlet node = strNode[1];\r\n\r\n\t\t\t\tlet property: \"dx\" | \"dy\";\r\n\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\tnode.dx = -(container.pixelWidth - node.pixelWidth) / Math.max(this._levelCount, 1);\r\n\t\t\t\t\tproperty = \"dx\";\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.dy = -(container.pixelHeight - node.pixelHeight) / Math.max(this._levelCount, 1);\r\n\t\t\t\t\tproperty = \"dy\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet delay = 0;\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * i / $iter.length(this.nodes.iterator());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.opacity = 0;\r\n\t\t\t\tnode.invalidateLinks();\r\n\r\n\t\t\t\tnode.animate([{ property: \"opacity\", from: 0, to: 1 }, { property: property, to: 0 }], this.interpolationDuration, this.interpolationEasing).delay(delay);\r\n\r\n\t\t\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\ti++;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn super.showReal();\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet levelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2;\r\n\r\n\t\t\tlet property: \"x\" | \"y\";\r\n\t\t\tlet nodeHeight: number;\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tproperty = \"y\";\r\n\t\t\t\tnodeHeight = node.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tproperty = \"x\";\r\n\t\t\t\tnodeHeight = node.pixelWidth;\r\n\t\t\t}\r\n\r\n\t\t\tnode.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, this.interpolationDuration, this.interpolationEasing);\r\n\t\t\tnextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + this.nodePadding;\r\n\r\n\t\t\tnode.invalidateLinks();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sankey diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SankeyDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n\t *\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set nodeAlign(value: \"top\" | \"middle\" | \"bottom\") {\r\n\t\tthis.setPropertyValue(\"nodeAlign\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Returns nodeAlign value\r\n\t */\r\n\tpublic get nodeAlign(): \"top\" | \"middle\" | \"bottom\" {\r\n\t\treturn this.getPropertyValue(\"nodeAlign\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n\t *\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet nameLabel = this.nodes.template.nameLabel;\r\n\r\n\t\tif (value == \"vertical\") {\r\n\t\t\tthis.nodes.template.width = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"middle\";\r\n\t\t\tnameLabel.locationX = 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.nodes.template.height = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\t\tnameLabel.locationX = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new SankeyNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new SankeyLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get valueHeight(): number {\r\n\t\treturn this._valueHeight;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set valueHeight(value: number) {\r\n\t\tif (value != this._valueHeight) {\r\n\t\t\tthis._valueHeight = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tdisposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis._sorted = this.nodes.iterator();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;\r\n"]},"metadata":{},"sourceType":"module"}