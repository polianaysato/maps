{"ast":null,"code":"import * as $array from \"./Array\";\nimport * as $log from \"./Log\";\n\nvar Native =\n/** @class */\nfunction () {\n  function Native() {\n    var _this = this;\n\n    this._targets = [];\n    this._observer = new ResizeObserver(function (entries) {\n      $array.each(entries, function (entry) {\n        $array.each(_this._targets, function (x) {\n          if (x.target === entry.target) {\n            x.callback();\n          }\n        });\n      });\n    });\n  }\n\n  Native.prototype.addTarget = function (target, callback) {\n    this._observer.observe(target, {\n      box: \"content-box\"\n    });\n\n    this._targets.push({\n      target: target,\n      callback: callback\n    });\n  };\n\n  Native.prototype.removeTarget = function (target) {\n    this._observer.unobserve(target);\n\n    $array.keepIf(this._targets, function (x) {\n      return x.target !== target;\n    });\n  };\n\n  return Native;\n}();\n\nvar Raf =\n/** @class */\nfunction () {\n  function Raf() {\n    this._targets = [];\n  }\n\n  Raf.prototype.addTarget = function (target, callback) {\n    var _this = this;\n\n    if (this._targets.length === 0) {\n      var lastTime_1 = null;\n\n      var loop_1 = function loop_1() {\n        var currentTime = Date.now();\n\n        if (lastTime_1 === null || currentTime > lastTime_1 + Raf.delay) {\n          lastTime_1 = currentTime;\n          $array.each(_this._targets, function (x) {\n            var newSize = x.target.getBoundingClientRect();\n\n            if (newSize.width !== x.size.width || newSize.height !== x.size.height) {\n              x.size = newSize;\n              x.callback();\n            }\n          });\n        }\n\n        _this._timer = requestAnimationFrame(loop_1);\n      };\n\n      this._timer = requestAnimationFrame(loop_1);\n    }\n\n    var size = target.getBoundingClientRect();\n\n    this._targets.push({\n      target: target,\n      callback: callback,\n      size: size\n    });\n  };\n\n  Raf.prototype.removeTarget = function (target) {\n    $array.keepIf(this._targets, function (x) {\n      return x.target !== target;\n    });\n\n    if (this._targets.length === 0) {\n      cancelAnimationFrame(this._timer);\n    }\n  };\n\n  Raf.delay = 200;\n  return Raf;\n}();\n\nvar observer = null;\n\nfunction makeSensor() {\n  if (observer === null) {\n    if (typeof ResizeObserver !== \"undefined\") {\n      observer = new Native();\n    } else {\n      observer = new Raf();\n    }\n  }\n\n  return observer;\n}\n\nvar ResizeSensor =\n/** @class */\nfunction () {\n  function ResizeSensor(element, callback) {\n    this._disposed = false;\n    this._sensor = makeSensor();\n    this._element = element;\n\n    this._sensor.addTarget(element, callback);\n  }\n\n  ResizeSensor.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n\n  ResizeSensor.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n\n      this._sensor.removeTarget(this._element);\n    }\n  };\n\n  Object.defineProperty(ResizeSensor.prototype, \"sensor\", {\n    get: function get() {\n      return this._sensor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Deprecated: do not use.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  ResizeSensor.prototype.reset = function () {\n    $log.warn(\"resizeSensor.reset() is no longer needed and can be removed\");\n  };\n\n  return ResizeSensor;\n}();\n\nexport { ResizeSensor };","map":{"version":3,"mappings":"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","names":["$array","$log","_observer","ResizeObserver","entries","each","entry","_this","_targets","x","target","callback","Native","observe","box","push","unobserve","keepIf","Raf","length","lastTime_1","loop_1","currentTime","Date","now","delay","newSize","getBoundingClientRect","width","size","height","_timer","requestAnimationFrame","cancelAnimationFrame","observer","makeSensor","element","_sensor","_element","addTarget","ResizeSensor","_disposed","removeTarget","Object","warn"],"sourceRoot":"","sources":["../../../../../src/.internal/core/utils/ResizeSensor.ts"],"sourcesContent":["import * as $array from \"./Array\";\nimport * as $log from \"./Log\";\n\n\ninterface Sensor {\n\taddTarget(target: Element, callback: () => void): void;\n\tremoveTarget(target: Element): void;\n}\n\n\ndeclare const ResizeObserver: any;\n\nclass Native implements Sensor {\n\tprivate _observer: any;\n\tprivate _targets: Array<{ target: Element, callback: () => void }> = [];\n\n\tconstructor() {\n\t\tthis._observer = new ResizeObserver((entries: Array<any>) => {\n\t\t\t$array.each(entries, (entry) => {\n\t\t\t\t$array.each(this._targets, (x) => {\n\t\t\t\t\tif (x.target === entry.target) {\n\t\t\t\t\t\tx.callback();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\taddTarget(target: Element, callback: () => void) {\n\t\tthis._observer.observe(target, { box: \"content-box\" });\n\t\tthis._targets.push({ target, callback });\n\t}\n\n\tremoveTarget(target: Element) {\n\t\tthis._observer.unobserve(target);\n\n\t\t$array.keepIf(this._targets, (x) => {\n\t\t\treturn x.target !== target;\n\t\t});\n\t}\n}\n\n\nclass Raf implements Sensor {\n\tpublic static delay: number = 200;\n\n\tprivate _timer: number | undefined;\n\tprivate _targets: Array<{ target: Element, callback: () => void, size: ClientRect | DOMRect }> = [];\n\n\taddTarget(target: Element, callback: () => void) {\n\t\tif (this._targets.length === 0) {\n\t\t\tlet lastTime: number | null = null;\n\n\t\t\tconst loop = () => {\n\t\t\t\tconst currentTime = Date.now();\n\n\t\t\t\tif (lastTime === null || currentTime > (lastTime + Raf.delay)) {\n\t\t\t\t\tlastTime = currentTime;\n\n\t\t\t\t\t$array.each(this._targets, (x) => {\n\t\t\t\t\t\tlet newSize = x.target.getBoundingClientRect();\n\n\t\t\t\t\t\tif (newSize.width !== x.size.width || newSize.height !== x.size.height) {\n\t\t\t\t\t\t\tx.size = newSize;\n\t\t\t\t\t\t\tx.callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis._timer = requestAnimationFrame(loop);\n\t\t\t};\n\n\t\t\tthis._timer = requestAnimationFrame(loop);\n\t\t}\n\n\t\tlet size = target.getBoundingClientRect();\n\t\tthis._targets.push({ target, callback, size });\n\t}\n\n\tremoveTarget(target: Element) {\n\t\t$array.keepIf(this._targets, (x) => {\n\t\t\treturn x.target !== target;\n\t\t});\n\n\t\tif (this._targets.length === 0) {\n\t\t\tcancelAnimationFrame(this._timer);\n\t\t}\n\t}\n}\n\n\nlet observer: Sensor | null = null;\n\nfunction makeSensor(): Sensor {\n\tif (observer === null) {\n\t\tif (typeof ResizeObserver !== \"undefined\") {\n\t\t\tobserver = new Native();\n\n\t\t} else {\n\t\t\tobserver = new Raf();\n\t\t}\n\t}\n\n\treturn observer;\n}\n\nexport class ResizeSensor {\n\tprivate _sensor: Sensor;\n\tprivate _element: Element;\n\tprivate _disposed: boolean = false;\n\n\tconstructor(element: Element, callback: () => void) {\n\t\tthis._sensor = makeSensor();\n\t\tthis._element = element;\n\t\tthis._sensor.addTarget(element, callback);\n\t}\n\n\tpublic isDisposed() {\n\t\treturn this._disposed;\n\t}\n\n\tpublic dispose() {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\t\t\tthis._sensor.removeTarget(this._element);\n\t\t}\n\t}\n\n\tpublic get sensor(): Sensor {\n\t\treturn this._sensor;\n\t}\n\n\t/**\n\t * Deprecated: do not use.\n\t *\n\t * @ignore Exclude from docs\n\t */\n\tpublic reset() {\n\t\t$log.warn(\"resizeSensor.reset() is no longer needed and can be removed\");\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}