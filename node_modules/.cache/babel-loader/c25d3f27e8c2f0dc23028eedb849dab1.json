{"ast":null,"code":"/**\r\n * Export module.\r\n *\r\n * Parts of Export functionality rely on the following third party libraries:\r\n *\r\n * [canvg.js](https://github.com/canvg/canvg)\r\n * Copyright (c) Gabe Lerner\r\n * Licensed under [MIT](https://github.com/canvg/canvg/blob/master/LICENSE)\r\n *\r\n * [pdfmake](http://pdfmake.org/)\r\n * Copyright (c) 2014 bpampuch\r\n * Licensed under [MIT](https://github.com/bpampuch/pdfmake/blob/master/LICENSE)\r\n *\r\n * [SheetJS Community Edition](https://github.com/sheetjs/js-xlsx)\r\n * Licensed under [Apache License 2.0](https://github.com/SheetJS/js-xlsx/blob/master/LICENSE)\r\n *\r\n * [JSZip](http://stuartk.com/jszip)\r\n * Copyright (c) Stuart Knightley\r\n * Dual licenced under the [MIT license or GPLv3](https://raw.githubusercontent.com/Stuk/jszip/master/LICENSE.markdown).\r\n */\nimport { __awaiter, __extends, __generator } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ExportMenu } from \"./ExportMenu\";\nimport { Adapter } from \"../utils/Adapter\";\nimport { Sprite } from \"../Sprite\";\nimport { Modal } from \"../elements/Modal\";\nimport { List } from \"../utils/List\";\nimport { Dictionary } from \"../utils/Dictionary\";\nimport { DateFormatter } from \"../formatters/DateFormatter\";\nimport { DurationFormatter } from \"../formatters/DurationFormatter\";\nimport { NumberFormatter } from \"../formatters/NumberFormatter\";\nimport { Language } from \"../utils/Language\";\nimport { Validatable } from \"../utils/Validatable\";\nimport { color } from \"../utils/Color\";\nimport { registry } from \"../Registry\";\nimport { options } from \"../Options\";\nimport { StyleRule, getComputedStyle } from \"../utils/DOM\";\nimport * as $browser from \"../utils/Browser\";\nimport * as $object from \"../utils/Object\";\nimport * as $net from \"../utils/Net\";\nimport * as $dom from \"../utils/DOM\";\nimport * as $type from \"../utils/Type\";\nimport * as $log from \"../utils/Log\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $array from \"../utils/Array\";\nimport * as $math from \"../utils/Math\";\nimport * as $strings from \"../utils/Strings\"; // This is used to cache the pdfmake loading\n\nvar pdfmakePromise;\n/**\r\n * Loads pdfmake dynamic module\r\n *\r\n * This is an asynchronous function. Check the description of `getImage()`\r\n * for description and example usage.\r\n *\r\n * @ignore Exclude from docs\r\n * @return Instance of pdfmake\r\n * @async\r\n */\n\nfunction _pdfmake() {\n  return __awaiter(this, void 0, void 0, function () {\n    var a, pdfmake, vfs_fonts, global;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , Promise.all([import(\n          /* webpackChunkName: \"pdfmake\" */\n          \"pdfmake/build/pdfmake.js\"), import(\n          /* webpackChunkName: \"pdfmake\" */\n          \"../../pdfmake/vfs_fonts\")])];\n\n        case 1:\n          a = _a.sent();\n          pdfmake = a[0];\n          vfs_fonts = a[1];\n          global = window;\n          global.pdfMake = global.pdfMake || {};\n          global.pdfMake.vfs = vfs_fonts.default;\n          pdfmake.vfs = vfs_fonts.default;\n          return [2\n          /*return*/\n          , pdfmake];\n      }\n    });\n  });\n} // TODO better parsing\n\n\nvar fontFamilySrcRegexp = /src: ([^;]+);/; // TODO better checks\n\nfunction supportsBlobUri() {\n  return window.navigator.msSaveOrOpenBlob != null;\n} // TODO move into utils or something ?\n\n\nfunction blobToDataUri(blob) {\n  return new Promise(function (resolve, reject) {\n    // TODO handle abort ?\n    var f = new FileReader();\n\n    f.onload = function (e) {\n      resolve(f.result);\n    };\n\n    f.onerror = function (e) {\n      reject(e);\n    };\n\n    f.readAsDataURL(blob);\n  });\n}\n\nfunction getCssRules(s) {\n  return __awaiter(this, void 0, void 0, function () {\n    var sheet, e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          sheet = s.sheet;\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 2,, 4]);\n\n          return [2\n          /*return*/\n          , sheet.cssRules];\n\n        case 2:\n          e_1 = _a.sent();\n          return [4\n          /*yield*/\n          , new Promise(function (success, error) {\n            s.addEventListener(\"load\", function () {\n              success(sheet.cssRules);\n            }, true);\n            s.addEventListener(\"error\", function (e) {\n              error(e);\n            }, true);\n            setTimeout(function () {\n              error(new Error(\"Timeout while waiting for <style> to load\"));\n            }, 10000);\n          })];\n\n        case 3:\n          // Needed because of https://bugzilla.mozilla.org/show_bug.cgi?id=625013\n          return [2\n          /*return*/\n          , _a.sent()];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n} // This loads a stylesheet by URL and then calls the function with it\n// TODO this should be moved into utils or something\n\n\nfunction loadStylesheet(doc, url, f) {\n  return __awaiter(this, void 0, void 0, function () {\n    var response, e_2, s, rules;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , $net.load(url)];\n\n        case 1:\n          response = _a.sent();\n          return [3\n          /*break*/\n          , 3];\n\n        case 2:\n          e_2 = _a.sent();\n          console.error(\"Failed to load stylesheet\", url, e_2);\n          return [2\n          /*return*/\n          ];\n\n        case 3:\n          s = doc.createElement(\"style\");\n          s.textContent = response.response;\n\n          if (options.nonce != \"\") {\n            s.setAttribute(\"nonce\", options.nonce);\n          }\n\n          doc.head.appendChild(s);\n          _a.label = 4;\n\n        case 4:\n          _a.trys.push([4,, 7, 8]);\n\n          return [4\n          /*yield*/\n          , getCssRules(s)];\n\n        case 5:\n          rules = _a.sent();\n          return [4\n          /*yield*/\n          , eachStylesheet(doc, url, rules, f)];\n\n        case 6:\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 8];\n\n        case 7:\n          doc.head.removeChild(s);\n          return [7\n          /*endfinally*/\n          ];\n\n        case 8:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n} // This calls a function for each CSSRule inside of a CSSStyleSheet.\n// If the CSSStyleSheet has any @import, then it will recursively call the function for those CSSRules too.\n// TODO this should be moved into utils or something\n\n\nfunction eachStylesheet(doc, topUrl, rules, f) {\n  return __awaiter(this, void 0, void 0, function () {\n    var promises, length, i, rule, url;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          promises = [];\n          length = rules.length;\n\n          for (i = 0; i < length; i++) {\n            rule = rules[i];\n\n            if (rule.type === CSSRule.IMPORT_RULE) {\n              url = rule.href;\n\n              if (url) {\n                url = $utils.joinUrl(topUrl, url);\n                promises.push(loadStylesheet(doc, url, f));\n              }\n            } else {\n              f(topUrl, rule);\n            }\n          }\n\n          if (!promises.length) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , Promise.all(promises)];\n\n        case 1:\n          _a.sent();\n\n          _a.label = 2;\n\n        case 2:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n} // This calls a function for each CSSRule for all of the stylesheets in the page.\n// If the CSSStyleSheet has any @import, then it will recursively call the function for those CSSRules too.\n// TODO this should be moved into utils or something\n\n\nfunction eachStylesheets(f) {\n  return __awaiter(this, void 0, void 0, function () {\n    var iframe, doc_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          iframe = document.createElement(\"iframe\"); // This causes it to use the same origin policy as the parent page\n\n          iframe.src = \"about:blank\"; // This tries to make it more accessible for screen readers\n\n          iframe.setAttribute(\"title\", \"\");\n          document.head.appendChild(iframe);\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1,, 3, 4]);\n\n          doc_1 = iframe.contentDocument; // TODO use $dom.getRoot instead of document ?\n\n          return [4\n          /*yield*/\n          , Promise.all($array.map(document.styleSheets, function (sheet) {\n            var url = sheet.href;\n\n            if (url == null) {\n              return eachStylesheet(doc_1, location.href, sheet.cssRules, f);\n            } else {\n              url = $utils.joinUrl(location.href, url);\n              return loadStylesheet(doc_1, url, f);\n            }\n          }))];\n\n        case 2:\n          // TODO use $dom.getRoot instead of document ?\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          document.head.removeChild(iframe);\n          return [7\n          /*endfinally*/\n          ];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * [[Export]] allows downloading of current snapshot of the chart as an\r\n * image, PDF, or its data in various formats.\r\n *\r\n * The export functionality is enabled by default in charts and is accessible\r\n * via API or optional export menu.\r\n *\r\n * To enable menu, simply access export's `menu` property. E.g.:\r\n *\r\n * ```TypeScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JavaScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"exporting\": {\r\n *     \"menu\": {}\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * To export via API, use `export()` method:\r\n *\r\n * ```TypeScript\r\n * chart.exporting.export(type, [options]);\r\n * ```\r\n * ```JavaScript\r\n * chart.exporting.export(type, [options]);\r\n * ```\r\n *\r\n * E.g.:\r\n *\r\n * ```TypeScript\r\n * chart.exporting.export(\"png\");\r\n * ```\r\n * ```JavaScript\r\n * chart.exporting.export(\"png\");\r\n * ```\r\n *\r\n * @todo Better loading indicator?\r\n * @todo Implement multiplier option\r\n * @todo Handling of hanged exports\r\n * @important\r\n */\n\n\nvar Export =\n/** @class */\nfunction (_super) {\n  __extends(Export, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Export(container) {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Adapter.\r\n     */\n\n\n    _this.adapter = new Adapter(_this);\n    /**\r\n     * Holds options for each format.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._formatOptions = new Dictionary();\n    /**\r\n     * Extra [[Sprite]] elements to include in exports.\r\n     */\n\n    _this._extraSprites = [];\n    /**\r\n     * A list of [[Sprite]] elements that need to be valid before export\r\n     * commences.\r\n     */\n\n    _this._validateSprites = [];\n    /**\r\n     * Holds an array of data field names. If set, exported data fields will try\r\n     * to maintain this order.\r\n     *\r\n     * If not set (default), the export will try to maintain the same order as\r\n     * in source data, or as in `dataFields` (if set).\r\n     *\r\n     * @since 4.9.7\r\n     */\n\n    _this.dataFieldsOrder = [];\n    /**\r\n     * Indicates whether data fields were generated dynamically (`true`) or\r\n     * if they were pre-set by the user (`false`).\r\n     */\n\n    _this._dynamicDataFields = true;\n    /**\r\n     * Holds a list of objects that were temporarily removed from the DOM while\r\n     * exporting. Those most probably are tainted images, or foreign objects that\r\n     * would otherwise prevent SVG to be converted to canvas.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._removedObjects = new List();\n    /**\r\n     * Holds references to the objects that were temporarily hidden when export\r\n     * started, so that we can reveal them back when export ends.\r\n     */\n\n    _this._hiddenObjects = [];\n    /**\r\n     * Indicates if non-exportable objects are now hidden;\r\n     */\n\n    _this._objectsAlreadyHidden = false;\n    /**\r\n     * Exported files will be prefixed with whatever it is set here.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._filePrefix = \"amCharts\";\n    /**\r\n     * If you are using web fonts (such as Google Fonts), your chart might be\r\n     * using them as well.\r\n     *\r\n     * Normally, exporting to image will require to download these fonts so the\r\n     * are carried over to exported image.\r\n     *\r\n     * This setting can be used to disable or enable this functionality.\r\n     *\r\n     * @default true\r\n     */\n\n    _this.useWebFonts = true;\n    /**\r\n     * Many modern displays have use more actual pixels per displayed pixel. This\r\n     * results in sharper images on screen. Unfortunately, when exported to a\r\n     * bitmap image of the sam width/height size it will lose those extra pixels,\r\n     * resulting in somewhat blurry image.\r\n     *\r\n     * This is why we are going to export images larger than they are, so that we\r\n     * don't lose any details.\r\n     *\r\n     * If you'd rather export images without change in size, set this to `false`.\r\n     *\r\n     * @default true\r\n     */\n\n    _this.useRetina = true;\n    /**\r\n     * By default Export will try to use built-in method for transforming chart\r\n     * into an image for download, then fallback to external library (canvg) for\r\n     * conversion if failed.\r\n     *\r\n     * Setting this to `false` will force use of external library for all export\r\n     * operations.\r\n     *\r\n     * It might be useful to turn off simplified export if you are using strict\r\n     * content security policies, that disallow images with blobs as their\r\n     * source.\r\n     *\r\n     * @default true\r\n     * @since 4.2.5\r\n     */\n\n    _this.useSimplifiedExport = true;\n    /**\r\n     * If export operation takes longer than milliseconds in this second, we will\r\n     * show a modal saying export operation took longer than expected.\r\n     */\n\n    _this.timeoutDelay = 2000;\n    _this._exportRunning = false;\n    /**\r\n     * Indicator used by [[Component]].\r\n     *\r\n     * @ignore\r\n     */\n\n    _this._prevHasData = false;\n    _this._container = container;\n    _this.className = \"Export\"; // Set default options\n\n    _this._formatOptions.setKey(\"png\", {});\n\n    _this._formatOptions.setKey(\"jpg\", {\n      quality: 0.8\n    });\n\n    _this._formatOptions.setKey(\"gif\", {});\n\n    _this._formatOptions.setKey(\"svg\", {});\n\n    _this._formatOptions.setKey(\"pdf\", {\n      fontSize: 14,\n      imageFormat: \"png\",\n      align: \"left\",\n      addURL: true,\n      addColumnNames: true\n    });\n\n    _this._formatOptions.setKey(\"json\", {\n      indent: 2,\n      useLocale: true\n    });\n\n    _this._formatOptions.setKey(\"csv\", {\n      addColumnNames: true,\n      emptyAs: \"\",\n      addBOM: true\n    });\n\n    _this._formatOptions.setKey(\"xlsx\", {\n      addColumnNames: true,\n      useLocale: true,\n      emptyAs: \"\"\n    });\n\n    _this._formatOptions.setKey(\"html\", {\n      addColumnNames: true,\n      emptyAs: \"\"\n    });\n\n    _this._formatOptions.setKey(\"pdfdata\", {\n      fontSize: 14,\n      imageFormat: \"png\",\n      addURL: true,\n      addColumnNames: true,\n      emptyAs: \"\"\n    });\n\n    _this._formatOptions.setKey(\"print\", {\n      delay: 500,\n      printMethod: \"iframe\"\n    }); // Add options adapter\n\n\n    _this.adapter.add(\"options\", function (arg) {\n      var formatOptions = _this._formatOptions.getKey(arg.type);\n\n      if (arg.options) {\n        arg.options = $object.merge(formatOptions, arg.options);\n      } else {\n        arg.options = formatOptions;\n      }\n\n      return arg;\n    });\n\n    _this.applyTheme();\n\n    _this.dispatchImmediately(\"inited\");\n\n    return _this;\n  }\n\n  Object.defineProperty(Export.prototype, \"menu\", {\n    /**\r\n     * @return ExportMenu instance\r\n     */\n    get: function () {\n      return this._menu;\n    },\n\n    /**\r\n     * An instance of [[ExportMenu]].\r\n     *\r\n     * To add an export menu to a chart, set this to a new instance of\r\n     * [[ExportMenu]].\r\n     *\r\n     * ```TypeScript\r\n     * chart.exporting.menu = new am4core.ExportMenu();\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.exporting.menu = new am4core.ExportMenu();\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"exporting\": {\r\n     *     \"menu\": {}\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @param menu  ExportMenu instance\r\n     */\n    set: function (menu) {\n      var _this = this;\n\n      if (this._menu) {\n        this.removeDispose(this._menu);\n      }\n\n      this._menu = menu; // Set container and language\n\n      this._menu.container = this.container;\n      this._menu.language = this._language; // Add adapter to check for browser support\n\n      this._menu.adapter.add(\"branch\", function (arg) {\n        arg.branch.unsupported = !_this.typeSupported(arg.branch.type);\n        return arg;\n      }); // Add click events\n\n\n      this._menu.events.on(\"hit\", function (ev) {\n        _this.export(ev.branch.type, ev.branch.options);\n\n        _this.menu.close();\n      });\n\n      this._menu.events.on(\"enter\", function (ev) {\n        _this.export(ev.branch.type, ev.branch.options);\n\n        _this.menu.close();\n      });\n\n      this._menu.events.on(\"over\", function (ev) {\n        _this._disablePointers();\n      });\n\n      this._menu.events.on(\"out\", function (ev) {\n        setTimeout(function () {\n          _this._releasePointers();\n        }, 10);\n      }); // Dispatch event\n\n\n      this.dispatchImmediately(\"menucreated\"); // Prefix with Sprite's class name\n\n      this._menu.adapter.add(\"classPrefix\", function (obj) {\n        obj.classPrefix = options.classNamePrefix + obj.classPrefix;\n        return obj;\n      }); // Add menu to disposers so that it's destroyed when Export is disposed\n\n\n      this._disposers.push(this._menu);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if this specific menu item type is supported by current system.\r\n   *\r\n   * @param type  Menu item type\r\n   * @return `false` if not supported\r\n   */\n\n  Export.prototype.typeSupported = function (type) {\n    var supported = true;\n    var options = this.getFormatOptions(type);\n\n    if ($type.hasValue(options) && options.disabled) {\n      supported = false;\n    } else if (type === \"pdf\") {//supported = this.downloadSupport();\n    } else if (type === \"xlsx\") {\n      //supported = (this.downloadSupport() && this._hasData()) ? true : false;\n      supported = this._hasData() ? true : false;\n    } else if (type == \"print\" && !window.print) {\n      supported = false;\n    } else if ([\"json\", \"csv\", \"html\", \"pdfdata\"].indexOf(type) !== -1 && !this._hasData()) {\n      supported = false;\n    }\n\n    return this.adapter.apply(\"supported\", {\n      supported: supported,\n      type: type\n    }).supported;\n  };\n  /**\r\n   * Checks if data is available.\r\n   *\r\n   * @return Has data?\r\n   */\n\n\n  Export.prototype._hasData = function () {\n    return this.data && this.data.length;\n  };\n  /**\r\n   * Get function to handle export for particular format.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Export.prototype._getFunction = function (type) {\n    switch (type) {\n      case \"png\":\n      case \"gif\":\n      case \"jpg\":\n        return this.getImage;\n\n      case \"svg\":\n        return this.getSVG;\n\n      case \"pdf\":\n      case \"pdfdata\":\n        return this.getPDF;\n\n      case \"xlsx\":\n        return this.getExcel;\n\n      case \"csv\":\n        return this.getCSV;\n\n      case \"json\":\n        return this.getJSON;\n\n      case \"html\":\n        return this.getHTML;\n\n      case \"print\":\n        return this.getPrint;\n\n      default:\n        return this.unsupported;\n    }\n  };\n  /**\r\n   * Initiates export procedure.\r\n   *\r\n   * @param type     Export type\r\n   * @param options  Options\r\n   * @return `true` if export was successful\r\n   * @async\r\n   */\n\n\n  Export.prototype.export = function (type, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event_1, func, data, event_2, event_3;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Check if it's a custom item, and do nothing or execute custom callback\n            if (type == \"custom\") {\n              this.handleCustom(options);\n              return [2\n              /*return*/\n              , true];\n            } // Set export running flag\n\n\n            this._exportRunning = true; // Dispatch event\n\n            if (this.events.isEnabled(\"exportstarted\")) {\n              event_1 = {\n                \"type\": \"exportstarted\",\n                \"target\": this,\n                \"format\": type,\n                \"options\": options\n              };\n              this.events.dispatchImmediately(\"exportstarted\", event_1);\n            } // Schedule a preloader\n\n\n            this.showPreloader(); // Schedule a timeout\n\n            if (this.timeoutDelay) {\n              this.hideTimeout();\n              this._timeoutTimeout = this.setTimeout(function () {\n                // Dispatch event\n                if (_this.events.isEnabled(\"exporttimedout\")) {\n                  var event_4 = {\n                    \"type\": \"exporttimedout\",\n                    \"target\": _this,\n                    \"format\": type,\n                    \"options\": options\n                  };\n\n                  _this.events.dispatchImmediately(\"exporttimedout\", event_4);\n                } // Show modal\n\n\n                _this.showTimeout();\n              }, this.timeoutDelay);\n            } // Hide items that should not be exported\n\n\n            this.hideNonExportableSprites();\n            func = this._getFunction(type); // Give chance for plugins to override both function and options\n\n            options = this.adapter.apply(\"options\", {\n              options: options,\n              type: type\n            }).options;\n            func = this.adapter.apply(\"exportFunction\", {\n              func: func,\n              type: type,\n              options: options\n            }).func;\n            return [4\n            /*yield*/\n            , func.call(this, type, options)];\n\n          case 1:\n            data = _a.sent(); // Release pointers\n\n            this._exportRunning = false;\n\n            this._releasePointers(); // Restore temporarily hidden elements\n\n\n            this.restoreNonExportableSprites();\n\n            if (data) {\n              // Dispatch event\n              if (this.events.isEnabled(\"exportfinished\")) {\n                event_2 = {\n                  \"type\": \"exportfinished\",\n                  \"target\": this,\n                  \"format\": type,\n                  \"options\": options\n                };\n                this.events.dispatchImmediately(\"exportfinished\", event_2);\n              } // Hide preloader and timeout modals\n\n\n              this.hidePreloader();\n              this.hideTimeout();\n\n              if (this.menu) {\n                this.menu.close();\n              } // Download or print\n\n\n              if (type === \"print\") {\n                return [2\n                /*return*/\n                , this.print(data, options, this.adapter.apply(\"title\", {\n                  title: this.title,\n                  options: options\n                }).title)];\n              } else {\n                if (type == \"pdfdata\") {\n                  return [2\n                  /*return*/\n                  , this.download(data, this.filePrefix + \".pdf\")];\n                }\n\n                return [2\n                /*return*/\n                , this.download(data, this.filePrefix + \".\" + type, options && options.addBOM)];\n              }\n            } else {\n              // Throw exception?\n              // @todo\n              // Dispatch event\n              if (this.events.isEnabled(\"error\")) {\n                event_3 = {\n                  \"type\": \"error\",\n                  \"target\": this,\n                  \"format\": type,\n                  \"options\": options\n                };\n                this.events.dispatchImmediately(\"error\", event_3);\n              }\n\n              return [2\n              /*return*/\n              , false];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * A function that should handle unsupported export types.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param type     Export type\r\n   * @param options  Options\r\n   * @return Promise\r\n   * @async\r\n   */\n\n\n  Export.prototype.unsupported = function (type, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        // TODO should this return `undefined`?\n        return [2\n        /*return*/\n        , \"\"];\n      });\n    });\n  };\n  /**\r\n   * Handles click on a \"custom\" menu item.\r\n   *\r\n   * Basically, if it has \"callback\" enabled, it will be called. Nothing else.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param options  Options\r\n   */\n\n\n  Export.prototype.handleCustom = function (options) {\n    if ($type.hasValue(options) && $type.hasValue(options.callback)) {\n      options.callback.call(options.callbackTarget || this, options);\n    }\n  };\n  /**\r\n   * Requests a Print of the chart.\r\n   *\r\n   * @param type     Export type\r\n   * @param options  Options\r\n   * @return Promise\r\n   * @async\r\n   */\n\n\n  Export.prototype.getPrint = function (type, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.getImage(\"png\", options)];\n      });\n    });\n  };\n  /**\r\n   * A function that returns data: URI encoded @font-family, so that way it can be embedded into SVG.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return String which can be embedded directly into a <style> element.\r\n   * @async\r\n   */\n\n\n  Export.prototype.getFontFamilies = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var DOMURL, blobs, promises, a;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            DOMURL = this.getDOMURL();\n            blobs = [];\n            promises = [];\n            return [4\n            /*yield*/\n            , eachStylesheets(function (topUrl, rule) {\n              if (rule.type === CSSRule.FONT_FACE_RULE) {\n                var cssText_1 = rule.cssText; // TODO this is necessary because Edge doesn't let you access the src using getPropertyValue\n\n                var src = fontFamilySrcRegexp.exec(cssText_1);\n\n                if (src !== null) {\n                  // TODO make this faster (don't create Promises for non-url stuff)\n                  var urls = src[1].split(/ *, */).map(function (url) {\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var a, after, fullUrl, response, url_1, e_3;\n                      return __generator(this, function (_a) {\n                        switch (_a.label) {\n                          case 0:\n                            a = /^url\\([\"']?([^\"'\\)]+)[\"']?\\)([^,]*)$/.exec(url);\n                            if (!(a === null)) return [3\n                            /*break*/\n                            , 1];\n                            return [2\n                            /*return*/\n                            , url];\n\n                          case 1:\n                            after = a[2];\n                            fullUrl = $utils.joinUrl(topUrl, a[1]);\n\n                            if (this.webFontFilter && !fullUrl.match(this.webFontFilter)) {\n                              return [2\n                              /*return*/\n                              , null];\n                            }\n\n                            _a.label = 2;\n\n                          case 2:\n                            _a.trys.push([2, 7,, 8]);\n\n                            return [4\n                            /*yield*/\n                            , $net.load(fullUrl, undefined, {\n                              responseType: \"blob\"\n                            })];\n\n                          case 3:\n                            response = _a.sent();\n                            if (!supportsBlobUri()) return [3\n                            /*break*/\n                            , 4];\n                            url_1 = DOMURL.createObjectURL(response.blob);\n                            blobs.push(url_1);\n                            return [3\n                            /*break*/\n                            , 6];\n\n                          case 4:\n                            return [4\n                            /*yield*/\n                            , blobToDataUri(response.blob)];\n\n                          case 5:\n                            url_1 = _a.sent();\n                            _a.label = 6;\n\n                          case 6:\n                            // TODO should it should escape the URI ?\n                            return [2\n                            /*return*/\n                            , \"url(\\\"\" + url_1 + \"\\\")\" + after];\n\n                          case 7:\n                            e_3 = _a.sent();\n                            console.error(\"Failed to load font\", fullUrl, e_3);\n                            return [2\n                            /*return*/\n                            , null];\n\n                          case 8:\n                            return [2\n                            /*return*/\n                            ];\n                        }\n                      });\n                    });\n                  });\n                  promises.push(Promise.all(urls).then(function (a) {\n                    a = a.filter(function (x) {\n                      return x != null;\n                    });\n\n                    if (a.length === 0) {\n                      return \"\";\n                    } else {\n                      return cssText_1.replace(fontFamilySrcRegexp, \"src: \" + a.join(\", \") + \";\");\n                    }\n                  }));\n                }\n              }\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 2:\n            a = _a.sent();\n            return [2\n            /*return*/\n            , {\n              blobs: blobs,\n              cssText: a.filter(function (x) {\n                return !!x;\n              }).join(\"\\n\")\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Produces image output from the element.\r\n   *\r\n   * Converts to a `Canvas` first, then produces an image to download.\r\n   *\r\n   * This is an asynchronous function. Rather than returning a result, it\r\n   * returns a Promise.\r\n   *\r\n   * You can use `await` notion from other async functions, or `then()`\r\n   * anywhere else.\r\n   *\r\n   * ```TypeScript\r\n   * let img;\r\n   *\r\n   * // Async\r\n   * img = await chart.exporting.getImage( \"png\" );\r\n   *\r\n   * // Sync\r\n   * chart.exporting.getImage( \"png\" ).then( ( data ) => {\r\n   *   img = data;\r\n   * } );\r\n   * ```\r\n   * ```JavaScript\r\n   * var img;\r\n   * chart.exporting.getImage( \"png\" ).then( ( data ) => {\r\n   *   img = data;\r\n   * } );\r\n   * ```\r\n   *\r\n   * @param  type           Image format\r\n   * @param  options        Options\r\n   * @param  includeExtras  Should extra sprites be included if set?\r\n   * @return Promise\r\n   */\n\n\n  Export.prototype.getImage = function (type, options, includeExtras) {\n    return __awaiter(this, void 0, void 0, function () {\n      var prehidden, canvas, uri, e_4, data, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            prehidden = this._objectsAlreadyHidden;\n\n            if (!prehidden) {\n              this.hideNonExportableSprites();\n            }\n\n            if (!$type.hasValue(options)) {\n              options = this.getFormatOptions(type);\n            } // Wait for required elements to be ready before proceeding\n\n\n            return [4\n            /*yield*/\n            , this.awaitValidSprites()];\n\n          case 1:\n            // Wait for required elements to be ready before proceeding\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.simplifiedImageExport()];\n\n          case 2:\n            if (!_a.sent()) return [3\n            /*break*/\n            , 10];\n            canvas = void 0;\n            _a.label = 3;\n\n          case 3:\n            _a.trys.push([3, 7,, 9]);\n\n            return [4\n            /*yield*/\n            , this.getCanvas(options)];\n\n          case 4:\n            canvas = _a.sent();\n            if (!(includeExtras !== false)) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this.addExtras(canvas, options)];\n\n          case 5:\n            canvas = _a.sent();\n            _a.label = 6;\n\n          case 6:\n            uri = canvas.toDataURL(this.getContentType(type), options.quality); // Get rid of the canvas\n\n            this.disposeCanvas(canvas);\n\n            if (!prehidden) {\n              this.restoreNonExportableSprites();\n            }\n\n            return [2\n            /*return*/\n            , uri];\n\n          case 7:\n            e_4 = _a.sent();\n            console.error(e_4.message + \"\\n\" + e_4.stack);\n            $log.warn(\"Simple export failed, falling back to advanced export\");\n\n            if (canvas) {\n              this.disposeCanvas(canvas);\n            }\n\n            return [4\n            /*yield*/\n            , this.getImageAdvanced(type, options, includeExtras)];\n\n          case 8:\n            data = _a.sent();\n\n            if (!prehidden) {\n              this.restoreNonExportableSprites();\n            }\n\n            return [2\n            /*return*/\n            , data];\n\n          case 9:\n            return [3\n            /*break*/\n            , 12];\n\n          case 10:\n            return [4\n            /*yield*/\n            , this.getImageAdvanced(type, options, includeExtras)];\n\n          case 11:\n            data = _a.sent();\n\n            if (!prehidden) {\n              this.restoreNonExportableSprites();\n            }\n\n            return [2\n            /*return*/\n            , data];\n\n          case 12:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Adds extra elements to the canvas.\r\n   *\r\n   * @param  canvas   Original canvas\r\n   * @param  options  Options\r\n   */\n\n\n  Export.prototype.addExtras = function (canvas, options, advanced) {\n    return __awaiter(this, void 0, void 0, function () {\n      var middleLeft_1, middleTop_1, middleWidth_1, middleHeight_1, extraRight_1, extraBottom_1, extras, newCanvas, ctx_1, background, left_1, top_1, right_1, bottom_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.extraSprites.length) return [3\n            /*break*/\n            , 2];\n            middleLeft_1 = 0;\n            middleTop_1 = 0;\n            middleWidth_1 = canvas.width;\n            middleHeight_1 = canvas.height;\n            extraRight_1 = 0;\n            extraBottom_1 = 0;\n            return [4\n            /*yield*/\n            , Promise.all($array.map(this.extraSprites, function (extraSprite) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var extra, extraCanvas, extraWidth, extraHeight;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (extraSprite instanceof Sprite) {\n                        extra = {\n                          sprite: extraSprite,\n                          position: \"bottom\"\n                        };\n                      } else {\n                        extra = extraSprite;\n                      } // Set defaults\n\n\n                      extra.position = extra.position || \"bottom\";\n                      extra.marginTop = extra.marginTop || 0;\n                      extra.marginRight = extra.marginRight || 0;\n                      extra.marginBottom = extra.marginBottom || 0;\n                      extra.marginLeft = extra.marginLeft || 0;\n                      if (!advanced) return [3\n                      /*break*/\n                      , 2];\n                      return [4\n                      /*yield*/\n                      , extra.sprite.exporting.getCanvasAdvanced(options)];\n\n                    case 1:\n                      extraCanvas = _a.sent();\n                      return [3\n                      /*break*/\n                      , 4];\n\n                    case 2:\n                      return [4\n                      /*yield*/\n                      , extra.sprite.exporting.getCanvas(options)];\n\n                    case 3:\n                      extraCanvas = _a.sent();\n                      _a.label = 4;\n\n                    case 4:\n                      extraWidth = extraCanvas.width + extra.marginLeft + extra.marginRight;\n                      extraHeight = extraCanvas.height + extra.marginTop + extra.marginBottom;\n\n                      if (extra.position == \"top\") {\n                        middleWidth_1 = extra.crop ? middleHeight_1 : $math.max(middleWidth_1, extraWidth);\n                        middleTop_1 += extraHeight;\n                      } else if (extra.position == \"right\") {\n                        middleHeight_1 = extra.crop ? middleHeight_1 : $math.max(middleHeight_1, extraHeight);\n                        extraRight_1 += extraWidth;\n                      } else if (extra.position == \"left\") {\n                        middleHeight_1 = extra.crop ? middleHeight_1 : $math.max(middleHeight_1, extraHeight);\n                        middleLeft_1 += extraWidth;\n                      } else if (extra.position === \"bottom\") {\n                        middleWidth_1 = extra.crop ? middleHeight_1 : $math.max(middleWidth_1, extraWidth);\n                        extraBottom_1 += extraHeight;\n                      }\n\n                      return [2\n                      /*return*/\n                      , {\n                        canvas: extraCanvas,\n                        position: extra.position,\n                        left: extra.marginLeft,\n                        top: extra.marginTop,\n                        width: extraWidth,\n                        height: extraHeight\n                      }];\n                  }\n                });\n              });\n            }))];\n\n          case 1:\n            extras = _a.sent();\n            newCanvas = this.getDisposableCanvas();\n            newCanvas.width = middleLeft_1 + middleWidth_1 + extraRight_1;\n            newCanvas.height = middleTop_1 + middleHeight_1 + extraBottom_1;\n            ctx_1 = newCanvas.getContext(\"2d\");\n            background = this.backgroundColor || this.findBackgroundColor(this.sprite.dom);\n\n            if (background) {\n              ctx_1.fillStyle = background.toString();\n              ctx_1.fillRect(0, 0, newCanvas.width, newCanvas.height);\n            }\n\n            left_1 = middleLeft_1;\n            top_1 = middleTop_1;\n            right_1 = left_1 + middleWidth_1;\n            bottom_1 = top_1 + middleHeight_1; // Radiates outwards from center\n\n            $array.each(extras, function (extra) {\n              if (extra.position == \"top\") {\n                top_1 -= extra.height;\n                ctx_1.drawImage(extra.canvas, middleLeft_1 + extra.left, top_1 + extra.top);\n              } else if (extra.position == \"right\") {\n                ctx_1.drawImage(extra.canvas, right_1 + extra.left, middleTop_1 + extra.top);\n                right_1 += extra.width;\n              } else if (extra.position == \"left\") {\n                left_1 -= extra.width;\n                ctx_1.drawImage(extra.canvas, left_1 + extra.left, middleTop_1 + extra.top);\n              } else if (extra.position === \"bottom\") {\n                ctx_1.drawImage(extra.canvas, middleLeft_1 + extra.left, bottom_1 + extra.top);\n                bottom_1 += extra.height;\n              }\n\n              _this.disposeCanvas(extra.canvas);\n            });\n            ctx_1.drawImage(canvas, middleLeft_1, middleTop_1);\n            return [2\n            /*return*/\n            , newCanvas];\n\n          case 2:\n            return [2\n            /*return*/\n            , canvas];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns canvas representation of the [[Sprite]].\r\n   *\r\n   * @param   options  Options\r\n   * @return           Canvas\r\n   */\n\n\n  Export.prototype.getCanvas = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var background, DOMURL, url, blobs, canvas, width, height, font, fontSize, scale, pixelRatio, ctx, promises, a, data, svg, img;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Options are set?\n            if (!$type.hasValue(options)) {\n              options = {};\n            }\n\n            background = this.backgroundColor || this.findBackgroundColor(this.sprite.dom);\n            DOMURL = this.getDOMURL();\n            url = null;\n            blobs = null;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1,, 4, 5]);\n\n            width = this.sprite.pixelWidth;\n            height = this.sprite.pixelHeight;\n            font = $dom.findFont(this.sprite.dom);\n            fontSize = $dom.findFontSize(this.sprite.dom);\n            scale = options.scale || 1;\n            pixelRatio = this.getPixelRatio(options); // Check if scale needs to be updated as per min/max dimensions\n\n            scale = this.getAdjustedScale(width * pixelRatio, height * pixelRatio, scale, options); // Create canvas and its 2D context\n\n            canvas = this.getDisposableCanvas(); // Set canvas width/height\n\n            canvas.style.width = width * scale + 'px';\n            canvas.style.height = height * scale + 'px';\n            canvas.width = width * scale;\n            canvas.height = height * scale;\n            ctx = canvas.getContext(\"2d\"); // if (pixelRatio != 1) {\n            // \tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n            // }\n            // Add background if necessary\n\n            if (background) {\n              ctx.fillStyle = background.toString();\n              ctx.fillRect(0, 0, width * scale, height * scale);\n            }\n\n            promises = [];\n\n            if (this.useWebFonts) {\n              // TODO what if one of the other things errors before it's been able to set `blobs` ?\n              promises.push(this.getFontFamilies().then(function (fonts) {\n                blobs = fonts.blobs;\n                return fonts.cssText;\n              }));\n            }\n\n            promises.push(this.imagesToDataURI(this.sprite.dom, options));\n            promises.push(this.prepForeignObjects(this.sprite.dom, options));\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 2:\n            a = _a.sent();\n            data = this.normalizeSVG(\"<style>\" + a[0] + \"</style>\" + this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom), options, width, height, scale, font, fontSize);\n            svg = new Blob([data], {\n              type: \"image/svg+xml\"\n            });\n            url = DOMURL.createObjectURL(svg);\n            return [4\n            /*yield*/\n            , this.loadNewImage(url, width * scale * pixelRatio, height * scale * pixelRatio, \"anonymous\")];\n\n          case 3:\n            img = _a.sent(); // Draw image on canvas\n\n            ctx.drawImage(img, 0, 0);\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            if (url !== null) {\n              DOMURL.revokeObjectURL(url);\n            }\n\n            if (blobs !== null) {\n              $array.each(blobs, function (url) {\n                DOMURL.revokeObjectURL(url);\n              });\n            } // Restore replaced tainted images in DOM\n\n\n            this.restoreRemovedObjects();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            , canvas];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns canvas representation of the [[Sprite]] using canvg.\r\n   *\r\n   * @param   options  Options\r\n   * @return           Canvas\r\n   */\n\n\n  Export.prototype.getCanvasAdvanced = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var background, canvg, width, height, font, fontSize, scale, pixelRatio, data, canvas, config;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Options are set?\n            if (!$type.hasValue(options)) {\n              options = {};\n            } // Convert external images to data uris\n\n\n            return [4\n            /*yield*/\n            , this.imagesToDataURI(this.sprite.dom, options)];\n\n          case 1:\n            // Convert external images to data uris\n            _a.sent();\n\n            background = this.backgroundColor || this.findBackgroundColor(this.sprite.dom);\n            return [4\n            /*yield*/\n            , this.canvg];\n\n          case 2:\n            canvg = _a.sent();\n            width = this.sprite.pixelWidth;\n            height = this.sprite.pixelHeight;\n            font = $dom.findFont(this.sprite.dom);\n            fontSize = $dom.findFontSize(this.sprite.dom);\n            scale = options.scale || 1;\n            pixelRatio = this.getPixelRatio(options); // Check if scale needs to be updated as per min/max dimensions\n\n            scale = this.getAdjustedScale(width * pixelRatio, height * pixelRatio, scale, options);\n            data = this.normalizeSVG(this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom), options, width, height, scale, font, fontSize, background);\n            canvas = this.getDisposableCanvas(); // Set canvas width/height\n\n            canvas.style.width = width * pixelRatio * scale + 'px';\n            canvas.style.height = height * pixelRatio * scale + 'px';\n            canvas.width = width * pixelRatio * scale;\n            canvas.height = height * pixelRatio * scale;\n            config = {\n              //ignoreDimensions: true,\n              useCORS: true\n            };\n\n            if (pixelRatio != 1) {\n              config.ignoreDimensions = true;\n              config.scaleWidth = width * pixelRatio * scale;\n              config.scaleHeight = height * pixelRatio * scale;\n            }\n\n            return [4\n            /*yield*/\n            , canvg.fromString(canvas.getContext(\"2d\"), data, config).render()];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , canvas];\n        }\n      });\n    });\n  };\n  /**\r\n   * Tries to dynamically load [canvg.js](https://github.com/canvg/canvg) and\r\n   * export an image using its functions.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @param type     Image format\r\n   * @param options  Options\r\n   * @return Data uri\r\n   */\n\n\n  Export.prototype.getImageAdvanced = function (type, options, includeExtras) {\n    return __awaiter(this, void 0, void 0, function () {\n      var prehidden, canvas, uri;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            prehidden = this._objectsAlreadyHidden;\n\n            if (!prehidden) {\n              this.hideNonExportableSprites();\n            }\n\n            if (!$type.hasValue(options)) {\n              options = this.getFormatOptions(type);\n            }\n\n            return [4\n            /*yield*/\n            , this.getCanvasAdvanced(options)];\n\n          case 1:\n            canvas = _a.sent();\n            if (!(includeExtras !== false)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.addExtras(canvas, options, true)];\n\n          case 2:\n            canvas = _a.sent();\n            _a.label = 3;\n\n          case 3:\n            uri = canvas.toDataURL(this.getContentType(type), options.quality); // Get rid of the canvas\n\n            this.disposeCanvas(canvas);\n\n            if (!prehidden) {\n              this.restoreNonExportableSprites();\n            }\n\n            return [2\n            /*return*/\n            , uri];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates a `<canvas>` element and returns it.\r\n   *\r\n   * @return Canvas element\r\n   */\n\n\n  Export.prototype.getDisposableCanvas = function () {\n    var canvas = document.createElement(\"canvas\");\n    canvas.style.position = \"fixed\";\n    canvas.style.top = \"-10000px\";\n    document.body.appendChild(canvas);\n    return canvas;\n  };\n  /**\r\n   * Removes canvas.\r\n   *\r\n   * @param canvas  Canvas element\r\n   */\n\n\n  Export.prototype.disposeCanvas = function (canvas) {\n    document.body.removeChild(canvas);\n  };\n  /**\r\n   * Returns pixel ratio for retina displays.\r\n   *\r\n   * @return Pixel ratio\r\n   */\n\n\n  Export.prototype.getPixelRatio = function (options) {\n    // const scale = options && options.scale ? options.scale : 1;\n    // return (this.useRetina ? $utils.getPixelRatio() : 1) * scale;\n    return this.useRetina ? $utils.getPixelRatio() : 1;\n  };\n  /**\r\n   * Calculates adjusted scale if image does not fit or is larger than min/max\r\n   * settings.\r\n   *\r\n   * @param   width    Width of the source image\r\n   * @param   height   Height of the source image\r\n   * @param   scale    Current scale\r\n   * @param   options  Options\r\n   * @return           Adjusted scale\r\n   */\n\n\n  Export.prototype.getAdjustedScale = function (width, height, scale, options) {\n    if (!options) {\n      return scale;\n    }\n\n    var adjWidth = width * scale;\n    var adjHeight = width * scale; // Check max restrictions\n\n    var widthScale;\n    var heightScale;\n\n    if (options.maxWidth && adjWidth > options.maxWidth) {\n      widthScale = options.maxWidth / width;\n    }\n\n    if (options.maxHeight && adjHeight > options.maxHeight) {\n      heightScale = options.maxHeight / height;\n    }\n\n    if (widthScale || heightScale) {\n      return $math.min(widthScale, heightScale);\n    } // Check min restrictions\n\n\n    if (options.minWidth && adjWidth < options.minWidth) {\n      widthScale = options.minWidth / width;\n    }\n\n    if (options.minHeight && adjHeight < options.minHeight) {\n      heightScale = options.minHeight / height;\n    }\n\n    if (widthScale || heightScale) {\n      return $math.max(widthScale, heightScale);\n    }\n\n    return scale;\n  };\n  /**\r\n   * Converts all `<image>` tags in SVG to use data uris instead of external\r\n   * URLs\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param el       SVG node\r\n   * @param options  Options\r\n   * @return Promise\r\n   */\n\n\n  Export.prototype.imagesToDataURI = function (el, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var images, promises, count, i, image, href;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            images = el.querySelectorAll(\"image\");\n            if (!images.length) return [3\n            /*break*/\n            , 2];\n            promises = []; // There are images, process each of them\n\n            for (count = images.length, i = 0; i < count; i++) {\n              image = images[i];\n              href = image.getAttributeNS(Export.XLINK, \"href\"); // no href?\n\n              if (!href) {\n                continue;\n              }\n\n              if (href.indexOf(\"data:image\") !== -1) {// Ignore image if it's already in Data URI format\n              } else {\n                // SVG or bitmap image?\n                if (href.indexOf(\".svg\") !== -1) {\n                  promises.push(this.svgToDataURI(image, options));\n                } else {\n                  promises.push(this.imageToDataURI(image, options));\n                }\n              }\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * `foreignObject` elements cannot be exported. This function hides them\r\n   * temprarily. In the future it might try to convert them to SVG to make them\r\n   * exportable.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param el       SVG node\r\n   * @param options  Options\r\n   * @return Promise\r\n   */\n\n\n  Export.prototype.prepForeignObjects = function (el, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var objects, count, i;\n      return __generator(this, function (_a) {\n        objects = el.querySelectorAll(\"foreignObject\");\n\n        if (objects.length) {\n          // There are foreign objects, process each of them\n          for (count = objects.length, i = 0; i < count; i++) {\n            this.temporarilyRemoveObject(objects[i]);\n          }\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\r\n   * Converts an SVG `<image>` to use its data uri for `href` instead of\r\n   * external file.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param el       SVG element\r\n   * @param options  Options\r\n   */\n\n\n  Export.prototype.imageToDataURI = function (el, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var img, canvas, uri, e_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.loadNewImage(el.getAttributeNS(Export.XLINK, \"href\"), null, null, \"anonymous\")];\n\n          case 1:\n            // Create image\n            img = _a.sent();\n            canvas = document.createElement(\"canvas\");\n            canvas.width = img.width;\n            canvas.height = img.height; // Draw new image on it via `toDataURL`\n\n            canvas.getContext(\"2d\").drawImage(img, 0, 0); // Replace image `href` with data uri\n            // If we got to this point it means image has loaded, however we might\n            // still get an error with `toDataURL()`\n\n            try {\n              uri = canvas.toDataURL();\n              el.setAttribute(\"href\", uri);\n              return [2\n              /*return*/\n              , uri];\n            } catch (e) {\n              // Give up and temporarily remove the element href temporarily\n              if (options.keepTainted !== false) {\n                /*this._removedObjects.push({\r\n                    \"element\": el,\r\n                    \"originalHref\": el.getAttributeNS(Export.XLINK, \"href\")\r\n                });\r\n                el.setAttributeNS(Export.XLINK, \"href\", \"\");*/\n                this.temporarilyRemoveObject(el);\n              }\n\n              return [2\n              /*return*/\n              , undefined];\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            e_5 = _a.sent(); // Give up and temporarily remove the element's href\n\n            if (!options || options.keepTainted !== false) {\n              /*this._removedObjects.push({\r\n                  \"element\": el,\r\n                  \"originalHref\": el.getAttributeNS(Export.XLINK, \"href\")\r\n              });\r\n              el.setAttributeNS(Export.XLINK, \"href\", \"\");*/\n              this.temporarilyRemoveObject(el);\n            }\n\n            return [2\n            /*return*/\n            , undefined];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Converts `<image>` with external SVG source to data uri. Loads external SVG\r\n   * file, then converts it to data uri and replaces the `xlink:href` parameter.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param el        An SVG element\r\n   * @param options   Options\r\n   */\n\n\n  Export.prototype.svgToDataURI = function (el, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var href, data, charset, uri, e_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            href = el.getAttributeNS(Export.XLINK, \"href\");\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , $net.load(href)];\n\n          case 2:\n            data = _a.sent();\n            charset = this.adapter.apply(\"charset\", {\n              charset: \"base64\",\n              type: \"svg\",\n              options: options\n            }).charset;\n            uri = this.adapter.apply(\"svgToDataURI\", {\n              data: \"data:\" + this.getContentType(\"svg\") + \";\" + charset + \",\" + btoa(data.response),\n              options: options\n            }).data;\n            el.setAttributeNS(Export.XLINK, \"href\", uri);\n            return [2\n            /*return*/\n            , uri];\n\n          case 3:\n            e_6 = _a.sent(); // Disable temporarily\n\n            if (!options || options.keepTainted !== false) {\n              /*this._removedObjects.push({\r\n                  \"element\": el,\r\n                  \"originalHref\": href\r\n              });\r\n              el.setAttributeNS(Export.XLINK, \"href\", \"\");*/\n              this.temporarilyRemoveObject(el);\n            }\n\n            return [2\n            /*return*/\n            , undefined];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Temporarily removes element from DOM, and replaces it with a dummy\r\n   * placeholder, as well as stores it for later restoration.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param el Node\r\n   */\n\n\n  Export.prototype.temporarilyRemoveObject = function (el, placeholder) {\n    // Get parent\n    var parent = el.parentElement || el.parentNode; // Create a placeholder group element if it has not been passed in\n\n    if (!placeholder) {\n      placeholder = this.sprite.paper.add(\"g\").node;\n    }\n\n    parent.insertBefore(placeholder, el); // Check if we have a textContents we can replace with\n    // @todo Perhaps we should explore alternatives to creating text nodes\n    // i.e. creating a text version of the HTML-based Text, just for export\n    // purposes. Converting HTML into SVG is very complicated\n\n    if (el.textContent) {\n      /*let text = this.sprite.paper.add(\"text\").node;\r\n      text.textContent = el.textContent;\r\n      placeholder.appendChild(text);\r\n        // Copy properties from the removing element to the placeholder\r\n      $dom.copyAttributes(el, placeholder);*/\n    } // Remove the old element\n\n\n    parent.removeChild(el); // Log removed item\n\n    this._removedObjects.push({\n      \"element\": el,\n      \"placeholder\": placeholder\n    });\n  };\n  /**\r\n   * Restores all (possibly tainted or unsupported) objects that were\r\n   * temporarily removed when exporting.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Export.prototype.restoreRemovedObjects = function () {\n    var obj;\n\n    while (true) {\n      obj = this._removedObjects.pop();\n\n      if (!obj) {\n        break;\n      } //obj.element.setAttribute(\"href\", obj.originalHref);\n\n\n      var parent_1 = obj.placeholder.parentElement || obj.placeholder.parentNode;\n      parent_1.insertBefore(obj.element, obj.placeholder); //parent.removeChild(obj.placeholder);\n    }\n  };\n  /**\r\n   * Checkes if simplified export can be used using `createObjectURL` and SVG\r\n   * document does not contain any external images.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return `true` if simplified export can be used\r\n   */\n\n\n  Export.prototype.simplifiedImageExport = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var cache, canvas, ctx, DOMURL, svg, url, img, e_7, e_8;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.useSimplifiedExport === false) {\n              return [2\n              /*return*/\n              , false];\n            }\n\n            cache = registry.getCache(\"simplifiedImageExport\");\n\n            if (cache === false || cache === true) {\n              return [2\n              /*return*/\n              , cache];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 6,, 7]);\n\n            canvas = document.createElement(\"canvas\");\n            canvas.width = 1;\n            canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            DOMURL = this.getDOMURL();\n            svg = new Blob([this.normalizeSVG(\"<g></g>\", {}, 1, 1)], {\n              type: \"image/svg+xml\"\n            });\n            url = DOMURL.createObjectURL(svg);\n            img = void 0;\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this.loadNewImage(url, 1, 1)];\n\n          case 3:\n            img = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            e_7 = _a.sent();\n            return [2\n            /*return*/\n            , false];\n\n          case 5:\n            ctx.drawImage(img, 0, 0);\n            DOMURL.revokeObjectURL(url);\n\n            try {\n              //let uri = canvas.toDataURL(\"image/png\");\n              registry.setCache(\"simplifiedImageExport\", true);\n              return [2\n              /*return*/\n              , true];\n            } catch (e) {\n              registry.setCache(\"simplifiedImageExport\", false);\n              return [2\n              /*return*/\n              , false];\n            }\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            e_8 = _a.sent();\n            registry.setCache(\"simplifiedImageExport\", false);\n            return [2\n            /*return*/\n            , false];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns a new `<image>` element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param url          URL of the image\r\n   * @param width        Width (px)\r\n   * @param height       Height (px)\r\n   * @param crossOrigin  Cross-Origin setting\r\n   * @return Promise\r\n   */\n\n\n  Export.prototype.loadNewImage = function (url, width, height, crossOrigin) {\n    return new Promise(function (success, error) {\n      // New image\n      var image;\n\n      if (width && height) {\n        image = new Image(width, height);\n      } else {\n        image = new Image();\n      } // Set crossorigin\n\n\n      if (crossOrigin) {\n        image.setAttribute(\"crossOrigin\", crossOrigin);\n      } // Report success on load\n\n\n      image.onload = function () {\n        success(image);\n      };\n\n      function onerror() {\n        // Error occurred. Just in case it's the crossOrigin issue, let's try\n        // stripping off this attribute and trying again\n        if (crossOrigin) {\n          // Retain old uri\n          var currentHref = image.src; // Set up another `onerror` to handle situations where image is not\n          // loadable at all (i.e. protected by CORS)\n\n          image.onerror = function () {\n            // Nope, no luck\n            error(new Error(\"Loading image \\\"\" + url + \"\\\" failed\"));\n          }; // remove the `crossOrigin` attribute\n\n\n          image.removeAttribute(\"crossorigin\"); // retry\n\n          image.src = \"\";\n          image.src = currentHref;\n        } else {\n          error(new Error(\"Loading image \\\"\" + url + \"\\\" failed\"));\n        }\n      } // Set image error handlers\n\n\n      image.onabort = onerror;\n      image.onerror = onerror; // Trigger load\n\n      image.src = url;\n    });\n  };\n  /**\r\n   * Returns current DOM URL.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return URL\r\n   */\n\n\n  Export.prototype.getDOMURL = function () {\n    return self.URL || self.webkitURL || self;\n  };\n  /**\r\n   * Returns an SVG representation of the chart.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @param type       Type of the export\r\n   * @param options    Options\r\n   * @param encodeURI  If true, will return result will be data URI\r\n   * @return Promise\r\n   */\n\n\n  Export.prototype.getSVG = function (type, options, encodeURI) {\n    if (encodeURI === void 0) {\n      encodeURI = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var prehidden, width, height, font, fontSize, scale, pixelRatio, svg, charset, uri;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            prehidden = this._objectsAlreadyHidden;\n\n            if (!prehidden) {\n              this.hideNonExportableSprites();\n            }\n\n            if (!$type.hasValue(options)) {\n              options = this.getFormatOptions(\"svg\");\n            } // Wait for required elements to be ready before proceeding\n\n\n            return [4\n            /*yield*/\n            , this.awaitValidSprites()];\n\n          case 1:\n            // Wait for required elements to be ready before proceeding\n            _a.sent();\n\n            width = this.sprite.pixelWidth;\n            height = this.sprite.pixelHeight;\n            font = $dom.findFont(this.sprite.dom);\n            fontSize = $dom.findFontSize(this.sprite.dom);\n            scale = options.scale || 1;\n            pixelRatio = this.getPixelRatio(options); // Check if scale needs to be updated as per min/max dimensions\n\n            scale = this.getAdjustedScale(width * pixelRatio, height * pixelRatio, scale, options);\n            svg = this.normalizeSVG(this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom), options, width, height, scale, font, fontSize);\n            charset = this.adapter.apply(\"charset\", {\n              charset: \"charset=utf-8\",\n              type: \"svg\",\n              options: options\n            }).charset;\n            uri = this.adapter.apply(\"getSVG\", {\n              data: encodeURI ? \"data:\" + this.getContentType(type) + \";\" + charset + \",\" + encodeURIComponent(svg) : svg,\n              options: options\n            }).data;\n\n            if (!prehidden) {\n              this.restoreNonExportableSprites();\n            }\n\n            return [2\n            /*return*/\n            , uri];\n        }\n      });\n    });\n  };\n  /**\r\n   * Checks if SVG is fully formatted. Encloses in `<svg>...</svg>` if\r\n   * necessary.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param svg       Input SVG\r\n   * @param options   Options\r\n   * @param width     Width of the SVG viewport\r\n   * @param height    Height of the SVG viewport\r\n   * @param font      Font family to use as a base\r\n   * @param fontSize  Font size to use as a base\r\n   * @return Output SVG\r\n   * @todo Add style params to existing <svg>\r\n   */\n\n\n  Export.prototype.normalizeSVG = function (svg, options, width, height, scale, font, fontSize, background) {\n    // Construct width/height params\n    var dimParams = \"\";\n\n    if (width) {\n      dimParams += \"width=\\\"\" + Math.round(width * (scale || 1)) + \"px\\\" \";\n    }\n\n    if (height) {\n      dimParams += \"height=\\\"\" + Math.round(height * (scale || 1)) + \"px\\\" \";\n    } // Apply font settings\n\n\n    var styleParams = \"\";\n\n    if (font) {\n      styleParams += \"font-family: \" + font.replace(/\"/g, \"\") + \";\";\n    }\n\n    if (fontSize) {\n      styleParams += \"font-size: \" + fontSize + \";\";\n    } // Scale\n\n\n    if (scale) {\n      dimParams += \"viewBox=\\\"0 0 \" + width + \" \" + height + \"\\\" \";\n    } // Remove foreign objects temporarily\n\n\n    var fos = [];\n    var ms = svg.match(/<foreignObject[\\s\\S]*<\\/foreignObject>/gi);\n\n    if (ms) {\n      for (var i = 0; i < ms.length; i++) {\n        svg = svg.replace(ms[i], $strings.PLACEHOLDER);\n        fos.push(ms[i]);\n      }\n    } // Add missing <svg> enclosure\n\n\n    if (!svg.match(/<svg/)) {\n      svg = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><svg \" + dimParams + \" style=\\\"\" + styleParams + \"\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\" + svg + \"</svg>\";\n    } else {\n      if (dimParams !== \"\") {\n        // Clear current params\n        svg = svg.replace(/(<svg[^>]*)width=\"[^\"]*\"/, \"$1\");\n        svg = svg.replace(/(<svg[^>]*)height=\"[^\"]*\"/, \"$1\"); // Add new params\n\n        svg = svg.replace(/(<svg)/, \"$1\" + dimParams);\n      }\n      /*if (styleParams !== \"\") {\r\n          // Clear current params\r\n          svg = svg.replace(/(<svg[^>]*)stylewidth=\"[^\"]*\"/, \"$1\");\r\n          svg = svg.replace(/(<svg[^>]*)height=\"[^\"]*\"/, \"$1\");\r\n            // Add new params\r\n          svg = svg.replace(/(<svg)/, \"$1\" + dimParams);\r\n      }*/\n\n    }\n\n    if (background) {\n      svg = svg.replace(/(<svg[^>]*>)/, \"$1<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"\" + background.rgba + \"\\\"/>\"); //svg = svg.replace(/<\\/svg>/, \"<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"\" + background.rgba + \"\\\"/></svg>\");\n    }\n\n    if ($browser.isInternetExplorer()) {\n      // IE can't handle exporting <feColorMatrix> for some reason\n      svg = svg.replace(/<feColorMatrix [^\\/>]*\\/>/gi, \"\");\n    } // Remove base uri-related stuff\n\n\n    var reg = new RegExp(\"url\\\\(\" + $utils.escapeForRgex($utils.getBaseURI()), \"g\");\n    svg = svg.replace(reg, \"url(#\"); // Remove escaped quotes in url() parameters\n\n    svg = svg.replace(/url\\(&quot;([^)]*)&quot;\\)/gm, \"url($1)\"); // Put foreignObjects back in\n\n    if (fos.length) {\n      for (var i = 0; i < fos.length; i++) {\n        svg = svg.replace($strings.PLACEHOLDER, fos[i]);\n      }\n    }\n\n    svg = this.adapter.apply(\"normalizeSVG\", {\n      data: svg,\n      options: options\n    }).data;\n    return svg;\n  };\n  /**\r\n   * Serializes an element and returns its contents.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param element  An element to serialize\r\n   * @return A serialized XML\r\n   */\n\n\n  Export.prototype.serializeElement = function (element) {\n    return new XMLSerializer().serializeToString(element);\n  };\n  /**\r\n   * Returns a PDF containing chart image.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @param type     Type of the export\r\n   * @param options  Options\r\n   * @return Promise\r\n   * @async\r\n   * @todo Account for header when calculating vertical fit\r\n   */\n\n\n  Export.prototype.getPDF = function (type, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      function addFont(font) {\n        var paths = {};\n        paths.normal = font.normal.path;\n        vfs[font.normal.path] = font.normal.bytes;\n\n        if (font.bold) {\n          paths.bold = font.bold.path;\n          vfs[font.bold.path] = font.bold.bytes;\n        } else {\n          paths.bold = font.normal.path;\n        }\n\n        if (font.italics) {\n          paths.italics = font.italics.path;\n          vfs[font.italics.path] = font.italics.bytes;\n        } else {\n          paths.italics = font.normal.path;\n        }\n\n        if (font.bolditalics) {\n          paths.bolditalics = font.bolditalics.path;\n          vfs[font.bolditalics.path] = font.bolditalics.bytes;\n        } else {\n          paths.bolditalics = font.normal.path;\n        }\n\n        fonts[font.name] = paths;\n      }\n\n      var image, pdfmake, defaultMargins, doc, title, extraMargin, _a, _b, _c, fonts, vfs;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getImage(options.imageFormat || \"png\", options)];\n\n          case 1:\n            image = _d.sent();\n            return [4\n            /*yield*/\n            , this.pdfmake];\n\n          case 2:\n            pdfmake = _d.sent();\n            defaultMargins = [30, 30, 30, 30];\n            doc = {\n              pageSize: options.pageSize || \"A4\",\n              pageOrientation: options.pageOrientation || \"portrait\",\n              pageMargins: options.pageMargins || defaultMargins,\n              defaultStyle: {\n                font: options.font ? options.font.name : undefined\n              },\n              //header: <any>[],\n              content: []\n            };\n            title = this.adapter.apply(\"title\", {\n              title: this.title,\n              options: options\n            }).title;\n            extraMargin = 0;\n\n            if (title) {\n              doc.content.push({\n                text: title,\n                fontSize: options.fontSize || 14,\n                bold: true,\n                margin: [0, 0, 0, 15]\n              }); // Add some leftover margin for title\n\n              extraMargin += 50;\n            } // Add page URL?\n\n\n            if (options.addURL) {\n              doc.content.push({\n                text: this.language.translate(\"Saved from\") + \": \" + document.location.href,\n                fontSize: options.fontSize,\n                margin: [0, 0, 0, 15]\n              }); // Add some leftover margin for URL\n\n              extraMargin += 50;\n            } // Add image\n\n\n            if (type != \"pdfdata\") {\n              doc.content.push({\n                image: image,\n                alignment: options.align || \"left\",\n                fit: this.getPageSizeFit(doc.pageSize, doc.pageMargins, extraMargin)\n              });\n            }\n\n            if (!(type == \"pdfdata\" || options.addData)) return [3\n            /*break*/\n            , 4];\n            _b = (_a = doc.content).push;\n            _c = {};\n            return [4\n            /*yield*/\n            , this.getPDFData(\"pdf\", options)];\n\n          case 3:\n            _b.apply(_a, [(_c.table = _d.sent(), _c.fontSize = options.fontSize || 14, _c)]);\n\n            _d.label = 4;\n\n          case 4:\n            // Apply adapters\n            doc = this.adapter.apply(\"pdfmakeDocument\", {\n              doc: doc,\n              options: options\n            }).doc;\n            fonts = null;\n            vfs = null;\n\n            if (options.font) {\n              fonts = {};\n              vfs = {};\n              addFont(options.font);\n\n              if (options.extraFonts) {\n                $array.each(options.extraFonts, addFont);\n              }\n            }\n\n            return [4\n            /*yield*/\n            , new Promise(function (success, error) {\n              pdfmake.createPdf(doc, null, fonts, vfs).getDataUrl(function (uri) {\n                success(uri);\n              });\n            })];\n\n          case 5:\n            // Create PDF\n            return [2\n            /*return*/\n            , _d.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns chart's data formatted suitable for PDF export (pdfmake).\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @since 4.7.0\r\n   * @param type     Type of the export\r\n   * @param options  Options\r\n   * @return Promise\r\n   * @async\r\n   */\n\n\n  Export.prototype.getPDFData = function (type, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var content, dataFields, data, dataFieldsOrder_1, len, i;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        content = {\n          \"body\": []\n        };\n        dataFields = this.adapter.apply(\"formatDataFields\", {\n          dataFields: this.dataFields,\n          format: \"pdf\"\n        }).dataFields;\n        data = this.data; // Vertical or horizontal (default) layout\n\n        if (options.pivot) {\n          dataFieldsOrder_1 = this.adapter.apply(\"dataFieldsOrder\", {\n            dataFieldsOrder: this.dataFieldsOrder,\n            format: \"pdfdata\"\n          }).dataFieldsOrder;\n          $object.eachOrdered(dataFields, function (key, val) {\n            var dataRow = [];\n\n            if (options.addColumnNames) {\n              dataRow.push(val);\n            }\n\n            for (var len = data.length, i = 0; i < len; i++) {\n              var dataValue = data[i][key];\n              dataRow.push(_this.convertToSpecialFormat(key, dataValue, options, true));\n            }\n\n            content.body.push(_this.getPDFDataRow(dataRow, options, undefined, true));\n          }, function (a, b) {\n            //console.log(a, b)\n            var ai = dataFieldsOrder_1.indexOf(a);\n            var bi = dataFieldsOrder_1.indexOf(b);\n\n            if (ai > bi) {\n              return 1;\n            } else if (ai < bi) {\n              return -1;\n            }\n\n            return 0;\n          });\n        } else {\n          // Add column names?\n          if (options.addColumnNames) {\n            content.body.push(this.getPDFDataRow(dataFields, options, undefined, true));\n            content.headerRows = 1;\n          }\n\n          for (len = data.length, i = 0; i < len; i++) {\n            content.body.push(this.getPDFDataRow(data[i], options, dataFields));\n          }\n        }\n\n        return [2\n        /*return*/\n        , this.adapter.apply(\"pdfmakeTable\", {\n          table: content,\n          options: options\n        }).table];\n      });\n    });\n  };\n  /**\r\n   * Formats a row of data for use in PDF data table (pdfmake).\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @since 4.7.0\r\n   * @param  row         An object holding data for the row\r\n   * @param  options     Options\r\n   * @param  dataFields  Data fields\r\n   * @param  asIs        Do not try to convert to dates\r\n   * @return Formated Data line\r\n   */\n\n\n  Export.prototype.getPDFDataRow = function (row, options, dataFields, asIs) {\n    var _this = this;\n\n    if (asIs === void 0) {\n      asIs = false;\n    } // Init\n\n\n    var items = []; // Data fields\n\n    if (!dataFields) {\n      dataFields = row;\n    } // Data fields order\n\n\n    var dataFieldsOrder = this.adapter.apply(\"dataFieldsOrder\", {\n      dataFieldsOrder: this.dataFieldsOrder,\n      format: \"pdfdata\"\n    }).dataFieldsOrder; // Process each row item\n\n    $object.eachOrdered(dataFields, function (key, name) {\n      // Get value\n      var value = _this.convertEmptyValue(key, row[key], options); // Convert dates\n\n\n      var item = asIs ? value : _this.convertToSpecialFormat(key, value, options);\n      item = \"\" + item; // Add to item\n\n      items.push(item);\n    }, function (a, b) {\n      //console.log(a, b)\n      var ai = dataFieldsOrder.indexOf(a);\n      var bi = dataFieldsOrder.indexOf(b);\n\n      if (ai > bi) {\n        return 1;\n      } else if (ai < bi) {\n        return -1;\n      }\n\n      return 0;\n    });\n    return items;\n  };\n  /**\r\n   * Returns fit dimensions for available page sizes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pageSize Page size\r\n   * @return `[width, height]` in pixels\r\n   */\n\n\n  Export.prototype.getPageSizeFit = function (pageSize, margins, extraMargin) {\n    if (extraMargin === void 0) {\n      extraMargin = 0;\n    } // Check margins\n\n\n    var newMargins = [0, 0, 0, 0];\n\n    if (typeof margins == \"number\") {\n      newMargins = [margins, margins, margins, margins];\n    } else if (margins.length == 2) {\n      newMargins = [margins[0], margins[1], margins[0], margins[1]];\n    } else if (margins.length == 4) {\n      newMargins = margins;\n    } // Define available page sizes\n\n\n    var sizes = {\n      \"4A0\": [4767.87, 6740.79],\n      \"2A0\": [3370.39, 4767.87],\n      A0: [2383.94, 3370.39],\n      A1: [1683.78, 2383.94],\n      A2: [1190.55, 1683.78],\n      A3: [841.89, 1190.55],\n      A4: [595.28, 841.89],\n      A5: [419.53, 595.28],\n      A6: [297.64, 419.53],\n      A7: [209.76, 297.64],\n      A8: [147.40, 209.76],\n      A9: [104.88, 147.40],\n      A10: [73.70, 104.88],\n      B0: [2834.65, 4008.19],\n      B1: [2004.09, 2834.65],\n      B2: [1417.32, 2004.09],\n      B3: [1000.63, 1417.32],\n      B4: [708.66, 1000.63],\n      B5: [498.90, 708.66],\n      B6: [354.33, 498.90],\n      B7: [249.45, 354.33],\n      B8: [175.75, 249.45],\n      B9: [124.72, 175.75],\n      B10: [87.87, 124.72],\n      C0: [2599.37, 3676.54],\n      C1: [1836.85, 2599.37],\n      C2: [1298.27, 1836.85],\n      C3: [918.43, 1298.27],\n      C4: [649.13, 918.43],\n      C5: [459.21, 649.13],\n      C6: [323.15, 459.21],\n      C7: [229.61, 323.15],\n      C8: [161.57, 229.61],\n      C9: [113.39, 161.57],\n      C10: [79.37, 113.39],\n      RA0: [2437.80, 3458.27],\n      RA1: [1729.13, 2437.80],\n      RA2: [1218.90, 1729.13],\n      RA3: [864.57, 1218.90],\n      RA4: [609.45, 864.57],\n      SRA0: [2551.18, 3628.35],\n      SRA1: [1814.17, 2551.18],\n      SRA2: [1275.59, 1814.17],\n      SRA3: [907.09, 1275.59],\n      SRA4: [637.80, 907.09],\n      EXECUTIVE: [521.86, 756.00],\n      FOLIO: [612.00, 936.00],\n      LEGAL: [612.00, 1008.00],\n      LETTER: [612.00, 792.00],\n      TABLOID: [792.00, 1224.00]\n    }; // Calculate size\n\n    var fitSize = sizes[pageSize];\n    fitSize[0] -= newMargins[0] + newMargins[2];\n    fitSize[1] -= newMargins[1] + newMargins[3] + extraMargin;\n    return fitSize;\n  };\n  /**\r\n   * Returns an Excel file of chart's data.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @param type     Type of the export\r\n   * @param options  Options\r\n   * @return Promise\r\n   * @async\r\n   * @todo Handle dates\r\n   * @todo Support for multi-sheet\r\n   */\n\n\n  Export.prototype.getExcel = function (type, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var XLSX, wbOptions, sheetName, wb, data, dataFields, dataFieldsOrder_2, len, i, uri;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!$type.hasValue(options)) {\n              options = this.getFormatOptions(\"xlsx\");\n            }\n\n            return [4\n            /*yield*/\n            , this.xlsx];\n\n          case 1:\n            XLSX = _a.sent();\n            wbOptions = this.adapter.apply(\"xlsxWorkbookOptions\", {\n              xlsx: XLSX,\n              options: {\n                bookType: \"xlsx\",\n                bookSST: false,\n                type: \"base64\"\n              }\n            }).options;\n            sheetName = this.normalizeExcelSheetName(this.adapter.apply(\"xlsxSheetName\", {\n              xlsx: XLSX,\n              name: this.title || this.language.translate(\"Data\")\n            }).name);\n            wb = {\n              SheetNames: [sheetName],\n              Sheets: {}\n            };\n            data = [];\n            dataFields = this.adapter.apply(\"formatDataFields\", {\n              dataFields: this.dataFields,\n              format: \"xslx\"\n            }).dataFields; // Vertical or horizontal (default) layout\n\n            if (options.pivot) {\n              dataFieldsOrder_2 = this.adapter.apply(\"dataFieldsOrder\", {\n                dataFieldsOrder: this.dataFieldsOrder,\n                format: \"xlsx\"\n              }).dataFieldsOrder;\n              $object.eachOrdered(dataFields, function (key, val) {\n                var dataRow = [];\n\n                if (options.addColumnNames) {\n                  dataRow.push(val);\n                }\n\n                for (var len = _this.data.length, i = 0; i < len; i++) {\n                  var dataValue = _this.data[i][key];\n                  dataRow.push(_this.convertToSpecialFormat(key, dataValue, options, true));\n                }\n\n                data.push(_this.getExcelRow(dataRow, options, undefined, true));\n              }, function (a, b) {\n                //console.log(a, b)\n                var ai = dataFieldsOrder_2.indexOf(a);\n                var bi = dataFieldsOrder_2.indexOf(b);\n\n                if (ai > bi) {\n                  return 1;\n                } else if (ai < bi) {\n                  return -1;\n                }\n\n                return 0;\n              });\n            } else {\n              // Add column names?\n              if (options.addColumnNames) {\n                data.push(this.getExcelRow(dataFields, options, undefined, true));\n              } // Add lines\n\n\n              for (len = this.data.length, i = 0; i < len; i++) {\n                data.push(this.getExcelRow(this.data[i], options, dataFields));\n              }\n            } // Create sheet and add data\n\n\n            wb.Sheets[sheetName] = XLSX.utils.aoa_to_sheet(data); // Apply adapters\n\n            wb = this.adapter.apply(\"xlsxWorkbook\", {\n              xlsx: XLSX,\n              workbook: wb,\n              options: options\n            }).workbook;\n            uri = this.adapter.apply(\"getExcel\", {\n              data: \"data:\" + this.getContentType(type) + \";base64,\" + XLSX.write(wb, wbOptions),\n              options: options\n            }).data;\n            return [2\n            /*return*/\n            , uri];\n        }\n      });\n    });\n  };\n  /**\r\n   * This is needed to work around Excel limitations.\r\n   *\r\n   * @param name  Source name\r\n   * @return Normalized name\r\n   */\n\n\n  Export.prototype.normalizeExcelSheetName = function (name) {\n    name = name.replace(/([:\\\\\\/?*\\[\\]]+)/g, \" \");\n    return $utils.truncateWithEllipsis(name, 31, \"...\", true);\n  };\n  /**\r\n   * Rertuns an array of values to be used as Excel row.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param  row         Row data\r\n   * @param  options     Options\r\n   * @param  dataFields  Data fields\r\n   * @param  asIs        Do not try to convert to dates\r\n   * @return Array of values\r\n   */\n\n\n  Export.prototype.getExcelRow = function (row, options, dataFields, asIs) {\n    var _this = this;\n\n    if (asIs === void 0) {\n      asIs = false;\n    } // Init\n\n\n    var items = []; // Data fields\n\n    if (!dataFields) {\n      dataFields = row;\n    } // Data fields order\n\n\n    var dataFieldsOrder = this.adapter.apply(\"dataFieldsOrder\", {\n      dataFieldsOrder: this.dataFieldsOrder,\n      format: \"xlsx\"\n    }).dataFieldsOrder; // Process each row item\n\n    $object.eachOrdered(dataFields, function (key, name) {\n      // Get value\n      var value = _this.convertEmptyValue(key, row[key], options); // Convert dates\n\n\n      var item = asIs ? value : _this.convertToSpecialFormat(key, value, options, true);\n      items.push(item);\n    }, function (a, b) {\n      //console.log(a, b)\n      var ai = dataFieldsOrder.indexOf(a);\n      var bi = dataFieldsOrder.indexOf(b);\n\n      if (ai > bi) {\n        return 1;\n      } else if (ai < bi) {\n        return -1;\n      }\n\n      return 0;\n    });\n    return items;\n  };\n  /**\r\n   * Returns chart's data formatted as CSV.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @param type       Type of the export\r\n   * @param options    Options\r\n   * @param encodeURI  If true, will return result will be data URI\r\n   * @return Promise\r\n   * @async\r\n   */\n\n\n  Export.prototype.getCSV = function (type, options, encodeURI) {\n    if (encodeURI === void 0) {\n      encodeURI = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var csv, dataFields, br, data, dataFieldsOrder_3, len, i, row, charset, uri;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        if (!$type.hasValue(options)) {\n          options = this.getFormatOptions(\"csv\");\n        }\n\n        csv = \"\";\n        dataFields = this.adapter.apply(\"formatDataFields\", {\n          dataFields: this.dataFields,\n          format: \"csv\"\n        }).dataFields;\n        br = \"\";\n        data = this.data; // Vertical or horizontal (default) layout\n\n        if (options.pivot) {\n          dataFieldsOrder_3 = this.adapter.apply(\"dataFieldsOrder\", {\n            dataFieldsOrder: this.dataFieldsOrder,\n            format: \"csv\"\n          }).dataFieldsOrder;\n          $object.eachOrdered(dataFields, function (key, val) {\n            var dataRow = [];\n\n            if (options.addColumnNames) {\n              dataRow.push(val);\n            }\n\n            for (var len = data.length, i = 0; i < len; i++) {\n              var dataValue = data[i][key];\n              dataRow.push(_this.convertToSpecialFormat(key, dataValue, options, true));\n            }\n\n            csv += br + _this.getCSVRow(dataRow, options, undefined, true);\n            br = \"\\n\";\n          }, function (a, b) {\n            var ai = dataFieldsOrder_3.indexOf(a);\n            var bi = dataFieldsOrder_3.indexOf(b);\n\n            if (ai > bi) {\n              return -1;\n            } else if (ai < bi) {\n              return 1;\n            }\n\n            return 0;\n          });\n        } else {\n          for (len = data.length, i = 0; i < len; i++) {\n            row = this.getCSVRow(data[i], options, dataFields);\n\n            if (options.reverse) {\n              csv = row + br + csv;\n            } else {\n              csv += br + row;\n            }\n\n            br = \"\\n\";\n          } // Add column names?\n\n\n          if (options.addColumnNames) {\n            csv = this.getCSVRow(dataFields, options, undefined, true) + br + csv;\n          }\n        }\n\n        charset = this.adapter.apply(\"charset\", {\n          charset: \"charset=utf-8\",\n          type: type,\n          options: options\n        }).charset;\n        uri = this.adapter.apply(\"getCSV\", {\n          data: encodeURI ? \"data:\" + this.getContentType(type) + \";\" + charset + \",\" + encodeURIComponent(csv) : csv,\n          options: options\n        }).data;\n        return [2\n        /*return*/\n        , uri];\n      });\n    });\n  };\n  /**\r\n   * Formats a row of CSV data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param  row         An object holding data for the row\r\n   * @param  options     Options\r\n   * @param  dataFields  Data fields\r\n   * @param  asIs        Do not try to convert to dates\r\n   * @return Formated CSV line\r\n   */\n\n\n  Export.prototype.getCSVRow = function (row, options, dataFields, asIs) {\n    var _this = this;\n\n    if (asIs === void 0) {\n      asIs = false;\n    } // Init\n\n\n    var separator = options.separator || \",\";\n    var items = []; // Data fields\n\n    if (!dataFields) {\n      dataFields = row;\n    } // Data fields order\n\n\n    var dataFieldsOrder = this.adapter.apply(\"dataFieldsOrder\", {\n      dataFieldsOrder: this.dataFieldsOrder,\n      format: \"csv\"\n    }).dataFieldsOrder; // Process each row item\n\n    $object.eachOrdered(dataFields, function (key, name) {\n      // Get value\n      var value = _this.convertEmptyValue(key, row[key], options); // Check if we need to skip\n      // This is no longer required because we are iterating via dataFields anyway\n\n      /*if ($type.hasValue(this.dataFields) && !$type.hasValue(this.dataFields[key])) {\r\n          return;\r\n      }*/\n      // Convert dates\n\n\n      var item = asIs ? value : _this.convertToSpecialFormat(key, value, options); // Cast and escape doublequotes\n\n      item = \"\" + item;\n      item = item.replace(/\"/g, '\"\"'); // Enclose into double quotes\n\n      if (options.forceQuotes || item.search(new RegExp(\"\\\"|\\n|\" + separator, \"g\")) >= 0) {\n        item = \"\\\"\" + item + \"\\\"\";\n      } // Add to item\n\n\n      items.push(item);\n    }, function (a, b) {\n      //console.log(a, b)\n      var ai = dataFieldsOrder.indexOf(a);\n      var bi = dataFieldsOrder.indexOf(b);\n\n      if (ai > bi) {\n        return 1;\n      } else if (ai < bi) {\n        return -1;\n      }\n\n      return 0;\n    });\n    return items.join(separator);\n  };\n  /**\r\n   * Returns chart's data formatted as HTML table.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @since 4.7.0\r\n   * @param type       Type of the export\r\n   * @param options    Options\r\n   * @param encodeURI  If true, will return result will be data URI\r\n   * @return Promise\r\n   * @async\r\n   */\n\n\n  Export.prototype.getHTML = function (type, options, encodeURI) {\n    if (encodeURI === void 0) {\n      encodeURI = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var html, dataFields, data, dataFieldsOrder_4, len, i, charset, uri;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        if (!$type.hasValue(options)) {\n          options = this.getFormatOptions(\"html\");\n        }\n\n        html = \"<table>\";\n\n        if (options.tableClass) {\n          html = \"<table class=\\\"\" + options.tableClass + \"\\\">\";\n        }\n\n        dataFields = this.adapter.apply(\"formatDataFields\", {\n          dataFields: this.dataFields,\n          format: \"html\"\n        }).dataFields;\n        data = this.data; // Vertical or horizontal (default) layout\n\n        if (options.pivot) {\n          dataFieldsOrder_4 = this.adapter.apply(\"dataFieldsOrder\", {\n            dataFieldsOrder: this.dataFieldsOrder,\n            format: \"html\"\n          }).dataFieldsOrder;\n          html += \"\\n<tbody>\";\n          $object.eachOrdered(dataFields, function (key, val) {\n            var dataRow = [];\n\n            if (options.addColumnNames) {\n              dataRow.push(val);\n            }\n\n            for (var len = data.length, i = 0; i < len; i++) {\n              var dataValue = data[i][key];\n              dataRow.push(_this.convertToSpecialFormat(key, dataValue, options, true));\n            }\n\n            html += \"\\n\" + _this.getHTMLRow(dataRow, options, undefined, true);\n          }, function (a, b) {\n            var ai = dataFieldsOrder_4.indexOf(a);\n            var bi = dataFieldsOrder_4.indexOf(b);\n\n            if (ai > bi) {\n              return -1;\n            } else if (ai < bi) {\n              return 1;\n            }\n\n            return 0;\n          });\n          html += \"\\n</tbody>\";\n        } else {\n          // Add column names?\n          if (options.addColumnNames) {\n            html += \"\\n<thead>\\n\" + this.getHTMLRow(dataFields, options, undefined, true, true) + \"\\n</thead>\";\n          }\n\n          html += \"\\n<tbody>\";\n\n          for (len = data.length, i = 0; i < len; i++) {\n            html += \"\\n\" + this.getHTMLRow(data[i], options, dataFields);\n          }\n\n          html += \"\\n</tbody>\";\n        }\n\n        html += \"\\n</table>\";\n        charset = this.adapter.apply(\"charset\", {\n          charset: \"charset=utf-8\",\n          type: type,\n          options: options\n        }).charset;\n        uri = this.adapter.apply(\"getHTML\", {\n          data: encodeURI ? \"data:\" + this.getContentType(type) + \";\" + charset + \",\" + encodeURIComponent(html) : html,\n          options: options\n        }).data;\n        return [2\n        /*return*/\n        , uri];\n      });\n    });\n  };\n  /**\r\n   * Formats a row of HTML data.\r\n   *\r\n   * @since 4.7.0\r\n   * @ignore Exclude from docs\r\n   * @param  row         An object holding data for the row\r\n   * @param  options     Options\r\n   * @param  dataFields  Data fields\r\n   * @param  asIs        Do not try to convert to dates\r\n   * @return Formated HTML row\r\n   */\n\n\n  Export.prototype.getHTMLRow = function (row, options, dataFields, asIs, headerRow) {\n    var _this = this;\n\n    if (asIs === void 0) {\n      asIs = false;\n    }\n\n    if (headerRow === void 0) {\n      headerRow = false;\n    } // Init output\n\n\n    var html = \"\\t<tr>\";\n\n    if (options.rowClass) {\n      html = \"\\t<tr class=\\\"\" + options.rowClass + \"\\\">\";\n    } // Data fields\n\n\n    if (!dataFields) {\n      dataFields = row;\n    } // Data fields order\n\n\n    var dataFieldsOrder = this.adapter.apply(\"dataFieldsOrder\", {\n      dataFieldsOrder: this.dataFieldsOrder,\n      format: \"html\"\n    }).dataFieldsOrder; // th or dh?\n\n    var tag = headerRow ? \"th\" : \"td\"; // Process each row item\n\n    var first = true;\n    $object.eachOrdered(dataFields, function (key, name) {\n      // Get value\n      var value = _this.convertEmptyValue(key, row[key], options); // Convert dates\n\n\n      var item = asIs ? value : _this.convertToSpecialFormat(key, value, options); // Escape HTML entities\n\n      item = \"\" + item;\n      item = item.replace(/[\\u00A0-\\u9999<>\\&]/gim, function (i) {\n        return \"&#\" + i.charCodeAt(0) + \";\";\n      }); // Which tag to use\n\n      var useTag = tag;\n\n      if (options.pivot && first) {\n        useTag = \"th\";\n      } // Add cell\n\n\n      if (options.cellClass) {\n        html += \"\\n\\t\\t<\" + useTag + \" class=\\\"\" + options.cellClass + \"\\\">\" + item + \"</\" + useTag + \">\";\n      } else {\n        html += \"\\n\\t\\t<\" + useTag + \">\" + item + \"</\" + useTag + \">\";\n      }\n\n      first = false;\n    }, function (a, b) {\n      var ai = dataFieldsOrder.indexOf(a);\n      var bi = dataFieldsOrder.indexOf(b);\n\n      if (ai > bi) {\n        return 1;\n      } else if (ai < bi) {\n        return -1;\n      }\n\n      return 0;\n    });\n    html += \"\\n\\t</tr>\";\n    return html;\n  };\n  /**\r\n   * Returns chart's data in JSON format.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @param type       Type of the export\r\n   * @param options    Options\r\n   * @param encodeURI  If true, will return result will be data URI\r\n   * @return Promise\r\n   * @async\r\n   */\n\n\n  Export.prototype.getJSON = function (type, options, encodeURI) {\n    if (encodeURI === void 0) {\n      encodeURI = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var data, dataFields, sourceData, _loop_1, len, i, json, charset, uri;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        if (!$type.hasValue(options)) {\n          options = this.getFormatOptions(\"json\");\n        }\n\n        dataFields = this.adapter.apply(\"formatDataFields\", {\n          dataFields: this.dataFields,\n          format: \"json\"\n        }).dataFields;\n\n        if (!this._dynamicDataFields) {\n          data = [];\n          sourceData = this.data;\n\n          _loop_1 = function (len, i) {\n            var value = sourceData[i];\n\n            if (typeof value == \"object\") {\n              var newValue_1 = {};\n              $object.each(value, function (field, item) {\n                if ($type.hasValue(dataFields[field])) {\n                  newValue_1[dataFields[field]] = _this.convertToSpecialFormat(field, item, options);\n                }\n              });\n              data.push(newValue_1);\n            }\n          };\n\n          for (len = sourceData.length, i = 0; i < len; i++) {\n            _loop_1(len, i);\n          }\n        } else {\n          data = this.data;\n        }\n\n        json = JSON.stringify(data, function (key, value) {\n          if (typeof value == \"object\") {\n            $object.each(value, function (field, item) {\n              value[field] = _this.convertToSpecialFormat(field, item, options);\n            });\n          }\n\n          return value;\n        }, options.indent);\n        charset = this.adapter.apply(\"charset\", {\n          charset: \"charset=utf-8\",\n          type: type,\n          options: options\n        }).charset;\n        uri = this.adapter.apply(\"getJSON\", {\n          data: encodeURI ? \"data:\" + this.getContentType(type) + \";\" + charset + \",\" + encodeURIComponent(json) : json,\n          options: options\n        }).data;\n        return [2\n        /*return*/\n        , uri];\n      });\n    });\n  };\n  /**\r\n   * Converts the value to proper date format.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param  field         Field name\r\n   * @param  value         Value\r\n   * @param  options       Options\r\n   * @param  keepOriginal  Will ignore formatting and will keep value as it is in data\r\n   * @return Formatted date value or unmodified value\r\n   */\n\n\n  Export.prototype.convertToSpecialFormat = function (field, value, options, keepOriginal) {\n    // Is this a timestamp or duration?\n    if (typeof value == \"number\") {\n      if (this.isDateField(field)) {\n        value = new Date(value);\n      } else if (this.isDurationField(field)) {\n        return this.durationFormatter.format(value, this.durationFormat);\n      } else if (this.isNumberField(field) && this.numberFormat) {\n        return this.numberFormatter.format(value, this.numberFormat);\n      }\n    }\n\n    if (value instanceof Date) {\n      if (options.useTimestamps) {\n        value = value.getTime();\n      } else if (options.useLocale) {\n        if (!keepOriginal) {\n          value = value.toLocaleString();\n        }\n      } else {\n        value = this.dateFormatter.format(value, this.dateFormat);\n      }\n    } else if ($type.isString(value) && this.isDateField(field) && this.dateFormat) {\n      value = this.dateFormatter.format(this.dateFormatter.parse(value), this.dateFormat);\n    }\n\n    return value;\n  };\n  /**\r\n   * Converts empty value based on `emptyAs` option.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Export.prototype.convertEmptyValue = function (field, value, options) {\n    return $type.hasValue(value) ? value : options.emptyAs;\n  };\n  /**\r\n   * Triggers download of the file.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @param uri       Data URI with file content\r\n   * @param fileName  File name\r\n   * @return Promise\r\n   * @async\r\n   */\n\n\n  Export.prototype.download = function (uri, fileName, addBOM) {\n    if (addBOM === void 0) {\n      addBOM = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var parts, contentType, decoded, blob_1, chars, i, charCode, blob, link_1, parts, contentType, decoded, blob_2, url_2, chars, i, charCode, blob, url_3, link, parts, contentType, iframe, idoc;\n      return __generator(this, function (_a) {\n        if (this.msBlobDownloadSupport()) {\n          parts = uri.split(\";\");\n          contentType = parts.shift().replace(/data:/, \"\");\n          uri = decodeURIComponent(parts.join(\";\").replace(/^[^,]*,/, \"\")); // Check if we need to Base64-decode\n\n          if ([\"image/svg+xml\", \"application/json\", \"text/csv\"].indexOf(contentType) == -1) {\n            try {\n              decoded = atob(uri);\n              uri = decoded;\n            } catch (e) {\n              // Error occurred, meaning string was not Base64-encoded. Do nothing.\n              return [2\n              /*return*/\n              , false];\n            }\n          } else {\n            blob_1 = new Blob([uri], {\n              type: contentType\n            });\n            window.navigator.msSaveBlob(blob_1, fileName);\n            return [2\n            /*return*/\n            , true];\n          }\n\n          chars = new Array(uri.length);\n\n          for (i = 0; i < uri.length; ++i) {\n            charCode = uri.charCodeAt(i);\n            chars[i] = charCode;\n          }\n\n          blob = new Blob([new Uint8Array(chars)], {\n            type: contentType\n          });\n          window.navigator.msSaveBlob(blob, fileName);\n        } else if (this.blobDownloadSupport()) {\n          link_1 = document.createElement(\"a\");\n          link_1.download = fileName;\n          document.body.appendChild(link_1);\n          parts = uri.split(\";\");\n          contentType = parts.shift().replace(/data:/, \"\");\n          uri = decodeURIComponent(parts.join(\";\").replace(/^[^,]*,/, \"\"));\n\n          if ([\"image/svg+xml\", \"application/json\", \"text/csv\", \"text/html\"].indexOf(contentType) == -1) {\n            try {\n              decoded = atob(uri);\n              uri = decoded;\n            } catch (e) {\n              // Error occurred, meaning string was not Base64-encoded. Do nothing.\n              return [2\n              /*return*/\n              , false];\n            }\n          } else {\n            if (addBOM) {\n              uri = \"\\ufeff\" + uri;\n            }\n\n            blob_2 = new Blob([uri], {\n              type: contentType\n            });\n            url_2 = window.URL.createObjectURL(blob_2);\n            link_1.href = url_2;\n            link_1.download = fileName;\n            link_1.click();\n            setTimeout(function () {\n              document.body.removeChild(link_1);\n              window.URL.revokeObjectURL(url_2);\n            }, 100);\n            return [2\n            /*return*/\n            , true];\n          }\n\n          chars = new Array(uri.length);\n\n          for (i = 0; i < uri.length; ++i) {\n            charCode = uri.charCodeAt(i);\n            chars[i] = charCode;\n          }\n\n          if (addBOM) {\n            chars = [0xEF, 0xBB, 0xBF].concat(chars);\n          }\n\n          blob = new Blob([new Uint8Array(chars)], {\n            type: contentType\n          });\n          url_3 = window.URL.createObjectURL(blob);\n          link_1.href = url_3;\n          link_1.download = fileName;\n          document.body.appendChild(link_1);\n          link_1.click();\n          document.body.removeChild(link_1);\n          setTimeout(function () {\n            window.URL.revokeObjectURL(url_3);\n          }, 100);\n        } else if (this.linkDownloadSupport()) {\n          link = document.createElement(\"a\");\n          link.download = fileName;\n          link.href = uri;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n        } else if (this.legacyIE()) {\n          parts = uri.match(/^data:(.*);[ ]*([^,]*),(.*)$/);\n\n          if (parts.length === 4) {\n            // Base64-encoded or text-based stuff?\n            if (parts[2] == \"base64\") {\n              // Base64-encoded - probably an image\n              if (parts[1].match(/^image\\//)) {\n                // Yep, an image. Let's create a temporary image placeholder,\n                // so that user can use do Save As.\n                this.showModal(\"<img src=\\\"\" + uri + \"\\\" style=\\\"float: left; max-width: 50%; max-height: 80%; margin: 0 1em 0.5em 0; border: 1px solid #eee;\\\" />\" + \"<p>\" + this.language.translate(\"To save the image, right-click thumbnail on the left and choose \\\"Save picture as...\\\"\") + \"</p>\" + \"<p style=\\\"text-align: center;\\\"><small>\" + this.language.translate(\"(Press ESC to close this message)\") + \"</small></p>\", this.language.translate(\"Image Export Complete\"));\n              }\n            } else {\n              contentType = void 0;\n\n              if (fileName.match(/\\.svg$/)) {\n                contentType = \"image/svg+xml\";\n              } else {\n                contentType = \"text/plain\";\n                fileName += \".txt\";\n              }\n\n              iframe = document.createElement(\"iframe\");\n              iframe.width = \"1px\";\n              iframe.height = \"1px\";\n              iframe.style.display = \"none\";\n              document.body.appendChild(iframe);\n              idoc = iframe.contentDocument;\n              idoc.open(contentType, \"replace\"); // TODO test this with various encodings (e.g. UTF)\n              //idoc.charset = parts[2].replace(/charset=/, \"\");\n\n              idoc.write(decodeURIComponent(parts[3]));\n              idoc.close();\n              idoc.execCommand(\"SaveAs\", true, fileName); // Destroy the iframe\n\n              document.body.removeChild(iframe);\n            }\n          }\n        } else {\n          /**\r\n           * Something else - perhaps a mobile.\r\n           * Let's just display it in the same page.\r\n           * (hey we don't like it either)\r\n           */\n          window.location.href = uri;\n        }\n\n        return [2\n        /*return*/\n        , true];\n      });\n    });\n  };\n  /**\r\n   * Returns `true` if browser has any supported methods to trigger download\r\n   * of a binary file.\r\n   *\r\n   * @return Supports downloads?\r\n   */\n\n\n  Export.prototype.downloadSupport = function () {\n    //return !this.legacyIE();\n    return this.linkDownloadSupport() || this.msBlobDownloadSupport();\n  };\n  /**\r\n   * Checks if the browser supports \"download\" attribute on links.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Browser supports triggering downloads?\r\n   */\n\n\n  Export.prototype.linkDownloadSupport = function () {\n    // Do we have this cached?\n    var cache = registry.getCache(\"linkDownloadSupport\");\n\n    if (cache === false || cache === true) {\n      return cache;\n    }\n\n    var a = document.createElement(\"a\");\n    var res = typeof a.download !== \"undefined\";\n    registry.setCache(\"linkDownloadSupport\", res);\n    return res;\n  };\n  /**\r\n   * Checks if the browser supports download via `msBlob`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Browser supports triggering downloads?\r\n   */\n\n\n  Export.prototype.blobDownloadSupport = function () {\n    return $type.hasValue(window.Blob);\n  };\n  /**\r\n   * Checks if the browser supports download via `msBlob`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Browser supports triggering downloads?\r\n   */\n\n\n  Export.prototype.msBlobDownloadSupport = function () {\n    return $type.hasValue(window.navigator.msSaveOrOpenBlob);\n  };\n  /**\r\n   * Checks if this is a legacy version of IE.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return IE9 or less?\r\n   */\n\n\n  Export.prototype.legacyIE = function () {\n    // Create a temporary <div> with conditional tags in it an an <i> tag.\n    // Count <i>s. If there are some, we have IE9 or late on our hands.\n    var div = document.createElement(\"div\");\n    div.innerHTML = \"<!--[if lt IE 10]><i></i><![endif]-->\";\n    return div.getElementsByTagName(\"i\").length == 1;\n  };\n  /**\r\n   * Initiates print of the chart.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @param data     Data URI for the image\r\n   * @param options  Options\r\n   * @param title    Optional title to use (uses window's title by default)\r\n   * @return Promise\r\n   * @async\r\n   */\n\n\n  Export.prototype.print = function (data, options, title) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (options.printMethod == \"css\") {\n          return [2\n          /*return*/\n          , this.printViaCSS(data, options, title)];\n        } else {\n          return [2\n          /*return*/\n          , this.printViaIframe(data, options, title)];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  Export.prototype.printViaCSS = function (data, options, title) {\n    return __awaiter(this, void 0, void 0, function () {\n      var scroll, rule, originalTitle, img, isIOS;\n      return __generator(this, function (_a) {\n        scroll = document.documentElement.scrollTop || document.body.scrollTop;\n        rule = new StyleRule($dom.getShadowRoot(this.container), \"body > *\", {\n          \"display\": \"none\",\n          \"position\": \"fixed\",\n          \"visibility\": \"hidden\",\n          \"opacity\": \"0\",\n          \"clipPath\": \"polygon(0px 0px,0px 0px,0px 0px,0px 0px);\"\n        });\n\n        if (title && document && document.title) {\n          originalTitle = document.title;\n          document.title = title;\n        }\n\n        img = new Image();\n        img.src = data;\n        img.style.maxWidth = \"100%\";\n        img.style.display = \"block\";\n        img.style.position = \"relative\";\n        img.style.visibility = \"visible\";\n        img.style.opacity = \"1\";\n        img.style.clipPath = \"none\";\n        document.body.appendChild(img); // Print\n\n        this.setTimeout(function () {\n          window.print();\n        }, 50);\n        isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n        if (isIOS && options.delay < 1000) {\n          options.delay = 1000;\n        } else if (options.delay < 100) {\n          options.delay = 100;\n        } // Delay function that resets back the document the way ot was before\n\n\n        this.setTimeout(function () {\n          // Remove image\n          document.body.removeChild(img); // Reset back all elements\n\n          /*for (let len = items.length, i = 0; i < len; i++) {\r\n              let item = <HTMLElement>items[i];\r\n              if ($dom.isElement(item)) {\r\n                  item.style.display = states[i];\r\n              }\r\n          }*/\n\n          rule.dispose(); // Restore title\n\n          if (originalTitle) {\n            document.title = document.title;\n          } // Scroll back the document the way it was before\n\n\n          document.documentElement.scrollTop = document.body.scrollTop = scroll;\n        }, options.delay || 500);\n        return [2\n        /*return*/\n        , true];\n      });\n    });\n  };\n\n  Export.prototype.printViaIframe = function (data, options, title) {\n    return __awaiter(this, void 0, void 0, function () {\n      var iframe, img, isIOS;\n      return __generator(this, function (_a) {\n        iframe = document.createElement(\"iframe\");\n        iframe.style.visibility = \"hidden\";\n        document.body.appendChild(iframe); // This is needed for FireFox\n\n        iframe.contentWindow.document.open();\n        iframe.contentWindow.document.close();\n        img = new Image();\n        img.src = data;\n        img.style.maxWidth = \"100%\";\n        img.style.height = \"auto\";\n\n        if (title) {\n          iframe.contentWindow.document.title = title;\n        }\n\n        iframe.contentWindow.document.body.appendChild(img);\n\n        iframe.load = function () {\n          iframe.contentWindow.document.body.appendChild(img);\n        }; // Print\n\n\n        this.setTimeout(function () {\n          try {\n            if (!iframe.contentWindow.document.execCommand(\"print\", false, null)) {\n              iframe.contentWindow.print();\n            }\n          } catch (e) {\n            iframe.contentWindow.print();\n          }\n        }, options.delay || 50);\n        isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n        if (isIOS && options.delay < 1000) {\n          options.delay = 1000;\n        } else if (options.delay < 100) {\n          options.delay = 100;\n        } // Delay function that resets back the document the way ot was before\n\n\n        this.setTimeout(function () {\n          // Remove image\n          document.body.removeChild(iframe);\n        }, options.delay + 50 || 100);\n        return [2\n        /*return*/\n        , true];\n      });\n    });\n  };\n  /**\r\n   * Finds a background color for the element. If element is transparent it goes\r\n   * up the DOM hierarchy to find a parent element that does.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param element Element\r\n   * @return Color code\r\n   */\n\n\n  Export.prototype.findBackgroundColor = function (element) {\n    // Check if element has styles set\n    var opacity = 1,\n        currentColor = getComputedStyle(element, \"background-color\"); // Check opacity\n\n    if (currentColor.match(/[^,]*,[^,]*,[^,]*,[ ]?0/) || currentColor == \"transparent\") {\n      opacity = 0;\n    }\n\n    if (opacity == 0) {\n      var parent_2 = element.parentElement; // || <Element>element.parentNode;\n      // Completely transparent. Look for a parent\n\n      if (parent_2) {\n        return this.findBackgroundColor(parent_2);\n      } else {\n        return color(\"#fff\");\n      }\n    } else {\n      return color(currentColor, opacity);\n    }\n  };\n\n  Object.defineProperty(Export.prototype, \"container\", {\n    /**\r\n     * @return Reference\r\n     */\n    get: function () {\n      return this.adapter.apply(\"container\", {\n        container: this._container\n      }).container;\n    },\n\n    /**\r\n     * A reference to a container to be used to place [[ExportMenu]] in.\r\n     *\r\n     * @param value Reference\r\n     */\n    set: function (value) {\n      this._container = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"sprite\", {\n    /**\r\n     * @return Sprite\r\n     */\n    get: function () {\n      return this.adapter.apply(\"sprite\", {\n        sprite: this._sprite\n      }).sprite;\n    },\n\n    /**\r\n     * A reference to [[Sprite]] to export. Can be any Sprite, including some\r\n     * internal elements.\r\n     *\r\n     * @param value Sprite\r\n     */\n    set: function (value) {\n      this._sprite = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"extraSprites\", {\n    /**\r\n     * @return Sprite\r\n     */\n    get: function () {\n      return this.adapter.apply(\"extraSprites\", {\n        extraSprites: this._extraSprites\n      }).extraSprites;\n    },\n\n    /**\r\n     * An array of extra [[Sprite]] elements to include in export.\r\n     *\r\n     * It can be used to export any external elements, or even other charts.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * chart.exporting.extraSprites.push(chart2);\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.exporting.extraSprites.push(chart2);\r\n     * ```\r\n     *\r\n     * IMPORTANT: This setting is ignored when exporting to SVG format.\r\n     *\r\n     * @since 4.2.0\r\n     * @param value Sprite\r\n     */\n    set: function (value) {\n      this._extraSprites = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"validateSprites\", {\n    /**\r\n     * @return Sprite\r\n     */\n    get: function () {\n      return this.adapter.apply(\"validateSprites\", {\n        validateSprites: this._validateSprites\n      }).validateSprites;\n    },\n\n    /**\r\n     * An array of [[Sprite]] elements that need to be valid before export\r\n     * commences.\r\n     *\r\n     * If any of those elements is not completely ready when export is triggered,\r\n     * the export will wait until they are (their `validated` event triggers)\r\n     * before going through with the export opertaion.\r\n     *\r\n     * This is useful if you need to modify chart appearance for the export.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * // Add watermark\r\n     * let watermark = chart.createChild(am4core.Label);\r\n     * watermark.text = \"Copyright (C) 2019\";\r\n     * watermark.disabled = true;\r\n     *\r\n     * // Add watermark to validated sprites\r\n     * chart.exporting.validateSprites.push(watermark);\r\n     *\r\n     * // Enable watermark on export\r\n     * chart.exporting.events.on(\"exportstarted\", function(ev) {\r\n     *   watermark.disabled = false;\r\n     * });\r\n     *\r\n     * // Disable watermark when export finishes\r\n     * chart.exporting.events.on(\"exportfinished\", function(ev) {\r\n     *   watermark.disabled = true;\r\n     * });\r\n     * ```\r\n     * ```JavaScript\r\n     * // Add watermark\r\n     * var watermark = chart.createChild(am4core.Label);\r\n     * watermark.text = \"Copyright (C) 2019\";\r\n     * watermark.disabled = true;\r\n     *\r\n     * // Add watermark to validated sprites\r\n     * chart.exporting.validateSprites.push(watermark);\r\n     *\r\n     * // Enable watermark on export\r\n     * chart.exporting.events.on(\"exportstarted\", function(ev) {\r\n     *   watermark.disabled = false;\r\n     * });\r\n     *\r\n     * // Disable watermark when export finishes\r\n     * chart.exporting.events.on(\"exportfinished\", function(ev) {\r\n     *   watermark.disabled = true;\r\n     * });\r\n     * ```\r\n     *\r\n     * @since 4.6.8\r\n     * @param value Sprite\r\n     */\n    set: function (value) {\n      this._validateSprites = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"data\", {\n    /**\r\n     * @return Data\r\n     */\n    get: function () {\n      return this.adapter.apply(\"data\", {\n        data: this._data\n      }).data;\n    },\n\n    /**\r\n     * Data to export.\r\n     *\r\n     * @param value Data\r\n     */\n    set: function (value) {\n      this._data = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"dataFields\", {\n    /**\r\n     * @return Field names `{ field: fieldName }`\r\n     */\n    get: function () {\n      if (!this._dataFields) {\n        this.generateDataFields();\n      }\n\n      return this.adapter.apply(\"dataFields\", {\n        dataFields: this._dataFields\n      }).dataFields;\n    },\n\n    /**\r\n     * Data fields in `{ field: fieldName }` format. Those are used for\r\n     * exporting in data formats to name the columns.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/#Changing_order_and_names_of_columns} for examples and details\r\n     * @param value Field names\r\n     */\n    set: function (value) {\n      this._dataFields = value;\n      this._dynamicDataFields = false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Called after target chart's data updates.\r\n   *\r\n   * @ignore\r\n   */\n\n  Export.prototype.handleDataUpdated = function () {\n    if (this._dynamicDataFields) {\n      this._dataFields = undefined;\n    }\n\n    var hasData = this.data.length > 0;\n\n    if (this._prevHasData != hasData) {\n      this._prevHasData = hasData;\n\n      if (this.menu) {\n        this.menu.invalidate();\n      }\n    }\n  };\n\n  Object.defineProperty(Export.prototype, \"dateFormatter\", {\n    /**\r\n     * @return A DateFormatter instance\r\n     */\n    get: function () {\n      if (!this._dateFormatter) {\n        this._dateFormatter = new DateFormatter();\n        this._dateFormatter.language = this.language;\n      }\n\n      return this.adapter.apply(\"dateFormatter\", {\n        dateFormatter: this._dateFormatter\n      }).dateFormatter;\n    },\n\n    /**\r\n     * A [[DateFormatter]] to use when formatting dates when exporting data.\r\n     *\r\n     * @param value DateFormatter instance\r\n     */\n    set: function (value) {\n      this._dateFormatter = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"dateFormat\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function () {\n      return this.adapter.apply(\"dateFormat\", {\n        dateFormat: this._dateFormat\n      }).dateFormat;\n    },\n\n    /**\r\n     * A date format to use for exporting dates. Will use [[DateFormatter]]\r\n     * format if not set.\r\n     *\r\n     * @param value Date format\r\n     */\n    set: function (value) {\n      this._dateFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"dateFields\", {\n    /**\r\n     * @return Date field list\r\n     */\n    get: function () {\n      if (!this._dateFields) {\n        this._dateFields = new List();\n      }\n\n      return this.adapter.apply(\"dateFields\", {\n        dateFields: this._dateFields\n      }).dateFields;\n    },\n\n    /**\r\n     * A list of fields that hold date values.\r\n     *\r\n     * @param value Date field list\r\n     */\n    set: function (value) {\n      this._dateFields = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"numberFormatter\", {\n    /**\r\n     * @return A NumberFormatter instance\r\n     */\n    get: function () {\n      if (!this._numberFormatter) {\n        this._numberFormatter = new NumberFormatter();\n        this._numberFormatter.language = this.language;\n      }\n\n      return this.adapter.apply(\"numberFormatter\", {\n        numberFormatter: this._numberFormatter\n      }).numberFormatter;\n    },\n\n    /**\r\n     * A [[NumberFormatter]] to use when formatting dates when exporting data.\r\n     *\r\n     * @since 4.5.15\r\n     * @param value NumberFormatter instance\r\n     */\n    set: function (value) {\n      this._numberFormatter = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"numberFormat\", {\n    /**\r\n     * @return Number format\r\n     */\n    get: function () {\n      return this.adapter.apply(\"numberFormat\", {\n        numberFormat: this._numberFormat\n      }).numberFormat;\n    },\n\n    /**\r\n     * A number format to use for exporting dates. Will use [[NumberFormatter]]\r\n     * format if not set.\r\n     *\r\n     * @since 4.5.15\r\n     * @param value Number format\r\n     */\n    set: function (value) {\n      this._numberFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"numberFields\", {\n    /**\r\n     * @return Number field list\r\n     */\n    get: function () {\n      if (!this._numberFields) {\n        this._numberFields = new List();\n      }\n\n      return this.adapter.apply(\"numberFields\", {\n        numberFields: this._numberFields\n      }).numberFields;\n    },\n\n    /**\r\n     * A list of fields that hold number values.\r\n     *\r\n     * @since 4.5.15\r\n     * @param value Number field list\r\n     */\n    set: function (value) {\n      this._numberFields = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"durationFormatter\", {\n    /**\r\n     * @return A DurationFormatter instance\r\n     */\n    get: function () {\n      if (!this._durationFormatter) {\n        this._durationFormatter = new DurationFormatter();\n        this._durationFormatter.language = this.language;\n      }\n\n      return this.adapter.apply(\"durationFormatter\", {\n        durationFormatter: this._durationFormatter\n      }).durationFormatter;\n    },\n\n    /**\r\n     * A [[DurationFormatter]] to use when formatting duration values when\r\n     * exporting data.\r\n     *\r\n     * @param value  DurationFormatter instance\r\n     */\n    set: function (value) {\n      this._durationFormatter = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"durationFormat\", {\n    /**\r\n     * @return Duration format\r\n     */\n    get: function () {\n      return this.adapter.apply(\"durationFormat\", {\n        durationFormat: this._durationFormat\n      }).durationFormat;\n    },\n\n    /**\r\n     * A format to use when formatting values from `durationFields`.\r\n     * Will use [[DurationFormatter]] format if not set.\r\n     *\r\n     * @param value Duration format\r\n     */\n    set: function (value) {\n      this._durationFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"durationFields\", {\n    /**\r\n     * @return Duration field list\r\n     */\n    get: function () {\n      if (!this._durationFields) {\n        this._durationFields = new List();\n      }\n\n      return this.adapter.apply(\"durationFields\", {\n        durationFields: this._durationFields\n      }).durationFields;\n    },\n\n    /**\r\n     * A list of fields that hold duration values.\r\n     *\r\n     * @param value Duration field list\r\n     */\n    set: function (value) {\n      this._durationFields = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Generates data fields out of the first row of data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Export.prototype.generateDataFields = function () {\n    var _this = this;\n\n    this._dataFields = {};\n\n    if (this.data.length) {\n      $array.each(this.data, function (row) {\n        $object.each(row, function (key, value) {\n          if (!$type.hasValue(_this._dataFields[key])) {\n            _this._dataFields[key] = _this.adapter.apply(\"dataFieldName\", {\n              name: key,\n              field: key\n            }).name;\n          }\n        });\n      });\n    }\n  };\n  /**\r\n   * Cheks against `dateFields` property to determine if this field holds\r\n   * dates.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param field   Field name\r\n   * @param options Options\r\n   * @return `true` if it's a date field\r\n   */\n\n\n  Export.prototype.isDateField = function (field) {\n    return this.adapter.apply(\"isDateField\", {\n      isDateField: this.dateFields.contains(field),\n      field: field\n    }).isDateField;\n  };\n  /**\r\n   * Cheks against `numberFields` property to determine if this field holds\r\n   * numbers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param field   Field name\r\n   * @param options Options\r\n   * @return `true` if it's a number field\r\n   */\n\n\n  Export.prototype.isNumberField = function (field) {\n    return this.adapter.apply(\"isNumberField\", {\n      isNumberField: this.numberFields.contains(field),\n      field: field\n    }).isNumberField;\n  };\n  /**\r\n   * Cheks against `durationFields` property to determine if this field holds\r\n   * durations.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param field   Field name\r\n   * @param options Options\r\n   * @return `true` if it's a date field\r\n   */\n\n\n  Export.prototype.isDurationField = function (field) {\n    return this.adapter.apply(\"isDurationField\", {\n      isDurationField: this.durationFields.contains(field),\n      field: field\n    }).isDurationField;\n  };\n  /**\r\n   * Returns proper content type for the export type.\r\n   *\r\n   * @param type  Export format/type\r\n   * @return Proper content type, i.e. \"image/jpeg\"\r\n   */\n\n\n  Export.prototype.getContentType = function (type) {\n    var contentType = \"\";\n\n    switch (type) {\n      case \"png\":\n      case \"gif\":\n        contentType = \"image/\" + type;\n        break;\n\n      case \"jpg\":\n        contentType = \"image/jpeg\";\n        break;\n\n      case \"svg\":\n        contentType = \"image/svg+xml\";\n        break;\n\n      case \"csv\":\n        contentType = \"text/csv\";\n        break;\n\n      case \"json\":\n        contentType = \"application/json\";\n        break;\n\n      case \"html\":\n        contentType = \"text/html\";\n        break;\n\n      case \"pdf\":\n      case \"pdfdata\":\n        contentType = \"application/pdf\";\n        break;\n\n      case \"xlsx\":\n        contentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n        break;\n    }\n\n    return this.adapter.apply(\"contentType\", {\n      contentType: contentType,\n      type: type\n    }).contentType;\n  };\n\n  Object.defineProperty(Export.prototype, \"filePrefix\", {\n    /**\r\n     * @return File prefix\r\n     */\n    get: function () {\n      return this.adapter.apply(\"filePrefix\", {\n        filePrefix: this._filePrefix\n      }).filePrefix;\n    },\n\n    /**\r\n     * A file prefix to be used for all exported formats.\r\n     *\r\n     * Export will apply format-related extension to it. E.g. if this is set to\r\n     * \"myExport\", the file name of the PNG exported image will be \"myExport.png\".\r\n     *\r\n     * @param value File prefix\r\n     */\n    set: function (value) {\n      this._filePrefix = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"backgroundColor\", {\n    /**\r\n     * @return Background color\r\n     */\n    get: function () {\n      return this.adapter.apply(\"backgroundColor\", {\n        backgroundColor: this._backgroundColor\n      }).backgroundColor;\n    },\n\n    /**\r\n     * A background color to be used for exported images. If set, this will\r\n     * override the automatically acquired background color.\r\n     *\r\n     * @param value Color\r\n     */\n    set: function (value) {\n      this._backgroundColor = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"title\", {\n    /**\r\n     * @return Title\r\n     */\n    get: function () {\n      return this.adapter.apply(\"title\", {\n        title: this._title\n      }).title;\n    },\n\n    /**\r\n     * A title to be used when printing.\r\n     *\r\n     * @param value Title\r\n     */\n    set: function (value) {\n      this._title = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Displays a preloader/exporting indicator.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Add ability to change text\r\n   */\n\n  Export.prototype.showPreloader = function () {\n    var preloader = this.preloader;\n\n    if (preloader) {\n      preloader.progress = 0.5;\n      preloader.label.text = \"...\";\n    }\n  };\n  /**\r\n   * Hides preloader/exporting indicator\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Export.prototype.hidePreloader = function () {\n    var preloader = this.preloader;\n\n    if (preloader) {\n      preloader.progress = 1;\n    }\n  };\n\n  Object.defineProperty(Export.prototype, \"preloader\", {\n    /**\r\n     * Returns a an instance of [[Preloader]] associated with the Sprite being\r\n     * exported.\r\n     *\r\n     * @return Preloader\r\n     */\n    get: function () {\n      return this._sprite && this._sprite.parent && this._sprite.parent.preloader ? this._sprite.parent.preloader : undefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Displays a modal saying export is taking longer than expected.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Export.prototype.showTimeout = function () {\n    this.showModal(this.adapter.apply(\"timeoutMessage\", {\n      message: this.language.translate(\"Export operation took longer than expected. Something might have gone wrong.\")\n    }).message);\n  };\n  /**\r\n   * Hides preloader/exporting indicator.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Export.prototype.hideTimeout = function () {\n    if (this._timeoutTimeout) {\n      this.removeDispose(this._timeoutTimeout);\n      this._timeoutTimeout = null;\n    }\n\n    this.hideModal();\n  };\n\n  Object.defineProperty(Export.prototype, \"language\", {\n    /**\r\n     * @return A [[Language]] instance to be used\r\n     */\n    get: function () {\n      if (!this._language) {\n        this._language = new Language();\n      }\n\n      return this._language;\n    },\n\n    /**\r\n     * A [[Language]] instance to be used for translations.\r\n     *\r\n     * @param value An instance of [[Language]]\r\n     */\n    set: function (value) {\n      this._language = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"modal\", {\n    /**\r\n     * Returns (and creates) [[Modal]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Modal instance\r\n     */\n    get: function () {\n      if (!this._modal) {\n        this._modal = new Modal(); // Prefix with Sprite's class name\n\n        this._modal.adapter.add(\"classPrefix\", function (value) {\n          value = options.classNamePrefix + value;\n          return value;\n        });\n      }\n\n      return this._modal;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Shows [[Modal]] with specific text.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text Modal contents\r\n   */\n\n  Export.prototype.showModal = function (text, title) {\n    // Hide previous modal and preloader\n    this.hideModal();\n    this.hidePreloader(); // Create modal\n\n    var modal = this.modal;\n    modal.container = this.sprite.svgContainer.SVGContainer;\n    modal.content = text;\n    modal.readerTitle = title;\n    modal.open();\n  };\n  /**\r\n   * Hides modal window if one's currently open.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Export.prototype.hideModal = function () {\n    if (this._modal) {\n      this.modal.close();\n    }\n  };\n  /**\r\n   * Loads canvg dynamic module.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Instance of canvg\r\n   * @async\r\n   */\n\n\n  Export.prototype._canvg = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var canvg;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , import(\n            /* webpackChunkName: \"canvg\" */\n            \"../../canvg/index.js\")];\n\n          case 1:\n            canvg = _a.sent();\n\n            if (canvg.default != null) {\n              return [2\n              /*return*/\n              , canvg.default];\n            } else {\n              return [2\n              /*return*/\n              , canvg];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Object.defineProperty(Export.prototype, \"canvg\", {\n    /**\r\n     * Returns canvg instance.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Instance of canvg\r\n     */\n    get: function () {\n      return this._canvg();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Export.prototype, \"pdfmake\", {\n    /**\r\n     * Returns pdfmake instance.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Instance of pdfmake\r\n     */\n    get: function () {\n      if (pdfmakePromise == null) {\n        pdfmakePromise = _pdfmake();\n      }\n\n      return pdfmakePromise;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Loads xlsx dynamic module.\r\n   *\r\n   * This is an asynchronous function. Check the description of `getImage()`\r\n   * for description and example usage.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Instance of pdfmake\r\n   * @async\r\n   */\n\n  Export.prototype._xlsx = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , import(\n            /* webpackChunkName: \"xlsx\" */\n            \"xlsx/dist/xlsx.core.min.js\")];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  Object.defineProperty(Export.prototype, \"xlsx\", {\n    /**\r\n     * Returns xlsx instance.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Instance of pdfmake\r\n     */\n    get: function () {\n      return this._xlsx();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets options for a format.\r\n   */\n\n  Export.prototype.setFormatOptions = function (type, options) {\n    this._formatOptions.setKey(type, options);\n  };\n  /**\r\n   * Returns current options for a format.\r\n   */\n\n\n  Export.prototype.getFormatOptions = function (type) {\n    return this._formatOptions.getKey(type);\n  };\n\n  Object.defineProperty(Export.prototype, \"formatOptions\", {\n    /**\r\n     * A [[Dictionary]] object containing format-specific options.\r\n     *\r\n     * May be used to change specific option for the format:\r\n     *\r\n     * ```TypeScript\r\n     * chart.exporting.formatOptions.getKey(\"csv\").disabled = true;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.exporting.formatOptions.getKey(\"csv\").disabled = true;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"exporting\": {\r\n     *     // ...\r\n     *     \"formatOptions\": {\r\n     *       \"csv\": {\r\n     *         \"disabled\": true\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @since 4.9.12\r\n     * @return  Options\r\n     */\n    get: function () {\n      return this._formatOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Disables interactivity on parent chart.\r\n   */\n\n  Export.prototype._disablePointers = function () {\n    if (!$type.hasValue(this._spriteInteractionsEnabled)) {\n      this._spriteInteractionsEnabled = this.sprite.interactionsEnabled;\n    }\n\n    this.sprite.interactionsEnabled = false;\n  };\n  /**\r\n   * Releases temporarily disabled pointers on parent chart.\r\n   */\n\n\n  Export.prototype._releasePointers = function () {\n    if ($type.hasValue(this._spriteInteractionsEnabled) && !this._exportRunning) {\n      this.sprite.interactionsEnabled = this._spriteInteractionsEnabled;\n    }\n  };\n  /**\r\n   * Hides all elements that should not be included in the exported image.\r\n   */\n\n\n  Export.prototype.hideNonExportableSprites = function () {\n    var _this = this;\n\n    if (this._objectsAlreadyHidden) {\n      return;\n    }\n\n    var svgContainer = this.sprite.svgContainer;\n\n    if (svgContainer) {\n      $array.each(svgContainer.nonExportableSprites, function (item) {\n        if (!item.isHidden && !item.isHiding && item.visible) {\n          _this._hiddenObjects.push(item);\n        }\n\n        item.hide(0);\n      });\n    }\n\n    this._objectsAlreadyHidden = true;\n  };\n  /**\r\n   * Respores elements that were hidden before export.\r\n   */\n\n\n  Export.prototype.restoreNonExportableSprites = function () {\n    if (!this._objectsAlreadyHidden) {\n      return;\n    }\n\n    $array.each(this._hiddenObjects, function (item) {\n      item.show(0);\n    });\n    this._hiddenObjects = [];\n    this._objectsAlreadyHidden = false;\n  };\n  /**\r\n   * Checks if there are elements that absolutely need to be validated before\r\n   * export.\r\n   *\r\n   * If there are invalid elements, it will await for them to be validated.\r\n   *\r\n   * @return Promise\r\n   */\n\n\n  Export.prototype.awaitValidSprites = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = [];\n\n            if (this.validateSprites.length) {\n              $array.each(this.validateSprites, function (sprite, index) {\n                if (sprite.invalid) {\n                  promises.push(new Promise(function (resolve, reject) {\n                    sprite.events.once(\"validated\", function (ev) {\n                      resolve();\n                    });\n                  }));\n                }\n              });\n            }\n\n            if (!promises.length) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  Export.prototype.processConfig = function (config) {\n    registry.registeredClasses[\"ExportMenu\"] = ExportMenu;\n\n    if (config) {\n      // Set up menu\n      if ($type.hasValue(config.menu) && !$type.hasValue(config.menu.type)) {\n        config.menu.type = \"ExportMenu\";\n      }\n\n      if ($type.hasValue(config.dataFields) && $type.isObject(config.dataFields)) {\n        this.dataFields = config.dataFields;\n        delete config.dataFields;\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n  /**\r\n   * XLINK namespace definition.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Export.XLINK = \"http://www.w3.org/1999/xlink\";\n  return Export;\n}(Validatable);\n\nexport { Export };","map":{"version":3,"mappings":"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","names":["ExportMenu","Adapter","Sprite","Modal","List","Dictionary","DateFormatter","DurationFormatter","NumberFormatter","Language","Validatable","color","registry","options","StyleRule","getComputedStyle","$browser","$object","$net","$dom","$type","$log","$utils","$array","$math","$strings","pdfmakePromise","_pdfmake","Promise","all","a","_a","pdfmake","vfs_fonts","global","window","pdfMake","vfs","default","fontFamilySrcRegexp","supportsBlobUri","navigator","msSaveOrOpenBlob","blobToDataUri","blob","resolve","reject","f","FileReader","onload","e","result","onerror","readAsDataURL","getCssRules","s","sheet","cssRules","success","error","addEventListener","setTimeout","Error","loadStylesheet","doc","url","load","response","console","e_2","createElement","textContent","nonce","setAttribute","head","appendChild","rules","eachStylesheet","removeChild","topUrl","promises","length","i","rule","type","CSSRule","IMPORT_RULE","href","joinUrl","push","eachStylesheets","iframe","document","src","doc_1","contentDocument","map","styleSheets","location","__extends","container","_super","_this","_container","className","_formatOptions","setKey","quality","fontSize","imageFormat","align","addURL","addColumnNames","indent","useLocale","emptyAs","addBOM","delay","printMethod","adapter","add","arg","formatOptions","getKey","merge","applyTheme","dispatchImmediately","Object","Export","_menu","menu","removeDispose","language","_language","branch","unsupported","typeSupported","events","on","ev","export","close","_disablePointers","_releasePointers","obj","classPrefix","classNamePrefix","_disposers","supported","getFormatOptions","hasValue","disabled","_hasData","print","indexOf","apply","data","getImage","getSVG","getPDF","getExcel","getCSV","getJSON","getHTML","getPrint","handleCustom","_exportRunning","isEnabled","event_1","showPreloader","timeoutDelay","hideTimeout","_timeoutTimeout","event_4","showTimeout","hideNonExportableSprites","func","_getFunction","call","restoreNonExportableSprites","event_2","hidePreloader","title","download","filePrefix","event_3","callback","callbackTarget","DOMURL","getDOMURL","blobs","FONT_FACE_RULE","cssText_1","cssText","exec","urls","split","after","fullUrl","webFontFilter","match","undefined","responseType","url_1","createObjectURL","e_3","then","filter","x","replace","join","includeExtras","prehidden","_objectsAlreadyHidden","awaitValidSprites","simplifiedImageExport","canvas","getCanvas","addExtras","uri","toDataURL","getContentType","disposeCanvas","e_4","message","stack","warn","getImageAdvanced","advanced","extraSprites","middleLeft_1","middleTop_1","middleWidth_1","width","middleHeight_1","height","extraRight_1","extraBottom_1","extraSprite","extra","sprite","position","marginTop","marginRight","marginBottom","marginLeft","exporting","getCanvasAdvanced","extraCanvas","extraWidth","extraHeight","crop","max","left","top","extras","newCanvas","getDisposableCanvas","ctx_1","getContext","background","backgroundColor","findBackgroundColor","dom","fillStyle","toString","fillRect","left_1","top_1","right_1","bottom_1","each","drawImage","pixelWidth","pixelHeight","font","findFont","findFontSize","scale","pixelRatio","getPixelRatio","getAdjustedScale","style","ctx","useWebFonts","getFontFamilies","fonts","imagesToDataURI","prepForeignObjects","normalizeSVG","serializeElement","paper","defs","svg","Blob","loadNewImage","img","revokeObjectURL","restoreRemovedObjects","canvg","config","useCORS","ignoreDimensions","scaleWidth","scaleHeight","fromString","render","body","useRetina","adjWidth","adjHeight","widthScale","heightScale","maxWidth","maxHeight","min","minWidth","minHeight","el","images","querySelectorAll","count","image","getAttributeNS","XLINK","svgToDataURI","imageToDataURI","objects","temporarilyRemoveObject","keepTainted","charset","btoa","setAttributeNS","placeholder","parent","parentElement","parentNode","node","insertBefore","_removedObjects","pop","parent_1","element","useSimplifiedExport","cache","getCache","setCache","crossOrigin","Image","currentHref","removeAttribute","onabort","self","URL","webkitURL","encodeURI","encodeURIComponent","dimParams","Math","round","styleParams","fos","ms","PLACEHOLDER","rgba","isInternetExplorer","reg","RegExp","escapeForRgex","getBaseURI","XMLSerializer","serializeToString","addFont","paths","normal","path","bytes","bold","italics","bolditalics","name","_d","defaultMargins","pageSize","pageOrientation","pageMargins","defaultStyle","content","extraMargin","text","margin","translate","alignment","fit","getPageSizeFit","addData","_b","getPDFData","_c","extraFonts","createPdf","getDataUrl","dataFields","format","pivot","dataFieldsOrder_1","dataFieldsOrder","eachOrdered","key","val","dataRow","len","dataValue","convertToSpecialFormat","getPDFDataRow","b","ai","bi","headerRows","table","row","asIs","items","value","convertEmptyValue","item","margins","newMargins","sizes","A0","A1","A2","A3","A4","A5","A6","A7","A8","A9","A10","B0","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","C0","C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","RA0","RA1","RA2","RA3","RA4","SRA0","SRA1","SRA2","SRA3","SRA4","EXECUTIVE","FOLIO","LEGAL","LETTER","TABLOID","fitSize","xlsx","XLSX","wbOptions","bookType","bookSST","sheetName","normalizeExcelSheetName","wb","SheetNames","Sheets","dataFieldsOrder_2","getExcelRow","utils","aoa_to_sheet","workbook","write","truncateWithEllipsis","csv","br","dataFieldsOrder_3","getCSVRow","reverse","separator","forceQuotes","search","html","tableClass","dataFieldsOrder_4","getHTMLRow","headerRow","rowClass","tag","first","charCodeAt","useTag","cellClass","_dynamicDataFields","sourceData","newValue_1","field","json","JSON","stringify","keepOriginal","isDateField","Date","isDurationField","durationFormatter","durationFormat","isNumberField","numberFormat","numberFormatter","useTimestamps","getTime","toLocaleString","dateFormatter","dateFormat","isString","parse","fileName","msBlobDownloadSupport","parts","contentType","shift","decodeURIComponent","decoded","atob","blob_1","msSaveBlob","chars","Array","charCode","Uint8Array","blobDownloadSupport","link_1","blob_2","url_2","click","concat","url_3","linkDownloadSupport","link","legacyIE","showModal","display","idoc","open","execCommand","res","div","innerHTML","getElementsByTagName","printViaCSS","printViaIframe","scroll","documentElement","scrollTop","getShadowRoot","originalTitle","visibility","opacity","clipPath","isIOS","test","userAgent","MSStream","dispose","contentWindow","currentColor","parent_2","_sprite","_extraSprites","validateSprites","_validateSprites","_data","_dataFields","generateDataFields","hasData","_prevHasData","invalidate","_dateFormatter","_dateFormat","_dateFields","dateFields","_numberFormatter","_numberFormat","_numberFields","numberFields","_durationFormatter","_durationFormat","_durationFields","durationFields","contains","_filePrefix","_backgroundColor","_title","preloader","progress","label","hideModal","_modal","modal","svgContainer","SVGContainer","readerTitle","_canvg","_xlsx","_spriteInteractionsEnabled","interactionsEnabled","nonExportableSprites","isHidden","isHiding","visible","_hiddenObjects","hide","show","index","invalid","once","registeredClasses","isObject","processConfig"],"sourceRoot":"","sources":["../../../../../src/.internal/core/export/Export.ts"],"sourcesContent":["/**\r\n * Export module.\r\n *\r\n * Parts of Export functionality rely on the following third party libraries:\r\n *\r\n * [canvg.js](https://github.com/canvg/canvg)\r\n * Copyright (c) Gabe Lerner\r\n * Licensed under [MIT](https://github.com/canvg/canvg/blob/master/LICENSE)\r\n *\r\n * [pdfmake](http://pdfmake.org/)\r\n * Copyright (c) 2014 bpampuch\r\n * Licensed under [MIT](https://github.com/bpampuch/pdfmake/blob/master/LICENSE)\r\n *\r\n * [SheetJS Community Edition](https://github.com/sheetjs/js-xlsx)\r\n * Licensed under [Apache License 2.0](https://github.com/SheetJS/js-xlsx/blob/master/LICENSE)\r\n *\r\n * [JSZip](http://stuartk.com/jszip)\r\n * Copyright (c) Stuart Knightley\r\n * Dual licenced under the [MIT license or GPLv3](https://raw.githubusercontent.com/Stuk/jszip/master/LICENSE.markdown).\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ExportMenu } from \"./ExportMenu\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport { AMEvent } from \"../utils/EventDispatcher\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Preloader } from \"../elements/Preloader\";\r\nimport { Modal } from \"../elements/Modal\";\r\nimport { List } from \"../utils/List\";\r\nimport { Dictionary } from \"../utils/Dictionary\";\r\nimport { IDisposer } from \"../utils/Disposer\";\r\nimport { DateFormatter } from \"../formatters/DateFormatter\";\r\nimport { DurationFormatter } from \"../formatters/DurationFormatter\";\r\nimport { NumberFormatter } from \"../formatters/NumberFormatter\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { Validatable } from \"../utils/Validatable\";\r\nimport { Color, color } from \"../utils/Color\";\r\nimport { registry } from \"../Registry\";\r\nimport { options } from \"../Options\";\r\nimport { StyleRule, getComputedStyle } from \"../utils/DOM\";\r\nimport { Align } from \"../defs/Align\";\r\nimport * as $browser from \"../utils/Browser\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $net from \"../utils/Net\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $log from \"../utils/Log\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $strings from \"../utils/Strings\";\r\n\r\n\r\nexport interface IFile {\r\n\tpath: string;\r\n\tbytes: string;\r\n}\r\n\r\nexport interface IFont {\r\n\tname: string;\r\n\tnormal: IFile;\r\n\tbold?: IFile;\r\n\titalics?: IFile;\r\n\tbolditalics?: IFile;\r\n}\r\n\r\n\r\n// This is used to cache the pdfmake loading\r\nlet pdfmakePromise: Promise<any>;\r\n\r\n/**\r\n * Loads pdfmake dynamic module\r\n *\r\n * This is an asynchronous function. Check the description of `getImage()`\r\n * for description and example usage.\r\n *\r\n * @ignore Exclude from docs\r\n * @return Instance of pdfmake\r\n * @async\r\n */\r\nasync function _pdfmake(): Promise<any> {\r\n\tlet a = await Promise.all([\r\n\t\timport(/* webpackChunkName: \"pdfmake\" */ \"pdfmake/build/pdfmake.js\"),\r\n\t\timport(/* webpackChunkName: \"pdfmake\" */ \"../../pdfmake/vfs_fonts\")\r\n\t]);\r\n\tlet pdfmake = a[0];\r\n\tlet vfs_fonts = a[1];\r\n\tconst global = <any>window;\r\n\tglobal.pdfMake = global.pdfMake || {};\r\n\tglobal.pdfMake.vfs = vfs_fonts.default;\r\n\tpdfmake.vfs = vfs_fonts.default;\r\n\treturn pdfmake;\r\n}\r\n\r\n\r\n// TODO better parsing\r\nconst fontFamilySrcRegexp = /src: ([^;]+);/;\r\n\r\n// TODO better checks\r\nfunction supportsBlobUri(): boolean {\r\n\treturn window.navigator.msSaveOrOpenBlob != null;\r\n}\r\n\r\n// TODO move into utils or something ?\r\nfunction blobToDataUri(blob: Blob): Promise<string> {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\t// TODO handle abort ?\r\n\t\tconst f = new FileReader();\r\n\t\tf.onload = (e) => { resolve(<string>f.result); };\r\n\t\tf.onerror = (e) => { reject(e); };\r\n\t\tf.readAsDataURL(blob);\r\n\t});\r\n}\r\n\r\nasync function getCssRules(s: HTMLStyleElement): Promise<CSSRuleList> {\r\n\tconst sheet = <CSSStyleSheet>s.sheet;\r\n\r\n\ttry {\r\n\t\treturn sheet.cssRules;\r\n\r\n\t} catch (e) {\r\n\t\t// Needed because of https://bugzilla.mozilla.org/show_bug.cgi?id=625013\r\n\t\treturn await new Promise<CSSRuleList>((success, error) => {\r\n\t\t\ts.addEventListener(\"load\", () => {\r\n\t\t\t\tsuccess(sheet.cssRules);\r\n\t\t\t}, true);\r\n\r\n\t\t\ts.addEventListener(\"error\", (e) => {\r\n\t\t\t\terror(e);\r\n\t\t\t}, true);\r\n\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\terror(new Error(\"Timeout while waiting for <style> to load\"));\r\n\t\t\t}, 10000);\r\n\t\t});\r\n\t}\r\n}\r\n\r\n// This loads a stylesheet by URL and then calls the function with it\r\n// TODO this should be moved into utils or something\r\nasync function loadStylesheet(doc: Document, url: string, f: (topUrl: string, rule: CSSRule) => void): Promise<void> {\r\n\tlet response;\r\n\r\n\ttry {\r\n\t\tresponse = await $net.load(url);\r\n\r\n\t} catch (e) {\r\n\t\tconsole.error(\"Failed to load stylesheet\", url, e);\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst s = doc.createElement(\"style\");\r\n\ts.textContent = response.response;\r\n\tif (options.nonce != \"\") {\r\n\t\ts.setAttribute(\"nonce\", options.nonce)\r\n\t}\r\n\tdoc.head.appendChild(s);\r\n\r\n\ttry {\r\n\t\tconst rules = await getCssRules(s);\r\n\t\tawait eachStylesheet(doc, url, rules, f);\r\n\r\n\t} finally {\r\n\t\tdoc.head.removeChild(s);\r\n\t}\r\n}\r\n\r\n// This calls a function for each CSSRule inside of a CSSStyleSheet.\r\n// If the CSSStyleSheet has any @import, then it will recursively call the function for those CSSRules too.\r\n// TODO this should be moved into utils or something\r\nasync function eachStylesheet(doc: Document, topUrl: string, rules: CSSRuleList, f: (topUrl: string, rule: CSSRule) => void): Promise<void> {\r\n\tconst promises: Array<Promise<void>> = [];\r\n\r\n\tconst length = rules.length;\r\n\r\n\tfor (let i = 0; i < length; i++) {\r\n\t\tconst rule = rules[i];\r\n\r\n\t\tif (rule.type === CSSRule.IMPORT_RULE) {\r\n\t\t\tlet url = (<CSSImportRule>rule).href;\r\n\r\n\t\t\tif (url) {\r\n\t\t\t\turl = $utils.joinUrl(topUrl, url);\r\n\t\t\t\tpromises.push(loadStylesheet(doc, url, f));\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tf(topUrl, rule);\r\n\t\t}\r\n\t}\r\n\r\n\tif (promises.length) {\r\n\t\tawait Promise.all(promises);\r\n\t}\r\n}\r\n\r\n// This calls a function for each CSSRule for all of the stylesheets in the page.\r\n// If the CSSStyleSheet has any @import, then it will recursively call the function for those CSSRules too.\r\n// TODO this should be moved into utils or something\r\nasync function eachStylesheets(f: (topUrl: string, rule: CSSRule) => void): Promise<void> {\r\n\t// This uses an <iframe> so it doesn't screw up the site's styles\r\n\tconst iframe = document.createElement(\"iframe\");\r\n\r\n\t// This causes it to use the same origin policy as the parent page\r\n\tiframe.src = \"about:blank\";\r\n\t// This tries to make it more accessible for screen readers\r\n\tiframe.setAttribute(\"title\", \"\");\r\n\r\n\tdocument.head.appendChild(iframe);\r\n\r\n\ttry {\r\n\t\tconst doc = iframe.contentDocument;\r\n\r\n\t\t// TODO use $dom.getRoot instead of document ?\r\n\t\tawait Promise.all($array.map(document.styleSheets, (sheet) => {\r\n\t\t\tlet url = sheet.href;\r\n\r\n\t\t\tif (url == null) {\r\n\t\t\t\treturn eachStylesheet(doc, location.href, (<CSSStyleSheet>sheet).cssRules, f);\r\n\r\n\t\t\t} else {\r\n\t\t\t\turl = $utils.joinUrl(location.href, url);\r\n\t\t\t\treturn loadStylesheet(doc, url, f);\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t} finally {\r\n\t\tdocument.head.removeChild(iframe);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents an Event object that comes from [[Export]].\r\n */\r\nexport type ExportOperation = {\r\n\tformat?: string;\r\n\toptions?: any;\r\n}\r\n\r\n/**\r\n * Defines image formats available for export.\r\n */\r\nexport type imageFormats = \"png\" | \"gif\" | \"jpg\";\r\n\r\n/**\r\n * An interface describing extra elements to include in export.\r\n *\r\n * @since 4.2.0\r\n */\r\nexport interface IExportCanvas {\r\n\r\n\t/**\r\n\t * Top margin in pixels.\r\n\t */\r\n\tmarginTop?: number;\r\n\r\n\t/**\r\n\t * Right margin in pixels.\r\n\t */\r\n\tmarginRight?: number;\r\n\r\n\t/**\r\n\t * Bottom margin in pixels.\r\n\t */\r\n\tmarginBottom?: number;\r\n\r\n\t/**\r\n\t * Left margin in pixels.\r\n\t */\r\n\tmarginLeft?: number;\r\n\r\n\t/**\r\n\t * Position to put extra element in relation to main chart.\r\n\t */\r\n\tposition?: \"left\" | \"right\" | \"top\" | \"bottom\";\r\n\r\n\t/**\r\n\t * Reference to element.\r\n\t */\r\n\tsprite?: Sprite;\r\n\r\n\t/**\r\n\t * If this is set to `true` and extra element is higher/wider than main\r\n\t * chart element, the extra element will be cropped.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.6.1\r\n\t */\r\n\tcrop?: boolean;\r\n}\r\n\r\n/**\r\n * Represents options for image export.\r\n */\r\nexport interface IExportImageOptions {\r\n\r\n\t/**\r\n\t * Quality of the exported image. (0-1)\r\n\t */\r\n\tquality?: number;\r\n\r\n\t/**\r\n\t * Rescale image.\r\n\t *\r\n\t * Number less than 1 will shrink the image.\r\n\t *\r\n\t * Number bigger than 1 will scale up the image.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tscale?: number;\r\n\r\n\t/**\r\n\t * Minimum width in pixels of the exported image. If source chart is smaller\r\n\t * thank this, it will be scaled up.\r\n\t *\r\n\t * @since 4.9.24\r\n\t */\r\n\tminWidth?: number;\r\n\r\n\t/**\r\n\t * Minimum height in pixels of the exported image. If source chart is smaller\r\n\t * thank this, it will be scaled up.\r\n\t *\r\n\t * @since 4.9.24\r\n\t */\r\n\tminHeight?: number;\r\n\r\n\t/**\r\n\t * Maximum width in pixels of the exported image. If source chart is bigger\r\n\t * thank this, it will be scaled down.\r\n\t *\r\n\t * NOTE: this setting might be overidden by `minWidth`.\r\n\t *\r\n\t * @since 4.9.24\r\n\t */\r\n\tmaxWidth?: number;\r\n\r\n\t/**\r\n\t * Maximum height in pixels of the exported image. If source chart is bigger\r\n\t * thank this, it will be scaled down.\r\n\t *\r\n\t * NOTE: this setting might be overidden by `minHeight`.\r\n\t *\r\n\t * @since 4.9.24\r\n\t */\r\n\tmaxHeight?: number;\r\n\r\n\t/**\r\n\t * Normally, Export removes \"tainted\" images (images that are loaded from\r\n\t * other host than the chart itself) before export.\r\n\t *\r\n\t * Set this to `true` to disable it.\r\n\t *\r\n\t * Please note that removal of tainted images might trigger cross-origin\r\n\t * security restrictions in browser and prevent the whole export operation,\r\n\t * so use with caution.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tkeepTainted?: boolean;\r\n\r\n\t/**\r\n\t * Set this option to `disabled` for a format to not show up in [[ExportMenu]].\r\n\t *\r\n\t * @since 4.9.11\r\n\t */\r\n\tdisabled?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Represents options for SVG export.\r\n */\r\nexport interface IExportSVGOptions {\r\n\r\n\t/**\r\n\t * Set this option to `disabled` for a format to not show up in [[ExportMenu]].\r\n\t *\r\n\t * @since 4.9.11\r\n\t */\r\n\tdisabled?: boolean;\r\n\r\n\t/**\r\n\t * Rescale image.\r\n\t *\r\n\t * Number less than 1 will shrink the image.\r\n\t *\r\n\t * Number bigger than 1 will scale up the image.\r\n\t *\r\n\t * @default 1\r\n\t * @since 4.10.06\r\n\t */\r\n\tscale?: number;\r\n\r\n\t/**\r\n\t * Minimum width in pixels of the exported image. If source chart is smaller\r\n\t * thank this, it will be scaled up.\r\n\t *\r\n\t * @since 4.10.06\r\n\t */\r\n\tminWidth?: number;\r\n\r\n\t/**\r\n\t * Minimum height in pixels of the exported image. If source chart is smaller\r\n\t * thank this, it will be scaled up.\r\n\t *\r\n\t * @since 4.10.06\r\n\t */\r\n\tminHeight?: number;\r\n\r\n\t/**\r\n\t * Maximum width in pixels of the exported image. If source chart is bigger\r\n\t * thank this, it will be scaled down.\r\n\t *\r\n\t * NOTE: this setting might be overidden by `minWidth`.\r\n\t *\r\n\t * @since 4.10.06\r\n\t */\r\n\tmaxWidth?: number;\r\n\r\n\t/**\r\n\t * Maximum height in pixels of the exported image. If source chart is bigger\r\n\t * thank this, it will be scaled down.\r\n\t *\r\n\t * NOTE: this setting might be overidden by `minHeight`.\r\n\t *\r\n\t * @since 4.10.06\r\n\t */\r\n\tmaxHeight?: number;\r\n\r\n}\r\n\r\n/**\r\n * Available PDF page sizes.\r\n */\r\nexport type pageSizes = \"4A0\" | \"2A0\" | \"A0\" | \"A1\" | \"A2\" | \"A3\" | \"A4\" | \"A5\" | \"A6\" | \"A7\" | \"A8\" | \"A9\" | \"A10\" |\r\n\t\"B0\" | \"B1\" | \"B2\" | \"B3\" | \"B4\" | \"B5\" | \"B6\" | \"B7\" | \"B8\" | \"B9\" | \"B10\" |\r\n\t\"C0\" | \"C1\" | \"C2\" | \"C3\" | \"C4\" | \"C5\" | \"C6\" | \"C7\" | \"C8\" | \"C9\" | \"C10\" |\r\n\t\"RA0\" | \"RA1\" | \"RA2\" | \"RA3\" | \"RA4\" |\r\n\t\"SRA0\" | \"SRA1\" | \"SRA2\" | \"SRA3\" | \"SRA4\" |\r\n\t\"EXECUTIVE\" | \"FOLIO\" | \"LEGAL\" | \"LETTER\" | \"TABLOID\";\r\n\r\n/**\r\n * Represents options for PDF export.\r\n */\r\nexport interface IExportPDFOptions extends IExportImageOptions {\r\n\r\n\t/**\r\n\t * Font size to use for all texts.\r\n\t */\r\n\tfontSize?: number;\r\n\r\n\t/**\r\n\t * An image format to use for embedded images in PDF.\r\n\t *\r\n\t * See `imageFormats` in [[Export_module]].\r\n\t */\r\n\timageFormat?: imageFormats;\r\n\r\n\t/**\r\n\t * Whether to add a URL of the web page the chart has been exported from.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\taddURL?: boolean;\r\n\r\n\t/**\r\n\t * Page size of the exported PDF.\r\n\t */\r\n\tpageSize?: pageSizes;\r\n\r\n\t/**\r\n\t * Page orientation.\r\n\t */\r\n\tpageOrientation?: \"landscape\" | \"portrait\";\r\n\r\n\t/**\r\n\t * Alignment of the chart image in PDF.\r\n\t *\r\n\t * Supported options: `\"left\"` (default), `\"center\"`, `\"right\"`.\r\n\t *\r\n\t * @since 4.9.14\r\n\t * @default left\r\n\t */\r\n\talign?: Align;\r\n\r\n\t/**\r\n\t * Page margins.\r\n\t *\r\n\t * Can be one of the following:\r\n\t *\r\n\t * A single number, in which case it will act as margin setting\r\n\t * for all four edges of the page.\r\n\t *\r\n\t * An array of two numbers `[ horizontal, vertical ]`.\r\n\t *\r\n\t * An array of four numbers `[ left, top, right, bottom ]`.\r\n\t */\r\n\tpageMargins?: number | number[];\r\n\r\n\t/**\r\n\t * Should data table be included together with the image?\r\n\t *\r\n\t * Use \"pdfdata\" options to configure table output.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.7.0\r\n\t */\r\n\taddData?: boolean;\r\n\r\n\t/**\r\n\t * Add column names in first row?\r\n\t *\r\n\t * Export will try to use user-friendly column names where possible, either\r\n\t * from Export's `dataFields` or deduced from chart's series' names that are\r\n\t * bound to specific data fields.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.7.0\r\n\t */\r\n\taddColumnNames?: boolean;\r\n\r\n\t/**\r\n\t * Use timestamps instead of formatted date/time values.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.7.0\r\n\t */\r\n\tuseTimestamps?: boolean;\r\n\r\n\t/**\r\n\t * Will try to format numbers and date/time according to user's locale\r\n\t * settings.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.7.0\r\n\t */\r\n\tuseLocale?: boolean;\r\n\r\n\t/**\r\n\t * Replace missing values with this.\r\n\t *\r\n\t * @default \"\" (empty string)\r\n\t * @since 4.7.0\r\n\t */\r\n\temptyAs?: any;\r\n\r\n\t/**\r\n\t * If set to `true` will export data as pivoted (column names in first column;\r\n\t * values in rows).\r\n\t *\r\n\t * @default false\r\n\t * @since 4.7.0\r\n\t */\r\n\tpivot?: boolean;\r\n\r\n\t/**\r\n\t * Set this option to `disabled` for a format to not show up in [[ExportMenu]].\r\n\t *\r\n\t * @since 4.9.11\r\n\t */\r\n\tdisabled?: boolean;\r\n\r\n\t/**\r\n\t * Font which should be used for the export.\r\n\t *\r\n\t * Default font used for PDF includes only Latin-based and Cyrilic\r\n\t * characters. If you are exporting text in other languages, you might need\r\n\t * to use some other export font.\r\n\t *\r\n\t * @since 4.9.19\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/using-pdf-export-fonts/}\r\n\t */\r\n\tfont?: IFont;\r\n\r\n\t/**\r\n\t * Additional optional fonts which can be used on individual elements.\r\n\t *\r\n\t * @since 4.9.19\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/using-pdf-export-fonts/}\r\n\t */\r\n\textraFonts?: Array<IFont>;\r\n\r\n\t/**\r\n\t * Rescale image.\r\n\t *\r\n\t * Number less than 1 will shrink the image.\r\n\t *\r\n\t * Number bigger than 1 will scale up the image.\r\n\t *\r\n\t * @default 1\r\n\t * @since 4.10.13\r\n\t */\r\n\tscale?: number;\r\n\r\n\t/**\r\n\t * Minimum width in pixels of the exported image. If source chart is smaller\r\n\t * thank this, it will be scaled up.\r\n\t *\r\n\t * @since 4.10.13\r\n\t */\r\n\tminWidth?: number;\r\n\r\n\t/**\r\n\t * Minimum height in pixels of the exported image. If source chart is smaller\r\n\t * thank this, it will be scaled up.\r\n\t *\r\n\t * @since 4.10.13\r\n\t */\r\n\tminHeight?: number;\r\n\r\n\t/**\r\n\t * Maximum width in pixels of the exported image. If source chart is bigger\r\n\t * thank this, it will be scaled down.\r\n\t *\r\n\t * NOTE: this setting might be overidden by `minWidth`.\r\n\t *\r\n\t * @since 4.10.13\r\n\t */\r\n\tmaxWidth?: number;\r\n\r\n\t/**\r\n\t * Maximum height in pixels of the exported image. If source chart is bigger\r\n\t * thank this, it will be scaled down.\r\n\t *\r\n\t * NOTE: this setting might be overidden by `minHeight`.\r\n\t *\r\n\t * @since 4.10.13\r\n\t */\r\n\tmaxHeight?: number;\r\n\r\n}\r\n\r\n/**\r\n * Represents options for CSV export.\r\n */\r\nexport interface IExportCSVOptions {\r\n\r\n\t/**\r\n\t * Separator string to separate columns with.\r\n\t *\r\n\t * @default \",\"\r\n\t */\r\n\tseparator?: string;\r\n\r\n\t/**\r\n\t * CSV format does not require enclosing values in quotes, unless it\r\n\t * contains strings.\r\n\t *\r\n\t * This setting can be used to enforce enclosing of all values in CSV with\r\n\t * quotes.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tforceQuotes?: boolean;\r\n\r\n\t/**\r\n\t * Add column names in first row?\r\n\t *\r\n\t * Export will try to use user-friendly column names where possible, either\r\n\t * from Export's `dataFields` or deduced from chart's series' names that are\r\n\t * bound to specific data fields.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\taddColumnNames?: boolean;\r\n\r\n\t/**\r\n\t * Add rows in reverse order.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\treverse?: boolean;\r\n\r\n\t/**\r\n\t * Use timestamps instead of formatted date/time values.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tuseTimestamps?: boolean;\r\n\r\n\t/**\r\n\t * Will try to format numbers and date/time according to user's locale\r\n\t * settings.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tuseLocale?: boolean;\r\n\r\n\t/**\r\n\t * Replace missing values with this.\r\n\t *\r\n\t * @default \"\" (empty string)\r\n\t */\r\n\temptyAs?: any;\r\n\r\n\t/**\r\n\t * If set to `true` will export data as pivoted (column names in first column;\r\n\t * values in rows).\r\n\t *\r\n\t * @default false\r\n\t * @since 4.6.8\r\n\t */\r\n\tpivot?: boolean;\r\n\r\n\t/**\r\n\t * Set this option to `disabled` for a format to not show up in [[ExportMenu]].\r\n\t *\r\n\t * @since 4.9.11\r\n\t */\r\n\tdisabled?: boolean;\r\n\r\n\r\n\t/**\r\n\t * Add BOM character to output file, so that it can be used with UTF-8\r\n\t * characters properly in Excel.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.10.21\r\n\t */\r\n\taddBOM?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Represents options for JSON export\r\n */\r\nexport interface IExportJSONOptions {\r\n\r\n\t/**\r\n\t * Use timestamps instead of formatted date/time values.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tuseTimestamps?: boolean;\r\n\r\n\t/**\r\n\t * Will try to format numbers and date/time according to user's locale\r\n\t * settings.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tuseLocale?: boolean;\r\n\r\n\t/**\r\n\t * Sets indent size for each hierarchical elements.\r\n\t *\r\n\t * @default \"  \"\r\n\t */\r\n\tindent?: number;\r\n\r\n\t/**\r\n\t * Set this option to `disabled` for a format to not show up in [[ExportMenu]].\r\n\t *\r\n\t * @since 4.9.11\r\n\t */\r\n\tdisabled?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Represents options for XLSX export.\r\n */\r\nexport interface IExportExcelOptions {\r\n\r\n\t/**\r\n\t * Add column names in first row?\r\n\t *\r\n\t * Export will try to use user-friendly column names where possible, either\r\n\t * from Export's `dataFields` or deduced from chart's series' names that are\r\n\t * bound to specific data fields.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\taddColumnNames?: boolean;\r\n\r\n\t/**\r\n\t * Use timestamps instead of formatted date/time values.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tuseTimestamps?: boolean;\r\n\r\n\t/**\r\n\t * Will try to format numbers and date/time according to user's locale\r\n\t * settings.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tuseLocale?: boolean;\r\n\r\n\t/**\r\n\t * Replace missing values with this.\r\n\t *\r\n\t * @default \"\" (empty string)\r\n\t */\r\n\temptyAs?: any;\r\n\r\n\t/**\r\n\t * If set to `true` will export data as pivoted (column names in first column;\r\n\t * values in rows).\r\n\t *\r\n\t * @default false\r\n\t * @since 4.6.8\r\n\t */\r\n\tpivot?: boolean;\r\n\r\n\t/**\r\n\t * Set this option to `disabled` for a format to not show up in [[ExportMenu]].\r\n\t *\r\n\t * @since 4.9.11\r\n\t */\r\n\tdisabled?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Represents options for HTML export.\r\n * @since 4.7.0\r\n */\r\nexport interface IExportHTMLOptions {\r\n\r\n\t/**\r\n\t * Add column names in first row?\r\n\t *\r\n\t * Export will try to use user-friendly column names where possible, either\r\n\t * from Export's `dataFields` or deduced from chart's series' names that are\r\n\t * bound to specific data fields.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\taddColumnNames?: boolean;\r\n\r\n\t/**\r\n\t * Use timestamps instead of formatted date/time values.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tuseTimestamps?: boolean;\r\n\r\n\t/**\r\n\t * Will try to format numbers and date/time according to user's locale\r\n\t * settings.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tuseLocale?: boolean;\r\n\r\n\t/**\r\n\t * Replace missing values with this.\r\n\t *\r\n\t * @default \"\" (empty string)\r\n\t */\r\n\temptyAs?: any;\r\n\r\n\t/**\r\n\t * If set to `true` will export data as pivoted (column names in first column;\r\n\t * values in rows).\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpivot?: boolean;\r\n\r\n\t/**\r\n\t * A class name to add to table.\r\n\t */\r\n\ttableClass?: string;\r\n\r\n\t/**\r\n\t * A class name to add to table headers.\r\n\t */\r\n\trowClass?: string;\r\n\r\n\t/**\r\n\t * A class name to add to table headers.\r\n\t */\r\n\theaderClass?: string;\r\n\r\n\t/**\r\n\t * A class name to add to table cells.\r\n\t */\r\n\tcellClass?: string;\r\n\r\n\t/**\r\n\t * Set this option to `disabled` for a format to not show up in [[ExportMenu]].\r\n\t *\r\n\t * @since 4.9.11\r\n\t */\r\n\tdisabled?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Represents options for print.\r\n */\r\nexport interface IExportPrintOptions extends IExportImageOptions {\r\n\r\n\t/**\r\n\t * A delay in milliseconds to wait before initiating print.\r\n\t *\r\n\t * This delay is necessary to ensure DOM is prepared and repainted before\r\n\t * print dialog kicks in.\r\n\t *\r\n\t * @default 500\r\n\t */\r\n\tdelay?: number;\r\n\r\n\t/**\r\n\t * Method to use for printing.\r\n\t *\r\n\t * If one fails for your particular setup, try the other.\r\n\t *\r\n\t * \"css\" - inserts dynamic CSS that hides everything, except the image being printed.\r\n\t * \"iframe\" - creates a dynamic `<iframe>` with the image, then prints it.\r\n\t *\r\n\t * @default \"iframe\"\r\n\t */\r\n\tprintMethod?: \"css\" | \"iframe\";\r\n\r\n\t/**\r\n\t * Set this option to `disabled` for a format to not show up in [[ExportMenu]].\r\n\t *\r\n\t * @since 4.9.11\r\n\t */\r\n\tdisabled?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Represents options for custom menu items.\r\n */\r\nexport interface IExportCustomOptions {\r\n\r\n\t/**\r\n\t * A callback function reference that will be called when this custom item\r\n\t * is clicked.\r\n\t */\r\n\tcallback?: (branch?: any) => any;\r\n\r\n\t/**\r\n\t * A target which will be `this` context for callback calls.\r\n\t */\r\n\tcallbackTarget?: any;\r\n\r\n\t/**\r\n\t * Set this option to `disabled` for a format to not show up in [[ExportMenu]].\r\n\t *\r\n\t * @since 4.9.11\r\n\t */\r\n\tdisabled?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Represents interface for a temporarily removed image.\r\n */\r\nexport interface IExportRemovedObject {\r\n\r\n\t/**\r\n\t * Element that was removed out of DOM.\r\n\t */\r\n\telement: Node;\r\n\r\n\t/**\r\n\t * A placeholder element that was placed instead of removed element so that\r\n\t * we know where to put removed element back in.\r\n\t */\r\n\tplaceholder: Node;\r\n\r\n}\r\n\r\n/**\r\n * Represents all available options for all export operations.\r\n */\r\nexport interface IExportOptions {\r\n\tpng: IExportImageOptions;\r\n\tgif: IExportImageOptions;\r\n\tjpg: IExportImageOptions;\r\n\tsvg: IExportSVGOptions;\r\n\tpdf: IExportPDFOptions;\r\n\txlsx: IExportExcelOptions;\r\n\tcsv: IExportCSVOptions;\r\n\tjson: IExportJSONOptions;\r\n\tpdfdata: IExportPDFOptions;\r\n\thtml: IExportHTMLOptions;\r\n\tprint: IExportPrintOptions;\r\n\tcustom: IExportCustomOptions;\r\n}\r\n\r\n/**\r\n * All export options as a type.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport type ExportOptions = IExportImageOptions | IExportSVGOptions | IExportPDFOptions | IExportExcelOptions | IExportCSVOptions | IExportJSONOptions | IExportHTMLOptions | IExportPrintOptions;\r\n\r\n/**\r\n * Defines events for export operations.\r\n */\r\nexport interface IExportEvents {\r\n\r\n\t/**\r\n\t * Invoked when Export initializes.\r\n\t */\r\n\tinited: {};\r\n\r\n\t/**\r\n\t * Invoked when Export menu is created.\r\n\t */\r\n\tmenucreated: {};\r\n\r\n\t/**\r\n\t * Invoked when the Export starts export procedure.\r\n\t *\r\n\t * You can use event handlers here to modify config before actual export\r\n\t * starts.\r\n\t */\r\n\texportstarted: ExportOperation;\r\n\r\n\t/**\r\n\t * Invoked when export operation finishes.\r\n\t */\r\n\texportfinished: ExportOperation;\r\n\r\n\t/**\r\n\t * Invoked when export operation encounters error.\r\n\t */\r\n\terror: ExportOperation;\r\n\r\n\t/**\r\n\t * Invoked when export operation times out.\r\n\t *\r\n\t * Use Export's `timeoutDelay` setting to set timeout. (default: 2000ms)\r\n\t */\r\n\texporttimedout: ExportOperation;\r\n\r\n}\r\n\r\n/**\r\n * @ignore Exclude from docs\r\n */\r\nexport type Keys = keyof IExportOptions;\r\n\r\n/**\r\n * Represents a list of available adapters for [[Export]].\r\n */\r\nexport interface IExportAdapters {\r\n\r\n\tsupported: {\r\n\t\tsupported: boolean,\r\n\t\ttype: Keys,\r\n\t\toptions?: IExportOptions[Keys]\r\n\t},\r\n\r\n\texportFunction: {\r\n\t\tfunc: <Key extends keyof IExportOptions>(type: Key, options?: IExportOptions[Key]) => Promise<any>,\r\n\t\ttype: Keys,\r\n\t\toptions?: IExportOptions[Keys]\r\n\t},\r\n\r\n\toptions: {\r\n\t\toptions: IExportOptions[Keys],\r\n\t\ttype?: Keys\r\n\t},\r\n\r\n\ttitle: {\r\n\t\ttitle: $type.Optional<string>,\r\n\t\toptions?: IExportOptions[Keys]\r\n\t},\r\n\r\n\tcharset: {\r\n\t\tcharset: string,\r\n\t\ttype?: Keys,\r\n\t\toptions?: IExportOptions[Keys]\r\n\t}\r\n\r\n\tsvgToDataURI: {\r\n\t\tdata: string,\r\n\t\toptions?: IExportOptions[Keys]\r\n\t},\r\n\r\n\tgetSVG: {\r\n\t\tdata: string,\r\n\t\toptions?: IExportOptions[Keys]\r\n\t},\r\n\r\n\tnormalizeSVG: {\r\n\t\tdata: string,\r\n\t\toptions?: IExportOptions[Keys]\r\n\t},\r\n\r\n\tgetCSV: {\r\n\t\tdata: string,\r\n\t\toptions?: IExportOptions[Keys]\r\n\t},\r\n\r\n\tgetJSON: {\r\n\t\tdata: string,\r\n\t\toptions?: IExportOptions[Keys]\r\n\t},\r\n\r\n\tgetExcel: {\r\n\t\tdata: string,\r\n\t\toptions?: IExportOptions[Keys]\r\n\t},\r\n\r\n\tgetHTML: {\r\n\t\tdata: string,\r\n\t\toptions?: IExportOptions[Keys]\r\n\t},\r\n\r\n\tpdfmakeDocument: {\r\n\t\tdoc: any,\r\n\t\toptions?: IExportOptions[Keys]\r\n\t},\r\n\r\n\tpdfmakeTable: {\r\n\t\ttable: any,\r\n\t\toptions?: IExportOptions[Keys]\r\n\t},\r\n\r\n\tcontainer: {\r\n\t\tcontainer: HTMLElement\r\n\t},\r\n\r\n\tsprite: {\r\n\t\tsprite: Sprite\r\n\t},\r\n\r\n\textraSprites: {\r\n\t\textraSprites: Array<Sprite | IExportCanvas>\r\n\t},\r\n\r\n\tvalidateSprites: {\r\n\t\tvalidateSprites: Array<Sprite>\r\n\t},\r\n\r\n\tdata: {\r\n\t\tdata: Array<any>\r\n\t},\r\n\r\n\tdataFields: {\r\n\t\tdataFields: any\r\n\t},\r\n\r\n\tformatDataFields: {\r\n\t\tdataFields: any,\r\n\t\tformat: string\r\n\t},\r\n\r\n\tdataFieldsOrder: {\r\n\t\tdataFieldsOrder: string[],\r\n\t\tformat: string\r\n\t},\r\n\r\n\tdateFormatter: {\r\n\t\tdateFormatter: DateFormatter\r\n\t},\r\n\r\n\tdateFormat: {\r\n\t\tdateFormat: $type.Optional<string | Intl.DateTimeFormatOptions>\r\n\t},\r\n\r\n\tdateFields: {\r\n\t\tdateFields: any\r\n\t},\r\n\r\n\tnumberFormatter: {\r\n\t\tnumberFormatter: NumberFormatter\r\n\t},\r\n\r\n\tnumberFormat: {\r\n\t\tnumberFormat: $type.Optional<string>\r\n\t},\r\n\r\n\tnumberFields: {\r\n\t\tnumberFields: any\r\n\t},\r\n\r\n\tdurationFormatter: {\r\n\t\tdurationFormatter: DurationFormatter\r\n\t},\r\n\r\n\tdurationFormat: {\r\n\t\tdurationFormat: $type.Optional<string>\r\n\t},\r\n\r\n\tdurationFields: {\r\n\t\tdurationFields: any\r\n\t},\r\n\r\n\tdataFieldName: {\r\n\t\tname: string,\r\n\t\tfield: string\r\n\t},\r\n\r\n\tisDateField: {\r\n\t\tisDateField: boolean,\r\n\t\tfield: string\r\n\t},\r\n\r\n\tisNumberField: {\r\n\t\tisNumberField: boolean,\r\n\t\tfield: string\r\n\t},\r\n\r\n\tisDurationField: {\r\n\t\tisDurationField: boolean,\r\n\t\tfield: string\r\n\t},\r\n\r\n\tcontentType: {\r\n\t\tcontentType: string,\r\n\t\ttype: Keys\r\n\t},\r\n\r\n\tfilePrefix: {\r\n\t\tfilePrefix: string\r\n\t},\r\n\r\n\tbackgroundColor: {\r\n\t\tbackgroundColor: $type.Optional<Color>\r\n\t},\r\n\r\n\ttimeoutMessage: {\r\n\t\tmessage: string\r\n\t},\r\n\r\n\txlsxWorkbookOptions: {\r\n\t\toptions: any,\r\n\t\txlsx: any\r\n\t},\r\n\r\n\txlsxSheetName: {\r\n\t\tname: string,\r\n\t\txlsx: any\r\n\t},\r\n\r\n\t/**\r\n\t * @since 4.9.28\r\n\t */\r\n\txlsxWorkbook: {\r\n\t\tworkbook: any,\r\n\t\txlsx: any,\r\n\t\toptions?: IExportOptions[Keys]\r\n\t},\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [[Export]] allows downloading of current snapshot of the chart as an\r\n * image, PDF, or its data in various formats.\r\n *\r\n * The export functionality is enabled by default in charts and is accessible\r\n * via API or optional export menu.\r\n *\r\n * To enable menu, simply access export's `menu` property. E.g.:\r\n *\r\n * ```TypeScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JavaScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"exporting\": {\r\n *     \"menu\": {}\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * To export via API, use `export()` method:\r\n *\r\n * ```TypeScript\r\n * chart.exporting.export(type, [options]);\r\n * ```\r\n * ```JavaScript\r\n * chart.exporting.export(type, [options]);\r\n * ```\r\n *\r\n * E.g.:\r\n *\r\n * ```TypeScript\r\n * chart.exporting.export(\"png\");\r\n * ```\r\n * ```JavaScript\r\n * chart.exporting.export(\"png\");\r\n * ```\r\n *\r\n * @todo Better loading indicator?\r\n * @todo Implement multiplier option\r\n * @todo Handling of hanged exports\r\n * @important\r\n */\r\nexport class Export extends Validatable {\r\n\r\n\t/**\r\n\t * XLINK namespace definition.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tstatic XLINK: string = \"http://www.w3.org/1999/xlink\";\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IExportEvents;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IExportAdapters;\r\n\r\n\t/**\r\n\t * Adapter.\r\n\t */\r\n\tpublic adapter = new Adapter<Export, IExportAdapters>(this);\r\n\r\n\t/**\r\n\t * Holds options for each format.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprivate _formatOptions: Dictionary<string, ExportOptions> = new Dictionary<string, ExportOptions>();\r\n\r\n\t/**\r\n\t * An instance of [[Language]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _language: $type.Optional<Language>;\r\n\r\n\t/**\r\n\t * An instance of [[ExportMenu]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _menu: $type.Optional<ExportMenu>;\r\n\r\n\t/**\r\n\t * Reference to main container to place menu in.\r\n\t */\r\n\tprotected _container: HTMLElement;\r\n\r\n\t/**\r\n\t * [[Sprite]] instance to be used when converting to image.\r\n\t */\r\n\tprotected _sprite: $type.Optional<Sprite>;\r\n\r\n\t/**\r\n\t * Extra [[Sprite]] elements to include in exports.\r\n\t */\r\n\tprotected _extraSprites: Array<Sprite | IExportCanvas> = [];\r\n\r\n\t/**\r\n\t * A list of [[Sprite]] elements that need to be valid before export\r\n\t * commences.\r\n\t */\r\n\tprotected _validateSprites: Array<Sprite> = [];\r\n\r\n\t/**\r\n\t * Data storage to be used when exporting to data formats.\r\n\t */\r\n\tprotected _data: any;\r\n\r\n\t/**\r\n\t * Holds an object of field key / field name used to name columns when\r\n\t * exporting to data formats.\r\n\t */\r\n\tprotected _dataFields: any;\r\n\r\n\t/**\r\n\t * Holds an array of data field names. If set, exported data fields will try\r\n\t * to maintain this order.\r\n\t *\r\n\t * If not set (default), the export will try to maintain the same order as\r\n\t * in source data, or as in `dataFields` (if set).\r\n\t *\r\n\t * @since 4.9.7\r\n\t */\r\n\tpublic dataFieldsOrder: string[] = [];\r\n\r\n\t/**\r\n\t * Indicates whether data fields were generated dynamically (`true`) or\r\n\t * if they were pre-set by the user (`false`).\r\n\t */\r\n\tprotected _dynamicDataFields: boolean = true;\r\n\r\n\t/**\r\n\t * A reference to [[DateFormatter]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dateFormatter: $type.Optional<DateFormatter>;\r\n\r\n\t/**\r\n\t * A Date format to be used when formatting dates in string-based data\r\n\t * formats.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dateFormat: $type.Optional<string | Intl.DateTimeFormatOptions>;\r\n\r\n\t/**\r\n\t * A list of column keys that hold date values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dateFields: $type.Optional<List<string>>;\r\n\r\n\t/**\r\n\t * A reference to [[DurationFormatter]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _durationFormatter: $type.Optional<DurationFormatter>;\r\n\r\n\t/**\r\n\t * A duration format to be used when formatting numeric values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _durationFormat: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * A list of column keys that hold duration values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _durationFields: $type.Optional<List<string>>;\r\n\r\n\t/**\r\n\t * A reference to [[NumberFormatter]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _numberFormatter: $type.Optional<NumberFormatter>;\r\n\r\n\t/**\r\n\t * A number format to be used when formatting numbers in string-based data\r\n\t * formats.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _numberFormat: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * A list of column keys that hold number values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _numberFields: $type.Optional<List<string>>;\r\n\r\n\t/**\r\n\t * Holds a list of objects that were temporarily removed from the DOM while\r\n\t * exporting. Those most probably are tainted images, or foreign objects that\r\n\t * would otherwise prevent SVG to be converted to canvas.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _removedObjects: List<IExportRemovedObject> = new List<IExportRemovedObject>();\r\n\r\n\t/**\r\n\t * Holds references to the objects that were temporarily hidden when export\r\n\t * started, so that we can reveal them back when export ends.\r\n\t */\r\n\tprotected _hiddenObjects: Sprite[] = [];\r\n\r\n\t/**\r\n\t * Indicates if non-exportable objects are now hidden;\r\n\t */\r\n\tprotected _objectsAlreadyHidden: boolean = false;\r\n\r\n\t/**\r\n\t * Exported files will be prefixed with whatever it is set here.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _filePrefix: string = \"amCharts\";\r\n\r\n\t/**\r\n\t * Export will try to determine proper background color itself. If you want to\r\n\t * override it and use some other color, set this property.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _backgroundColor: $type.Optional<Color>;\r\n\r\n\t/**\r\n\t * A title to use for some document exports, mainly for print.\r\n\t * A document.title will be used if not set.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _title: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * If you are using web fonts (such as Google Fonts), your chart might be\r\n\t * using them as well.\r\n\t *\r\n\t * Normally, exporting to image will require to download these fonts so the\r\n\t * are carried over to exported image.\r\n\t *\r\n\t * This setting can be used to disable or enable this functionality.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic useWebFonts: boolean = true;\r\n\r\n\t/**\r\n\t * A regular expression that will be matched against each URL of an external\r\n\t * font being loaded. Font will only be loaded of regular expression matches.\r\n\t *\r\n\t * Has no effect of `useWebFonts` is set to `false`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.exporting.webFontFilter = /pacifico|roboto/;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.exporting.webFontFilter = /pacifico|roboto/;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"exporting\": {\r\n\t *     // ...\r\n\t *     \"webFontFilter\": /pacifico|roboto/\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.10.17\r\n\t */\r\n\tpublic webFontFilter: RegExp;\r\n\r\n\t/**\r\n\t * Many modern displays have use more actual pixels per displayed pixel. This\r\n\t * results in sharper images on screen. Unfortunately, when exported to a\r\n\t * bitmap image of the sam width/height size it will lose those extra pixels,\r\n\t * resulting in somewhat blurry image.\r\n\t *\r\n\t * This is why we are going to export images larger than they are, so that we\r\n\t * don't lose any details.\r\n\t *\r\n\t * If you'd rather export images without change in size, set this to `false`.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic useRetina: boolean = true;\r\n\r\n\t/**\r\n\t * By default Export will try to use built-in method for transforming chart\r\n\t * into an image for download, then fallback to external library (canvg) for\r\n\t * conversion if failed.\r\n\t *\r\n\t * Setting this to `false` will force use of external library for all export\r\n\t * operations.\r\n\t *\r\n\t * It might be useful to turn off simplified export if you are using strict\r\n\t * content security policies, that disallow images with blobs as their\r\n\t * source.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.2.5\r\n\t */\r\n\tpublic useSimplifiedExport: boolean = true;\r\n\r\n\t/**\r\n\t * If export operation takes longer than milliseconds in this second, we will\r\n\t * show a modal saying export operation took longer than expected.\r\n\t */\r\n\tpublic timeoutDelay: number = 2000;\r\n\r\n\t/**\r\n\t * A reference to export timeout.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _timeoutTimeout: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * Holds reference to [[Modal]] instance.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _modal: $type.Optional<Modal>;\r\n\r\n\t/**\r\n\t * Used to log original value of `interactionsEnabled` so that it can be restored\r\n\t * after temporarily disabling it.\r\n\t */\r\n\tprivate _spriteInteractionsEnabled: $type.Optional<boolean>;\r\n\r\n\tprivate _exportRunning: boolean = false;\r\n\r\n\t/**\r\n\t * Indicator used by [[Component]].\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprivate _prevHasData: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor(container: HTMLElement) {\r\n\t\tsuper();\r\n\r\n\t\tthis._container = container;\r\n\r\n\t\tthis.className = \"Export\";\r\n\r\n\t\t// Set default options\r\n\t\tthis._formatOptions.setKey(\"png\", {});\r\n\r\n\t\tthis._formatOptions.setKey(\"jpg\", {\r\n\t\t\tquality: 0.8\r\n\t\t});\r\n\r\n\t\tthis._formatOptions.setKey(\"gif\", {});\r\n\r\n\t\tthis._formatOptions.setKey(\"svg\", {});\r\n\r\n\t\tthis._formatOptions.setKey(\"pdf\", {\r\n\t\t\tfontSize: 14,\r\n\t\t\timageFormat: \"png\",\r\n\t\t\talign: \"left\",\r\n\t\t\taddURL: true,\r\n\t\t\taddColumnNames: true\r\n\t\t});\r\n\r\n\t\tthis._formatOptions.setKey(\"json\", {\r\n\t\t\tindent: 2,\r\n\t\t\tuseLocale: true\r\n\t\t});\r\n\r\n\t\tthis._formatOptions.setKey(\"csv\", {\r\n\t\t\taddColumnNames: true,\r\n\t\t\temptyAs: \"\",\r\n\t\t\taddBOM: true\r\n\t\t});\r\n\r\n\t\tthis._formatOptions.setKey(\"xlsx\", {\r\n\t\t\taddColumnNames: true,\r\n\t\t\tuseLocale: true,\r\n\t\t\temptyAs: \"\"\r\n\t\t});\r\n\r\n\t\tthis._formatOptions.setKey(\"html\", {\r\n\t\t\taddColumnNames: true,\r\n\t\t\temptyAs: \"\"\r\n\t\t});\r\n\r\n\t\tthis._formatOptions.setKey(\"pdfdata\", {\r\n\t\t\tfontSize: 14,\r\n\t\t\timageFormat: \"png\",\r\n\t\t\taddURL: true,\r\n\t\t\taddColumnNames: true,\r\n\t\t\temptyAs: \"\"\r\n\t\t});\r\n\r\n\t\tthis._formatOptions.setKey(\"print\", {\r\n\t\t\tdelay: 500,\r\n\t\t\tprintMethod: \"iframe\"\r\n\t\t});\r\n\r\n\t\t// Add options adapter\r\n\t\tthis.adapter.add(\"options\", (arg) => {\r\n\t\t\tlet formatOptions = this._formatOptions.getKey(arg.type);\r\n\t\t\tif (arg.options) {\r\n\t\t\t\targ.options = $object.merge(formatOptions, arg.options);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\targ.options = formatOptions;\r\n\t\t\t}\r\n\t\t\treturn arg;\r\n\t\t});\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.dispatchImmediately(\"inited\");\r\n\t}\r\n\r\n\t/**\r\n\t * An instance of [[ExportMenu]].\r\n\t *\r\n\t * To add an export menu to a chart, set this to a new instance of\r\n\t * [[ExportMenu]].\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.exporting.menu = new am4core.ExportMenu();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.exporting.menu = new am4core.ExportMenu();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"exporting\": {\r\n\t *     \"menu\": {}\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param menu  ExportMenu instance\r\n\t */\r\n\tpublic set menu(menu: $type.Optional<ExportMenu>) {\r\n\t\tif (this._menu) {\r\n\t\t\tthis.removeDispose(this._menu);\r\n\t\t}\r\n\t\tthis._menu = menu;\r\n\r\n\t\t// Set container and language\r\n\t\tthis._menu.container = this.container;\r\n\t\tthis._menu.language = this._language;\r\n\r\n\t\t// Add adapter to check for browser support\r\n\t\tthis._menu.adapter.add(\"branch\", (arg) => {\r\n\t\t\targ.branch.unsupported = !this.typeSupported(arg.branch.type);\r\n\t\t\treturn arg;\r\n\t\t});\r\n\r\n\t\t// Add click events\r\n\t\tthis._menu.events.on(\"hit\", (ev) => {\r\n\t\t\tthis.export(ev.branch.type, ev.branch.options);\r\n\t\t\tthis.menu.close();\r\n\t\t});\r\n\r\n\t\tthis._menu.events.on(\"enter\", (ev) => {\r\n\t\t\tthis.export(ev.branch.type, ev.branch.options);\r\n\t\t\tthis.menu.close();\r\n\t\t});\r\n\r\n\t\tthis._menu.events.on(\"over\", (ev) => {\r\n\t\t\tthis._disablePointers();\r\n\t\t});\r\n\r\n\t\tthis._menu.events.on(\"out\", (ev) => {\r\n\t\t\tsetTimeout(() => { this._releasePointers(); }, 10);\r\n\t\t});\r\n\r\n\t\t// Dispatch event\r\n\t\tthis.dispatchImmediately(\"menucreated\");\r\n\r\n\t\t// Prefix with Sprite's class name\r\n\t\tthis._menu.adapter.add(\"classPrefix\", (obj) => {\r\n\t\t\tobj.classPrefix = options.classNamePrefix + obj.classPrefix;\r\n\t\t\treturn obj;\r\n\t\t});\r\n\r\n\t\t// Add menu to disposers so that it's destroyed when Export is disposed\r\n\t\tthis._disposers.push(this._menu);\r\n\t}\r\n\r\n\t/**\r\n\t * @return ExportMenu instance\r\n\t */\r\n\tpublic get menu(): $type.Optional<ExportMenu> {\r\n\t\treturn this._menu;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if this specific menu item type is supported by current system.\r\n\t *\r\n\t * @param type  Menu item type\r\n\t * @return `false` if not supported\r\n\t */\r\n\tpublic typeSupported<Key extends keyof IExportOptions>(type: Key): boolean {\r\n\t\tlet supported = true;\r\n\t\tconst options = this.getFormatOptions(type);\r\n\t\tif ($type.hasValue(options) && options.disabled) {\r\n\t\t\tsupported = false;\r\n\t\t}\r\n\t\telse if (type === \"pdf\") {\r\n\t\t\t//supported = this.downloadSupport();\r\n\t\t}\r\n\t\telse if (type === \"xlsx\") {\r\n\t\t\t//supported = (this.downloadSupport() && this._hasData()) ? true : false;\r\n\t\t\tsupported = this._hasData() ? true : false;\r\n\t\t}\r\n\t\telse if (type == \"print\" && !(<any>window).print) {\r\n\t\t\tsupported = false;\r\n\t\t}\r\n\t\telse if ([\"json\", \"csv\", \"html\", \"pdfdata\"].indexOf(type) !== -1 && !this._hasData()) {\r\n\t\t\tsupported = false;\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"supported\", {\r\n\t\t\tsupported: supported,\r\n\t\t\ttype: type\r\n\t\t}).supported;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if data is available.\r\n\t *\r\n\t * @return Has data?\r\n\t */\r\n\tprivate _hasData(): boolean {\r\n\t\treturn this.data && this.data.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Get function to handle export for particular format.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprivate _getFunction<Key extends keyof IExportOptions>(type: Key): (this: this, type: Key, options?: IExportOptions[Key]) => Promise<any> {\r\n\t\tswitch (type) {\r\n\t\t\tcase \"png\":\r\n\t\t\tcase \"gif\":\r\n\t\t\tcase \"jpg\":\r\n\t\t\t\treturn <any>this.getImage;\r\n\t\t\tcase \"svg\":\r\n\t\t\t\treturn <any>this.getSVG;\r\n\t\t\tcase \"pdf\":\r\n\t\t\tcase \"pdfdata\":\r\n\t\t\t\treturn <any>this.getPDF;\r\n\t\t\tcase \"xlsx\":\r\n\t\t\t\treturn <any>this.getExcel;\r\n\t\t\tcase \"csv\":\r\n\t\t\t\treturn <any>this.getCSV;\r\n\t\t\tcase \"json\":\r\n\t\t\t\treturn <any>this.getJSON;\r\n\t\t\tcase \"html\":\r\n\t\t\t\treturn <any>this.getHTML;\r\n\t\t\tcase \"print\":\r\n\t\t\t\treturn <any>this.getPrint;\r\n\t\t\tdefault:\r\n\t\t\t\treturn this.unsupported;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates export procedure.\r\n\t *\r\n\t * @param type     Export type\r\n\t * @param options  Options\r\n\t * @return `true` if export was successful\r\n\t * @async\r\n\t */\r\n\tpublic async export<Key extends keyof IExportOptions>(type: Key, options?: IExportOptions[Key]): Promise<boolean> {\r\n\r\n\t\t// Check if it's a custom item, and do nothing or execute custom callback\r\n\t\tif (type == \"custom\") {\r\n\t\t\tthis.handleCustom(<IExportCustomOptions>options);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Set export running flag\r\n\t\tthis._exportRunning = true;\r\n\r\n\t\t// Dispatch event\r\n\t\tif (this.events.isEnabled(\"exportstarted\")) {\r\n\t\t\tconst event: AMEvent<this, IExportEvents>[\"exportstarted\"] = {\r\n\t\t\t\t\"type\": \"exportstarted\",\r\n\t\t\t\t\"target\": this,\r\n\t\t\t\t\"format\": type,\r\n\t\t\t\t\"options\": options\r\n\t\t\t};\r\n\t\t\tthis.events.dispatchImmediately(\"exportstarted\", event);\r\n\t\t}\r\n\r\n\t\t// Schedule a preloader\r\n\t\tthis.showPreloader()\r\n\r\n\t\t// Schedule a timeout\r\n\t\tif (this.timeoutDelay) {\r\n\t\t\tthis.hideTimeout();\r\n\t\t\tthis._timeoutTimeout = this.setTimeout((): void => {\r\n\r\n\t\t\t\t// Dispatch event\r\n\t\t\t\tif (this.events.isEnabled(\"exporttimedout\")) {\r\n\t\t\t\t\tconst event: AMEvent<this, IExportEvents>[\"exporttimedout\"] = {\r\n\t\t\t\t\t\t\"type\": \"exporttimedout\",\r\n\t\t\t\t\t\t\"target\": this,\r\n\t\t\t\t\t\t\"format\": type,\r\n\t\t\t\t\t\t\"options\": options\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"exporttimedout\", event);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Show modal\r\n\t\t\t\tthis.showTimeout()\r\n\r\n\t\t\t}, this.timeoutDelay);\r\n\t\t}\r\n\r\n\t\t// Hide items that should not be exported\r\n\t\tthis.hideNonExportableSprites();\r\n\r\n\t\t// Get the actual export function\r\n\t\tlet func: (this: this, type: Key, options?: IExportOptions[Key]) => Promise<any> = this._getFunction(type);\r\n\r\n\t\t// Give chance for plugins to override both function and options\r\n\t\toptions = this.adapter.apply(\"options\", {\r\n\t\t\toptions: options,\r\n\t\t\ttype: type\r\n\t\t}).options;\r\n\r\n\t\tfunc = this.adapter.apply(\"exportFunction\", {\r\n\t\t\tfunc: func as any,\r\n\t\t\ttype: type,\r\n\t\t\toptions: options\r\n\t\t}).func;\r\n\r\n\t\t// Get exported stuff\r\n\t\tlet data = await func.call(this, type, options);\r\n\r\n\t\t// Release pointers\r\n\t\tthis._exportRunning = false;\r\n\t\tthis._releasePointers();\r\n\r\n\t\t// Restore temporarily hidden elements\r\n\t\tthis.restoreNonExportableSprites();\r\n\r\n\t\tif (data) {\r\n\r\n\t\t\t// Dispatch event\r\n\t\t\tif (this.events.isEnabled(\"exportfinished\")) {\r\n\t\t\t\tconst event: AMEvent<this, IExportEvents>[\"exportfinished\"] = {\r\n\t\t\t\t\t\"type\": \"exportfinished\",\r\n\t\t\t\t\t\"target\": this,\r\n\t\t\t\t\t\"format\": type,\r\n\t\t\t\t\t\"options\": options\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"exportfinished\", event);\r\n\t\t\t}\r\n\r\n\t\t\t// Hide preloader and timeout modals\r\n\t\t\tthis.hidePreloader();\r\n\t\t\tthis.hideTimeout();\r\n\t\t\tif (this.menu) {\r\n\t\t\t\tthis.menu.close();\r\n\t\t\t}\r\n\r\n\t\t\t// Download or print\r\n\t\t\tif (type === \"print\") {\r\n\t\t\t\treturn this.print(data, <IExportOptions[\"print\"]>options, this.adapter.apply(\"title\", {\r\n\t\t\t\t\ttitle: this.title,\r\n\t\t\t\t\toptions: options\r\n\t\t\t\t}).title);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (type == \"pdfdata\") {\r\n\t\t\t\t\treturn this.download(data, this.filePrefix + \".pdf\");\r\n\t\t\t\t}\r\n\t\t\t\treturn this.download(data, this.filePrefix + \".\" + type, (options && (<IExportCSVOptions>options).addBOM));\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Throw exception?\r\n\t\t\t// @todo\r\n\r\n\t\t\t// Dispatch event\r\n\t\t\tif (this.events.isEnabled(\"error\")) {\r\n\t\t\t\tconst event: AMEvent<this, IExportEvents>[\"error\"] = {\r\n\t\t\t\t\t\"type\": \"error\",\r\n\t\t\t\t\t\"target\": this,\r\n\t\t\t\t\t\"format\": type,\r\n\t\t\t\t\t\"options\": options\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"error\", event);\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A function that should handle unsupported export types.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param type     Export type\r\n\t * @param options  Options\r\n\t * @return Promise\r\n\t * @async\r\n\t */\r\n\tpublic async unsupported<Key extends keyof IExportOptions>(type: Key, options?: IExportOptions[Key]): Promise<string> {\r\n\t\t// TODO should this return `undefined`?\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Handles click on a \"custom\" menu item.\r\n\t *\r\n\t * Basically, if it has \"callback\" enabled, it will be called. Nothing else.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param options  Options\r\n\t */\r\n\tpublic handleCustom(options: IExportCustomOptions): void {\r\n\t\tif ($type.hasValue(options) && $type.hasValue(options.callback)) {\r\n\t\t\toptions.callback.call(options.callbackTarget || this, options);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Requests a Print of the chart.\r\n\t *\r\n\t * @param type     Export type\r\n\t * @param options  Options\r\n\t * @return Promise\r\n\t * @async\r\n\t */\r\n\tpublic async getPrint(type: string, options?: IExportPrintOptions): Promise<string> {\r\n\t\treturn this.getImage(\"png\", options);\r\n\t}\r\n\r\n\t/**\r\n\t * A function that returns data: URI encoded @font-family, so that way it can be embedded into SVG.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return String which can be embedded directly into a <style> element.\r\n\t * @async\r\n\t */\r\n\tpublic async getFontFamilies(): Promise<{ blobs: Array<string>, cssText: string }> {\r\n\t\tconst DOMURL = this.getDOMURL();\r\n\r\n\t\tconst blobs: Array<string> = [];\r\n\t\tconst promises: Array<Promise<string>> = [];\r\n\r\n\t\tawait eachStylesheets((topUrl, rule) => {\r\n\t\t\tif (rule.type === CSSRule.FONT_FACE_RULE) {\r\n\t\t\t\tconst cssText = rule.cssText;\r\n\r\n\t\t\t\t// TODO this is necessary because Edge doesn't let you access the src using getPropertyValue\r\n\t\t\t\tconst src = fontFamilySrcRegexp.exec(cssText);\r\n\r\n\t\t\t\tif (src !== null) {\r\n\t\t\t\t\t// TODO make this faster (don't create Promises for non-url stuff)\r\n\t\t\t\t\tconst urls: Array<Promise<string | null>> = src[1].split(/ *, */).map(async (url) => {\r\n\t\t\t\t\t\t// TODO better parsing for this\r\n\t\t\t\t\t\t// TODO is it necessary to handle ' ?\r\n\t\t\t\t\t\tconst a = /^url\\([\"']?([^\"'\\)]+)[\"']?\\)([^,]*)$/.exec(url);\r\n\r\n\t\t\t\t\t\tif (a === null) {\r\n\t\t\t\t\t\t\treturn url;\r\n\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconst after = a[2];\r\n\r\n\t\t\t\t\t\t\tconst fullUrl = $utils.joinUrl(topUrl, a[1]);\r\n\r\n\t\t\t\t\t\t\tif (this.webFontFilter && !fullUrl.match(this.webFontFilter)) {\r\n\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t// Fetch the actual font-file (.woff)\r\n\t\t\t\t\t\t\t\tconst response = await $net.load(fullUrl, undefined, { responseType: \"blob\" });\r\n\r\n\t\t\t\t\t\t\t\tlet url;\r\n\r\n\t\t\t\t\t\t\t\t// We need blob for IE and Edge\r\n\t\t\t\t\t\t\t\tif (supportsBlobUri()) {\r\n\t\t\t\t\t\t\t\t\turl = DOMURL.createObjectURL(response.blob);\r\n\t\t\t\t\t\t\t\t\tblobs.push(url);\r\n\r\n\t\t\t\t\t\t\t\t\t// We need a data URI for Firefox and Chrome\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\turl = await blobToDataUri(response.blob);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// TODO should it should escape the URI ?\r\n\t\t\t\t\t\t\t\treturn \"url(\\\"\" + url + \"\\\")\" + after;\r\n\r\n\t\t\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t\t\tconsole.error(\"Failed to load font\", fullUrl, e);\r\n\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tpromises.push(Promise.all(urls).then((a) => {\r\n\t\t\t\t\t\ta = a.filter((x) => x != null);\r\n\r\n\t\t\t\t\t\tif (a.length === 0) {\r\n\t\t\t\t\t\t\treturn \"\";\r\n\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn cssText.replace(fontFamilySrcRegexp, \"src: \" + a.join(\", \") + \";\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst a = await Promise.all(promises);\r\n\r\n\t\treturn {\r\n\t\t\tblobs: blobs,\r\n\t\t\tcssText: a.filter((x) => !!x).join(\"\\n\")\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Produces image output from the element.\r\n\t *\r\n\t * Converts to a `Canvas` first, then produces an image to download.\r\n\t *\r\n\t * This is an asynchronous function. Rather than returning a result, it\r\n\t * returns a Promise.\r\n\t *\r\n\t * You can use `await` notion from other async functions, or `then()`\r\n\t * anywhere else.\r\n\t *\r\n\t * ```TypeScript\r\n\t * let img;\r\n\t *\r\n\t * // Async\r\n\t * img = await chart.exporting.getImage( \"png\" );\r\n\t *\r\n\t * // Sync\r\n\t * chart.exporting.getImage( \"png\" ).then( ( data ) => {\r\n\t *   img = data;\r\n\t * } );\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var img;\r\n\t * chart.exporting.getImage( \"png\" ).then( ( data ) => {\r\n\t *   img = data;\r\n\t * } );\r\n\t * ```\r\n\t *\r\n\t * @param  type           Image format\r\n\t * @param  options        Options\r\n\t * @param  includeExtras  Should extra sprites be included if set?\r\n\t * @return Promise\r\n\t */\r\n\tpublic async getImage<Key extends imageFormats>(type: Key, options?: IExportImageOptions, includeExtras?: boolean): Promise<string> {\r\n\r\n\t\tlet prehidden = this._objectsAlreadyHidden;\r\n\t\tif (!prehidden) {\r\n\t\t\tthis.hideNonExportableSprites();\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(options)) {\r\n\t\t\toptions = this.getFormatOptions(type);\r\n\t\t}\r\n\r\n\t\t// Wait for required elements to be ready before proceeding\r\n\t\tawait this.awaitValidSprites();\r\n\r\n\t\t// Are we using simplified export option?\r\n\t\tif (await this.simplifiedImageExport()) {\r\n\r\n\t\t\tlet canvas;\r\n\t\t\ttry {\r\n\t\t\t\tcanvas = await this.getCanvas(options);\r\n\r\n\t\t\t\t// Add extra sprites\r\n\t\t\t\tif (includeExtras !== false) {\r\n\t\t\t\t\tcanvas = await this.addExtras(canvas, options);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Convert to data uri\r\n\t\t\t\tlet uri = canvas.toDataURL(this.getContentType(type), options.quality);\r\n\r\n\t\t\t\t// Get rid of the canvas\r\n\t\t\t\tthis.disposeCanvas(canvas);\r\n\r\n\t\t\t\tif (!prehidden) {\r\n\t\t\t\t\tthis.restoreNonExportableSprites();\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn uri;\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\tconsole.error(e.message + \"\\n\" + e.stack);\r\n\t\t\t\t$log.warn(\"Simple export failed, falling back to advanced export\");\r\n\r\n\t\t\t\tif (canvas) {\r\n\t\t\t\t\tthis.disposeCanvas(canvas);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// An error occurred, let's try advanced method\r\n\t\t\t\tconst data = await this.getImageAdvanced(type, options, includeExtras);\r\n\r\n\t\t\t\tif (!prehidden) {\r\n\t\t\t\t\tthis.restoreNonExportableSprites();\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn data;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\t/**\r\n\t\t\t * Going the hard way. Converting to canvas from each node\r\n\t\t\t */\r\n\t\t\tconst data = await this.getImageAdvanced(type, options, includeExtras);\r\n\r\n\t\t\tif (!prehidden) {\r\n\t\t\t\tthis.restoreNonExportableSprites();\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds extra elements to the canvas.\r\n\t *\r\n\t * @param  canvas   Original canvas\r\n\t * @param  options  Options\r\n\t */\r\n\tprivate async addExtras(canvas: HTMLCanvasElement, options?: IExportImageOptions, advanced?: boolean): Promise<HTMLCanvasElement> {\r\n\t\tif (this.extraSprites.length) {\r\n\t\t\tlet middleLeft = 0;\r\n\t\t\tlet middleTop = 0;\r\n\t\t\tlet middleWidth = canvas.width;\r\n\t\t\tlet middleHeight = canvas.height;\r\n\t\t\tlet extraRight = 0;\r\n\t\t\tlet extraBottom = 0;\r\n\r\n\t\t\tconst extras = await Promise.all($array.map(this.extraSprites, async (extraSprite) => {\r\n\t\t\t\t// Get that extra\r\n\t\t\t\tlet extra: IExportCanvas;\r\n\r\n\t\t\t\tif (extraSprite instanceof Sprite) {\r\n\t\t\t\t\textra = {\r\n\t\t\t\t\t\tsprite: extraSprite,\r\n\t\t\t\t\t\tposition: \"bottom\"\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\textra = extraSprite;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set defaults\r\n\t\t\t\textra.position = extra.position || \"bottom\";\r\n\t\t\t\textra.marginTop = extra.marginTop || 0;\r\n\t\t\t\textra.marginRight = extra.marginRight || 0;\r\n\t\t\t\textra.marginBottom = extra.marginBottom || 0;\r\n\t\t\t\textra.marginLeft = extra.marginLeft || 0;\r\n\r\n\t\t\t\tlet extraCanvas;\r\n\r\n\t\t\t\tif (advanced) {\r\n\t\t\t\t\textraCanvas = await extra.sprite.exporting.getCanvasAdvanced(options);\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\textraCanvas = await extra.sprite.exporting.getCanvas(options);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst extraWidth = extraCanvas.width + extra.marginLeft + extra.marginRight;\r\n\t\t\t\tconst extraHeight = extraCanvas.height + extra.marginTop + extra.marginBottom;\r\n\r\n\t\t\t\tif (extra.position == \"top\") {\r\n\t\t\t\t\tmiddleWidth = extra.crop ? middleHeight : $math.max(middleWidth, extraWidth);\r\n\t\t\t\t\tmiddleTop += extraHeight;\r\n\r\n\t\t\t\t} else if (extra.position == \"right\") {\r\n\t\t\t\t\tmiddleHeight = extra.crop ? middleHeight : $math.max(middleHeight, extraHeight);\r\n\t\t\t\t\textraRight += extraWidth;\r\n\r\n\t\t\t\t} else if (extra.position == \"left\") {\r\n\t\t\t\t\tmiddleHeight = extra.crop ? middleHeight : $math.max(middleHeight, extraHeight);\r\n\t\t\t\t\tmiddleLeft += extraWidth;\r\n\r\n\t\t\t\t} else if (extra.position === \"bottom\") {\r\n\t\t\t\t\tmiddleWidth = extra.crop ? middleHeight : $math.max(middleWidth, extraWidth);\r\n\t\t\t\t\textraBottom += extraHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcanvas: extraCanvas,\r\n\t\t\t\t\tposition: extra.position,\r\n\t\t\t\t\tleft: extra.marginLeft,\r\n\t\t\t\t\ttop: extra.marginTop,\r\n\t\t\t\t\twidth: extraWidth,\r\n\t\t\t\t\theight: extraHeight\r\n\t\t\t\t};\r\n\t\t\t}));\r\n\r\n\t\t\tconst newCanvas = this.getDisposableCanvas();\r\n\r\n\t\t\tnewCanvas.width = middleLeft + middleWidth + extraRight;\r\n\t\t\tnewCanvas.height = middleTop + middleHeight + extraBottom;\r\n\r\n\t\t\tconst ctx = newCanvas.getContext(\"2d\");\r\n\r\n\t\t\t// Get background\r\n\t\t\tconst background = this.backgroundColor || this.findBackgroundColor(this.sprite.dom);\r\n\r\n\t\t\tif (background) {\r\n\t\t\t\tctx.fillStyle = background.toString();\r\n\t\t\t\tctx.fillRect(0, 0, newCanvas.width, newCanvas.height);\r\n\t\t\t}\r\n\r\n\t\t\tlet left = middleLeft;\r\n\t\t\tlet top = middleTop;\r\n\t\t\tlet right = left + middleWidth;\r\n\t\t\tlet bottom = top + middleHeight;\r\n\r\n\t\t\t// Radiates outwards from center\r\n\t\t\t$array.each(extras, (extra) => {\r\n\t\t\t\tif (extra.position == \"top\") {\r\n\t\t\t\t\ttop -= extra.height;\r\n\t\t\t\t\tctx.drawImage(extra.canvas, middleLeft + extra.left, top + extra.top);\r\n\r\n\t\t\t\t} else if (extra.position == \"right\") {\r\n\t\t\t\t\tctx.drawImage(extra.canvas, right + extra.left, middleTop + extra.top);\r\n\t\t\t\t\tright += extra.width;\r\n\r\n\t\t\t\t} else if (extra.position == \"left\") {\r\n\t\t\t\t\tleft -= extra.width;\r\n\t\t\t\t\tctx.drawImage(extra.canvas, left + extra.left, middleTop + extra.top);\r\n\r\n\t\t\t\t} else if (extra.position === \"bottom\") {\r\n\t\t\t\t\tctx.drawImage(extra.canvas, middleLeft + extra.left, bottom + extra.top);\r\n\t\t\t\t\tbottom += extra.height;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.disposeCanvas(extra.canvas);\r\n\t\t\t});\r\n\r\n\t\t\tctx.drawImage(canvas, middleLeft, middleTop);\r\n\r\n\t\t\treturn newCanvas;\r\n\r\n\t\t} else {\r\n\t\t\treturn canvas;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns canvas representation of the [[Sprite]].\r\n\t *\r\n\t * @param   options  Options\r\n\t * @return           Canvas\r\n\t */\r\n\tpublic async getCanvas(options?: IExportImageOptions): Promise<HTMLCanvasElement> {\r\n\r\n\t\t// Options are set?\r\n\t\tif (!$type.hasValue(options)) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\r\n\t\t// Get background\r\n\t\tlet background = this.backgroundColor || this.findBackgroundColor(this.sprite.dom);\r\n\r\n\t\t// Get DOM URL\r\n\t\tlet DOMURL = this.getDOMURL();\r\n\t\tlet url: string | null = null;\r\n\t\tlet blobs: Array<string> | null = null;\r\n\t\tlet canvas;\r\n\r\n\t\t// Create temporary image element\r\n\t\ttry {\r\n\t\t\t/**\r\n\t\t\t * Simplified version using `createObjectURL`\r\n\t\t\t * Not supported in older browsers\r\n\t\t\t */\r\n\r\n\t\t\t// Get dimensions\r\n\t\t\tlet width = this.sprite.pixelWidth;\r\n\t\t\tlet height = this.sprite.pixelHeight;\r\n\t\t\tlet font = $dom.findFont(this.sprite.dom);\r\n\t\t\tlet fontSize = $dom.findFontSize(this.sprite.dom);\r\n\t\t\tlet scale = options.scale || 1;\r\n\t\t\tlet pixelRatio = this.getPixelRatio(options);\r\n\r\n\t\t\t// Check if scale needs to be updated as per min/max dimensions\r\n\t\t\tscale = this.getAdjustedScale(width * pixelRatio, height * pixelRatio, scale, options);\r\n\r\n\t\t\t// Create canvas and its 2D context\r\n\t\t\tcanvas = this.getDisposableCanvas();\r\n\r\n\t\t\t// Set canvas width/height\r\n\t\t\tcanvas.style.width = width * scale + 'px';\r\n\t\t\tcanvas.style.height = height * scale + 'px';\r\n\t\t\tcanvas.width = width * scale;\r\n\t\t\tcanvas.height = height * scale;\r\n\r\n\t\t\tlet ctx = canvas.getContext(\"2d\");\r\n\r\n\t\t\t// if (pixelRatio != 1) {\r\n\t\t\t// \tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n\t\t\t// }\r\n\r\n\t\t\t// Add background if necessary\r\n\t\t\tif (background) {\r\n\t\t\t\tctx.fillStyle = background.toString();\r\n\t\t\t\tctx.fillRect(0, 0, width * scale, height * scale);\r\n\t\t\t}\r\n\r\n\t\t\tlet promises: Promise<any>[] = [];\r\n\r\n\t\t\tif (this.useWebFonts) {\r\n\t\t\t\t// TODO what if one of the other things errors before it's been able to set `blobs` ?\r\n\t\t\t\tpromises.push(this.getFontFamilies().then((fonts) => {\r\n\t\t\t\t\tblobs = fonts.blobs;\r\n\t\t\t\t\treturn fonts.cssText;\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\tpromises.push(this.imagesToDataURI(this.sprite.dom, options));\r\n\t\t\tpromises.push(this.prepForeignObjects(this.sprite.dom, options));\r\n\r\n\t\t\t// Do prepareations on a document\r\n\t\t\tlet a = await Promise.all(promises);\r\n\r\n\t\t\t// Get SVG representation of the Sprite\r\n\t\t\tlet data = this.normalizeSVG(\r\n\t\t\t\t\"<style>\" + a[0] + \"</style>\" + this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom),\r\n\t\t\t\toptions,\r\n\t\t\t\twidth,\r\n\t\t\t\theight,\r\n\t\t\t\tscale,\r\n\t\t\t\tfont,\r\n\t\t\t\tfontSize\r\n\t\t\t);\r\n\r\n\t\t\t// Get Blob representation of SVG and create object URL\r\n\t\t\tlet svg = new Blob([data], { type: \"image/svg+xml\" });\r\n\t\t\turl = DOMURL.createObjectURL(svg);\r\n\t\t\tlet img = await this.loadNewImage(url, width * scale * pixelRatio, height * scale * pixelRatio, \"anonymous\");\r\n\r\n\t\t\t// Draw image on canvas\r\n\t\t\tctx.drawImage(img, 0, 0);\r\n\r\n\t\t} finally {\r\n\t\t\tif (url !== null) {\r\n\t\t\t\tDOMURL.revokeObjectURL(url);\r\n\t\t\t}\r\n\r\n\t\t\tif (blobs !== null) {\r\n\t\t\t\t$array.each(blobs, (url) => {\r\n\t\t\t\t\tDOMURL.revokeObjectURL(url);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// Restore replaced tainted images in DOM\r\n\t\t\tthis.restoreRemovedObjects();\r\n\t\t}\r\n\r\n\t\treturn canvas;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns canvas representation of the [[Sprite]] using canvg.\r\n\t *\r\n\t * @param   options  Options\r\n\t * @return           Canvas\r\n\t */\r\n\tpublic async getCanvasAdvanced(options?: IExportImageOptions): Promise<HTMLCanvasElement> {\r\n\r\n\t\t// Options are set?\r\n\t\tif (!$type.hasValue(options)) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t// Convert external images to data uris\r\n\t\tawait this.imagesToDataURI(this.sprite.dom, options);\r\n\r\n\t\t// Get background\r\n\t\tlet background = this.backgroundColor || this.findBackgroundColor(this.sprite.dom);\r\n\r\n\t\t// Get canvg\r\n\t\tlet canvg = await this.canvg;\r\n\r\n\t\t// Get dimensions\r\n\t\tlet width = this.sprite.pixelWidth;\r\n\t\tlet height = this.sprite.pixelHeight;\r\n\t\tlet font = $dom.findFont(this.sprite.dom);\r\n\t\tlet fontSize = $dom.findFontSize(this.sprite.dom);\r\n\t\tlet scale = options.scale || 1;\r\n\t\tlet pixelRatio = this.getPixelRatio(options);\r\n\r\n\t\t// Check if scale needs to be updated as per min/max dimensions\r\n\t\tscale = this.getAdjustedScale(width * pixelRatio, height * pixelRatio, scale, options);\r\n\r\n\t\t// Get SVG representation of the Sprite\r\n\t\tlet data = this.normalizeSVG(\r\n\t\t\tthis.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom),\r\n\t\t\toptions,\r\n\t\t\twidth,\r\n\t\t\theight,\r\n\t\t\tscale,\r\n\t\t\tfont,\r\n\t\t\tfontSize,\r\n\t\t\tbackground\r\n\t\t);\r\n\r\n\t\t// Create canvas and its 2D context\r\n\t\tlet canvas = this.getDisposableCanvas();\r\n\r\n\t\t// Set canvas width/height\r\n\t\tcanvas.style.width = (width * pixelRatio * scale) + 'px';\r\n\t\tcanvas.style.height = (height * pixelRatio * scale) + 'px';\r\n\t\tcanvas.width = width * pixelRatio * scale;\r\n\t\tcanvas.height = height * pixelRatio * scale;\r\n\r\n\t\tlet config: any = {\r\n\t\t\t//ignoreDimensions: true,\r\n\t\t\tuseCORS: true\r\n\t\t};\r\n\r\n\t\tif (pixelRatio != 1) {\r\n\t\t\tconfig.ignoreDimensions = true;\r\n\t\t\tconfig.scaleWidth = width * pixelRatio * scale;\r\n\t\t\tconfig.scaleHeight = height * pixelRatio * scale;\r\n\t\t}\r\n\r\n\t\tawait canvg.fromString(canvas.getContext(\"2d\"), data, config).render();\r\n\r\n\t\treturn canvas;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Tries to dynamically load [canvg.js](https://github.com/canvg/canvg) and\r\n\t * export an image using its functions.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @param type     Image format\r\n\t * @param options  Options\r\n\t * @return Data uri\r\n\t */\r\n\tpublic async getImageAdvanced(type: imageFormats, options?: IExportImageOptions, includeExtras?: boolean): Promise<string> {\r\n\r\n\t\tlet prehidden = this._objectsAlreadyHidden;\r\n\t\tif (!prehidden) {\r\n\t\t\tthis.hideNonExportableSprites();\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(options)) {\r\n\t\t\toptions = this.getFormatOptions(type);\r\n\t\t}\r\n\t\t// Get canvas\r\n\t\tlet canvas = await this.getCanvasAdvanced(options);\r\n\r\n\t\t// Add extra sprites\r\n\t\tif (includeExtras !== false) {\r\n\t\t\tcanvas = await this.addExtras(canvas, options, true);\r\n\t\t}\r\n\r\n\t\t// Convert canvas to data url\r\n\t\tlet uri = canvas.toDataURL(this.getContentType(type), options.quality);\r\n\r\n\t\t// Get rid of the canvas\r\n\t\tthis.disposeCanvas(canvas);\r\n\r\n\t\tif (!prehidden) {\r\n\t\t\tthis.restoreNonExportableSprites();\r\n\t\t}\r\n\r\n\t\treturn uri;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a `<canvas>` element and returns it.\r\n\t *\r\n\t * @return Canvas element\r\n\t */\r\n\tprotected getDisposableCanvas(): HTMLCanvasElement {\r\n\t\tlet canvas = document.createElement(\"canvas\");\r\n\t\tcanvas.style.position = \"fixed\";\r\n\t\tcanvas.style.top = \"-10000px\";\r\n\t\tdocument.body.appendChild(canvas);\r\n\t\treturn canvas;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes canvas.\r\n\t *\r\n\t * @param canvas  Canvas element\r\n\t */\r\n\tprotected disposeCanvas(canvas: HTMLCanvasElement): void {\r\n\t\tdocument.body.removeChild(canvas);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns pixel ratio for retina displays.\r\n\t *\r\n\t * @return Pixel ratio\r\n\t */\r\n\tprotected getPixelRatio(options?: IExportImageOptions): number {\r\n\t\t// const scale = options && options.scale ? options.scale : 1;\r\n\t\t// return (this.useRetina ? $utils.getPixelRatio() : 1) * scale;\r\n\t\treturn this.useRetina ? $utils.getPixelRatio() : 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates adjusted scale if image does not fit or is larger than min/max\r\n\t * settings.\r\n\t *\r\n\t * @param   width    Width of the source image\r\n\t * @param   height   Height of the source image\r\n\t * @param   scale    Current scale\r\n\t * @param   options  Options\r\n\t * @return           Adjusted scale\r\n\t */\r\n\tprotected getAdjustedScale(width: number, height: number, scale: number, options?: IExportImageOptions): number {\r\n\r\n\t\tif (!options) {\r\n\t\t\treturn scale;\r\n\t\t}\r\n\r\n\t\tlet adjWidth = width * scale;\r\n\t\tlet adjHeight = width * scale;\r\n\r\n\t\t// Check max restrictions\r\n\t\tlet widthScale;\r\n\t\tlet heightScale;\r\n\t\tif (options.maxWidth && (adjWidth > options.maxWidth)) {\r\n\t\t\twidthScale = options.maxWidth / width;\r\n\t\t}\r\n\t\tif (options.maxHeight && (adjHeight > options.maxHeight)) {\r\n\t\t\theightScale = options.maxHeight / height;\r\n\t\t}\r\n\t\tif (widthScale || heightScale) {\r\n\t\t\treturn $math.min(widthScale, heightScale)\r\n\t\t}\r\n\r\n\t\t// Check min restrictions\r\n\t\tif (options.minWidth && (adjWidth < options.minWidth)) {\r\n\t\t\twidthScale = options.minWidth / width;\r\n\t\t}\r\n\t\tif (options.minHeight && (adjHeight < options.minHeight)) {\r\n\t\t\theightScale = options.minHeight / height;\r\n\t\t}\r\n\t\tif (widthScale || heightScale) {\r\n\t\t\treturn $math.max(widthScale, heightScale)\r\n\t\t}\r\n\r\n\t\treturn scale;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts all `<image>` tags in SVG to use data uris instead of external\r\n\t * URLs\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param el       SVG node\r\n\t * @param options  Options\r\n\t * @return Promise\r\n\t */\r\n\tpublic async imagesToDataURI(el: SVGSVGElement, options?: IExportImageOptions): Promise<void> {\r\n\r\n\t\t// Get and process all images\r\n\t\tlet images = el.querySelectorAll(\"image\");\r\n\t\tif (images.length) {\r\n\r\n\t\t\t// Init promises\r\n\t\t\tlet promises = [];\r\n\r\n\t\t\t// There are images, process each of them\r\n\t\t\tfor (let count = images.length, i = 0; i < count; i++) {\r\n\r\n\t\t\t\t// Get image and its href\r\n\t\t\t\tlet image = images[i];\r\n\t\t\t\tlet href = image.getAttributeNS(Export.XLINK, \"href\");\r\n\r\n\t\t\t\t// no href?\r\n\t\t\t\tif (!href) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (href.indexOf(\"data:image\") !== -1) {\r\n\t\t\t\t\t// Ignore image if it's already in Data URI format\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// SVG or bitmap image?\r\n\t\t\t\t\tif (href.indexOf(\".svg\") !== -1) {\r\n\t\t\t\t\t\tpromises.push(this.svgToDataURI(image, options));\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpromises.push(this.imageToDataURI(image, options));\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tawait Promise.all(promises);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * `foreignObject` elements cannot be exported. This function hides them\r\n\t * temprarily. In the future it might try to convert them to SVG to make them\r\n\t * exportable.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param el       SVG node\r\n\t * @param options  Options\r\n\t * @return Promise\r\n\t */\r\n\tpublic async prepForeignObjects(el: SVGSVGElement, options?: IExportImageOptions): Promise<void> {\r\n\r\n\t\t// Get and process all foreign objects\r\n\t\tlet objects = el.querySelectorAll(\"foreignObject\");\r\n\t\tif (objects.length) {\r\n\r\n\t\t\t// There are foreign objects, process each of them\r\n\t\t\tfor (let count = objects.length, i = 0; i < count; i++) {\r\n\t\t\t\tthis.temporarilyRemoveObject(objects[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an SVG `<image>` to use its data uri for `href` instead of\r\n\t * external file.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param el       SVG element\r\n\t * @param options  Options\r\n\t */\r\n\tpublic async imageToDataURI(el: SVGImageElement, options?: IExportImageOptions): Promise<string> {\r\n\r\n\t\t// Create a new image and set its `crossOrigin`. This might not work on some\r\n\t\t// browsers. We'll deal with it if error occurs\r\n\t\tlet img: HTMLImageElement;\r\n\t\ttry {\r\n\r\n\t\t\t// Create image\r\n\t\t\timg = await this.loadNewImage(el.getAttributeNS(Export.XLINK, \"href\"), null, null, \"anonymous\");\r\n\r\n\t\t\t// Create new canvas\r\n\t\t\tlet canvas = document.createElement(\"canvas\");\r\n\t\t\tcanvas.width = img.width;\r\n\t\t\tcanvas.height = img.height;\r\n\r\n\t\t\t// Draw new image on it via `toDataURL`\r\n\t\t\tcanvas.getContext(\"2d\").drawImage(img, 0, 0);\r\n\r\n\t\t\t// Replace image `href` with data uri\r\n\t\t\t// If we got to this point it means image has loaded, however we might\r\n\t\t\t// still get an error with `toDataURL()`\r\n\t\t\ttry {\r\n\t\t\t\tlet uri = canvas.toDataURL();\r\n\t\t\t\tel.setAttribute(\"href\", uri);\r\n\t\t\t\treturn uri;\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\t// Give up and temporarily remove the element href temporarily\r\n\t\t\t\tif (options.keepTainted !== false) {\r\n\t\t\t\t\t/*this._removedObjects.push({\r\n\t\t\t\t\t\t\"element\": el,\r\n\t\t\t\t\t\t\"originalHref\": el.getAttributeNS(Export.XLINK, \"href\")\r\n\t\t\t\t\t});\r\n\t\t\t\t\tel.setAttributeNS(Export.XLINK, \"href\", \"\");*/\r\n\t\t\t\t\tthis.temporarilyRemoveObject(el);\r\n\t\t\t\t}\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tcatch (e) {\r\n\r\n\t\t\t// Give up and temporarily remove the element's href\r\n\t\t\tif (!options || options.keepTainted !== false) {\r\n\t\t\t\t/*this._removedObjects.push({\r\n\t\t\t\t\t\"element\": el,\r\n\t\t\t\t\t\"originalHref\": el.getAttributeNS(Export.XLINK, \"href\")\r\n\t\t\t\t});\r\n\t\t\t\tel.setAttributeNS(Export.XLINK, \"href\", \"\");*/\r\n\t\t\t\tthis.temporarilyRemoveObject(el);\r\n\t\t\t}\r\n\t\t\treturn undefined;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts `<image>` with external SVG source to data uri. Loads external SVG\r\n\t * file, then converts it to data uri and replaces the `xlink:href` parameter.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param el        An SVG element\r\n\t * @param options   Options\r\n\t */\r\n\tpublic async svgToDataURI(el: SVGImageElement, options?: IExportImageOptions): Promise<string> {\r\n\t\tlet href = el.getAttributeNS(Export.XLINK, \"href\");\r\n\t\ttry {\r\n\t\t\tlet data = await $net.load(href);\r\n\t\t\tlet charset = this.adapter.apply(\"charset\", {\r\n\t\t\t\tcharset: \"base64\",\r\n\t\t\t\ttype: \"svg\",\r\n\t\t\t\toptions: options\r\n\t\t\t}).charset;\r\n\r\n\t\t\tlet uri = this.adapter.apply(\"svgToDataURI\", {\r\n\t\t\t\tdata: \"data:\" + this.getContentType(\"svg\") + \";\" + charset + \",\" + btoa(data.response),\r\n\t\t\t\toptions: options\r\n\t\t\t}).data;\r\n\r\n\t\t\tel.setAttributeNS(Export.XLINK, \"href\", uri);\r\n\t\t\treturn uri;\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\t// Disable temporarily\r\n\t\t\tif (!options || options.keepTainted !== false) {\r\n\t\t\t\t/*this._removedObjects.push({\r\n\t\t\t\t\t\"element\": el,\r\n\t\t\t\t\t\"originalHref\": href\r\n\t\t\t\t});\r\n\t\t\t\tel.setAttributeNS(Export.XLINK, \"href\", \"\");*/\r\n\t\t\t\tthis.temporarilyRemoveObject(el);\r\n\t\t\t}\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Temporarily removes element from DOM, and replaces it with a dummy\r\n\t * placeholder, as well as stores it for later restoration.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param el Node\r\n\t */\r\n\tpublic temporarilyRemoveObject(el: Node, placeholder?: SVGSVGElement): void {\r\n\r\n\t\t// Get parent\r\n\t\tlet parent = el.parentElement || el.parentNode;\r\n\r\n\t\t// Create a placeholder group element if it has not been passed in\r\n\t\tif (!placeholder) {\r\n\t\t\tplaceholder = this.sprite.paper.add(\"g\").node;\r\n\t\t}\r\n\t\tparent.insertBefore(placeholder, el);\r\n\r\n\t\t// Check if we have a textContents we can replace with\r\n\t\t// @todo Perhaps we should explore alternatives to creating text nodes\r\n\t\t// i.e. creating a text version of the HTML-based Text, just for export\r\n\t\t// purposes. Converting HTML into SVG is very complicated\r\n\t\tif (el.textContent) {\r\n\t\t\t/*let text = this.sprite.paper.add(\"text\").node;\r\n\t\t\ttext.textContent = el.textContent;\r\n\t\t\tplaceholder.appendChild(text);\r\n\r\n\t\t\t// Copy properties from the removing element to the placeholder\r\n\t\t\t$dom.copyAttributes(el, placeholder);*/\r\n\t\t}\r\n\r\n\t\t// Remove the old element\r\n\t\tparent.removeChild(el);\r\n\r\n\t\t// Log removed item\r\n\t\tthis._removedObjects.push({\r\n\t\t\t\"element\": el,\r\n\t\t\t\"placeholder\": placeholder\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Restores all (possibly tainted or unsupported) objects that were\r\n\t * temporarily removed when exporting.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic restoreRemovedObjects(): void {\r\n\t\tlet obj: IExportRemovedObject;\r\n\r\n\t\twhile (true) {\r\n\t\t\tobj = this._removedObjects.pop()\r\n\r\n\t\t\tif (!obj) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t//obj.element.setAttribute(\"href\", obj.originalHref);\r\n\t\t\tlet parent = obj.placeholder.parentElement || obj.placeholder.parentNode;\r\n\t\t\tparent.insertBefore(obj.element, obj.placeholder);\r\n\t\t\t//parent.removeChild(obj.placeholder);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checkes if simplified export can be used using `createObjectURL` and SVG\r\n\t * document does not contain any external images.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return `true` if simplified export can be used\r\n\t */\r\n\tpublic async simplifiedImageExport(): Promise<boolean> {\r\n\r\n\t\tif (this.useSimplifiedExport === false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Do we have this cached?\r\n\t\tlet cache = registry.getCache(\"simplifiedImageExport\");\r\n\t\tif (cache === false || cache === true) {\r\n\t\t\treturn cache;\r\n\t\t}\r\n\r\n\t\t// Try generating a small SVG-embedded canvas\r\n\t\t// If exception occurs, simplified method is not supported\r\n\t\ttry {\r\n\t\t\tlet canvas = document.createElement(\"canvas\");\r\n\t\t\tcanvas.width = 1;\r\n\t\t\tcanvas.height = 1;\r\n\t\t\tlet ctx = canvas.getContext(\"2d\");\r\n\t\t\tlet DOMURL = this.getDOMURL();\r\n\t\t\tlet svg = new Blob([this.normalizeSVG(\"<g></g>\", {}, 1, 1)], { type: \"image/svg+xml\" });\r\n\t\t\tlet url = DOMURL.createObjectURL(svg);\r\n\t\t\tlet img;\r\n\t\t\ttry {\r\n\t\t\t\timg = await this.loadNewImage(url, 1, 1);\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tctx.drawImage(img, 0, 0);\r\n\t\t\tDOMURL.revokeObjectURL(url);\r\n\t\t\ttry {\r\n\t\t\t\t//let uri = canvas.toDataURL(\"image/png\");\r\n\t\t\t\tregistry.setCache(\"simplifiedImageExport\", true);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\tregistry.setCache(\"simplifiedImageExport\", false);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t} catch (e) {\r\n\t\t\tregistry.setCache(\"simplifiedImageExport\", false);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new `<image>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param url          URL of the image\r\n\t * @param width        Width (px)\r\n\t * @param height       Height (px)\r\n\t * @param crossOrigin  Cross-Origin setting\r\n\t * @return Promise\r\n\t */\r\n\tpublic loadNewImage(url: string, width?: number, height?: number, crossOrigin?: string): Promise<HTMLImageElement> {\r\n\t\treturn new Promise((success, error) => {\r\n\r\n\t\t\t// New image\r\n\t\t\tlet image: HTMLImageElement;\r\n\t\t\tif (width && height) {\r\n\t\t\t\timage = new Image(width, height);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\timage = new Image();\r\n\t\t\t}\r\n\r\n\t\t\t// Set crossorigin\r\n\t\t\tif (crossOrigin) {\r\n\t\t\t\timage.setAttribute(\"crossOrigin\", crossOrigin);\r\n\t\t\t}\r\n\r\n\t\t\t// Report success on load\r\n\t\t\timage.onload = () => {\r\n\t\t\t\tsuccess(image);\r\n\t\t\t};\r\n\r\n\t\t\tfunction onerror() {\r\n\t\t\t\t// Error occurred. Just in case it's the crossOrigin issue, let's try\r\n\t\t\t\t// stripping off this attribute and trying again\r\n\t\t\t\tif (crossOrigin) {\r\n\r\n\t\t\t\t\t// Retain old uri\r\n\t\t\t\t\tlet currentHref = image.src;\r\n\r\n\t\t\t\t\t// Set up another `onerror` to handle situations where image is not\r\n\t\t\t\t\t// loadable at all (i.e. protected by CORS)\r\n\t\t\t\t\timage.onerror = () => {\r\n\t\t\t\t\t\t// Nope, no luck\r\n\t\t\t\t\t\terror(new Error(\"Loading image \\\"\" + url + \"\\\" failed\"));\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// remove the `crossOrigin` attribute\r\n\t\t\t\t\timage.removeAttribute(\"crossorigin\");\r\n\r\n\t\t\t\t\t// retry\r\n\t\t\t\t\timage.src = \"\";\r\n\t\t\t\t\timage.src = currentHref;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\terror(new Error(\"Loading image \\\"\" + url + \"\\\" failed\"));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set image error handlers\r\n\t\t\timage.onabort = onerror;\r\n\t\t\timage.onerror = onerror;\r\n\r\n\t\t\t// Trigger load\r\n\t\t\timage.src = url;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current DOM URL.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return URL\r\n\t */\r\n\tpublic getDOMURL(): any {\r\n\t\treturn self.URL || (<any>self).webkitURL || self;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG representation of the chart.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @param type       Type of the export\r\n\t * @param options    Options\r\n\t * @param encodeURI  If true, will return result will be data URI\r\n\t * @return Promise\r\n\t */\r\n\tpublic async getSVG(type: \"svg\", options?: IExportSVGOptions, encodeURI: boolean = true): Promise<string> {\r\n\r\n\t\tlet prehidden = this._objectsAlreadyHidden;\r\n\t\tif (!prehidden) {\r\n\t\t\tthis.hideNonExportableSprites();\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(options)) {\r\n\t\t\toptions = this.getFormatOptions(\"svg\");\r\n\t\t}\r\n\r\n\t\t// Wait for required elements to be ready before proceeding\r\n\t\tawait this.awaitValidSprites();\r\n\r\n\t\t// Get dimensions\r\n\t\tlet width = this.sprite.pixelWidth;\r\n\t\tlet height = this.sprite.pixelHeight;\r\n\t\tlet font = $dom.findFont(this.sprite.dom);\r\n\t\tlet fontSize = $dom.findFontSize(this.sprite.dom);\r\n\t\tlet scale = options.scale || 1;\r\n\t\tlet pixelRatio = this.getPixelRatio(options);\r\n\r\n\t\t// Check if scale needs to be updated as per min/max dimensions\r\n\t\tscale = this.getAdjustedScale(width * pixelRatio, height * pixelRatio, scale, options);\r\n\r\n\t\t// Get SVG\r\n\t\tlet svg = this.normalizeSVG(\r\n\t\t\tthis.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom),\r\n\t\t\toptions,\r\n\t\t\twidth,\r\n\t\t\theight,\r\n\t\t\tscale,\r\n\t\t\tfont,\r\n\t\t\tfontSize\r\n\t\t);\r\n\r\n\t\t// Prep data URI\r\n\t\tlet charset = this.adapter.apply(\"charset\", {\r\n\t\t\tcharset: \"charset=utf-8\",\r\n\t\t\ttype: \"svg\",\r\n\t\t\toptions: options\r\n\t\t}).charset;\r\n\r\n\t\tlet uri = this.adapter.apply(\"getSVG\", {\r\n\t\t\tdata: encodeURI ? \"data:\" + this.getContentType(type) + \";\" + charset + \",\" + encodeURIComponent(svg) : svg,\r\n\t\t\toptions: options\r\n\t\t}).data;\r\n\r\n\t\tif (!prehidden) {\r\n\t\t\tthis.restoreNonExportableSprites();\r\n\t\t}\r\n\r\n\t\treturn uri;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if SVG is fully formatted. Encloses in `<svg>...</svg>` if\r\n\t * necessary.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param svg       Input SVG\r\n\t * @param options   Options\r\n\t * @param width     Width of the SVG viewport\r\n\t * @param height    Height of the SVG viewport\r\n\t * @param font      Font family to use as a base\r\n\t * @param fontSize  Font size to use as a base\r\n\t * @return Output SVG\r\n\t * @todo Add style params to existing <svg>\r\n\t */\r\n\tpublic normalizeSVG(svg: string, options?: IExportSVGOptions, width?: number, height?: number, scale?: number, font?: string, fontSize?: string, background?: Color): string {\r\n\r\n\t\t// Construct width/height params\r\n\t\tlet dimParams = \"\";\r\n\t\tif (width) {\r\n\t\t\tdimParams += \"width=\\\"\" + Math.round(width * (scale || 1)) + \"px\\\" \";\r\n\t\t}\r\n\t\tif (height) {\r\n\t\t\tdimParams += \"height=\\\"\" + Math.round(height * (scale || 1)) + \"px\\\" \";\r\n\t\t}\r\n\r\n\t\t// Apply font settings\r\n\t\tlet styleParams = \"\";\r\n\t\tif (font) {\r\n\t\t\tstyleParams += \"font-family: \" + font.replace(/\"/g, \"\") + \";\";\r\n\t\t}\r\n\t\tif (fontSize) {\r\n\t\t\tstyleParams += \"font-size: \" + fontSize + \";\";\r\n\t\t}\r\n\r\n\t\t// Scale\r\n\t\tif (scale) {\r\n\t\t\tdimParams += \"viewBox=\\\"0 0 \" + (width) + \" \" + (height) + \"\\\" \";\r\n\t\t}\r\n\r\n\t\t// Remove foreign objects temporarily\r\n\t\tlet fos: string[] = [];\r\n\t\tlet ms = svg.match(/<foreignObject[\\s\\S]*<\\/foreignObject>/gi);\r\n\t\tif (ms) {\r\n\t\t\tfor (let i = 0; i < ms.length; i++) {\r\n\t\t\t\tsvg = svg.replace(ms[i], $strings.PLACEHOLDER);\r\n\t\t\t\tfos.push(ms[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Add missing <svg> enclosure\r\n\t\tif (!svg.match(/<svg/)) {\r\n\t\t\tsvg = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><svg \" + dimParams + \" style=\\\"\" + styleParams + \"\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\" + svg + \"</svg>\";\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\tif (dimParams !== \"\") {\r\n\t\t\t\t// Clear current params\r\n\t\t\t\tsvg = svg.replace(/(<svg[^>]*)width=\"[^\"]*\"/, \"$1\");\r\n\t\t\t\tsvg = svg.replace(/(<svg[^>]*)height=\"[^\"]*\"/, \"$1\");\r\n\r\n\t\t\t\t// Add new params\r\n\t\t\t\tsvg = svg.replace(/(<svg)/, \"$1\" + dimParams);\r\n\t\t\t}\r\n\r\n\t\t\t/*if (styleParams !== \"\") {\r\n\t\t\t\t// Clear current params\r\n\t\t\t\tsvg = svg.replace(/(<svg[^>]*)stylewidth=\"[^\"]*\"/, \"$1\");\r\n\t\t\t\tsvg = svg.replace(/(<svg[^>]*)height=\"[^\"]*\"/, \"$1\");\r\n\r\n\t\t\t\t// Add new params\r\n\t\t\t\tsvg = svg.replace(/(<svg)/, \"$1\" + dimParams);\r\n\t\t\t}*/\r\n\t\t}\r\n\r\n\r\n\t\tif (background) {\r\n\t\t\tsvg = svg.replace(/(<svg[^>]*>)/, \"$1<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"\" + background.rgba + \"\\\"/>\");\r\n\t\t\t//svg = svg.replace(/<\\/svg>/, \"<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"\" + background.rgba + \"\\\"/></svg>\");\r\n\t\t}\r\n\r\n\t\tif ($browser.isInternetExplorer()) {\r\n\t\t\t// IE can't handle exporting <feColorMatrix> for some reason\r\n\t\t\tsvg = svg.replace(/<feColorMatrix [^\\/>]*\\/>/gi, \"\");\r\n\t\t}\r\n\r\n\t\t// Remove base uri-related stuff\r\n\t\tlet reg = new RegExp(\"url\\\\(\" + $utils.escapeForRgex($utils.getBaseURI()), \"g\");\r\n\t\tsvg = svg.replace(reg, \"url(#\");\r\n\r\n\t\t// Remove escaped quotes in url() parameters\r\n\t\tsvg = svg.replace(/url\\(&quot;([^)]*)&quot;\\)/gm, \"url($1)\");\r\n\r\n\t\t// Put foreignObjects back in\r\n\t\tif (fos.length) {\r\n\t\t\tfor (let i = 0; i < fos.length; i++) {\r\n\t\t\t\tsvg = svg.replace($strings.PLACEHOLDER, fos[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsvg = this.adapter.apply(\"normalizeSVG\", {\r\n\t\t\tdata: svg,\r\n\t\t\toptions: options\r\n\t\t}).data;\r\n\r\n\t\treturn svg;\r\n\t}\r\n\r\n\t/**\r\n\t * Serializes an element and returns its contents.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param element  An element to serialize\r\n\t * @return A serialized XML\r\n\t */\r\n\tpublic serializeElement(element: HTMLElement | SVGSVGElement | SVGDefsElement): string {\r\n\t\treturn new XMLSerializer().serializeToString(element);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a PDF containing chart image.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @param type     Type of the export\r\n\t * @param options  Options\r\n\t * @return Promise\r\n\t * @async\r\n\t * @todo Account for header when calculating vertical fit\r\n\t */\r\n\tpublic async getPDF(type: \"pdf\" | \"pdfdata\", options?: IExportPDFOptions): Promise<string> {\r\n\r\n\t\t// Get image\r\n\t\tlet image = await this.getImage(options.imageFormat || \"png\", options);\r\n\r\n\t\t// Load pdfmake\r\n\t\tlet pdfmake = await this.pdfmake;\r\n\r\n\t\t// Defaults\r\n\t\tlet defaultMargins = [30, 30, 30, 30];\r\n\r\n\t\t// Init content for PDF\r\n\t\tlet doc = {\r\n\t\t\tpageSize: options.pageSize || \"A4\",\r\n\t\t\tpageOrientation: options.pageOrientation || \"portrait\",\r\n\t\t\tpageMargins: options.pageMargins || defaultMargins,\r\n\t\t\tdefaultStyle: {\r\n\t\t\t\tfont: options.font ? options.font.name : undefined\r\n\t\t\t},\r\n\t\t\t//header: <any>[],\r\n\t\t\tcontent: <any>[]\r\n\t\t};\r\n\r\n\t\t// Should we add title?\r\n\t\tlet title = this.adapter.apply(\"title\", {\r\n\t\t\ttitle: this.title,\r\n\t\t\toptions: options\r\n\t\t}).title;\r\n\r\n\t\tlet extraMargin = 0;\r\n\r\n\t\tif (title) {\r\n\t\t\tdoc.content.push({\r\n\t\t\t\ttext: title,\r\n\t\t\t\tfontSize: options.fontSize || 14,\r\n\t\t\t\tbold: true,\r\n\t\t\t\tmargin: [0, 0, 0, 15]\r\n\t\t\t});\r\n\r\n\t\t\t// Add some leftover margin for title\r\n\t\t\textraMargin += 50;\r\n\t\t}\r\n\r\n\t\t// Add page URL?\r\n\t\tif (options.addURL) {\r\n\t\t\tdoc.content.push({\r\n\t\t\t\ttext: this.language.translate(\"Saved from\") + \": \" + document.location.href,\r\n\t\t\t\tfontSize: options.fontSize,\r\n\t\t\t\tmargin: [0, 0, 0, 15]\r\n\t\t\t});\r\n\r\n\t\t\t// Add some leftover margin for URL\r\n\t\t\textraMargin += 50;\r\n\t\t}\r\n\r\n\t\t// Add image\r\n\t\tif (type != \"pdfdata\") {\r\n\t\t\tdoc.content.push({\r\n\t\t\t\timage: image,\r\n\t\t\t\talignment: options.align || \"left\",\r\n\t\t\t\tfit: this.getPageSizeFit(doc.pageSize, doc.pageMargins, extraMargin)\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Add data\r\n\t\tif (type == \"pdfdata\" || options.addData) {\r\n\t\t\tdoc.content.push({\r\n\t\t\t\ttable: await this.getPDFData(\"pdf\", options),\r\n\t\t\t\tfontSize: options.fontSize || 14\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Apply adapters\r\n\t\tdoc = this.adapter.apply(\"pdfmakeDocument\", {\r\n\t\t\tdoc: doc,\r\n\t\t\toptions: options\r\n\t\t}).doc;\r\n\r\n\t\tlet fonts: { [name: string]: { [types: string]: string } } | null = null;\r\n\t\tlet vfs: { [path: string]: string } | null = null;\r\n\r\n\t\tfunction addFont(font: IFont) {\r\n\t\t\tconst paths: { [path: string]: string } = {};\r\n\r\n\t\t\tpaths.normal = font.normal.path;\r\n\t\t\tvfs[font.normal.path] = font.normal.bytes;\r\n\r\n\t\t\tif (font.bold) {\r\n\t\t\t\tpaths.bold = font.bold.path;\r\n\t\t\t\tvfs[font.bold.path] = font.bold.bytes;\r\n\r\n\t\t\t} else {\r\n\t\t\t\tpaths.bold = font.normal.path;\r\n\t\t\t}\r\n\r\n\t\t\tif (font.italics) {\r\n\t\t\t\tpaths.italics = font.italics.path;\r\n\t\t\t\tvfs[font.italics.path] = font.italics.bytes;\r\n\r\n\t\t\t} else {\r\n\t\t\t\tpaths.italics = font.normal.path;\r\n\t\t\t}\r\n\r\n\t\t\tif (font.bolditalics) {\r\n\t\t\t\tpaths.bolditalics = font.bolditalics.path;\r\n\t\t\t\tvfs[font.bolditalics.path] = font.bolditalics.bytes;\r\n\r\n\t\t\t} else {\r\n\t\t\t\tpaths.bolditalics = font.normal.path;\r\n\t\t\t}\r\n\r\n\t\t\tfonts[font.name] = paths;\r\n\t\t}\r\n\r\n\t\tif (options.font) {\r\n\t\t\tfonts = {};\r\n\t\t\tvfs = {};\r\n\t\t\taddFont(options.font);\r\n\r\n\t\t\tif (options.extraFonts) {\r\n\t\t\t\t$array.each(options.extraFonts, addFont);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Create PDF\r\n\t\treturn await new Promise<string>((success, error) => {\r\n\t\t\tpdfmake.createPdf(doc, null, fonts, vfs).getDataUrl((uri: string) => {\r\n\t\t\t\tsuccess(uri);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns chart's data formatted suitable for PDF export (pdfmake).\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @param type     Type of the export\r\n\t * @param options  Options\r\n\t * @return Promise\r\n\t * @async\r\n\t */\r\n\tpublic async getPDFData(type: \"pdf\", options?: IExportPDFOptions): Promise<any> {\r\n\r\n\t\t// Init output\r\n\t\tlet content = <any>{\r\n\t\t\t\"body\": <any>[]\r\n\t\t};\r\n\r\n\t\t// Data fields\r\n\t\tconst dataFields = this.adapter.apply(\"formatDataFields\", {\r\n\t\t\tdataFields: this.dataFields,\r\n\t\t\tformat: \"pdf\"\r\n\t\t}).dataFields;\r\n\r\n\t\t// Add rows\r\n\t\tconst data = this.data;\r\n\r\n\t\t// Vertical or horizontal (default) layout\r\n\t\tif (options.pivot) {\r\n\r\n\t\t\t// Data fields order\r\n\t\t\tconst dataFieldsOrder = this.adapter.apply(\"dataFieldsOrder\", {\r\n\t\t\t\tdataFieldsOrder: this.dataFieldsOrder,\r\n\t\t\t\tformat: \"pdfdata\"\r\n\t\t\t}).dataFieldsOrder;\r\n\r\n\t\t\t$object.eachOrdered(dataFields, (key, val) => {\r\n\t\t\t\tlet dataRow = [];\r\n\t\t\t\tif (options.addColumnNames) {\r\n\t\t\t\t\tdataRow.push(val);\r\n\t\t\t\t}\r\n\t\t\t\tfor (let len = data.length, i = 0; i < len; i++) {\r\n\t\t\t\t\tlet dataValue = data[i][key];\r\n\t\t\t\t\tdataRow.push(this.convertToSpecialFormat<\"pdf\">(key, dataValue, options, true));\r\n\t\t\t\t}\r\n\t\t\t\tcontent.body.push(this.getPDFDataRow(dataRow, options, undefined, true));\r\n\t\t\t}, (a, b) => {\r\n\t\t\t\t//console.log(a, b)\r\n\t\t\t\tlet ai = dataFieldsOrder.indexOf(a);\r\n\t\t\t\tlet bi = dataFieldsOrder.indexOf(b);\r\n\t\t\t\tif (ai > bi) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (ai < bi) {\r\n\t\t\t\t\treturn -1\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\telse {\r\n\r\n\t\t\t// Add column names?\r\n\t\t\tif (options.addColumnNames) {\r\n\t\t\t\tcontent.body.push(this.getPDFDataRow(dataFields, options, undefined, true));\r\n\t\t\t\tcontent.headerRows = 1;\r\n\t\t\t}\r\n\r\n\t\t\tfor (let len = data.length, i = 0; i < len; i++) {\r\n\t\t\t\tcontent.body.push(this.getPDFDataRow(data[i], options, dataFields));\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this.adapter.apply(\"pdfmakeTable\", {\r\n\t\t\ttable: content,\r\n\t\t\toptions: options\r\n\t\t}).table;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Formats a row of data for use in PDF data table (pdfmake).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @since 4.7.0\r\n\t * @param  row         An object holding data for the row\r\n\t * @param  options     Options\r\n\t * @param  dataFields  Data fields\r\n\t * @param  asIs        Do not try to convert to dates\r\n\t * @return Formated Data line\r\n\t */\r\n\tpublic getPDFDataRow(row: any, options?: IExportPDFOptions, dataFields?: any, asIs: boolean = false): Array<string> {\r\n\r\n\t\t// Init\r\n\t\tlet items: any[] = [];\r\n\r\n\t\t// Data fields\r\n\t\tif (!dataFields) {\r\n\t\t\tdataFields = row;\r\n\t\t}\r\n\r\n\t\t// Data fields order\r\n\t\tconst dataFieldsOrder = this.adapter.apply(\"dataFieldsOrder\", {\r\n\t\t\tdataFieldsOrder: this.dataFieldsOrder,\r\n\t\t\tformat: \"pdfdata\"\r\n\t\t}).dataFieldsOrder;\r\n\r\n\t\t// Process each row item\r\n\t\t$object.eachOrdered(dataFields, (key, name) => {\r\n\r\n\t\t\t// Get value\r\n\t\t\tlet value = this.convertEmptyValue(key, row[key], options);\r\n\r\n\t\t\t// Convert dates\r\n\t\t\tlet item = asIs ? value : this.convertToSpecialFormat<\"csv\">(key, value, options);\r\n\t\t\titem = \"\" + item;\r\n\r\n\t\t\t// Add to item\r\n\t\t\titems.push(item);\r\n\t\t}, (a, b) => {\r\n\t\t\t//console.log(a, b)\r\n\t\t\tlet ai = dataFieldsOrder.indexOf(a);\r\n\t\t\tlet bi = dataFieldsOrder.indexOf(b);\r\n\t\t\tif (ai > bi) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (ai < bi) {\r\n\t\t\t\treturn -1\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t});\r\n\r\n\t\treturn items;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns fit dimensions for available page sizes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param pageSize Page size\r\n\t * @return `[width, height]` in pixels\r\n\t */\r\n\tpublic getPageSizeFit(pageSize: pageSizes, margins?: number | number[], extraMargin: number = 0): number[] {\r\n\r\n\t\t// Check margins\r\n\t\tlet newMargins = [0, 0, 0, 0];\r\n\t\tif (typeof margins == \"number\") {\r\n\t\t\tnewMargins = [margins, margins, margins, margins];\r\n\t\t}\r\n\t\telse if (margins.length == 2) {\r\n\t\t\tnewMargins = [margins[0], margins[1], margins[0], margins[1]];\r\n\t\t}\r\n\t\telse if (margins.length == 4) {\r\n\t\t\tnewMargins = margins;\r\n\t\t}\r\n\r\n\t\t// Define available page sizes\r\n\t\tlet sizes = {\r\n\t\t\t\"4A0\": [4767.87, 6740.79],\r\n\t\t\t\"2A0\": [3370.39, 4767.87],\r\n\t\t\tA0: [2383.94, 3370.39],\r\n\t\t\tA1: [1683.78, 2383.94],\r\n\t\t\tA2: [1190.55, 1683.78],\r\n\t\t\tA3: [841.89, 1190.55],\r\n\t\t\tA4: [595.28, 841.89],\r\n\t\t\tA5: [419.53, 595.28],\r\n\t\t\tA6: [297.64, 419.53],\r\n\t\t\tA7: [209.76, 297.64],\r\n\t\t\tA8: [147.40, 209.76],\r\n\t\t\tA9: [104.88, 147.40],\r\n\t\t\tA10: [73.70, 104.88],\r\n\t\t\tB0: [2834.65, 4008.19],\r\n\t\t\tB1: [2004.09, 2834.65],\r\n\t\t\tB2: [1417.32, 2004.09],\r\n\t\t\tB3: [1000.63, 1417.32],\r\n\t\t\tB4: [708.66, 1000.63],\r\n\t\t\tB5: [498.90, 708.66],\r\n\t\t\tB6: [354.33, 498.90],\r\n\t\t\tB7: [249.45, 354.33],\r\n\t\t\tB8: [175.75, 249.45],\r\n\t\t\tB9: [124.72, 175.75],\r\n\t\t\tB10: [87.87, 124.72],\r\n\t\t\tC0: [2599.37, 3676.54],\r\n\t\t\tC1: [1836.85, 2599.37],\r\n\t\t\tC2: [1298.27, 1836.85],\r\n\t\t\tC3: [918.43, 1298.27],\r\n\t\t\tC4: [649.13, 918.43],\r\n\t\t\tC5: [459.21, 649.13],\r\n\t\t\tC6: [323.15, 459.21],\r\n\t\t\tC7: [229.61, 323.15],\r\n\t\t\tC8: [161.57, 229.61],\r\n\t\t\tC9: [113.39, 161.57],\r\n\t\t\tC10: [79.37, 113.39],\r\n\t\t\tRA0: [2437.80, 3458.27],\r\n\t\t\tRA1: [1729.13, 2437.80],\r\n\t\t\tRA2: [1218.90, 1729.13],\r\n\t\t\tRA3: [864.57, 1218.90],\r\n\t\t\tRA4: [609.45, 864.57],\r\n\t\t\tSRA0: [2551.18, 3628.35],\r\n\t\t\tSRA1: [1814.17, 2551.18],\r\n\t\t\tSRA2: [1275.59, 1814.17],\r\n\t\t\tSRA3: [907.09, 1275.59],\r\n\t\t\tSRA4: [637.80, 907.09],\r\n\t\t\tEXECUTIVE: [521.86, 756.00],\r\n\t\t\tFOLIO: [612.00, 936.00],\r\n\t\t\tLEGAL: [612.00, 1008.00],\r\n\t\t\tLETTER: [612.00, 792.00],\r\n\t\t\tTABLOID: [792.00, 1224.00]\r\n\t\t};\r\n\r\n\t\t// Calculate size\r\n\t\tlet fitSize = sizes[pageSize]\r\n\t\tfitSize[0] -= newMargins[0] + newMargins[2];\r\n\t\tfitSize[1] -= newMargins[1] + newMargins[3] + extraMargin;\r\n\t\treturn fitSize;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an Excel file of chart's data.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @param type     Type of the export\r\n\t * @param options  Options\r\n\t * @return Promise\r\n\t * @async\r\n\t * @todo Handle dates\r\n\t * @todo Support for multi-sheet\r\n\t */\r\n\tpublic async getExcel(type: \"xlsx\", options?: IExportExcelOptions): Promise<string> {\r\n\r\n\t\tif (!$type.hasValue(options)) {\r\n\t\t\toptions = this.getFormatOptions(\"xlsx\");\r\n\t\t}\r\n\r\n\t\t// Load xlsx\r\n\t\tlet XLSX = await this.xlsx;\r\n\r\n\t\t// Create workbook options\r\n\t\tlet wbOptions = this.adapter.apply(\"xlsxWorkbookOptions\", {\r\n\t\t\txlsx: XLSX,\r\n\t\t\toptions: {\r\n\t\t\t\tbookType: \"xlsx\",\r\n\t\t\t\tbookSST: false,\r\n\t\t\t\ttype: \"base64\",\r\n\t\t\t\t//dateNF: 'yyyy-mm-dd'\r\n\t\t\t}\r\n\t\t}).options;\r\n\r\n\t\t// Get sheet name\r\n\t\tlet sheetName = this.normalizeExcelSheetName(this.adapter.apply(\"xlsxSheetName\", {\r\n\t\t\txlsx: XLSX,\r\n\t\t\tname: this.title || this.language.translate(\"Data\")\r\n\t\t}).name);\r\n\r\n\t\t// Create a workbook\r\n\t\tlet wb = {\r\n\t\t\tSheetNames: <any>[sheetName],\r\n\t\t\tSheets: <any>{}\r\n\t\t};\r\n\r\n\t\t// Init worksheet data\r\n\t\tlet data: Array<any> = [];\r\n\r\n\t\t// Data fields\r\n\t\tconst dataFields = this.adapter.apply(\"formatDataFields\", {\r\n\t\t\tdataFields: this.dataFields,\r\n\t\t\tformat: \"xslx\"\r\n\t\t}).dataFields;\r\n\r\n\t\t// Vertical or horizontal (default) layout\r\n\t\tif (options.pivot) {\r\n\r\n\t\t\t// Data fields order\r\n\t\t\tconst dataFieldsOrder = this.adapter.apply(\"dataFieldsOrder\", {\r\n\t\t\t\tdataFieldsOrder: this.dataFieldsOrder,\r\n\t\t\t\tformat: \"xlsx\"\r\n\t\t\t}).dataFieldsOrder;\r\n\r\n\t\t\t$object.eachOrdered(dataFields, (key, val) => {\r\n\t\t\t\tlet dataRow = [];\r\n\t\t\t\tif (options.addColumnNames) {\r\n\t\t\t\t\tdataRow.push(val);\r\n\t\t\t\t}\r\n\t\t\t\tfor (let len = this.data.length, i = 0; i < len; i++) {\r\n\t\t\t\t\tlet dataValue = this.data[i][key];\r\n\t\t\t\t\tdataRow.push(this.convertToSpecialFormat<\"xlsx\">(key, dataValue, options, true));\r\n\t\t\t\t}\r\n\t\t\t\tdata.push(this.getExcelRow(dataRow, options, undefined, true));\r\n\t\t\t}, (a, b) => {\r\n\t\t\t\t//console.log(a, b)\r\n\t\t\t\tlet ai = dataFieldsOrder.indexOf(a);\r\n\t\t\t\tlet bi = dataFieldsOrder.indexOf(b);\r\n\t\t\t\tif (ai > bi) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (ai < bi) {\r\n\t\t\t\t\treturn -1\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\t// Add column names?\r\n\t\t\tif (options.addColumnNames) {\r\n\t\t\t\tdata.push(this.getExcelRow(dataFields, options, undefined, true));\r\n\t\t\t}\r\n\r\n\t\t\t// Add lines\r\n\t\t\tfor (let len = this.data.length, i = 0; i < len; i++) {\r\n\t\t\t\tdata.push(this.getExcelRow(this.data[i], options, dataFields));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Create sheet and add data\r\n\t\twb.Sheets[sheetName] = XLSX.utils.aoa_to_sheet(data);\r\n\r\n\t\t// Apply adapters\r\n\t\twb = this.adapter.apply(\"xlsxWorkbook\", {\r\n\t\t\txlsx: XLSX,\r\n\t\t\tworkbook: wb,\r\n\t\t\toptions: options\r\n\t\t}).workbook;\r\n\r\n\t\t// Generate data uri\r\n\t\tlet uri = this.adapter.apply(\"getExcel\", {\r\n\t\t\tdata: \"data:\" + this.getContentType(type) + \";base64,\" + XLSX.write(wb, wbOptions),\r\n\t\t\toptions: options\r\n\t\t}).data;\r\n\r\n\t\treturn uri;\r\n\t}\r\n\r\n\t/**\r\n\t * This is needed to work around Excel limitations.\r\n\t *\r\n\t * @param name  Source name\r\n\t * @return Normalized name\r\n\t */\r\n\tprivate normalizeExcelSheetName(name: string): string {\r\n\t\tname = name.replace(/([:\\\\\\/?*\\[\\]]+)/g, \" \");\r\n\t\treturn $utils.truncateWithEllipsis(name, 31, \"...\", true);\r\n\t}\r\n\r\n\t/**\r\n\t * Rertuns an array of values to be used as Excel row.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  row         Row data\r\n\t * @param  options     Options\r\n\t * @param  dataFields  Data fields\r\n\t * @param  asIs        Do not try to convert to dates\r\n\t * @return Array of values\r\n\t */\r\n\tpublic getExcelRow(row: any, options?: IExportExcelOptions, dataFields?: any, asIs: boolean = false): any[] {\r\n\r\n\t\t// Init\r\n\t\tlet items: any[] = [];\r\n\r\n\t\t// Data fields\r\n\t\tif (!dataFields) {\r\n\t\t\tdataFields = row;\r\n\t\t}\r\n\r\n\t\t// Data fields order\r\n\t\tconst dataFieldsOrder = this.adapter.apply(\"dataFieldsOrder\", {\r\n\t\t\tdataFieldsOrder: this.dataFieldsOrder,\r\n\t\t\tformat: \"xlsx\"\r\n\t\t}).dataFieldsOrder;\r\n\r\n\t\t// Process each row item\r\n\t\t$object.eachOrdered(dataFields, (key, name) => {\r\n\r\n\t\t\t// Get value\r\n\t\t\tlet value = this.convertEmptyValue(key, row[key], options);\r\n\r\n\t\t\t// Convert dates\r\n\t\t\tlet item = asIs ? value : this.convertToSpecialFormat<\"xlsx\">(key, value, options, true);\r\n\r\n\t\t\titems.push(item);\r\n\t\t}, (a, b) => {\r\n\t\t\t//console.log(a, b)\r\n\t\t\tlet ai = dataFieldsOrder.indexOf(a);\r\n\t\t\tlet bi = dataFieldsOrder.indexOf(b);\r\n\t\t\tif (ai > bi) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (ai < bi) {\r\n\t\t\t\treturn -1\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t});\r\n\r\n\t\treturn items;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns chart's data formatted as CSV.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @param type       Type of the export\r\n\t * @param options    Options\r\n\t * @param encodeURI  If true, will return result will be data URI\r\n\t * @return Promise\r\n\t * @async\r\n\t */\r\n\tpublic async getCSV(type: \"csv\", options?: IExportCSVOptions, encodeURI: boolean = true): Promise<string> {\r\n\r\n\t\tif (!$type.hasValue(options)) {\r\n\t\t\toptions = this.getFormatOptions(\"csv\");\r\n\t\t}\r\n\r\n\t\t// Init output\r\n\t\tlet csv = \"\";\r\n\r\n\t\t// Data fields\r\n\t\tconst dataFields = this.adapter.apply(\"formatDataFields\", {\r\n\t\t\tdataFields: this.dataFields,\r\n\t\t\tformat: \"csv\"\r\n\t\t}).dataFields;\r\n\r\n\t\t// Add rows\r\n\t\tlet br = \"\";\r\n\t\tconst data = this.data;\r\n\r\n\t\t// Vertical or horizontal (default) layout\r\n\t\tif (options.pivot) {\r\n\r\n\t\t\t// Data fields order\r\n\t\t\tconst dataFieldsOrder = this.adapter.apply(\"dataFieldsOrder\", {\r\n\t\t\t\tdataFieldsOrder: this.dataFieldsOrder,\r\n\t\t\t\tformat: \"csv\"\r\n\t\t\t}).dataFieldsOrder;\r\n\r\n\t\t\t$object.eachOrdered(dataFields, (key, val) => {\r\n\t\t\t\tlet dataRow = [];\r\n\t\t\t\tif (options.addColumnNames) {\r\n\t\t\t\t\tdataRow.push(val);\r\n\t\t\t\t}\r\n\t\t\t\tfor (let len = data.length, i = 0; i < len; i++) {\r\n\t\t\t\t\tlet dataValue = data[i][key];\r\n\t\t\t\t\tdataRow.push(this.convertToSpecialFormat<\"csv\">(key, dataValue, options, true));\r\n\t\t\t\t}\r\n\t\t\t\tcsv += br + this.getCSVRow(dataRow, options, undefined, true);\r\n\t\t\t\tbr = \"\\n\";\r\n\t\t\t}, (a, b) => {\r\n\t\t\t\tlet ai = dataFieldsOrder.indexOf(a);\r\n\t\t\t\tlet bi = dataFieldsOrder.indexOf(b);\r\n\t\t\t\tif (ai > bi) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (ai < bi) {\r\n\t\t\t\t\treturn 1\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\tfor (let len = data.length, i = 0; i < len; i++) {\r\n\t\t\t\tlet row = this.getCSVRow(data[i], options, dataFields);\r\n\t\t\t\tif (options.reverse) {\r\n\t\t\t\t\tcsv = row + br + csv;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcsv += br + row;\r\n\t\t\t\t}\r\n\t\t\t\tbr = \"\\n\";\r\n\t\t\t}\r\n\r\n\t\t\t// Add column names?\r\n\t\t\tif (options.addColumnNames) {\r\n\t\t\t\tcsv = this.getCSVRow(dataFields, options, undefined, true) + br + csv;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Add content type\r\n\t\tlet charset = this.adapter.apply(\"charset\", {\r\n\t\t\tcharset: \"charset=utf-8\",\r\n\t\t\ttype: type,\r\n\t\t\toptions: options\r\n\t\t}).charset;\r\n\r\n\t\tlet uri = this.adapter.apply(\"getCSV\", {\r\n\t\t\tdata: encodeURI ? \"data:\" + this.getContentType(type) + \";\" + charset + \",\" + encodeURIComponent(csv) : csv,\r\n\t\t\toptions: options\r\n\t\t}).data;\r\n\r\n\t\treturn uri;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Formats a row of CSV data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  row         An object holding data for the row\r\n\t * @param  options     Options\r\n\t * @param  dataFields  Data fields\r\n\t * @param  asIs        Do not try to convert to dates\r\n\t * @return Formated CSV line\r\n\t */\r\n\tpublic getCSVRow(row: any, options?: IExportCSVOptions, dataFields?: any, asIs: boolean = false): string {\r\n\r\n\t\t// Init\r\n\t\tlet separator = options.separator || \",\";\r\n\t\tlet items: any[] = [];\r\n\r\n\t\t// Data fields\r\n\t\tif (!dataFields) {\r\n\t\t\tdataFields = row;\r\n\t\t}\r\n\r\n\t\t// Data fields order\r\n\t\tconst dataFieldsOrder = this.adapter.apply(\"dataFieldsOrder\", {\r\n\t\t\tdataFieldsOrder: this.dataFieldsOrder,\r\n\t\t\tformat: \"csv\"\r\n\t\t}).dataFieldsOrder;\r\n\r\n\t\t// Process each row item\r\n\t\t$object.eachOrdered(dataFields, (key, name) => {\r\n\r\n\t\t\t// Get value\r\n\t\t\tlet value = this.convertEmptyValue(key, row[key], options);\r\n\r\n\t\t\t// Check if we need to skip\r\n\t\t\t// This is no longer required because we are iterating via dataFields anyway\r\n\t\t\t/*if ($type.hasValue(this.dataFields) && !$type.hasValue(this.dataFields[key])) {\r\n\t\t\t\treturn;\r\n\t\t\t}*/\r\n\r\n\t\t\t// Convert dates\r\n\t\t\tlet item = asIs ? value : this.convertToSpecialFormat<\"csv\">(key, value, options);\r\n\r\n\t\t\t// Cast and escape doublequotes\r\n\t\t\titem = \"\" + item;\r\n\t\t\titem = item.replace(/\"/g, '\"\"');\r\n\r\n\t\t\t// Enclose into double quotes\r\n\t\t\tif (options.forceQuotes || (item.search(new RegExp(\"\\\"|\\n|\" + separator, \"g\")) >= 0)) {\r\n\t\t\t\titem = \"\\\"\" + item + \"\\\"\";\r\n\t\t\t}\r\n\r\n\t\t\t// Add to item\r\n\t\t\titems.push(item);\r\n\t\t}, (a, b) => {\r\n\t\t\t//console.log(a, b)\r\n\t\t\tlet ai = dataFieldsOrder.indexOf(a);\r\n\t\t\tlet bi = dataFieldsOrder.indexOf(b);\r\n\t\t\tif (ai > bi) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (ai < bi) {\r\n\t\t\t\treturn -1\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t});\r\n\r\n\t\treturn items.join(separator);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns chart's data formatted as HTML table.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @param type       Type of the export\r\n\t * @param options    Options\r\n\t * @param encodeURI  If true, will return result will be data URI\r\n\t * @return Promise\r\n\t * @async\r\n\t */\r\n\tpublic async getHTML(type: \"html\", options?: IExportHTMLOptions, encodeURI: boolean = true): Promise<string> {\r\n\r\n\t\tif (!$type.hasValue(options)) {\r\n\t\t\toptions = this.getFormatOptions(\"html\");\r\n\t\t}\r\n\r\n\t\t// Init output\r\n\t\tlet html = \"<table>\";\r\n\t\tif (options.tableClass) {\r\n\t\t\thtml = \"<table class=\\\"\" + options.tableClass + \"\\\">\";\r\n\t\t}\r\n\r\n\t\t// Data fields\r\n\t\tconst dataFields = this.adapter.apply(\"formatDataFields\", {\r\n\t\t\tdataFields: this.dataFields,\r\n\t\t\tformat: \"html\"\r\n\t\t}).dataFields;\r\n\r\n\t\t// Add rows\r\n\t\tconst data = this.data;\r\n\r\n\t\t// Vertical or horizontal (default) layout\r\n\t\tif (options.pivot) {\r\n\r\n\t\t\t// Data fields order\r\n\t\t\tconst dataFieldsOrder = this.adapter.apply(\"dataFieldsOrder\", {\r\n\t\t\t\tdataFieldsOrder: this.dataFieldsOrder,\r\n\t\t\t\tformat: \"html\"\r\n\t\t\t}).dataFieldsOrder;\r\n\r\n\t\t\thtml += \"\\n<tbody>\";\r\n\r\n\t\t\t$object.eachOrdered(dataFields, (key, val) => {\r\n\t\t\t\tlet dataRow = [];\r\n\t\t\t\tif (options.addColumnNames) {\r\n\t\t\t\t\tdataRow.push(val);\r\n\t\t\t\t}\r\n\t\t\t\tfor (let len = data.length, i = 0; i < len; i++) {\r\n\t\t\t\t\tlet dataValue = data[i][key];\r\n\t\t\t\t\tdataRow.push(this.convertToSpecialFormat<\"html\">(key, dataValue, options, true));\r\n\t\t\t\t}\r\n\t\t\t\thtml += \"\\n\" + this.getHTMLRow(dataRow, options, undefined, true);\r\n\t\t\t}, (a, b) => {\r\n\t\t\t\tlet ai = dataFieldsOrder.indexOf(a);\r\n\t\t\t\tlet bi = dataFieldsOrder.indexOf(b);\r\n\t\t\t\tif (ai > bi) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (ai < bi) {\r\n\t\t\t\t\treturn 1\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t});\r\n\r\n\t\t\thtml += \"\\n</tbody>\";\r\n\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\t// Add column names?\r\n\t\t\tif (options.addColumnNames) {\r\n\t\t\t\thtml += \"\\n<thead>\\n\" + this.getHTMLRow(dataFields, options, undefined, true, true) + \"\\n</thead>\";\r\n\t\t\t}\r\n\r\n\t\t\thtml += \"\\n<tbody>\";\r\n\r\n\t\t\tfor (let len = data.length, i = 0; i < len; i++) {\r\n\t\t\t\thtml += \"\\n\" + this.getHTMLRow(data[i], options, dataFields);\r\n\t\t\t}\r\n\r\n\t\t\thtml += \"\\n</tbody>\";\r\n\t\t}\r\n\r\n\t\thtml += \"\\n</table>\";\r\n\r\n\t\t// Add content type\r\n\t\tlet charset = this.adapter.apply(\"charset\", {\r\n\t\t\tcharset: \"charset=utf-8\",\r\n\t\t\ttype: type,\r\n\t\t\toptions: options\r\n\t\t}).charset;\r\n\r\n\t\tlet uri = this.adapter.apply(\"getHTML\", {\r\n\t\t\tdata: encodeURI ? \"data:\" + this.getContentType(type) + \";\" + charset + \",\" + encodeURIComponent(html) : html,\r\n\t\t\toptions: options\r\n\t\t}).data;\r\n\r\n\t\treturn uri;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Formats a row of HTML data.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @ignore Exclude from docs\r\n\t * @param  row         An object holding data for the row\r\n\t * @param  options     Options\r\n\t * @param  dataFields  Data fields\r\n\t * @param  asIs        Do not try to convert to dates\r\n\t * @return Formated HTML row\r\n\t */\r\n\tpublic getHTMLRow(row: any, options?: IExportHTMLOptions, dataFields?: any, asIs: boolean = false, headerRow: boolean = false): string {\r\n\r\n\t\t// Init output\r\n\t\tlet html = \"\\t<tr>\";\r\n\t\tif (options.rowClass) {\r\n\t\t\thtml = \"\\t<tr class=\\\"\" + options.rowClass + \"\\\">\";\r\n\t\t}\r\n\r\n\t\t// Data fields\r\n\t\tif (!dataFields) {\r\n\t\t\tdataFields = row;\r\n\t\t}\r\n\r\n\t\t// Data fields order\r\n\t\tconst dataFieldsOrder = this.adapter.apply(\"dataFieldsOrder\", {\r\n\t\t\tdataFieldsOrder: this.dataFieldsOrder,\r\n\t\t\tformat: \"html\"\r\n\t\t}).dataFieldsOrder;\r\n\r\n\t\t// th or dh?\r\n\t\tconst tag = headerRow ? \"th\" : \"td\";\r\n\r\n\t\t// Process each row item\r\n\t\tlet first = true;\r\n\t\t$object.eachOrdered(dataFields, (key, name) => {\r\n\r\n\t\t\t// Get value\r\n\t\t\tlet value = this.convertEmptyValue(key, row[key], options);\r\n\r\n\t\t\t// Convert dates\r\n\t\t\tlet item = asIs ? value : this.convertToSpecialFormat<\"html\">(key, value, options);\r\n\r\n\t\t\t// Escape HTML entities\r\n\t\t\titem = \"\" + item;\r\n\t\t\titem = item.replace(/[\\u00A0-\\u9999<>\\&]/gim, function(i: string) {\r\n\t\t\t\treturn \"&#\" + i.charCodeAt(0) + \";\";\r\n\t\t\t});\r\n\r\n\t\t\t// Which tag to use\r\n\t\t\tlet useTag = tag;\r\n\t\t\tif (options.pivot && first) {\r\n\t\t\t\tuseTag = \"th\";\r\n\t\t\t}\r\n\r\n\t\t\t// Add cell\r\n\t\t\tif (options.cellClass) {\r\n\t\t\t\thtml += \"\\n\\t\\t<\" + useTag + \" class=\\\"\" + options.cellClass + \"\\\">\" + item + \"</\" + useTag + \">\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thtml += \"\\n\\t\\t<\" + useTag + \">\" + item + \"</\" + useTag + \">\";\r\n\t\t\t}\r\n\r\n\t\t\tfirst = false;\r\n\t\t}, (a, b) => {\r\n\t\t\tlet ai = dataFieldsOrder.indexOf(a);\r\n\t\t\tlet bi = dataFieldsOrder.indexOf(b);\r\n\t\t\tif (ai > bi) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (ai < bi) {\r\n\t\t\t\treturn -1\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t});\r\n\r\n\t\thtml += \"\\n\\t</tr>\";\r\n\r\n\t\treturn html;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns chart's data in JSON format.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @param type       Type of the export\r\n\t * @param options    Options\r\n\t * @param encodeURI  If true, will return result will be data URI\r\n\t * @return Promise\r\n\t * @async\r\n\t */\r\n\tpublic async getJSON(type: \"json\", options?: IExportJSONOptions, encodeURI: boolean = true): Promise<string> {\r\n\r\n\t\tif (!$type.hasValue(options)) {\r\n\t\t\toptions = this.getFormatOptions(\"json\");\r\n\t\t}\r\n\r\n\t\t// Check if we need to regenerate data based on `dataFields`\r\n\t\tlet data: any[];\r\n\t\tconst dataFields = this.adapter.apply(\"formatDataFields\", {\r\n\t\t\tdataFields: this.dataFields,\r\n\t\t\tformat: \"json\"\r\n\t\t}).dataFields;\r\n\t\tif (!this._dynamicDataFields) {\r\n\t\t\tdata = [];\r\n\t\t\tconst sourceData = this.data;\r\n\t\t\tfor (let len = sourceData.length, i = 0; i < len; i++) {\r\n\t\t\t\tlet value = sourceData[i];\r\n\t\t\t\tif (typeof value == \"object\") {\r\n\t\t\t\t\tlet newValue: any = {};\r\n\t\t\t\t\t$object.each(value, (field, item) => {\r\n\t\t\t\t\t\tif ($type.hasValue(dataFields[field])) {\r\n\t\t\t\t\t\t\tnewValue[dataFields[field]] = this.convertToSpecialFormat<\"json\">(field, item, options);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tdata.push(newValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdata = this.data;\r\n\t\t}\r\n\r\n\t\t// Stringify JSON\r\n\t\tlet json = JSON.stringify(data, (key, value) => {\r\n\t\t\tif (typeof value == \"object\") {\r\n\t\t\t\t$object.each(value, (field, item) => {\r\n\t\t\t\t\tvalue[field] = this.convertToSpecialFormat<\"json\">(field, item, options);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn value;\r\n\t\t}, options.indent);\r\n\r\n\t\t// Add content type\r\n\t\tlet charset = this.adapter.apply(\"charset\", {\r\n\t\t\tcharset: \"charset=utf-8\",\r\n\t\t\ttype: type,\r\n\t\t\toptions: options\r\n\t\t}).charset;\r\n\r\n\t\tlet uri = this.adapter.apply(\"getJSON\", {\r\n\t\t\tdata: encodeURI ? \"data:\" + this.getContentType(type) + \";\" + charset + \",\" + encodeURIComponent(json) : json,\r\n\t\t\toptions: options\r\n\t\t}).data;\r\n\r\n\t\treturn uri;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the value to proper date format.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  field         Field name\r\n\t * @param  value         Value\r\n\t * @param  options       Options\r\n\t * @param  keepOriginal  Will ignore formatting and will keep value as it is in data\r\n\t * @return Formatted date value or unmodified value\r\n\t */\r\n\tpublic convertToSpecialFormat<Key extends \"json\" | \"csv\" | \"xlsx\" | \"html\" | \"pdf\">(field: string, value: any, options?: IExportOptions[Key], keepOriginal?: boolean): any {\r\n\r\n\t\t// Is this a timestamp or duration?\r\n\t\tif (typeof value == \"number\") {\r\n\t\t\tif (this.isDateField(field)) {\r\n\t\t\t\tvalue = new Date(value);\r\n\t\t\t}\r\n\t\t\telse if (this.isDurationField(field)) {\r\n\t\t\t\treturn this.durationFormatter.format(value, this.durationFormat);\r\n\t\t\t}\r\n\t\t\telse if (this.isNumberField(field) && this.numberFormat) {\r\n\t\t\t\treturn this.numberFormatter.format(value, this.numberFormat);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (value instanceof Date) {\r\n\t\t\tif (options.useTimestamps) {\r\n\t\t\t\tvalue = value.getTime();\r\n\t\t\t}\r\n\t\t\telse if (options.useLocale) {\r\n\t\t\t\tif (!keepOriginal) {\r\n\t\t\t\t\tvalue = value.toLocaleString();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.dateFormatter.format(value, this.dateFormat);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ($type.isString(value) && this.isDateField(field) && this.dateFormat) {\r\n\t\t\tvalue = this.dateFormatter.format(this.dateFormatter.parse(value), this.dateFormat);\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts empty value based on `emptyAs` option.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic convertEmptyValue<Key extends \"csv\" | \"xlsx\">(field: string, value: any, options?: IExportOptions[Key]): any {\r\n\t\treturn $type.hasValue(value) ? value : options.emptyAs;\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers download of the file.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @param uri       Data URI with file content\r\n\t * @param fileName  File name\r\n\t * @return Promise\r\n\t * @async\r\n\t */\r\n\tpublic async download(uri: string, fileName: string, addBOM: boolean = false): Promise<boolean> {\r\n\r\n\t\tif (this.msBlobDownloadSupport()) {\r\n\r\n\t\t\t/**\r\n\t\t\t * For all IEs 10 and up we use native method `msSaveBlob`\r\n\t\t\t */\r\n\r\n\t\t\t// Extract content type and get pure data without headers\r\n\t\t\tlet parts = uri.split(\";\");\r\n\t\t\tlet contentType = parts.shift().replace(/data:/, \"\");\r\n\t\t\turi = decodeURIComponent(parts.join(\";\").replace(/^[^,]*,/, \"\"));\r\n\r\n\r\n\t\t\t// Check if we need to Base64-decode\r\n\t\t\tif ([\"image/svg+xml\", \"application/json\", \"text/csv\"].indexOf(contentType) == -1) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlet decoded = atob(uri);\r\n\t\t\t\t\turi = decoded;\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\t// Error occurred, meaning string was not Base64-encoded. Do nothing.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet blob = new Blob([uri], { type: contentType });\r\n\t\t\t\twindow.navigator.msSaveBlob(blob, fileName);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Dissect uri into array\r\n\t\t\tlet chars = new Array(uri.length);\r\n\t\t\tfor (let i = 0; i < uri.length; ++i) {\r\n\t\t\t\tlet charCode = uri.charCodeAt(i);\r\n\t\t\t\tchars[i] = charCode;\r\n\t\t\t}\r\n\r\n\t\t\t// Prep Blob and force the download\r\n\t\t\tlet blob = new Blob([new Uint8Array(chars)], { type: contentType });\r\n\t\t\twindow.navigator.msSaveBlob(blob, fileName);\r\n\r\n\t\t}\r\n\r\n\t\telse if (this.blobDownloadSupport()) {\r\n\r\n\t\t\t/**\r\n\t\t\t * Supports Blob object.\r\n\t\t\t * Use it.\r\n\t\t\t */\r\n\t\t\tlet link = document.createElement(\"a\");\r\n\t\t\tlink.download = fileName;\r\n\t\t\tdocument.body.appendChild(link);\r\n\r\n\t\t\t// Extract content type and get pure data without headers\r\n\t\t\tlet parts = uri.split(\";\");\r\n\t\t\tlet contentType = parts.shift().replace(/data:/, \"\");\r\n\r\n\t\t\turi = decodeURIComponent(parts.join(\";\").replace(/^[^,]*,/, \"\"));\r\n\r\n\t\t\tif ([\"image/svg+xml\", \"application/json\", \"text/csv\", \"text/html\"].indexOf(contentType) == -1) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlet decoded = atob(uri);\r\n\t\t\t\t\turi = decoded;\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\t// Error occurred, meaning string was not Base64-encoded. Do nothing.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (addBOM) {\r\n\t\t\t\t\turi = \"\\ufeff\" + uri;\r\n\t\t\t\t}\r\n\t\t\t\tlet blob = new Blob([uri], { type: contentType });\r\n\t\t\t\tlet url = window.URL.createObjectURL(blob);\r\n\t\t\t\tlink.href = url;\r\n\t\t\t\tlink.download = fileName;\r\n\t\t\t\tlink.click();\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tdocument.body.removeChild(link);\r\n\t\t\t\t\twindow.URL.revokeObjectURL(url);\r\n\t\t\t\t}, 100);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Dissect uri into array\r\n\t\t\tlet chars = new Array(uri.length);\r\n\t\t\tfor (let i = 0; i < uri.length; ++i) {\r\n\t\t\t\tlet charCode = uri.charCodeAt(i);\r\n\t\t\t\tchars[i] = charCode;\r\n\t\t\t}\r\n\r\n\t\t\tif (addBOM) {\r\n\t\t\t\tchars = [0xEF, 0xBB, 0xBF].concat(chars);\r\n\t\t\t}\r\n\t\t\tlet blob = new Blob([new Uint8Array(chars)], { type: contentType });\r\n\t\t\tlet url = window.URL.createObjectURL(blob);\r\n\t\t\tlink.href = url;\r\n\t\t\tlink.download = fileName;\r\n\t\t\tdocument.body.appendChild(link);\r\n\t\t\tlink.click();\r\n\t\t\tdocument.body.removeChild(link);\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\twindow.URL.revokeObjectURL(url);\r\n\t\t\t}, 100);\r\n\r\n\t\t}\r\n\r\n\t\telse if (this.linkDownloadSupport()) {\r\n\r\n\t\t\t/**\r\n\t\t\t * For regular browsers, we create a link then simulate a click on it\r\n\t\t\t */\r\n\r\n\t\t\tlet link = document.createElement(\"a\");\r\n\t\t\tlink.download = fileName;\r\n\t\t\tlink.href = uri;\r\n\t\t\tdocument.body.appendChild(link);\r\n\t\t\tlink.click();\r\n\t\t\tdocument.body.removeChild(link);\r\n\r\n\t\t}\r\n\t\telse if (this.legacyIE()) {\r\n\r\n\t\t\t/**\r\n\t\t\t * Old IEs (9 and down) we will use an <iframe> trick\r\n\t\t\t */\r\n\r\n\t\t\tlet parts = uri.match(/^data:(.*);[ ]*([^,]*),(.*)$/);\r\n\r\n\t\t\tif (parts.length === 4) {\r\n\t\t\t\t// Base64-encoded or text-based stuff?\r\n\t\t\t\tif (parts[2] == \"base64\") {\r\n\r\n\t\t\t\t\t// Base64-encoded - probably an image\r\n\t\t\t\t\tif (parts[1].match(/^image\\//)) {\r\n\r\n\t\t\t\t\t\t// Yep, an image. Let's create a temporary image placeholder,\r\n\t\t\t\t\t\t// so that user can use do Save As.\r\n\t\t\t\t\t\tthis.showModal(\r\n\t\t\t\t\t\t\t\"<img src=\\\"\" + uri + \"\\\" style=\\\"float: left; max-width: 50%; max-height: 80%; margin: 0 1em 0.5em 0; border: 1px solid #eee;\\\" />\" +\r\n\t\t\t\t\t\t\t\"<p>\" + this.language.translate(\r\n\t\t\t\t\t\t\t\t\"To save the image, right-click thumbnail on the left and choose \\\"Save picture as...\\\"\"\r\n\t\t\t\t\t\t\t) +\r\n\t\t\t\t\t\t\t\"</p>\" +\r\n\t\t\t\t\t\t\t\"<p style=\\\"text-align: center;\\\"><small>\" + this.language.translate(\r\n\t\t\t\t\t\t\t\t\"(Press ESC to close this message)\"\r\n\t\t\t\t\t\t\t) + \"</small></p>\",\r\n\t\t\t\t\t\t\tthis.language.translate(\"Image Export Complete\")\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// Text-based\r\n\r\n\t\t\t\t\t// IE9 is trippy about saving files with filenames of the extensions it\r\n\t\t\t\t\t// does not know. Let's use .txt extension for all text-based export\r\n\t\t\t\t\t// formats, except SVG.\r\n\t\t\t\t\tlet contentType;\r\n\t\t\t\t\tif (fileName.match(/\\.svg$/)) {\r\n\t\t\t\t\t\tcontentType = \"image/svg+xml\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcontentType = \"text/plain\";\r\n\t\t\t\t\t\tfileName += \".txt\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Create temporary iframe\r\n\t\t\t\t\tlet iframe = document.createElement(\"iframe\");\r\n\t\t\t\t\tiframe.width = \"1px\";\r\n\t\t\t\t\tiframe.height = \"1px\"\r\n\t\t\t\t\tiframe.style.display = \"none\";\r\n\t\t\t\t\tdocument.body.appendChild(iframe);\r\n\r\n\t\t\t\t\t// Add our stuff to the document of the iframe and trigger save as\r\n\t\t\t\t\tlet idoc = iframe.contentDocument;\r\n\t\t\t\t\tidoc.open(contentType, \"replace\");\r\n\t\t\t\t\t// TODO test this with various encodings (e.g. UTF)\r\n\t\t\t\t\t//idoc.charset = parts[2].replace(/charset=/, \"\");\r\n\t\t\t\t\tidoc.write(decodeURIComponent(parts[3]));\r\n\t\t\t\t\tidoc.close();\r\n\t\t\t\t\tidoc.execCommand(\"SaveAs\", true, fileName);\r\n\r\n\t\t\t\t\t// Destroy the iframe\r\n\t\t\t\t\tdocument.body.removeChild(iframe);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\t/**\r\n\t\t\t * Something else - perhaps a mobile.\r\n\t\t\t * Let's just display it in the same page.\r\n\t\t\t * (hey we don't like it either)\r\n\t\t\t */\r\n\t\t\twindow.location.href = uri;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if browser has any supported methods to trigger download\r\n\t * of a binary file.\r\n\t *\r\n\t * @return Supports downloads?\r\n\t */\r\n\tpublic downloadSupport(): boolean {\r\n\t\t//return !this.legacyIE();\r\n\t\treturn this.linkDownloadSupport() || this.msBlobDownloadSupport();\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the browser supports \"download\" attribute on links.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Browser supports triggering downloads?\r\n\t */\r\n\tpublic linkDownloadSupport(): boolean {\r\n\t\t// Do we have this cached?\r\n\t\tlet cache = registry.getCache(\"linkDownloadSupport\");\r\n\t\tif (cache === false || cache === true) {\r\n\t\t\treturn cache;\r\n\t\t}\r\n\t\tlet a = document.createElement(\"a\");\r\n\t\tlet res = typeof a.download !== \"undefined\";\r\n\t\tregistry.setCache(\"linkDownloadSupport\", res);\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the browser supports download via `msBlob`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Browser supports triggering downloads?\r\n\t */\r\n\tpublic blobDownloadSupport(): boolean {\r\n\t\treturn $type.hasValue(window.Blob);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the browser supports download via `msBlob`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Browser supports triggering downloads?\r\n\t */\r\n\tpublic msBlobDownloadSupport(): boolean {\r\n\t\treturn $type.hasValue(window.navigator.msSaveOrOpenBlob);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if this is a legacy version of IE.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return IE9 or less?\r\n\t */\r\n\tpublic legacyIE(): boolean {\r\n\t\t// Create a temporary <div> with conditional tags in it an an <i> tag.\r\n\t\t// Count <i>s. If there are some, we have IE9 or late on our hands.\r\n\t\tlet div = document.createElement(\"div\");\r\n\t\tdiv.innerHTML = \"<!--[if lt IE 10]><i></i><![endif]-->\";\r\n\t\treturn div.getElementsByTagName(\"i\").length == 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates print of the chart.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @param data     Data URI for the image\r\n\t * @param options  Options\r\n\t * @param title    Optional title to use (uses window's title by default)\r\n\t * @return Promise\r\n\t * @async\r\n\t */\r\n\tpublic async print(data: string, options?: IExportPrintOptions, title?: string): Promise<boolean> {\r\n\r\n\t\tif (options.printMethod == \"css\") {\r\n\t\t\treturn this.printViaCSS(data, options, title);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.printViaIframe(data, options, title);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprotected async printViaCSS(data: string, options?: IExportPrintOptions, title?: string): Promise<boolean> {\r\n\t\t// Save current scroll position\r\n\t\tlet scroll = document.documentElement.scrollTop || document.body.scrollTop;\r\n\r\n\t\t// Hide all current nodes of the document and save their current states\r\n\t\t// of `display` style\r\n\t\t/*let states: Array<string> = [];\r\n\t\tlet items = document.body.childNodes;\r\n\t\tfor (let len = items.length, i = 0; i < len; i++) {\r\n\t\t\tlet item = <HTMLElement>items[i];\r\n\t\t\tif ($dom.isElement(item)) {\r\n\t\t\t\tstates[i] = item.style.display;\r\n\t\t\t\titem.style.display = \"none\";\r\n\t\t\t}\r\n\t\t}*/\r\n\r\n\t\t// Hide all document nodes by applyin custom CSS\r\n\t\tlet rule = new StyleRule($dom.getShadowRoot(this.container), \"body > *\", {\r\n\t\t\t\"display\": \"none\",\r\n\t\t\t\"position\": \"fixed\",\r\n\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\"opacity\": \"0\",\r\n\t\t\t\"clipPath\": \"polygon(0px 0px,0px 0px,0px 0px,0px 0px);\"\r\n\t\t});\r\n\r\n\t\t// Replace title?\r\n\t\tlet originalTitle: string;\r\n\t\tif (title && document && document.title) {\r\n\t\t\toriginalTitle = document.title;\r\n\t\t\tdocument.title = title;\r\n\t\t}\r\n\r\n\t\t// Create and add exported image\r\n\t\tlet img = new Image();\r\n\t\timg.src = data;\r\n\t\timg.style.maxWidth = \"100%\";\r\n\t\timg.style.display = \"block\";\r\n\t\timg.style.position = \"relative\";\r\n\t\timg.style.visibility = \"visible\";\r\n\t\timg.style.opacity = \"1\";\r\n\t\timg.style.clipPath = \"none\";\r\n\t\tdocument.body.appendChild(img);\r\n\r\n\t\t// Print\r\n\t\tthis.setTimeout(() => {\r\n\t\t\t(<any>window).print();\r\n\t\t}, 50);\r\n\r\n\t\t// Delay needs to be at least a second for iOS devices\r\n\t\tlet isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !(<any>window).MSStream;\r\n\t\tif (isIOS && (options.delay < 1000)) {\r\n\t\t\toptions.delay = 1000;\r\n\t\t}\r\n\t\telse if (options.delay < 100) {\r\n\t\t\toptions.delay = 100;\r\n\t\t}\r\n\r\n\t\t// Delay function that resets back the document the way ot was before\r\n\t\tthis.setTimeout(() => {\r\n\r\n\t\t\t// Remove image\r\n\t\t\tdocument.body.removeChild(img);\r\n\r\n\t\t\t// Reset back all elements\r\n\t\t\t/*for (let len = items.length, i = 0; i < len; i++) {\r\n\t\t\t\tlet item = <HTMLElement>items[i];\r\n\t\t\t\tif ($dom.isElement(item)) {\r\n\t\t\t\t\titem.style.display = states[i];\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\t\t\trule.dispose();\r\n\r\n\t\t\t// Restore title\r\n\t\t\tif (originalTitle) {\r\n\t\t\t\tdocument.title = document.title;\r\n\t\t\t}\r\n\r\n\t\t\t// Scroll back the document the way it was before\r\n\t\t\tdocument.documentElement.scrollTop = document.body.scrollTop = scroll;\r\n\r\n\t\t}, options.delay || 500);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected async printViaIframe(data: string, options?: IExportPrintOptions, title?: string): Promise<boolean> {\r\n\r\n\t\t// Create an iframe\r\n\t\tlet iframe = document.createElement(\"iframe\");\r\n\t\tiframe.style.visibility = \"hidden\";\r\n\t\tdocument.body.appendChild(iframe);\r\n\r\n\t\t// This is needed for FireFox\r\n\t\tiframe.contentWindow.document.open();\r\n\t\tiframe.contentWindow.document.close();\r\n\r\n\t\t// Create and add exported image\r\n\t\tlet img = new Image();\r\n\t\timg.src = data;\r\n\t\timg.style.maxWidth = \"100%\";\r\n\t\timg.style.height = \"auto\";\r\n\t\tif (title) {\r\n\t\t\tiframe.contentWindow.document.title = title;\r\n\t\t}\r\n\t\tiframe.contentWindow.document.body.appendChild(img);\r\n\r\n\t\t(<any>iframe).load = function() {\r\n\t\t\tiframe.contentWindow.document.body.appendChild(img);\r\n\t\t};\r\n\r\n\t\t// Print\r\n\t\tthis.setTimeout(() => {\r\n\t\t\ttry {\r\n\t\t\t\tif (!(<any>iframe).contentWindow.document.execCommand(\"print\", false, null)) {\r\n\t\t\t\t\t(<any>iframe).contentWindow.print();\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\t(<any>iframe).contentWindow.print();\r\n\t\t\t}\r\n\t\t}, options.delay || 50);\r\n\r\n\t\t// Delay needs to be at least a second for iOS devices\r\n\t\tlet isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !(<any>window).MSStream;\r\n\t\tif (isIOS && (options.delay < 1000)) {\r\n\t\t\toptions.delay = 1000;\r\n\t\t}\r\n\t\telse if (options.delay < 100) {\r\n\t\t\toptions.delay = 100;\r\n\t\t}\r\n\r\n\t\t// Delay function that resets back the document the way ot was before\r\n\t\tthis.setTimeout(() => {\r\n\r\n\t\t\t// Remove image\r\n\t\t\tdocument.body.removeChild(iframe);\r\n\r\n\t\t}, options.delay + 50 || 100);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Finds a background color for the element. If element is transparent it goes\r\n\t * up the DOM hierarchy to find a parent element that does.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param element Element\r\n\t * @return Color code\r\n\t */\r\n\tpublic findBackgroundColor(element: Element): Color {\r\n\r\n\t\t// Check if element has styles set\r\n\t\tlet opacity = 1,\r\n\t\t\tcurrentColor = (<string>getComputedStyle(element, \"background-color\"));\r\n\r\n\t\t// Check opacity\r\n\t\tif (currentColor.match(/[^,]*,[^,]*,[^,]*,[ ]?0/) || currentColor == \"transparent\") {\r\n\t\t\topacity = 0;\r\n\t\t}\r\n\r\n\t\tif (opacity == 0) {\r\n\t\t\tlet parent = element.parentElement;// || <Element>element.parentNode;\r\n\r\n\t\t\t// Completely transparent. Look for a parent\r\n\t\t\tif (parent) {\r\n\t\t\t\treturn this.findBackgroundColor(parent);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn color(\"#fff\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn color(currentColor, opacity);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a container to be used to place [[ExportMenu]] in.\r\n\t *\r\n\t * @param value Reference\r\n\t */\r\n\tpublic set container(value: HTMLElement) {\r\n\t\tthis._container = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Reference\r\n\t */\r\n\tpublic get container(): HTMLElement {\r\n\t\treturn this.adapter.apply(\"container\", {\r\n\t\t\tcontainer: this._container\r\n\t\t}).container;\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to [[Sprite]] to export. Can be any Sprite, including some\r\n\t * internal elements.\r\n\t *\r\n\t * @param value Sprite\r\n\t */\r\n\tpublic set sprite(value: Sprite) {\r\n\t\tthis._sprite = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Sprite\r\n\t */\r\n\tpublic get sprite(): Sprite {\r\n\t\treturn this.adapter.apply(\"sprite\", {\r\n\t\t\tsprite: this._sprite\r\n\t\t}).sprite;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of extra [[Sprite]] elements to include in export.\r\n\t *\r\n\t * It can be used to export any external elements, or even other charts.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.exporting.extraSprites.push(chart2);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.exporting.extraSprites.push(chart2);\r\n\t * ```\r\n\t *\r\n\t * IMPORTANT: This setting is ignored when exporting to SVG format.\r\n\t *\r\n\t * @since 4.2.0\r\n\t * @param value Sprite\r\n\t */\r\n\tpublic set extraSprites(value: Array<Sprite | IExportCanvas>) {\r\n\t\tthis._extraSprites = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Sprite\r\n\t */\r\n\tpublic get extraSprites(): Array<Sprite | IExportCanvas> {\r\n\t\treturn this.adapter.apply(\"extraSprites\", {\r\n\t\t\textraSprites: this._extraSprites\r\n\t\t}).extraSprites;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of [[Sprite]] elements that need to be valid before export\r\n\t * commences.\r\n\t *\r\n\t * If any of those elements is not completely ready when export is triggered,\r\n\t * the export will wait until they are (their `validated` event triggers)\r\n\t * before going through with the export opertaion.\r\n\t *\r\n\t * This is useful if you need to modify chart appearance for the export.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Add watermark\r\n\t * let watermark = chart.createChild(am4core.Label);\r\n\t * watermark.text = \"Copyright (C) 2019\";\r\n\t * watermark.disabled = true;\r\n\t *\r\n\t * // Add watermark to validated sprites\r\n\t * chart.exporting.validateSprites.push(watermark);\r\n\t *\r\n\t * // Enable watermark on export\r\n\t * chart.exporting.events.on(\"exportstarted\", function(ev) {\r\n\t *   watermark.disabled = false;\r\n\t * });\r\n\t *\r\n\t * // Disable watermark when export finishes\r\n\t * chart.exporting.events.on(\"exportfinished\", function(ev) {\r\n\t *   watermark.disabled = true;\r\n\t * });\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Add watermark\r\n\t * var watermark = chart.createChild(am4core.Label);\r\n\t * watermark.text = \"Copyright (C) 2019\";\r\n\t * watermark.disabled = true;\r\n\t *\r\n\t * // Add watermark to validated sprites\r\n\t * chart.exporting.validateSprites.push(watermark);\r\n\t *\r\n\t * // Enable watermark on export\r\n\t * chart.exporting.events.on(\"exportstarted\", function(ev) {\r\n\t *   watermark.disabled = false;\r\n\t * });\r\n\t *\r\n\t * // Disable watermark when export finishes\r\n\t * chart.exporting.events.on(\"exportfinished\", function(ev) {\r\n\t *   watermark.disabled = true;\r\n\t * });\r\n\t * ```\r\n\t *\r\n\t * @since 4.6.8\r\n\t * @param value Sprite\r\n\t */\r\n\tpublic set validateSprites(value: Array<Sprite>) {\r\n\t\tthis._validateSprites = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Sprite\r\n\t */\r\n\tpublic get validateSprites(): Array<Sprite> {\r\n\t\treturn this.adapter.apply(\"validateSprites\", {\r\n\t\t\tvalidateSprites: this._validateSprites\r\n\t\t}).validateSprites;\r\n\t}\r\n\r\n\t/**\r\n\t * Data to export.\r\n\t *\r\n\t * @param value Data\r\n\t */\r\n\tpublic set data(value: any) {\r\n\t\tthis._data = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data\r\n\t */\r\n\tpublic get data(): any {\r\n\t\treturn this.adapter.apply(\"data\", {\r\n\t\t\tdata: this._data\r\n\t\t}).data;\r\n\t}\r\n\r\n\t/**\r\n\t * Data fields in `{ field: fieldName }` format. Those are used for\r\n\t * exporting in data formats to name the columns.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/#Changing_order_and_names_of_columns} for examples and details\r\n\t * @param value Field names\r\n\t */\r\n\tpublic set dataFields(value: any) {\r\n\t\tthis._dataFields = value;\r\n\t\tthis._dynamicDataFields = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Field names `{ field: fieldName }`\r\n\t */\r\n\tpublic get dataFields(): any {\r\n\t\tif (!this._dataFields) {\r\n\t\t\tthis.generateDataFields();\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"dataFields\", {\r\n\t\t\tdataFields: this._dataFields\r\n\t\t}).dataFields;\r\n\t}\r\n\r\n\t/**\r\n\t * Called after target chart's data updates.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic handleDataUpdated(): void {\r\n\t\tif (this._dynamicDataFields) {\r\n\t\t\tthis._dataFields = undefined;\r\n\t\t}\r\n\t\tconst hasData = this.data.length > 0;\r\n\t\tif (this._prevHasData != hasData) {\r\n\t\t\tthis._prevHasData = hasData;\r\n\t\t\tif (this.menu) {\r\n\t\t\t\tthis.menu.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[DateFormatter]] to use when formatting dates when exporting data.\r\n\t *\r\n\t * @param value DateFormatter instance\r\n\t */\r\n\tpublic set dateFormatter(value: DateFormatter) {\r\n\t\tthis._dateFormatter = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return A DateFormatter instance\r\n\t */\r\n\tpublic get dateFormatter(): DateFormatter {\r\n\t\tif (!this._dateFormatter) {\r\n\t\t\tthis._dateFormatter = new DateFormatter();\r\n\t\t\tthis._dateFormatter.language = this.language;\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"dateFormatter\", {\r\n\t\t\tdateFormatter: this._dateFormatter\r\n\t\t}).dateFormatter;\r\n\t}\r\n\r\n\t/**\r\n\t * A date format to use for exporting dates. Will use [[DateFormatter]]\r\n\t * format if not set.\r\n\t *\r\n\t * @param value Date format\r\n\t */\r\n\tpublic set dateFormat(value: $type.Optional<string | Intl.DateTimeFormatOptions>) {\r\n\t\tthis._dateFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get dateFormat(): $type.Optional<string | Intl.DateTimeFormatOptions> {\r\n\t\treturn this.adapter.apply(\"dateFormat\", {\r\n\t\t\tdateFormat: this._dateFormat\r\n\t\t}).dateFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of fields that hold date values.\r\n\t *\r\n\t * @param value Date field list\r\n\t */\r\n\tpublic set dateFields(value: List<string>) {\r\n\t\tthis._dateFields = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date field list\r\n\t */\r\n\tpublic get dateFields(): List<string> {\r\n\t\tif (!this._dateFields) {\r\n\t\t\tthis._dateFields = new List<string>();\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"dateFields\", {\r\n\t\t\tdateFields: this._dateFields\r\n\t\t}).dateFields;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[NumberFormatter]] to use when formatting dates when exporting data.\r\n\t *\r\n\t * @since 4.5.15\r\n\t * @param value NumberFormatter instance\r\n\t */\r\n\tpublic set numberFormatter(value: NumberFormatter) {\r\n\t\tthis._numberFormatter = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return A NumberFormatter instance\r\n\t */\r\n\tpublic get numberFormatter(): NumberFormatter {\r\n\t\tif (!this._numberFormatter) {\r\n\t\t\tthis._numberFormatter = new NumberFormatter();\r\n\t\t\tthis._numberFormatter.language = this.language;\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"numberFormatter\", {\r\n\t\t\tnumberFormatter: this._numberFormatter\r\n\t\t}).numberFormatter;\r\n\t}\r\n\r\n\t/**\r\n\t * A number format to use for exporting dates. Will use [[NumberFormatter]]\r\n\t * format if not set.\r\n\t *\r\n\t * @since 4.5.15\r\n\t * @param value Number format\r\n\t */\r\n\tpublic set numberFormat(value: $type.Optional<string>) {\r\n\t\tthis._numberFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Number format\r\n\t */\r\n\tpublic get numberFormat(): $type.Optional<string> {\r\n\t\treturn this.adapter.apply(\"numberFormat\", {\r\n\t\t\tnumberFormat: this._numberFormat\r\n\t\t}).numberFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of fields that hold number values.\r\n\t *\r\n\t * @since 4.5.15\r\n\t * @param value Number field list\r\n\t */\r\n\tpublic set numberFields(value: List<string>) {\r\n\t\tthis._numberFields = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Number field list\r\n\t */\r\n\tpublic get numberFields(): List<string> {\r\n\t\tif (!this._numberFields) {\r\n\t\t\tthis._numberFields = new List<string>();\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"numberFields\", {\r\n\t\t\tnumberFields: this._numberFields\r\n\t\t}).numberFields;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[DurationFormatter]] to use when formatting duration values when\r\n\t * exporting data.\r\n\t *\r\n\t * @param value  DurationFormatter instance\r\n\t */\r\n\tpublic set durationFormatter(value: DurationFormatter) {\r\n\t\tthis._durationFormatter = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return A DurationFormatter instance\r\n\t */\r\n\tpublic get durationFormatter(): DurationFormatter {\r\n\t\tif (!this._durationFormatter) {\r\n\t\t\tthis._durationFormatter = new DurationFormatter();\r\n\t\t\tthis._durationFormatter.language = this.language;\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"durationFormatter\", {\r\n\t\t\tdurationFormatter: this._durationFormatter\r\n\t\t}).durationFormatter;\r\n\t}\r\n\r\n\t/**\r\n\t * A format to use when formatting values from `durationFields`.\r\n\t * Will use [[DurationFormatter]] format if not set.\r\n\t *\r\n\t * @param value Duration format\r\n\t */\r\n\tpublic set durationFormat(value: $type.Optional<string>) {\r\n\t\tthis._durationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Duration format\r\n\t */\r\n\tpublic get durationFormat(): $type.Optional<string> {\r\n\t\treturn this.adapter.apply(\"durationFormat\", {\r\n\t\t\tdurationFormat: this._durationFormat\r\n\t\t}).durationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of fields that hold duration values.\r\n\t *\r\n\t * @param value Duration field list\r\n\t */\r\n\tpublic set durationFields(value: List<string>) {\r\n\t\tthis._durationFields = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Duration field list\r\n\t */\r\n\tpublic get durationFields(): List<string> {\r\n\t\tif (!this._durationFields) {\r\n\t\t\tthis._durationFields = new List<string>();\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"durationFields\", {\r\n\t\t\tdurationFields: this._durationFields\r\n\t\t}).durationFields;\r\n\t}\r\n\r\n\t/**\r\n\t * Generates data fields out of the first row of data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic generateDataFields(): void {\r\n\t\tthis._dataFields = {};\r\n\t\tif (this.data.length) {\r\n\t\t\t$array.each(this.data, (row) => {\r\n\t\t\t\t$object.each(row, (key, value) => {\r\n\t\t\t\t\tif (!$type.hasValue(this._dataFields[key])) {\r\n\t\t\t\t\t\tthis._dataFields[key] = this.adapter.apply(\"dataFieldName\", {\r\n\t\t\t\t\t\t\tname: key,\r\n\t\t\t\t\t\t\tfield: key\r\n\t\t\t\t\t\t}).name;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Cheks against `dateFields` property to determine if this field holds\r\n\t * dates.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param field   Field name\r\n\t * @param options Options\r\n\t * @return `true` if it's a date field\r\n\t */\r\n\tpublic isDateField(field: string): boolean {\r\n\t\treturn this.adapter.apply(\"isDateField\", {\r\n\t\t\tisDateField: this.dateFields.contains(field),\r\n\t\t\tfield: field\r\n\t\t}).isDateField;\r\n\t}\r\n\r\n\t/**\r\n\t * Cheks against `numberFields` property to determine if this field holds\r\n\t * numbers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param field   Field name\r\n\t * @param options Options\r\n\t * @return `true` if it's a number field\r\n\t */\r\n\tpublic isNumberField(field: string): boolean {\r\n\t\treturn this.adapter.apply(\"isNumberField\", {\r\n\t\t\tisNumberField: this.numberFields.contains(field),\r\n\t\t\tfield: field\r\n\t\t}).isNumberField;\r\n\t}\r\n\r\n\t/**\r\n\t * Cheks against `durationFields` property to determine if this field holds\r\n\t * durations.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param field   Field name\r\n\t * @param options Options\r\n\t * @return `true` if it's a date field\r\n\t */\r\n\tpublic isDurationField(field: string): boolean {\r\n\t\treturn this.adapter.apply(\"isDurationField\", {\r\n\t\t\tisDurationField: this.durationFields.contains(field),\r\n\t\t\tfield: field\r\n\t\t}).isDurationField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns proper content type for the export type.\r\n\t *\r\n\t * @param type  Export format/type\r\n\t * @return Proper content type, i.e. \"image/jpeg\"\r\n\t */\r\n\tpublic getContentType<Key extends keyof IExportOptions>(type: Key): string {\r\n\r\n\t\tlet contentType = \"\";\r\n\t\tswitch (type) {\r\n\t\t\tcase \"png\":\r\n\t\t\tcase \"gif\":\r\n\t\t\t\tcontentType = \"image/\" + type;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jpg\":\r\n\t\t\t\tcontentType = \"image/jpeg\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"svg\":\r\n\t\t\t\tcontentType = \"image/svg+xml\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"csv\":\r\n\t\t\t\tcontentType = \"text/csv\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"json\":\r\n\t\t\t\tcontentType = \"application/json\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"html\":\r\n\t\t\t\tcontentType = \"text/html\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pdf\":\r\n\t\t\tcase \"pdfdata\":\r\n\t\t\t\tcontentType = \"application/pdf\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"xlsx\":\r\n\t\t\t\tcontentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn this.adapter.apply(\"contentType\", {\r\n\t\t\tcontentType: contentType,\r\n\t\t\ttype: type\r\n\t\t}).contentType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A file prefix to be used for all exported formats.\r\n\t *\r\n\t * Export will apply format-related extension to it. E.g. if this is set to\r\n\t * \"myExport\", the file name of the PNG exported image will be \"myExport.png\".\r\n\t *\r\n\t * @param value File prefix\r\n\t */\r\n\tpublic set filePrefix(value: string) {\r\n\t\tthis._filePrefix = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return File prefix\r\n\t */\r\n\tpublic get filePrefix(): string {\r\n\t\treturn this.adapter.apply(\"filePrefix\", {\r\n\t\t\tfilePrefix: this._filePrefix\r\n\t\t}).filePrefix;\r\n\t}\r\n\r\n\t/**\r\n\t * A background color to be used for exported images. If set, this will\r\n\t * override the automatically acquired background color.\r\n\t *\r\n\t * @param value Color\r\n\t */\r\n\tpublic set backgroundColor(value: $type.Optional<Color>) {\r\n\t\tthis._backgroundColor = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Background color\r\n\t */\r\n\tpublic get backgroundColor(): $type.Optional<Color> {\r\n\t\treturn this.adapter.apply(\"backgroundColor\", {\r\n\t\t\tbackgroundColor: this._backgroundColor\r\n\t\t}).backgroundColor;\r\n\t}\r\n\r\n\t/**\r\n\t * A title to be used when printing.\r\n\t *\r\n\t * @param value Title\r\n\t */\r\n\tpublic set title(value: $type.Optional<string>) {\r\n\t\tthis._title = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Title\r\n\t */\r\n\tpublic get title(): $type.Optional<string> {\r\n\t\treturn this.adapter.apply(\"title\", {\r\n\t\t\ttitle: this._title\r\n\t\t}).title;\r\n\t}\r\n\r\n\t/**\r\n\t * Displays a preloader/exporting indicator.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Add ability to change text\r\n\t */\r\n\tpublic showPreloader(): void {\r\n\t\tlet preloader = this.preloader;\r\n\t\tif (preloader) {\r\n\t\t\tpreloader.progress = 0.5;\r\n\t\t\tpreloader.label.text = \"...\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides preloader/exporting indicator\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic hidePreloader(): void {\r\n\t\tlet preloader = this.preloader;\r\n\t\tif (preloader) {\r\n\t\t\tpreloader.progress = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a an instance of [[Preloader]] associated with the Sprite being\r\n\t * exported.\r\n\t *\r\n\t * @return Preloader\r\n\t */\r\n\tpublic get preloader(): Preloader {\r\n\t\treturn this._sprite && this._sprite.parent && this._sprite.parent.preloader ?\r\n\t\t\tthis._sprite.parent.preloader :\r\n\t\t\tundefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Displays a modal saying export is taking longer than expected.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic showTimeout(): void {\r\n\t\tthis.showModal(\r\n\t\t\tthis.adapter.apply(\"timeoutMessage\", {\r\n\t\t\t\tmessage: this.language.translate(\"Export operation took longer than expected. Something might have gone wrong.\")\r\n\t\t\t}).message\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Hides preloader/exporting indicator.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic hideTimeout(): void {\r\n\t\tif (this._timeoutTimeout) {\r\n\t\t\tthis.removeDispose(this._timeoutTimeout);\r\n\t\t\tthis._timeoutTimeout = null;\r\n\t\t}\r\n\t\tthis.hideModal();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Language]] instance to be used for translations.\r\n\t *\r\n\t * @param value An instance of [[Language]]\r\n\t */\r\n\tpublic set language(value: Language) {\r\n\t\tthis._language = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return A [[Language]] instance to be used\r\n\t */\r\n\tpublic get language(): Language {\r\n\t\tif (!this._language) {\r\n\t\t\tthis._language = new Language();\r\n\t\t}\r\n\r\n\t\treturn this._language;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns (and creates) [[Modal]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Modal instance\r\n\t */\r\n\tpublic get modal(): Modal {\r\n\t\tif (!this._modal) {\r\n\t\t\tthis._modal = new Modal();\r\n\r\n\t\t\t// Prefix with Sprite's class name\r\n\t\t\tthis._modal.adapter.add(\"classPrefix\", (value) => {\r\n\t\t\t\tvalue = options.classNamePrefix + value;\r\n\t\t\t\treturn value;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this._modal;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows [[Modal]] with specific text.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param text Modal contents\r\n\t */\r\n\tpublic showModal(text: string, title?: string): void {\r\n\r\n\t\t// Hide previous modal and preloader\r\n\t\tthis.hideModal();\r\n\t\tthis.hidePreloader();\r\n\r\n\t\t// Create modal\r\n\t\tlet modal = this.modal;\r\n\t\tmodal.container = this.sprite.svgContainer.SVGContainer;\r\n\t\tmodal.content = text;\r\n\t\tmodal.readerTitle = title;\r\n\t\tmodal.open();\r\n\t}\r\n\r\n\t/**\r\n\t * Hides modal window if one's currently open.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic hideModal(): void {\r\n\t\tif (this._modal) {\r\n\t\t\tthis.modal.close();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Loads canvg dynamic module.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Instance of canvg\r\n\t * @async\r\n\t */\r\n\tprivate async _canvg(): Promise<typeof import(\"../../canvg/index.js\")[\"default\"]> {\r\n\t\tconst canvg = (await import(/* webpackChunkName: \"canvg\" */ \"../../canvg/index.js\")) as any;\r\n\r\n\t\tif (canvg.default != null) {\r\n\t\t\treturn canvg.default;\r\n\r\n\t\t} else {\r\n\t\t\treturn canvg;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns canvg instance.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Instance of canvg\r\n\t */\r\n\tpublic get canvg(): Promise<typeof import(\"../../canvg/index.js\")[\"default\"]> {\r\n\t\treturn this._canvg();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns pdfmake instance.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Instance of pdfmake\r\n\t */\r\n\tpublic get pdfmake(): Promise<any> {\r\n\t\tif (pdfmakePromise == null) {\r\n\t\t\tpdfmakePromise = _pdfmake();\r\n\t\t}\r\n\r\n\t\treturn pdfmakePromise;\r\n\t}\r\n\r\n\t/**\r\n\t * Loads xlsx dynamic module.\r\n\t *\r\n\t * This is an asynchronous function. Check the description of `getImage()`\r\n\t * for description and example usage.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Instance of pdfmake\r\n\t * @async\r\n\t */\r\n\tprivate async _xlsx(): Promise<any> {\r\n\t\treturn await import(/* webpackChunkName: \"xlsx\" */ \"xlsx/dist/xlsx.core.min.js\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns xlsx instance.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Instance of pdfmake\r\n\t */\r\n\tpublic get xlsx(): Promise<any> {\r\n\t\treturn this._xlsx();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets options for a format.\r\n\t */\r\n\tpublic setFormatOptions<Key extends keyof IExportOptions>(type: Key, options: IExportOptions[Key]): void {\r\n\t\tthis._formatOptions.setKey(type, options);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current options for a format.\r\n\t */\r\n\tpublic getFormatOptions<Key extends keyof IExportOptions>(type: Key): IExportOptions[Key] {\r\n\t\treturn this._formatOptions.getKey(type);\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Dictionary]] object containing format-specific options.\r\n\t *\r\n\t * May be used to change specific option for the format:\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.exporting.formatOptions.getKey(\"csv\").disabled = true;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.exporting.formatOptions.getKey(\"csv\").disabled = true;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"exporting\": {\r\n\t *     // ...\r\n\t *     \"formatOptions\": {\r\n\t *       \"csv\": {\r\n\t *         \"disabled\": true\r\n\t *       }\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.9.12\r\n\t * @return  Options\r\n\t */\r\n\tpublic get formatOptions(): Dictionary<string, ExportOptions> {\r\n\t\treturn this._formatOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Disables interactivity on parent chart.\r\n\t */\r\n\tprotected _disablePointers(): void {\r\n\t\tif (!$type.hasValue(this._spriteInteractionsEnabled)) {\r\n\t\t\tthis._spriteInteractionsEnabled = this.sprite.interactionsEnabled;\r\n\t\t}\r\n\t\tthis.sprite.interactionsEnabled = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Releases temporarily disabled pointers on parent chart.\r\n\t */\r\n\tprotected _releasePointers(): void {\r\n\t\tif ($type.hasValue(this._spriteInteractionsEnabled) && !this._exportRunning) {\r\n\t\t\tthis.sprite.interactionsEnabled = this._spriteInteractionsEnabled;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all elements that should not be included in the exported image.\r\n\t */\r\n\tprivate hideNonExportableSprites(): void {\r\n\t\tif (this._objectsAlreadyHidden) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst svgContainer = this.sprite.svgContainer;\r\n\t\tif (svgContainer) {\r\n\t\t\t$array.each(svgContainer.nonExportableSprites, (item) => {\r\n\t\t\t\tif (!item.isHidden && !item.isHiding && item.visible) {\r\n\t\t\t\t\tthis._hiddenObjects.push(item);\r\n\t\t\t\t}\r\n\t\t\t\titem.hide(0);\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis._objectsAlreadyHidden = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Respores elements that were hidden before export.\r\n\t */\r\n\tprivate restoreNonExportableSprites(): void {\r\n\t\tif (!this._objectsAlreadyHidden) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t$array.each(this._hiddenObjects, (item) => {\r\n\t\t\titem.show(0);\r\n\t\t});\r\n\t\tthis._hiddenObjects = [];\r\n\t\tthis._objectsAlreadyHidden = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if there are elements that absolutely need to be validated before\r\n\t * export.\r\n\t *\r\n\t * If there are invalid elements, it will await for them to be validated.\r\n\t *\r\n\t * @return Promise\r\n\t */\r\n\tprivate async awaitValidSprites(): Promise<void> {\r\n\t\tlet promises: Promise<any>[] = [];\r\n\r\n\t\tif (this.validateSprites.length) {\r\n\t\t\t$array.each(this.validateSprites, (sprite, index) => {\r\n\t\t\t\tif (sprite.invalid) {\r\n\t\t\t\t\tpromises.push(new Promise((resolve, reject) => {\r\n\t\t\t\t\t\tsprite.events.once(\"validated\", (ev) => {\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (promises.length) {\r\n\t\t\tawait Promise.all(promises);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tregistry.registeredClasses[\"ExportMenu\"] = ExportMenu;\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up menu\r\n\t\t\tif ($type.hasValue(config.menu) && !$type.hasValue(config.menu.type)) {\r\n\t\t\t\tconfig.menu.type = \"ExportMenu\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.dataFields) && $type.isObject(config.dataFields)) {\r\n\t\t\t\tthis.dataFields = config.dataFields;\r\n\t\t\t\tdelete config.dataFields;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}