{"ast":null,"code":"/**\r\n * Polyspline (smoothed line) module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Polyline } from \"./Polyline\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a polysline. (smoothed multi-sigment line)\r\n *\r\n * @see {@link IPolysplineEvents} for a list of available events\r\n * @see {@link IPolysplineAdapters} for a list of available Adapters\r\n */\n\nvar Polyspline =\n/** @class */\nfunction (_super) {\n  __extends(Polyspline, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Polyspline() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Polyspline\";\n    _this.tensionX = 0.5;\n    _this.tensionY = 0.5;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Creats and adds an SVG path for the arc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Polyspline.prototype.makePath = function () {\n    this._distance = 0;\n    var segments = this.segments;\n    var tensionX = this.tensionX;\n    var tensionY = this.tensionY;\n    this.allPoints = [];\n\n    if (segments && segments.length > 0) {\n      var path = \"\";\n      this._realSegments = [];\n\n      for (var i = 0, len = segments.length; i < len; i++) {\n        var points = segments[i];\n        var realPoints = [];\n\n        this._realSegments.push(realPoints);\n\n        if (points.length > 0) {\n          var first = points[0];\n          var last = points[points.length - 1];\n          var closed_1 = false;\n\n          if ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\n            closed_1 = true;\n          }\n\n          path += $path.moveTo(points[0]);\n\n          for (var p = 0; p < points.length - 1; p++) {\n            var p0 = points[p - 1];\n            var p1 = points[p];\n            var p2 = points[p + 1];\n            var p3 = points[p + 2];\n\n            if (p === 0) {\n              p0 = points[p];\n            } else if (p == points.length - 2) {\n              p3 = points[p + 1];\n            }\n\n            if (!p3) {\n              p3 = p2;\n            }\n\n            if (p === 0) {\n              if (closed_1) {\n                p0 = points[points.length - 2];\n              } else {\n                p0 = points[i];\n              }\n            } else if (p == points.length - 2) {\n              if (closed_1) {\n                p3 = points[1];\n              } else {\n                p3 = points[p + 1];\n              }\n            }\n\n            var controlPointA = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\n            var controlPointB = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\n            path += $path.cubicCurveTo(p2, controlPointA, controlPointB); // now split to small segments so that we could have positionToPoint later\n\n            var stepCount = Math.ceil($math.getCubicCurveDistance(p1, p2, controlPointA, controlPointB, 20)) * 1.2;\n            var prevPoint = p1;\n\n            if (stepCount > 0) {\n              // not good for curved charts\n              //this.allPoints[0] = { x: points[0].x, y: points[0].y, angle: $math.getAngle(points[0], points[1]) };\n              //realPoints.push(this.allPoints[0]);\n              for (var s = 0; s <= stepCount; s++) {\n                var point = $math.getPointOnCubicCurve(p1, p2, controlPointA, controlPointB, s / stepCount);\n\n                if (point.x == prevPoint.x && point.y == prevPoint.y) {\n                  continue;\n                }\n\n                realPoints.push(point);\n                var angle = $math.round($math.getAngle(prevPoint, point), 5); //this.allPoints.push({ x: point.x, y: point.y, angle: angle });\n\n                this._distance += $math.getDistance(prevPoint, point);\n                this.allPoints[Math.floor(this._distance)] = {\n                  x: point.x,\n                  y: point.y,\n                  angle: angle\n                };\n                prevPoint = point;\n              }\n            } else {\n              realPoints.push(p0);\n            }\n          }\n        }\n\n        var allPoints = this.allPoints;\n\n        if (allPoints.length > 1) {\n          for (var i_1 = 0; i_1 < allPoints.length; i_1++) {\n            if (!allPoints[i_1]) {\n              if (i_1 > 1) {\n                allPoints[i_1] = allPoints[i_1 - 1];\n              } else {\n                for (var k = 1; k < allPoints.length; k++) {\n                  if (allPoints[k]) {\n                    allPoints[i_1] = allPoints[k];\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.path = path;\n    }\n  };\n  /**\r\n   * Returns an index of the point that is closest to specified coordinates.\r\n   *\r\n   * @param   point  Reference point\r\n   * @return         Index\r\n   */\n\n\n  Polyspline.prototype.getClosestPointIndex = function (point) {\n    var points = this.allPoints;\n    var index;\n    var closest = Infinity;\n\n    if (points.length > 1) {\n      for (var p = 1; p < points.length; p++) {\n        var distance = $math.getDistance(point, points[p]);\n\n        if (distance < closest) {\n          index = p;\n          closest = distance;\n        }\n      }\n    }\n\n    return index;\n  };\n\n  Object.defineProperty(Polyspline.prototype, \"tensionX\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tensionX\");\n    },\n\n    /**\r\n     * Horizontal tension for the spline.\r\n     *\r\n     * Used by the line smoothing algorithm.\r\n     *\r\n     * @default 0.5\r\n     * @param value  Tension\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tensionX\", value);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Polyspline.prototype, \"tensionY\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tensionY\");\n    },\n\n    /**\r\n     * Vertical tension for the spline.\r\n     *\r\n     * Used by the line smoothing algorithm.\r\n     *\r\n     * @default 0.5\r\n     * @param value  Tensions\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tensionY\", value, true);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n\n  Polyspline.prototype.positionToPoint = function (position, extend) {\n    var deltaAngle = 0;\n    var allPoints = this.allPoints;\n    var len = allPoints.length;\n\n    if (!$type.isNumber(position)) {\n      position = 0;\n    }\n\n    if (len > 1) {\n      if (extend && len > 3) {\n        if (position < 0) {\n          if (position < -0.01) {\n            position = -0.01;\n          }\n\n          var f0 = allPoints[0];\n          var f1 = allPoints[1];\n          var x = f0.x - (f0.x - f1.x) * len * position;\n          var y = f0.y - (f0.y - f1.y) * len * position;\n          return {\n            x: x,\n            y: y,\n            angle: $math.getAngle(f0, f1)\n          };\n        } else if (position > 1) {\n          if (position > 1.01) {\n            position = 1.01;\n          }\n\n          var f0 = allPoints[allPoints.length - 2];\n          var f1 = allPoints[allPoints.length - 3];\n          var x = f0.x + (f0.x - f1.x) * len * (position - 1);\n          var y = f0.y + (f0.y - f1.y) * len * (position - 1);\n          return {\n            x: x,\n            y: y,\n            angle: $math.getAngle(f0, {\n              x: x,\n              y: y\n            })\n          };\n        } else if (position == 1) {\n          var point_1 = allPoints[allPoints.length - 1];\n          return {\n            x: point_1.x,\n            y: point_1.y,\n            angle: point_1.angle\n          };\n        }\n      } else {\n        if (position < 0) {\n          position = Math.abs(position);\n          deltaAngle = 180;\n        }\n\n        if (position >= 1) {\n          position = 0.9999999999999;\n        }\n      }\n\n      var point = allPoints[Math.floor(position * len)];\n      return {\n        x: point.x,\n        y: point.y,\n        angle: point.angle + deltaAngle\n      };\n    } else if (len == 1) {\n      var point = allPoints[0];\n      return {\n        x: point.x,\n        y: point.y,\n        angle: point.angle\n      };\n    } else {\n      return {\n        x: 0,\n        y: 0,\n        angle: 0\n      };\n    }\n  };\n\n  return Polyspline;\n}(Polyline);\n\nexport { Polyspline };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Polyspline\"] = Polyspline;","map":{"version":3,"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAASA,QAAT,QAAkF,YAAlF;AAEA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,2BAAvB;AAgDA;;;;;;;AAOA;;;;;;;AAMA;AAAA;AAAA;AAAgCC;AA0B/B;;;;;AAGA;AAAA,gBACCC,qBAAO,IADR;;AAECC,SAAI,CAACC,SAAL,GAAiB,YAAjB;AAEAD,SAAI,CAACE,QAAL,GAAgB,GAAhB;AACAF,SAAI,CAACG,QAAL,GAAgB,GAAhB;;AAEAH,SAAI,CAACI,UAAL;;;AACA;AAED;;;;;;;AAKOC,kCAAP;AACC,SAAKC,SAAL,GAAiB,CAAjB;AACA,QAAIC,QAAQ,GAAG,KAAKA,QAApB;AAEA,QAAIL,QAAQ,GAAW,KAAKA,QAA5B;AACA,QAAIC,QAAQ,GAAW,KAAKA,QAA5B;AAEA,SAAKK,SAAL,GAAiB,EAAjB;;AAEA,QAAID,QAAQ,IAAIA,QAAQ,CAACE,MAAT,GAAkB,CAAlC,EAAqC;AACpC,UAAIC,IAAI,GAAW,EAAnB;AACA,WAAKC,aAAL,GAAqB,EAArB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGN,QAAQ,CAACE,MAA/B,EAAuCG,CAAC,GAAGC,GAA3C,EAAgDD,CAAC,EAAjD,EAAqD;AACpD,YAAIE,MAAM,GAAaP,QAAQ,CAACK,CAAD,CAA/B;AACA,YAAIG,UAAU,GAAa,EAA3B;;AACA,aAAKJ,aAAL,CAAmBK,IAAnB,CAAwBD,UAAxB;;AAEA,YAAID,MAAM,CAACL,MAAP,GAAgB,CAApB,EAAuB;AAEtB,cAAIQ,KAAK,GAAWH,MAAM,CAAC,CAAD,CAA1B;AACA,cAAII,IAAI,GAAWJ,MAAM,CAACA,MAAM,CAACL,MAAP,GAAgB,CAAjB,CAAzB;AAEA,cAAIU,QAAM,GAAY,KAAtB;;AAEA,cAAIxB,KAAK,CAACyB,KAAN,CAAYH,KAAK,CAACI,CAAlB,EAAqB,CAArB,KAA2B1B,KAAK,CAACyB,KAAN,CAAYF,IAAI,CAACG,CAAjB,CAA3B,IAAkD1B,KAAK,CAACyB,KAAN,CAAYH,KAAK,CAACK,CAAlB,KAAwB3B,KAAK,CAACyB,KAAN,CAAYF,IAAI,CAACI,CAAjB,CAA9E,EAAmG;AAClGH,oBAAM,GAAG,IAAT;AACA;;AAEDT,cAAI,IAAIb,KAAK,CAAC0B,MAAN,CAAaT,MAAM,CAAC,CAAD,CAAnB,CAAR;;AAEA,eAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,MAAM,CAACL,MAAP,GAAgB,CAApC,EAAuCe,CAAC,EAAxC,EAA4C;AAE3C,gBAAIC,EAAE,GAAWX,MAAM,CAACU,CAAC,GAAG,CAAL,CAAvB;AAEA,gBAAIE,EAAE,GAAWZ,MAAM,CAACU,CAAD,CAAvB;AAEA,gBAAIG,EAAE,GAAWb,MAAM,CAACU,CAAC,GAAG,CAAL,CAAvB;AAEA,gBAAII,EAAE,GAAWd,MAAM,CAACU,CAAC,GAAG,CAAL,CAAvB;;AAEA,gBAAIA,CAAC,KAAK,CAAV,EAAa;AACZC,gBAAE,GAAGX,MAAM,CAACU,CAAD,CAAX;AACA,aAFD,MAEO,IAAIA,CAAC,IAAIV,MAAM,CAACL,MAAP,GAAgB,CAAzB,EAA4B;AAClCmB,gBAAE,GAAGd,MAAM,CAACU,CAAC,GAAG,CAAL,CAAX;AACA;;AAED,gBAAI,CAACI,EAAL,EAAS;AACRA,gBAAE,GAAGD,EAAL;AACA;;AAED,gBAAIH,CAAC,KAAK,CAAV,EAAa;AACZ,kBAAIL,QAAJ,EAAY;AACXM,kBAAE,GAAGX,MAAM,CAACA,MAAM,CAACL,MAAP,GAAgB,CAAjB,CAAX;AACA,eAFD,MAGK;AACJgB,kBAAE,GAAGX,MAAM,CAACF,CAAD,CAAX;AACA;AACD,aAPD,MAOO,IAAIY,CAAC,IAAIV,MAAM,CAACL,MAAP,GAAgB,CAAzB,EAA4B;AAClC,kBAAIU,QAAJ,EAAY;AACXS,kBAAE,GAAGd,MAAM,CAAC,CAAD,CAAX;AACA,eAFD,MAGK;AACJc,kBAAE,GAAGd,MAAM,CAACU,CAAC,GAAG,CAAL,CAAX;AACA;AACD;;AAED,gBAAIK,aAAa,GAAWlC,KAAK,CAACmC,qBAAN,CAA4BL,EAA5B,EAAgCC,EAAhC,EAAoCC,EAApC,EAAwCC,EAAxC,EAA4C1B,QAA5C,EAAsDC,QAAtD,CAA5B;AACA,gBAAI4B,aAAa,GAAWpC,KAAK,CAACqC,qBAAN,CAA4BP,EAA5B,EAAgCC,EAAhC,EAAoCC,EAApC,EAAwCC,EAAxC,EAA4C1B,QAA5C,EAAsDC,QAAtD,CAA5B;AAEAO,gBAAI,IAAIb,KAAK,CAACoC,YAAN,CAAmBN,EAAnB,EAAuBE,aAAvB,EAAsCE,aAAtC,CAAR,CAvC2C,CAyC3C;;AACA,gBAAIG,SAAS,GAAWC,IAAI,CAACC,IAAL,CAAUzC,KAAK,CAAC0C,qBAAN,CAA4BX,EAA5B,EAAgCC,EAAhC,EAAoCE,aAApC,EAAmDE,aAAnD,EAAkE,EAAlE,CAAV,IAAmF,GAA3G;AACA,gBAAIO,SAAS,GAAWZ,EAAxB;;AAGA,gBAAIQ,SAAS,GAAG,CAAhB,EAAmB;AAElB;AACA;AACA;AAGA,mBAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,SAArB,EAAgCK,CAAC,EAAjC,EAAqC;AAEpC,oBAAIC,KAAK,GAAG7C,KAAK,CAAC8C,oBAAN,CAA2Bf,EAA3B,EAA+BC,EAA/B,EAAmCE,aAAnC,EAAkDE,aAAlD,EAAiEQ,CAAC,GAAGL,SAArE,CAAZ;;AAEA,oBAAIM,KAAK,CAACnB,CAAN,IAAWiB,SAAS,CAACjB,CAArB,IAA0BmB,KAAK,CAAClB,CAAN,IAAWgB,SAAS,CAAChB,CAAnD,EAAsD;AACrD;AACA;;AAEDP,0BAAU,CAACC,IAAX,CAAgBwB,KAAhB;AAEA,oBAAIE,KAAK,GAAG/C,KAAK,CAACyB,KAAN,CAAYzB,KAAK,CAACgD,QAAN,CAAeL,SAAf,EAA0BE,KAA1B,CAAZ,EAA8C,CAA9C,CAAZ,CAVoC,CAYpC;;AACA,qBAAKlC,SAAL,IAAkBX,KAAK,CAACiD,WAAN,CAAkBN,SAAlB,EAA6BE,KAA7B,CAAlB;AAEA,qBAAKhC,SAAL,CAAe2B,IAAI,CAACU,KAAL,CAAW,KAAKvC,SAAhB,CAAf,IAA6C;AAAEe,mBAAC,EAAEmB,KAAK,CAACnB,CAAX;AAAcC,mBAAC,EAAEkB,KAAK,CAAClB,CAAvB;AAA0BoB,uBAAK,EAAEA;AAAjC,iBAA7C;AACAJ,yBAAS,GAAGE,KAAZ;AACA;AACD,aAzBD,MA0BK;AACJzB,wBAAU,CAACC,IAAX,CAAgBS,EAAhB;AACA;AACD;AACD;;AAED,YAAIjB,SAAS,GAAG,KAAKA,SAArB;;AACA,YAAIA,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACzB,eAAK,IAAIqC,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGtC,SAAS,CAACC,MAA9B,EAAsCqC,GAAC,EAAvC,EAA2C;AAC1C,gBAAI,CAACtC,SAAS,CAACsC,GAAD,CAAd,EAAmB;AAClB,kBAAIA,GAAC,GAAG,CAAR,EAAW;AACVtC,yBAAS,CAACsC,GAAD,CAAT,GAAetC,SAAS,CAACsC,GAAC,GAAG,CAAL,CAAxB;AACA,eAFD,MAGK;AACJ,qBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvC,SAAS,CAACC,MAA9B,EAAsCsC,CAAC,EAAvC,EAA2C;AAC1C,sBAAIvC,SAAS,CAACuC,CAAD,CAAb,EAAkB;AACjBvC,6BAAS,CAACsC,GAAD,CAAT,GAAetC,SAAS,CAACuC,CAAD,CAAxB;AACA;AACA;AACD;AACD;AACD;AACD;AACD;AACD;;AAED,WAAKrC,IAAL,GAAYA,IAAZ;AACA;AACD,GAnIM;AAqIP;;;;;;;;AAMOL,8CAAP,UAA4BmC,KAA5B,EAAyC;AACxC,QAAI1B,MAAM,GAAG,KAAKN,SAAlB;AAEA,QAAIwC,KAAJ;AAEA,QAAIC,OAAO,GAAWC,QAAtB;;AACA,QAAIpC,MAAM,CAACL,MAAP,GAAgB,CAApB,EAAuB;AACtB,WAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,MAAM,CAACL,MAA3B,EAAmCe,CAAC,EAApC,EAAwC;AACvC,YAAI2B,QAAQ,GAAGxD,KAAK,CAACiD,WAAN,CAAkBJ,KAAlB,EAAyB1B,MAAM,CAACU,CAAD,CAA/B,CAAf;;AACA,YAAI2B,QAAQ,GAAGF,OAAf,EAAwB;AACvBD,eAAK,GAAGxB,CAAR;AACAyB,iBAAO,GAAGE,QAAV;AACA;AACD;AACD;;AAED,WAAOH,KAAP;AACA,GAjBM;;AA2BPI,wBAAW/C,oBAAX,EAAW,UAAX,EAAmB;AAKnB;;;SAGA;AACC,aAAO,KAAKgD,gBAAL,CAAsB,UAAtB,CAAP;AACA,KAVkB;;AARnB;;;;;;;;SAQA,UAAoBC,KAApB,EAAiC;AAChC,WAAKC,gBAAL,CAAsB,UAAtB,EAAkCD,KAAlC;AACA,WAAKE,QAAL;AACA,KAHkB;oBAAA;;AAAA,GAAnB;AAoBAJ,wBAAW/C,oBAAX,EAAW,UAAX,EAAmB;AAKnB;;;SAGA;AACC,aAAO,KAAKgD,gBAAL,CAAsB,UAAtB,CAAP;AACA,KAVkB;;AARnB;;;;;;;;SAQA,UAAoBC,KAApB,EAAiC;AAChC,WAAKC,gBAAL,CAAsB,UAAtB,EAAkCD,KAAlC,EAAyC,IAAzC;AACA,WAAKE,QAAL;AACA,KAHkB;oBAAA;;AAAA,GAAnB;AAYA;;;;;;;AAOOnD,yCAAP,UAAuBoD,QAAvB,EAAyCC,MAAzC,EAAyD;AAExD,QAAIC,UAAU,GAAW,CAAzB;AAEA,QAAInD,SAAS,GAAG,KAAKA,SAArB;AACA,QAAIK,GAAG,GAAGL,SAAS,CAACC,MAApB;;AAEA,QAAI,CAACb,KAAK,CAACgE,QAAN,CAAeH,QAAf,CAAL,EAA+B;AAC9BA,cAAQ,GAAG,CAAX;AACA;;AAED,QAAI5C,GAAG,GAAG,CAAV,EAAa;AAEZ,UAAI6C,MAAM,IAAI7C,GAAG,GAAG,CAApB,EAAuB;AACtB,YAAI4C,QAAQ,GAAG,CAAf,EAAkB;AAEjB,cAAIA,QAAQ,GAAG,CAAC,IAAhB,EAAsB;AACrBA,oBAAQ,GAAG,CAAC,IAAZ;AACA;;AAED,cAAII,EAAE,GAAGrD,SAAS,CAAC,CAAD,CAAlB;AACA,cAAIsD,EAAE,GAAGtD,SAAS,CAAC,CAAD,CAAlB;AAEA,cAAIa,CAAC,GAAGwC,EAAE,CAACxC,CAAH,GAAO,CAACwC,EAAE,CAACxC,CAAH,GAAOyC,EAAE,CAACzC,CAAX,IAAgBR,GAAhB,GAAsB4C,QAArC;AACA,cAAInC,CAAC,GAAGuC,EAAE,CAACvC,CAAH,GAAO,CAACuC,EAAE,CAACvC,CAAH,GAAOwC,EAAE,CAACxC,CAAX,IAAgBT,GAAhB,GAAsB4C,QAArC;AAEA,iBAAO;AAAEpC,aAAC,EAAEA,CAAL;AAAQC,aAAC,EAAEA,CAAX;AAAcoB,iBAAK,EAAE/C,KAAK,CAACgD,QAAN,CAAekB,EAAf,EAAmBC,EAAnB;AAArB,WAAP;AACA,SAbD,MAcK,IAAIL,QAAQ,GAAG,CAAf,EAAkB;AAEtB,cAAIA,QAAQ,GAAG,IAAf,EAAqB;AACpBA,oBAAQ,GAAG,IAAX;AACA;;AAED,cAAII,EAAE,GAAGrD,SAAS,CAACA,SAAS,CAACC,MAAV,GAAmB,CAApB,CAAlB;AACA,cAAIqD,EAAE,GAAGtD,SAAS,CAACA,SAAS,CAACC,MAAV,GAAmB,CAApB,CAAlB;AAEA,cAAIY,CAAC,GAAGwC,EAAE,CAACxC,CAAH,GAAO,CAACwC,EAAE,CAACxC,CAAH,GAAOyC,EAAE,CAACzC,CAAX,IAAgBR,GAAhB,IAAuB4C,QAAQ,GAAG,CAAlC,CAAf;AACA,cAAInC,CAAC,GAAGuC,EAAE,CAACvC,CAAH,GAAO,CAACuC,EAAE,CAACvC,CAAH,GAAOwC,EAAE,CAACxC,CAAX,IAAgBT,GAAhB,IAAuB4C,QAAQ,GAAG,CAAlC,CAAf;AAEA,iBAAO;AAAEpC,aAAC,EAAEA,CAAL;AAAQC,aAAC,EAAEA,CAAX;AAAcoB,iBAAK,EAAE/C,KAAK,CAACgD,QAAN,CAAekB,EAAf,EAAmB;AAAExC,eAAC,EAAEA,CAAL;AAAQC,eAAC,EAAEA;AAAX,aAAnB;AAArB,WAAP;AACA,SAbI,MAcA,IAAImC,QAAQ,IAAI,CAAhB,EAAmB;AACvB,cAAIM,OAAK,GAAGvD,SAAS,CAACA,SAAS,CAACC,MAAV,GAAmB,CAApB,CAArB;AACA,iBAAO;AAAEY,aAAC,EAAE0C,OAAK,CAAC1C,CAAX;AAAcC,aAAC,EAAEyC,OAAK,CAACzC,CAAvB;AAA0BoB,iBAAK,EAAEqB,OAAK,CAACrB;AAAvC,WAAP;AACA;AACD,OAjCD,MAkCK;AACJ,YAAIe,QAAQ,GAAG,CAAf,EAAkB;AACjBA,kBAAQ,GAAGtB,IAAI,CAAC6B,GAAL,CAASP,QAAT,CAAX;AACAE,oBAAU,GAAG,GAAb;AACA;;AAED,YAAIF,QAAQ,IAAI,CAAhB,EAAmB;AAClBA,kBAAQ,GAAG,eAAX;AACA;AACD;;AAGD,UAAIjB,KAAK,GAAGhC,SAAS,CAAC2B,IAAI,CAACU,KAAL,CAAWY,QAAQ,GAAG5C,GAAtB,CAAD,CAArB;AACA,aAAO;AAAEQ,SAAC,EAAEmB,KAAK,CAACnB,CAAX;AAAcC,SAAC,EAAEkB,KAAK,CAAClB,CAAvB;AAA0BoB,aAAK,EAAEF,KAAK,CAACE,KAAN,GAAciB;AAA/C,OAAP;AACA,KAlDD,MAmDK,IAAI9C,GAAG,IAAI,CAAX,EAAc;AAClB,UAAI2B,KAAK,GAAGhC,SAAS,CAAC,CAAD,CAArB;AACA,aAAO;AAAEa,SAAC,EAAEmB,KAAK,CAACnB,CAAX;AAAcC,SAAC,EAAEkB,KAAK,CAAClB,CAAvB;AAA0BoB,aAAK,EAAEF,KAAK,CAACE;AAAvC,OAAP;AACA,KAHI,MAIA;AACJ,aAAO;AAAErB,SAAC,EAAE,CAAL;AAAQC,SAAC,EAAE,CAAX;AAAcoB,aAAK,EAAE;AAArB,OAAP;AACA;AACD,GArEM;;AAsER;AA/TA,EAAgCjD,QAAhC;;;AAiUA;;;;;;;AAMAC,QAAQ,CAACuE,iBAAT,CAA2B,YAA3B,IAA2C5D,UAA3C","names":["Polyline","registry","$math","$type","$path","__extends","_super","_this","className","tensionX","tensionY","applyTheme","Polyspline","_distance","segments","allPoints","length","path","_realSegments","i","len","points","realPoints","push","first","last","closed_1","round","x","y","moveTo","p","p0","p1","p2","p3","controlPointA","getCubicControlPointA","controlPointB","getCubicControlPointB","cubicCurveTo","stepCount","Math","ceil","getCubicCurveDistance","prevPoint","s","point","getPointOnCubicCurve","angle","getAngle","getDistance","floor","i_1","k","index","closest","Infinity","distance","Object","getPropertyValue","value","setPropertyValue","makePath","position","extend","deltaAngle","isNumber","f0","f1","point_1","abs","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/core/elements/Polyspline.ts"],"sourcesContent":["/**\r\n * Polyspline (smoothed line) module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Polyline, IPolylineProperties, IPolylineAdapters, IPolylineEvents } from \"./Polyline\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Polyspline]].\r\n */\r\nexport interface IPolysplineProperties extends IPolylineProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension for the spline.\r\n\t *\r\n\t * Used by the line smoothing algorithm.\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\ttensionX: number;\r\n\r\n\t/**\r\n\t * Vertical tension for the spline.\r\n\t *\r\n\t * Used by the line smoothing algorithm.\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\ttensionY: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Polyspline]].\r\n */\r\nexport interface IPolysplineEvents extends IPolylineEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPolysplineAdapters extends IPolylineAdapters, IPolysplineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a polysline. (smoothed multi-sigment line)\r\n *\r\n * @see {@link IPolysplineEvents} for a list of available events\r\n * @see {@link IPolysplineAdapters} for a list of available Adapters\r\n */\r\nexport class Polyspline extends Polyline {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _properties!: IPolysplineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _adapter!: IPolysplineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPolysplineEvents;\r\n\r\n\t/**\r\n\t * Array of points of a spline with 1 px increment. used to get point by position\r\n\t */\r\n\tpublic allPoints: IOrientationPoint[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Polyspline\";\r\n\r\n\t\tthis.tensionX = 0.5;\r\n\t\tthis.tensionY = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creats and adds an SVG path for the arc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic makePath(): void {\r\n\t\tthis._distance = 0;\r\n\t\tlet segments = this.segments;\r\n\r\n\t\tlet tensionX: number = this.tensionX;\r\n\t\tlet tensionY: number = this.tensionY;\r\n\r\n\t\tthis.allPoints = [];\r\n\r\n\t\tif (segments && segments.length > 0) {\r\n\t\t\tlet path: string = \"\";\r\n\t\t\tthis._realSegments = [];\r\n\r\n\t\t\tfor (let i = 0, len = segments.length; i < len; i++) {\r\n\t\t\t\tlet points: IPoint[] = segments[i];\r\n\t\t\t\tlet realPoints: IPoint[] = [];\r\n\t\t\t\tthis._realSegments.push(realPoints);\r\n\r\n\t\t\t\tif (points.length > 0) {\r\n\r\n\t\t\t\t\tlet first: IPoint = points[0];\r\n\t\t\t\t\tlet last: IPoint = points[points.length - 1];\r\n\r\n\t\t\t\t\tlet closed: boolean = false;\r\n\r\n\t\t\t\t\tif ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\r\n\t\t\t\t\t\tclosed = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpath += $path.moveTo(points[0]);\r\n\r\n\t\t\t\t\tfor (let p = 0; p < points.length - 1; p++) {\r\n\r\n\t\t\t\t\t\tlet p0: IPoint = points[p - 1];\r\n\r\n\t\t\t\t\t\tlet p1: IPoint = points[p];\r\n\r\n\t\t\t\t\t\tlet p2: IPoint = points[p + 1];\r\n\r\n\t\t\t\t\t\tlet p3: IPoint = points[p + 2];\r\n\r\n\t\t\t\t\t\tif (p === 0) {\r\n\t\t\t\t\t\t\tp0 = points[p];\r\n\t\t\t\t\t\t} else if (p == points.length - 2) {\r\n\t\t\t\t\t\t\tp3 = points[p + 1];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!p3) {\r\n\t\t\t\t\t\t\tp3 = p2;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (p === 0) {\r\n\t\t\t\t\t\t\tif (closed) {\r\n\t\t\t\t\t\t\t\tp0 = points[points.length - 2];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tp0 = points[i];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (p == points.length - 2) {\r\n\t\t\t\t\t\t\tif (closed) {\r\n\t\t\t\t\t\t\t\tp3 = points[1];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tp3 = points[p + 1];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet controlPointA: IPoint = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\r\n\t\t\t\t\t\tlet controlPointB: IPoint = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\r\n\r\n\t\t\t\t\t\tpath += $path.cubicCurveTo(p2, controlPointA, controlPointB);\r\n\r\n\t\t\t\t\t\t// now split to small segments so that we could have positionToPoint later\r\n\t\t\t\t\t\tlet stepCount: number = Math.ceil($math.getCubicCurveDistance(p1, p2, controlPointA, controlPointB, 20)) * 1.2;\r\n\t\t\t\t\t\tlet prevPoint: IPoint = p1;\r\n\r\n\r\n\t\t\t\t\t\tif (stepCount > 0) {\r\n\r\n\t\t\t\t\t\t\t// not good for curved charts\r\n\t\t\t\t\t\t\t//this.allPoints[0] = { x: points[0].x, y: points[0].y, angle: $math.getAngle(points[0], points[1]) };\r\n\t\t\t\t\t\t\t//realPoints.push(this.allPoints[0]);\r\n\r\n\r\n\t\t\t\t\t\t\tfor (let s = 0; s <= stepCount; s++) {\r\n\r\n\t\t\t\t\t\t\t\tlet point = $math.getPointOnCubicCurve(p1, p2, controlPointA, controlPointB, s / stepCount);\r\n\r\n\t\t\t\t\t\t\t\tif (point.x == prevPoint.x && point.y == prevPoint.y) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\trealPoints.push(point);\r\n\r\n\t\t\t\t\t\t\t\tlet angle = $math.round($math.getAngle(prevPoint, point), 5);\r\n\r\n\t\t\t\t\t\t\t\t//this.allPoints.push({ x: point.x, y: point.y, angle: angle });\r\n\t\t\t\t\t\t\t\tthis._distance += $math.getDistance(prevPoint, point);\r\n\r\n\t\t\t\t\t\t\t\tthis.allPoints[Math.floor(this._distance)] = { x: point.x, y: point.y, angle: angle };\r\n\t\t\t\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\trealPoints.push(p0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet allPoints = this.allPoints;\r\n\t\t\t\tif (allPoints.length > 1) {\r\n\t\t\t\t\tfor (let i = 0; i < allPoints.length; i++) {\r\n\t\t\t\t\t\tif (!allPoints[i]) {\r\n\t\t\t\t\t\t\tif (i > 1) {\r\n\t\t\t\t\t\t\t\tallPoints[i] = allPoints[i - 1];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tfor (let k = 1; k < allPoints.length; k++) {\r\n\t\t\t\t\t\t\t\t\tif (allPoints[k]) {\r\n\t\t\t\t\t\t\t\t\t\tallPoints[i] = allPoints[k];\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the point that is closest to specified coordinates.\r\n\t * \r\n\t * @param   point  Reference point\r\n\t * @return         Index\r\n\t */\r\n\tpublic getClosestPointIndex(point: IPoint): number {\r\n\t\tlet points = this.allPoints;\r\n\r\n\t\tlet index: number;\r\n\r\n\t\tlet closest: number = Infinity;\r\n\t\tif (points.length > 1) {\r\n\t\t\tfor (let p = 1; p < points.length; p++) {\r\n\t\t\t\tlet distance = $math.getDistance(point, points[p]);\r\n\t\t\t\tif (distance < closest) {\r\n\t\t\t\t\tindex = p;\r\n\t\t\t\t\tclosest = distance;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension for the spline.\r\n\t *\r\n\t * Used by the line smoothing algorithm.\r\n\t *\r\n\t * @default 0.5\r\n\t * @param value  Tension\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical tension for the spline.\r\n\t *\r\n\t * Used by the line smoothing algorithm.\r\n\t *\r\n\t * @default 0.5\r\n\t * @param value  Tensions\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\r\n\tpublic positionToPoint(position: number, extend?: boolean): IOrientationPoint {\r\n\r\n\t\tlet deltaAngle: number = 0;\r\n\r\n\t\tlet allPoints = this.allPoints;\r\n\t\tlet len = allPoints.length;\r\n\r\n\t\tif (!$type.isNumber(position)) {\r\n\t\t\tposition = 0;\r\n\t\t}\r\n\r\n\t\tif (len > 1) {\r\n\r\n\t\t\tif (extend && len > 3) {\r\n\t\t\t\tif (position < 0) {\r\n\r\n\t\t\t\t\tif (position < -0.01) {\r\n\t\t\t\t\t\tposition = -0.01;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet f0 = allPoints[0];\r\n\t\t\t\t\tlet f1 = allPoints[1];\r\n\r\n\t\t\t\t\tlet x = f0.x - (f0.x - f1.x) * len * position;\r\n\t\t\t\t\tlet y = f0.y - (f0.y - f1.y) * len * position;\r\n\r\n\t\t\t\t\treturn { x: x, y: y, angle: $math.getAngle(f0, f1) };\r\n\t\t\t\t}\r\n\t\t\t\telse if (position > 1) {\r\n\r\n\t\t\t\t\tif (position > 1.01) {\r\n\t\t\t\t\t\tposition = 1.01;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet f0 = allPoints[allPoints.length - 2];\r\n\t\t\t\t\tlet f1 = allPoints[allPoints.length - 3];\r\n\r\n\t\t\t\t\tlet x = f0.x + (f0.x - f1.x) * len * (position - 1);\r\n\t\t\t\t\tlet y = f0.y + (f0.y - f1.y) * len * (position - 1);\r\n\r\n\t\t\t\t\treturn { x: x, y: y, angle: $math.getAngle(f0, { x: x, y: y }) };\r\n\t\t\t\t}\r\n\t\t\t\telse if (position == 1) {\r\n\t\t\t\t\tlet point = allPoints[allPoints.length - 1]\r\n\t\t\t\t\treturn { x: point.x, y: point.y, angle: point.angle };\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (position < 0) {\r\n\t\t\t\t\tposition = Math.abs(position);\r\n\t\t\t\t\tdeltaAngle = 180;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (position >= 1) {\r\n\t\t\t\t\tposition = 0.9999999999999;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet point = allPoints[Math.floor(position * len)];\r\n\t\t\treturn { x: point.x, y: point.y, angle: point.angle + deltaAngle };\r\n\t\t}\r\n\t\telse if (len == 1) {\r\n\t\t\tlet point = allPoints[0];\r\n\t\t\treturn { x: point.x, y: point.y, angle: point.angle };\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyspline\"] = Polyspline;\r\n"]},"metadata":{},"sourceType":"module"}