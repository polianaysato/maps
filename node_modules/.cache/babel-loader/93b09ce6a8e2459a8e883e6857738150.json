{"ast":null,"code":"/**\r\n * Pointed shape module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a shape with a pointer.\r\n *\r\n * @see {@link IPointedShapeEvents} for a list of available events\r\n * @see {@link IPointedShapeAdapters} for a list of available Adapters\r\n */\n\nvar PointedShape =\n/** @class */\nfunction (_super) {\n  __extends(PointedShape, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PointedShape() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PointedShape\";\n    _this.pointerBaseWidth = 15;\n    _this.pointerLength = 10;\n    _this.pointerY = 0;\n    _this.pointerX = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PointedShape.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (!$type.isNumber(this.pointerX)) {\n      this.pointerX = this.pixelWidth / 2;\n    }\n\n    if (!$type.isNumber(this.pointerY)) {\n      this.pointerY = this.pixelHeight + 10;\n    }\n  };\n\n  Object.defineProperty(PointedShape.prototype, \"pointerBaseWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"pointerBaseWidth\");\n    },\n\n    /**\r\n     * A width of the pinter's (stem's) thick end (base) in pixels.\r\n     *\r\n     * @default 15\r\n     * @param value  Width (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"pointerBaseWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PointedShape.prototype, \"pointerLength\", {\n    /**\r\n     * @return Length (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"pointerLength\");\n    },\n\n    /**\r\n     * A length of the pinter (stem) in pixels.\r\n     *\r\n     * @default 10\r\n     * @param value  Length (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"pointerLength\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PointedShape.prototype, \"pointerX\", {\n    /**\r\n     * @return X\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"pointerX\");\n    },\n\n    /**\r\n     * X coordinate the shape is pointing to.\r\n     *\r\n     * @param value  X\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"pointerX\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PointedShape.prototype, \"pointerY\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"pointerY\");\n    },\n\n    /**\r\n     * Y coordinate the shape is pointing to.\r\n     *\r\n     * @param value  Y\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"pointerY\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PointedShape;\n}(Sprite);\n\nexport { PointedShape };","map":{"version":3,"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAASA,MAAT,QAA0E,WAA1E;AACA,OAAO,KAAKC,KAAZ,MAAuB,eAAvB;AAqDA;;;;;;;AAOA;;;;;;;AAMA;AAAA;AAAA;AAAkCC;AAiBjC;;;;;AAGA;AAAA,gBACCC,qBAAO,IADR;;AAECC,SAAI,CAACC,SAAL,GAAiB,cAAjB;AACAD,SAAI,CAACE,gBAAL,GAAwB,EAAxB;AACAF,SAAI,CAACG,aAAL,GAAqB,EAArB;AACAH,SAAI,CAACI,QAAL,GAAgB,CAAhB;AACAJ,SAAI,CAACK,QAAL,GAAgB,CAAhB;;AAEAL,SAAI,CAACM,UAAL;;;AACA;AAED;;;;;;;AAKOC,gCAAP;AACCR,qBAAMS,IAAN,CAAUC,IAAV,CAAU,IAAV;;AACA,QAAI,CAACZ,KAAK,CAACa,QAAN,CAAe,KAAKL,QAApB,CAAL,EAAoC;AACnC,WAAKA,QAAL,GAAgB,KAAKM,UAAL,GAAkB,CAAlC;AACA;;AACD,QAAI,CAACd,KAAK,CAACa,QAAN,CAAe,KAAKN,QAApB,CAAL,EAAoC;AACnC,WAAKA,QAAL,GAAgB,KAAKQ,WAAL,GAAmB,EAAnC;AACA;AACD,GARM;;AAgBPC,wBAAWN,sBAAX,EAAW,kBAAX,EAA2B;AAqB3B;;;SAGA;AACC,aAAO,KAAKO,gBAAL,CAAsB,kBAAtB,CAAP;AACA,KA1B0B;;AAN3B;;;;;;SAMA,aAA4BC,KAA5B,EAAyC;AACxC,WAAKC,gBAAL,CAAsB,kBAAtB,EAA0CD,KAA1C,EAAiD,IAAjD;AACA,KAF0B;oBAAA;;AAAA,GAA3B;AAUAF,wBAAWN,sBAAX,EAAW,eAAX,EAAwB;AAIxB;;;SAGA;AACC,aAAO,KAAKO,gBAAL,CAAsB,eAAtB,CAAP;AACA,KATuB;;AANxB;;;;;;SAMA,aAAyBC,KAAzB,EAAsC;AACrC,WAAKC,gBAAL,CAAsB,eAAtB,EAAuCD,KAAvC,EAA8C,IAA9C;AACA,KAFuB;oBAAA;;AAAA,GAAxB;AAuBAF,wBAAWN,sBAAX,EAAW,UAAX,EAAmB;AAInB;;;SAGA;AACC,aAAO,KAAKO,gBAAL,CAAsB,UAAtB,CAAP;AACA,KATkB;;AALnB;;;;;SAKA,aAAoBC,KAApB,EAAiC;AAChC,WAAKC,gBAAL,CAAsB,UAAtB,EAAkCD,KAAlC,EAAyC,IAAzC;AACA,KAFkB;oBAAA;;AAAA,GAAnB;AAgBAF,wBAAWN,sBAAX,EAAW,UAAX,EAAmB;AAInB;;;SAGA;AACC,aAAO,KAAKO,gBAAL,CAAsB,UAAtB,CAAP;AACA,KATkB;;AALnB;;;;;SAKA,aAAoBC,KAApB,EAAiC;AAChC,WAAKC,gBAAL,CAAsB,UAAtB,EAAkCD,KAAlC,EAAyC,IAAzC;AACA,KAFkB;oBAAA;;AAAA,GAAnB;AAWD;AAhHA,EAAkCnB,MAAlC","names":["Sprite","$type","__extends","_super","_this","className","pointerBaseWidth","pointerLength","pointerY","pointerX","applyTheme","PointedShape","draw","call","isNumber","pixelWidth","pixelHeight","Object","getPropertyValue","value","setPropertyValue"],"sourceRoot":"","sources":["../../../../../src/.internal/core/elements/PointedShape.ts"],"sourcesContent":["/**\r\n * Pointed shape module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PointedShape]].\r\n */\r\nexport interface IPointedShapeProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * A width of the pinter's (stem's) thick end (base) in pixels.\r\n\t *\r\n\t * @default 15\r\n\t */\r\n\tpointerBaseWidth?: number;\r\n\r\n\t/**\r\n\t * A length of the pinter (stem) in pixels.\r\n\t *\r\n\t * @default 10\r\n\t */\r\n\tpointerLength?: number;\r\n\r\n\t/**\r\n\t * X coordinate the shape is pointing to.\r\n\t */\r\n\tpointerX?: number;\r\n\r\n\t/**\r\n\t * Y coordinate the shape is pointing to.\r\n\t */\r\n\tpointerY?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PointedShape]].\r\n */\r\nexport interface IPointedShapeEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PointedShape]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPointedShapeAdapters extends ISpriteAdapters, IPointedShapeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a shape with a pointer.\r\n *\r\n * @see {@link IPointedShapeEvents} for a list of available events\r\n * @see {@link IPointedShapeAdapters} for a list of available Adapters\r\n */\r\nexport class PointedShape extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPointedShapeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPointedShapeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPointedShapeEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PointedShape\";\r\n\t\tthis.pointerBaseWidth = 15;\r\n\t\tthis.pointerLength = 10;\r\n\t\tthis.pointerY = 0;\r\n\t\tthis.pointerX = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (!$type.isNumber(this.pointerX)) {\r\n\t\t\tthis.pointerX = this.pixelWidth / 2;\r\n\t\t}\r\n\t\tif (!$type.isNumber(this.pointerY)) {\r\n\t\t\tthis.pointerY = this.pixelHeight + 10;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A width of the pinter's (stem's) thick end (base) in pixels.\r\n\t *\r\n\t * @default 15\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set pointerBaseWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"pointerBaseWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A length of the pinter (stem) in pixels.\r\n\t *\r\n\t * @default 10\r\n\t * @param value  Length (px)\r\n\t */\r\n\tpublic set pointerLength(value: number) {\r\n\t\tthis.setPropertyValue(\"pointerLength\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get pointerLength(): number {\r\n\t\treturn this.getPropertyValue(\"pointerLength\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get pointerBaseWidth(): number {\r\n\t\treturn this.getPropertyValue(\"pointerBaseWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate the shape is pointing to.\r\n\t *\r\n\t * @param value  X\r\n\t */\r\n\tpublic set pointerX(value: number) {\r\n\t\tthis.setPropertyValue(\"pointerX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get pointerX(): number {\r\n\t\treturn this.getPropertyValue(\"pointerX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate the shape is pointing to.\r\n\t *\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set pointerY(value: number) {\r\n\t\tthis.setPropertyValue(\"pointerY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get pointerY(): number {\r\n\t\treturn this.getPropertyValue(\"pointerY\");\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}