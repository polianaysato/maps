{"ast":null,"code":"/**\r\n * XY Chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\nimport { Container } from \"../../core/Container\";\nimport { List, ListDisposer } from \"../../core/utils/List\";\nimport { Color } from \"../../core/utils/Color\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { DateAxis } from \"../axes/DateAxis\";\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\nimport { XYSeries } from \"../series/XYSeries\";\nimport { Disposer } from \"../../core/utils/Disposer\";\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $number from \"../../core/utils/Number\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar XYChartDataItem =\n/** @class */\nfunction (_super) {\n  __extends(XYChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"XYChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return XYChartDataItem;\n}(SerialChartDataItem);\n\nexport { XYChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\n\nvar XYChart =\n/** @class */\nfunction (_super) {\n  __extends(XYChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYChart() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Defines the type of horizontal axis rederer.\r\n     */\n\n\n    _this._axisRendererX = AxisRendererX;\n    /**\r\n     * Defines the type of vertical axis rederer.\r\n     */\n\n    _this._axisRendererY = AxisRendererY;\n    /**\r\n     * @ignore\r\n     */\n\n    _this._seriesPoints = [];\n    _this.className = \"XYChart\"; // Set defaults\n    //this.margin(10, 10, 10, 10);\n\n    _this.maskBullets = true;\n    _this.arrangeTooltips = true; // Create main chart container\n\n    var chartContainer = _this.chartContainer;\n    chartContainer.layout = \"vertical\";\n\n    _this.padding(15, 15, 15, 15); // Create top axes container\n\n\n    var topAxesCont = chartContainer.createChild(Container);\n    topAxesCont.shouldClone = false;\n    topAxesCont.layout = \"vertical\";\n    topAxesCont.width = percent(100);\n    topAxesCont.zIndex = 1;\n    _this.topAxesContainer = topAxesCont; // Create vertical axes and plot area container\n    // Plot area and vertical axes share the whole width of the chart,\n    // so we need to put then into a separate container so that layouting\n    // engine takes care of the positioning\n\n    var yAxesAndPlotCont = chartContainer.createChild(Container);\n    yAxesAndPlotCont.shouldClone = false;\n    yAxesAndPlotCont.layout = \"horizontal\";\n    yAxesAndPlotCont.width = percent(100);\n    yAxesAndPlotCont.height = percent(100);\n    yAxesAndPlotCont.zIndex = 0;\n    _this.yAxesAndPlotContainer = yAxesAndPlotCont; // Create a container for bottom axes\n\n    var bottomAxesCont = chartContainer.createChild(Container);\n    bottomAxesCont.shouldClone = false;\n    bottomAxesCont.width = percent(100);\n    bottomAxesCont.layout = \"vertical\";\n    bottomAxesCont.zIndex = 1;\n    _this.bottomAxesContainer = bottomAxesCont; // Create a container for left-side axes\n\n    var leftAxesCont = yAxesAndPlotCont.createChild(Container);\n    leftAxesCont.shouldClone = false;\n    leftAxesCont.layout = \"horizontal\";\n    leftAxesCont.height = percent(100);\n    leftAxesCont.contentAlign = \"right\";\n    leftAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\n    leftAxesCont.zIndex = 1;\n    _this.leftAxesContainer = leftAxesCont; // Create a container for plot area\n\n    var plotCont = yAxesAndPlotCont.createChild(Container);\n    plotCont.shouldClone = false;\n    plotCont.height = percent(100);\n    plotCont.width = percent(100); // Create transparend background for plot container so that hover works\n    // on all of it\n\n    plotCont.background.fillOpacity = 0;\n    _this.plotContainer = plotCont; // must go below plot container\n\n    _this.mouseWheelBehavior = \"none\";\n    _this._cursorContainer = plotCont; // Create a container for right-side axes\n\n    var rightAxesCont = yAxesAndPlotCont.createChild(Container);\n    rightAxesCont.shouldClone = false;\n    rightAxesCont.layout = \"horizontal\";\n    rightAxesCont.height = percent(100);\n    rightAxesCont.zIndex = 1;\n    rightAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\n    _this.rightAxesContainer = rightAxesCont;\n    _this.seriesContainer.parent = plotCont;\n    _this.bulletsContainer.parent = plotCont;\n    var zoomOutButton = plotCont.createChild(ZoomOutButton);\n    zoomOutButton.shouldClone = false;\n    zoomOutButton.align = \"right\";\n    zoomOutButton.valign = \"top\";\n    zoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\n    zoomOutButton.marginTop = 5;\n    zoomOutButton.marginRight = 5;\n    zoomOutButton.hide(0);\n    _this.zoomOutButton = zoomOutButton; // Create a container for bullets\n\n    var axisBulletsContainer = _this.plotContainer.createChild(Container);\n\n    axisBulletsContainer.shouldClone = false;\n    axisBulletsContainer.width = percent(100);\n    axisBulletsContainer.height = percent(100);\n    axisBulletsContainer.isMeasured = false;\n    axisBulletsContainer.zIndex = 4;\n    axisBulletsContainer.layout = \"none\";\n    _this.axisBulletsContainer = axisBulletsContainer;\n    _this._bulletMask = _this.plotContainer;\n\n    _this.events.on(\"beforedatavalidated\", function () {\n      _this.series.each(function (series) {\n        series.dataGrouped = false;\n        series._baseInterval = {};\n      });\n    }, _this, false); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  XYChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    this.zoomOutButton.exportable = false; // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"X/Y chart\");\n    }\n  };\n  /**\r\n   * Draws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    this.seriesContainer.toFront();\n    this.bulletsContainer.toFront();\n\n    if (this.maskBullets) {\n      this.bulletsContainer.mask = this._bulletMask;\n    }\n\n    this.updateSeriesLegend();\n  };\n  /**\r\n   * Triggers a redrawing of all chart's series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.updatePlotElements = function () {\n    $iter.each(this.series.iterator(), function (series) {\n      series.invalidate();\n    });\n  };\n  /**\r\n   * Triggers data (re)validation which in turn can cause a redraw of the\r\n   * whole chart or just aprticular series / elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.validateData = function () {\n    // tell axes that data changed\n    if (this._parseDataFrom == 0) {\n      $iter.each(this.xAxes.iterator(), function (axis) {\n        axis.dataChangeUpdate();\n      });\n      $iter.each(this.yAxes.iterator(), function (axis) {\n        axis.dataChangeUpdate();\n      });\n      $iter.each(this.series.iterator(), function (series) {\n        series.dataChangeUpdate();\n      });\n    }\n\n    _super.prototype.validateData.call(this);\n  };\n  /**\r\n   * Updates margins for horizontal axes based on settings and available space.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.updateXAxesMargins = function () {\n    var leftAxesWidth = this.leftAxesContainer.measuredWidth;\n    var rightAxesWidth = this.rightAxesContainer.measuredWidth;\n    var bottomAxesCont = this.bottomAxesContainer;\n\n    if (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\n      bottomAxesCont.paddingLeft = leftAxesWidth;\n      bottomAxesCont.paddingRight = rightAxesWidth;\n    }\n\n    var topAxesCont = this.topAxesContainer;\n\n    if (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\n      topAxesCont.paddingLeft = leftAxesWidth;\n      topAxesCont.paddingRight = rightAxesWidth;\n    }\n  };\n  /**\r\n   * Triggers a re-initialization of this element.\r\n   *\r\n   * Will result in complete redrawing of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.reinit = function () {\n    _super.prototype.reinit.call(this);\n\n    this.series.each(function (series) {\n      series.appeared = false;\n    });\n  };\n  /**\r\n   * Triggers an update on the horizontal axis when one of its properties\r\n   * change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event object\r\n   */\n\n\n  XYChart.prototype.handleXAxisChange = function (event) {\n    this.updateXAxis(event.target);\n  };\n  /**\r\n   * Triggers an update on the vertical axis when one of its properties\r\n   * change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event object\r\n   */\n\n\n  XYChart.prototype.handleYAxisChange = function (event) {\n    this.updateYAxis(event.target);\n  };\n  /**\r\n   * Sets up a new horizontal (X) axis when it is added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Axis insert event\r\n   */\n\n\n  XYChart.prototype.processXAxis = function (event) {\n    var axis = event.newValue;\n    axis.chart = this;\n\n    if (!axis.renderer) {\n      axis.renderer = new this._axisRendererX();\n      axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\n    }\n\n    axis.axisLetter = \"X\";\n    axis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false); //axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\n    // Although axis does not use data directly, we set dataProvider here\n    // (but not add to chart data users) to hold up rendering before data\n    // is parsed (system handles this)\n\n    axis.dataProvider = this;\n    this.updateXAxis(axis.renderer);\n    this.processAxis(axis);\n  };\n  /**\r\n   * Sets up a new vertical (Y) axis when it is added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Axis insert event\r\n   */\n\n\n  XYChart.prototype.processYAxis = function (event) {\n    var axis = event.newValue;\n    axis.chart = this;\n\n    if (!axis.renderer) {\n      axis.renderer = new this._axisRendererY();\n      axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\n    }\n\n    axis.axisLetter = \"Y\";\n    axis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false); //axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\n    // Although axis does not use data directly, we set dataProvider here\n    // (but not add to chart data users) to hold up rendering before data\n    // is parsed (system handles this)\n\n    axis.dataProvider = this;\n    this.updateYAxis(axis.renderer);\n    this.processAxis(axis);\n  };\n  /**\r\n   * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n   * value range changes.\r\n   */\n\n\n  XYChart.prototype.handleXAxisRangeChange = function () {\n    var range = this.getCommonAxisRange(this.xAxes);\n\n    if (this.scrollbarX) {\n      this.zoomAxes(this.xAxes, range, true);\n    }\n\n    this.toggleZoomOutButton();\n    this.updateScrollbar(this.scrollbarX, range);\n  };\n  /**\r\n   * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n   * zoomed out or not.\r\n   */\n\n\n  XYChart.prototype.toggleZoomOutButton = function () {\n    if (this.zoomOutButton) {\n      var show_1 = false;\n      $iter.eachContinue(this.xAxes.iterator(), function (axis) {\n        if (axis.toggleZoomOutButton) {\n          if (axis.maxZoomCount > 0) {\n            var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\n\n            if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\n              show_1 = true;\n              return false;\n            }\n          } else {\n            if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\n              show_1 = true;\n              return false;\n            }\n          }\n        }\n\n        return true;\n      });\n      $iter.eachContinue(this.yAxes.iterator(), function (axis) {\n        if (axis.toggleZoomOutButton) {\n          if (axis.maxZoomCount > 0) {\n            var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\n\n            if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\n              show_1 = true;\n              return false;\n            }\n          } else {\n            if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\n              show_1 = true;\n              return false;\n            }\n          }\n\n          return true;\n        }\n      });\n\n      if (!this.seriesAppeared) {\n        show_1 = false;\n      }\n\n      if (show_1) {\n        this.zoomOutButton.show();\n      } else {\n        this.zoomOutButton.hide();\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   * moved this check to a separate method so that we could override it in TreeMapSeries\r\n   */\n\n\n  XYChart.prototype.seriesAppeared = function () {\n    var appeared = false;\n    $iter.each(this.series.iterator(), function (series) {\n      if (!series.appeared) {\n        appeared = false;\n        return false;\n      }\n    });\n    return appeared;\n  };\n  /**\r\n   * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n   * value range changes.\r\n   */\n\n\n  XYChart.prototype.handleYAxisRangeChange = function () {\n    var range = this.getCommonAxisRange(this.yAxes);\n\n    if (this.scrollbarY) {\n      this.zoomAxes(this.yAxes, range, true);\n    }\n\n    this.toggleZoomOutButton();\n    this.updateScrollbar(this.scrollbarY, range);\n  };\n  /**\r\n   * Updates a relative scrollbar whenever data range of the axis changes.\r\n   *\r\n   * @param scrollbar  Scrollbar instance\r\n   * @param range      New data (values) range of the axis\r\n   */\n\n\n  XYChart.prototype.updateScrollbar = function (scrollbar, range) {\n    if (scrollbar) {\n      scrollbar.skipRangeEvents();\n      scrollbar.start = range.start;\n      scrollbar.end = range.end;\n    }\n  };\n  /**\r\n   * Returns a common range of values between a list of axes.\r\n   *\r\n   * This is used to synchronize the zoom between multiple axes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axes  A list of axes\r\n   * @return Common value range\r\n   */\n\n\n  XYChart.prototype.getCommonAxisRange = function (axes) {\n    var start;\n    var end;\n    axes.each(function (axis) {\n      if (!axis.zoomable || axis instanceof ValueAxis && axis.syncWithAxis) {} else {\n        var axisStart = axis.start;\n        var axisEnd = axis.end;\n\n        if (axis.renderer.inversed) {\n          axisStart = 1 - axis.end;\n          axisEnd = 1 - axis.start;\n        }\n\n        if (!$type.isNumber(start) || axisStart < start) {\n          start = axisStart;\n        }\n\n        if (!$type.isNumber(end) || axisEnd > end) {\n          end = axisEnd;\n        }\n      }\n    });\n    return {\n      start: start,\n      end: end\n    };\n  };\n  /**\r\n   * Triggers (re)rendering of the horizontal (X) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   */\n\n\n  XYChart.prototype.updateXAxis = function (renderer) {\n    var axis = renderer.axis;\n\n    if (renderer.opposite) {\n      axis.parent = this.topAxesContainer;\n      axis.toFront();\n    } else {\n      axis.parent = this.bottomAxesContainer;\n      axis.toBack();\n    }\n\n    if (axis.renderer) {\n      axis.renderer.processRenderer();\n    }\n  };\n  /**\r\n   * Triggers (re)rendering of the vertical (Y) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   */\n\n\n  XYChart.prototype.updateYAxis = function (renderer) {\n    var axis = renderer.axis;\n\n    if (renderer.opposite) {\n      axis.parent = this.rightAxesContainer;\n      axis.toBack();\n    } else {\n      axis.parent = this.leftAxesContainer;\n      axis.toFront();\n    }\n\n    if (axis.renderer) {\n      axis.renderer.processRenderer();\n    }\n  };\n  /**\r\n   * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n   * and containers for placement.\r\n   *\r\n   * @param axis  Axis\r\n   */\n\n\n  XYChart.prototype.processAxis = function (axis) {\n    var _this = this; // Value axis does not use data directly, only category axis does\n\n\n    if (axis instanceof CategoryAxis) {\n      this._dataUsers.moveValue(axis);\n    }\n\n    var renderer = axis.renderer;\n    renderer.gridContainer.parent = this.plotContainer;\n    renderer.gridContainer.toBack();\n    renderer.breakContainer.parent = this.plotContainer;\n    renderer.breakContainer.toFront();\n    renderer.breakContainer.zIndex = 10;\n    axis.addDisposer(new Disposer(function () {\n      _this.dataUsers.removeValue(axis);\n    }));\n    renderer.bulletsContainer.parent = this.axisBulletsContainer;\n\n    this._disposers.push(axis.events.on(\"positionchanged\", function () {\n      var point = $utils.spritePointToSprite({\n        x: 0,\n        y: 0\n      }, axis, _this.axisBulletsContainer);\n\n      if (axis.renderer instanceof AxisRendererY) {\n        renderer.bulletsContainer.y = point.y;\n      }\n\n      if (axis.renderer instanceof AxisRendererX) {\n        renderer.bulletsContainer.x = point.x;\n      }\n    }, undefined, false));\n\n    this.plotContainer.events.on(\"maxsizechanged\", function () {\n      if (_this.inited) {\n        axis.invalidateDataItems();\n\n        _this.updateSeriesMasks();\n      }\n    }, axis, false);\n  };\n  /**\r\n   * This is done because for some reason IE doesn't change mask if path of a\r\n   * mask changes.\r\n   */\n\n\n  XYChart.prototype.updateSeriesMasks = function () {\n    if ($utils.isIE()) {\n      this.series.each(function (series) {\n        var mask = series.mainContainer.mask;\n        series.mainContainer.mask = undefined;\n        series.mainContainer.mask = mask;\n      });\n    }\n  };\n\n  XYChart.prototype.handleSeriesRemoved = function (event) {\n    var series = event.oldValue;\n\n    if (series) {\n      if (series.xAxis) {\n        series.xAxis.series.removeValue(series);\n        series.xAxis.invalidateProcessedData();\n      }\n\n      if (series.yAxis) {\n        series.yAxis.series.removeValue(series);\n        series.yAxis.invalidateProcessedData();\n      } // otherwise extremes won't change\n\n\n      this.series.each(function (series) {\n        series.resetExtremes();\n      });\n    }\n\n    _super.prototype.handleSeriesRemoved.call(this, event);\n  };\n\n  Object.defineProperty(XYChart.prototype, \"xAxes\", {\n    /**\r\n     * A list of horizontal (X) axes.\r\n     *\r\n     * @return List of axes\r\n     */\n    get: function get() {\n      if (!this._xAxes) {\n        this._xAxes = new List();\n\n        this._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\n\n        this._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\n\n        this._disposers.push(new ListDisposer(this._xAxes, false));\n      }\n\n      return this._xAxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  XYChart.prototype.handleAxisRemoval = function (event) {\n    var axis = event.oldValue;\n    this.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\n\n    if (axis.autoDispose) {\n      axis.dispose();\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"yAxes\", {\n    /**\r\n     * A list of vertical (Y) axes.\r\n     *\r\n     * @return List of axes\r\n     */\n    get: function get() {\n      if (!this._yAxes) {\n        this._yAxes = new List();\n\n        this._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\n\n        this._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\n\n        this._disposers.push(new ListDisposer(this._yAxes, false));\n      }\n\n      return this._yAxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates a new [[XYSeries]] object with required parameters when it is\r\n   * added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n  XYChart.prototype.handleSeriesAdded = function (event) {\n    try {\n      _super.prototype.handleSeriesAdded.call(this, event);\n\n      var series = event.newValue;\n\n      if (this.xAxes.length == 0 || this.yAxes.length == 0) {\n        registry.removeFromInvalidComponents(series);\n        series.dataInvalid = false;\n      }\n\n      $utils.used(series.xAxis); // this is enough to get axis, handled in getter\n\n      $utils.used(series.yAxis); // this is enough to get axis, handled in getter\n\n      series.maskBullets = series.maskBullets;\n\n      if (series.fill == undefined) {\n        if (this.patterns) {\n          if (!$type.hasValue(series.stroke)) {\n            series.stroke = this.colors.next();\n          }\n\n          series.fill = this.patterns.next();\n\n          if ($type.hasValue(series.fillOpacity)) {\n            series.fill.backgroundOpacity = series.fillOpacity;\n          }\n\n          if (series.stroke instanceof Color) {\n            series.fill.stroke = series.stroke;\n            series.fill.fill = series.stroke;\n          }\n        } else {\n          series.fill = this.colors.next();\n        }\n      }\n\n      if (!$type.hasValue(series.stroke)) {\n        series.stroke = series.fill;\n      }\n    } catch (e) {\n      this.raiseCriticalError(e);\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"cursor\", {\n    /**\r\n     * @return Cursor\r\n     */\n    get: function get() {\n      return this._cursor;\n    },\n\n    /**\r\n     * Chart's [[Cursor]].\r\n     *\r\n     * @param cursor  Cursor\r\n     */\n    set: function set(cursor) {\n      if (this._cursor != cursor) {\n        if (this._cursor) {\n          this.removeDispose(this._cursor);\n        }\n\n        this._cursor = cursor;\n\n        if (cursor) {\n          // TODO this is wrong, fix it\n          this._disposers.push(cursor);\n\n          cursor.chart = this;\n          cursor.shouldClone = false;\n          cursor.parent = this._cursorContainer;\n          cursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\n          cursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\n          cursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\n          cursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\n          cursor.events.on(\"panning\", this.handleCursorPanning, this, false);\n          cursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\n          cursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\n          cursor.events.on(\"hidden\", this.handleHideCursor, this, false);\n          cursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\n\n          if (this.tapToActivate) {\n            // We need this in order to setup cursor properly\n            this.setTapToActivate(this.tapToActivate);\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Performs tasks when the cursor's position changes, e.g. shows proper\r\n   * tooltips on axes and series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  XYChart.prototype.handleCursorPositionChange = function () {\n    var cursor = this.cursor;\n\n    if (cursor.visible && !cursor.isHiding) {\n      var xPosition_1 = this.cursor.xPosition;\n      var yPosition_1 = this.cursor.yPosition;\n      this.showSeriesTooltip({\n        x: xPosition_1,\n        y: yPosition_1\n      });\n      var exceptAxes_1 = [];\n      var snapToSeries = cursor.snapToSeries;\n\n      if (snapToSeries && !cursor.downPoint) {\n        if (snapToSeries instanceof XYSeries) {\n          snapToSeries = [snapToSeries];\n        }\n\n        var dataItems_1 = [];\n        $array.each(snapToSeries, function (snpSeries) {\n          if (!snpSeries.isHidden && !snpSeries.isHiding) {\n            var xAxis = snpSeries.xAxis;\n            var yAxis = snpSeries.yAxis;\n\n            if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\n              snpSeries.dataItems.each(function (dataItem) {\n                dataItems_1.push(dataItem);\n              });\n              $array.move(exceptAxes_1, snpSeries.yAxis);\n              $array.move(exceptAxes_1, snpSeries.xAxis);\n            } else {\n              if (snpSeries.baseAxis == snpSeries.xAxis) {\n                $array.move(exceptAxes_1, snpSeries.yAxis);\n                dataItems_1.push(xAxis.getSeriesDataItem(snpSeries, xAxis.toAxisPosition(xPosition_1), true));\n              }\n\n              if (snpSeries.baseAxis == snpSeries.yAxis) {\n                $array.move(exceptAxes_1, snpSeries.xAxis);\n                dataItems_1.push(yAxis.getSeriesDataItem(snpSeries, yAxis.toAxisPosition(yPosition_1), true));\n              }\n            }\n          }\n        });\n        var closestDataItem_1 = this.getClosest(dataItems_1, xPosition_1, yPosition_1);\n\n        if (closestDataItem_1) {\n          this.series.each(function (series) {\n            var closestSeries = closestDataItem_1.component;\n\n            if (series != closestSeries) {\n              series.hideTooltip();\n\n              if (series.xAxis != closestSeries.xAxis) {\n                series.xAxis.hideTooltip();\n                exceptAxes_1.push(series.xAxis);\n              }\n\n              if (series.yAxis != closestSeries.yAxis) {\n                series.yAxis.hideTooltip();\n                exceptAxes_1.push(series.yAxis);\n              }\n            }\n          });\n          closestDataItem_1.component.showTooltipAtDataItem(closestDataItem_1);\n          cursor.handleSnap(closestDataItem_1.component);\n        }\n      } //}\n\n\n      this._seriesPoints = [];\n\n      if (this._cursorXPosition != xPosition_1) {\n        this.showAxisTooltip(this.xAxes, xPosition_1, exceptAxes_1);\n      }\n\n      if (this._cursorYPosition != yPosition_1) {\n        this.showAxisTooltip(this.yAxes, yPosition_1, exceptAxes_1);\n      }\n\n      if (this.arrangeTooltips) {\n        this.sortSeriesTooltips(this._seriesPoints);\n      }\n\n      if (this.legend) {\n        this.legend.afterDraw();\n      }\n    }\n  };\n  /**\r\n   * Finds closest data item to position out of the array of items.\r\n   *\r\n   * @since 4.9.29\r\n   * @param   dataItems  Array of items\r\n   * @param              xPosition X position\r\n   * @param              yPosition Y position\r\n   * @return             Data item\r\n   */\n\n\n  XYChart.prototype.getClosest = function (dataItems, xPosition, yPosition) {\n    var minDistance = Infinity;\n    var closestDataItem;\n    $array.eachContinue(dataItems, function (dataItem) {\n      if (dataItem) {\n        var xAxis = dataItem.component.xAxis;\n        var yAxis = dataItem.component.yAxis;\n        var xPos = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.toAxisPosition(xPosition)));\n        var yPos = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.toAxisPosition(yPosition)));\n        var xField = dataItem.component.xField;\n        var yField = dataItem.component.yField;\n\n        if (xAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(xField))) {\n          return true;\n        }\n\n        if (yAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(yField))) {\n          return true;\n        }\n\n        var dxPosition = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\")));\n        var dyPosition = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.getPositionY(dataItem, yField, dataItem.locations[yField], \"valueY\")));\n        var distance = Math.sqrt(Math.pow(xPos - dxPosition, 2) + Math.pow(yPos - dyPosition, 2));\n\n        if (distance < minDistance) {\n          minDistance = distance;\n          closestDataItem = dataItem;\n        }\n\n        return true;\n      }\n    });\n    return closestDataItem;\n  };\n  /**\r\n   * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.handleHideCursor = function () {\n    this.hideObjectTooltip(this.xAxes);\n    this.hideObjectTooltip(this.yAxes);\n    this.hideObjectTooltip(this.series);\n    this._cursorXPosition = undefined;\n    this._cursorYPosition = undefined;\n    this.updateSeriesLegend();\n  };\n  /**\r\n   * Updates values for each series' legend item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.updateSeriesLegend = function () {\n    $iter.each(this.series.iterator(), function (series) {\n      series.updateLegendValue();\n    });\n  };\n  /**\r\n   * Hides a tooltip for a list of objects.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprites  A list of sprites to hide tooltip for\r\n   */\n\n\n  XYChart.prototype.hideObjectTooltip = function (sprites) {\n    $iter.each(sprites.iterator(), function (sprite) {\n      if (sprite.cursorTooltipEnabled) {\n        sprite.hideTooltip(0);\n      }\n    });\n  };\n  /**\r\n   * Shows a tooltip for all chart's series, using specific coordinates as a\r\n   * reference point.\r\n   *\r\n   * The tooltip might be shown at different coordinates depending on the\r\n   * actual data point's position, overlapping with other tooltips, etc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Reference point\r\n   */\n\n\n  XYChart.prototype.showSeriesTooltip = function (position) {\n    var _this = this;\n\n    if (!position) {\n      this.series.each(function (series) {\n        series.hideTooltip();\n      });\n      return;\n    }\n\n    var seriesPoints = [];\n    this.series.each(function (series) {\n      //if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\n      if (series.xAxis instanceof DateAxis && series.xAxis.snapTooltip || series.yAxis instanceof DateAxis && series.yAxis.snapTooltip) {// void\n      } else {\n        var point = series.showTooltipAtPosition(position.x, position.y);\n\n        if (point) {\n          series.tooltip.setBounds($utils.spriteRectToSvg({\n            x: 0,\n            y: 0,\n            width: _this.pixelWidth,\n            height: _this.pixelHeight\n          }, _this));\n          seriesPoints.push({\n            series: series,\n            point: point\n          });\n        }\n      } //}\n\n    });\n\n    if (this.arrangeTooltips) {\n      this.sortSeriesTooltips(seriesPoints);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.sortSeriesTooltips = function (seriesPoints) {\n    if (seriesPoints.length > 0) {\n      var cursor_1 = this.cursor;\n\n      if (cursor_1 && $type.isNumber(cursor_1.maxTooltipDistance)) {\n        var cursorPoint_1 = $utils.spritePointToSvg({\n          x: cursor_1.point.x,\n          y: cursor_1.point.y\n        }, cursor_1);\n        var nearestSeries_1;\n        var nearestPoint_1;\n        var smallestDistance_1 = Infinity;\n        $array.each(seriesPoints, function (seriesPoint) {\n          var series = seriesPoint.series;\n          var fixedPoint = seriesPoint.point;\n\n          if (fixedPoint) {\n            var point = {\n              x: fixedPoint.x,\n              y: fixedPoint.y\n            };\n            var distance = Math.abs($math.getDistance(point, cursorPoint_1));\n\n            if (distance < smallestDistance_1) {\n              nearestPoint_1 = point;\n              smallestDistance_1 = distance;\n              nearestSeries_1 = series;\n            }\n          }\n        });\n        var newSeriesPoints_1 = [];\n\n        if (nearestSeries_1) {\n          $array.each(seriesPoints, function (seriesPoint) {\n            if (Math.abs($math.getDistance(seriesPoint.point, nearestPoint_1)) <= Math.abs(cursor_1.maxTooltipDistance)) {\n              newSeriesPoints_1.push({\n                series: seriesPoint.series,\n                point: seriesPoint.point\n              });\n            } else {\n              var tooltipDataItem = seriesPoint.series.tooltipDataItem;\n\n              if (tooltipDataItem) {\n                $array.each(tooltipDataItem.sprites, function (sprite) {\n                  sprite.isHover = false;\n                  sprite.handleOutReal(); // to avoid flicker\n                });\n              }\n\n              seriesPoint.series.hideTooltip(0);\n            }\n          });\n\n          if (cursor_1.maxTooltipDistance < 0) {\n            if (newSeriesPoints_1.length > 0) {\n              $array.each(newSeriesPoints_1, function (np) {\n                if (nearestSeries_1 != np.series) {\n                  np.series.hideTooltip(0);\n                }\n              });\n            }\n\n            newSeriesPoints_1 = [{\n              series: nearestSeries_1,\n              point: nearestPoint_1\n            }];\n          }\n        }\n\n        seriesPoints = newSeriesPoints_1;\n      }\n\n      var topLeft_1 = $utils.spritePointToSvg({\n        x: -0.5,\n        y: -0.5\n      }, this.plotContainer);\n      var bottomRight_1 = $utils.spritePointToSvg({\n        x: this.plotContainer.pixelWidth + 0.5,\n        y: this.plotContainer.pixelHeight + 0.5\n      }, this.plotContainer);\n      var sum_1 = 0;\n      var filteredSeriesPoints_1 = [];\n      $array.each(seriesPoints, function (seriesPoint) {\n        var point = seriesPoint.point;\n\n        if (point && $math.isInRectangle(point, {\n          x: topLeft_1.x,\n          y: topLeft_1.y,\n          width: bottomRight_1.x - topLeft_1.x,\n          height: bottomRight_1.y - topLeft_1.y\n        })) {\n          filteredSeriesPoints_1.push({\n            point: point,\n            series: seriesPoint.series\n          });\n          sum_1 += point.y;\n        }\n      });\n      seriesPoints = filteredSeriesPoints_1;\n      var firstSeries = this.series.getIndex(0);\n      var inversed = false;\n\n      if (firstSeries && firstSeries.yAxis && firstSeries.yAxis.renderer.inversed) {\n        inversed = true;\n      }\n\n      if (inversed) {\n        seriesPoints.sort(function (a, b) {\n          return $number.order(a.point.y, b.point.y);\n        });\n      } else {\n        seriesPoints.sort(function (a, b) {\n          return $number.order(b.point.y, a.point.y);\n        });\n        seriesPoints.reverse();\n      }\n\n      var averageY = sum_1 / seriesPoints.length;\n      var maxY = $utils.svgPointToDocument({\n        x: 0,\n        y: 0\n      }, this.svgContainer.SVGContainer).y;\n\n      if (seriesPoints.length > 0) {\n        var top_1 = topLeft_1.y;\n        var bottom = bottomRight_1.y; // TODO is this needed ?\n\n        $utils.spritePointToDocument({\n          x: 0,\n          y: top_1\n        }, this);\n        var dropped = false;\n\n        if (averageY > top_1 + (bottom - top_1) / 2) {\n          var nextHeight = bottom;\n\n          for (var i = seriesPoints.length - 1; i >= 0; i--) {\n            var series = seriesPoints[i].series;\n            var tooltip = series.tooltip;\n            var pointY = seriesPoints[i].point.y;\n            tooltip.setBounds({\n              x: 0,\n              y: -maxY,\n              width: this.pixelWidth,\n              height: nextHeight + maxY\n            });\n\n            if (tooltip.invalid) {\n              tooltip.validate();\n            }\n\n            tooltip.toBack();\n            nextHeight = $utils.spritePointToSvg({\n              x: 0,\n              y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop\n            }, tooltip).y;\n\n            if (nextHeight < -maxY) {\n              dropped = true;\n              break;\n            }\n          }\n        }\n\n        if (averageY <= top_1 + (bottom - top_1) / 2 || dropped) {\n          var nextY = top_1;\n\n          for (var i = 0, len = seriesPoints.length; i < len; i++) {\n            var series = seriesPoints[i].series;\n            var pointY = seriesPoints[i].point.y;\n            var tooltip = series.tooltip;\n            tooltip.setBounds({\n              x: 0,\n              y: nextY,\n              width: this.pixelWidth,\n              height: bottom\n            });\n\n            if (tooltip.invalid) {\n              tooltip.validate();\n            }\n\n            tooltip.toBack();\n            nextY = $utils.spritePointToSvg({\n              x: 0,\n              y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom\n            }, tooltip).y;\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Shows tooltips for a list of axes at specific position.\r\n   *\r\n   * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n   * vertical axes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axes      List of axes to show tooltip on\r\n   * @param position  Position (px)\r\n   */\n\n\n  XYChart.prototype.showAxisTooltip = function (axes, position, except) {\n    var _this = this;\n\n    $iter.each(axes.iterator(), function (axis) {\n      if (!except || except.indexOf(axis) == -1) {\n        if (_this.dataItems.length > 0 || axis.dataItems.length > 0) {\n          axis.showTooltipAtPosition(position);\n        }\n      }\n    });\n  };\n  /**\r\n   * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n   *\r\n   * @param axis   Axis\r\n   * @param range  Range\r\n   * @return Modified range\r\n   */\n\n\n  XYChart.prototype.getUpdatedRange = function (axis, range) {\n    if (!axis) {\n      return;\n    }\n\n    var start;\n    var end;\n    var inversed = axis.renderer.inversed;\n\n    if (inversed) {\n      $math.invertRange(range);\n      start = 1 - axis.end;\n      end = 1 - axis.start;\n    } else {\n      start = axis.start;\n      end = axis.end;\n    }\n\n    var difference = end - start;\n    return {\n      start: start + range.start * difference,\n      end: start + range.end * difference\n    };\n  };\n  /**\r\n   * Performs zoom and other operations when user finishes zooming using chart\r\n   * cursor, e.g. zooms axes.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorZoomEnd = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n\n    if (behavior == \"zoomX\" || behavior == \"zoomXY\") {\n      var xRange = cursor.xRange;\n\n      if (xRange && this.xAxes.length > 0) {\n        xRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\n        xRange.priority = \"start\";\n        this.zoomAxes(this.xAxes, xRange);\n      }\n    }\n\n    if (behavior == \"zoomY\" || behavior == \"zoomXY\") {\n      var yRange = cursor.yRange;\n\n      if (yRange && this.yAxes.length > 0) {\n        yRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\n        yRange.priority = \"start\";\n        this.zoomAxes(this.yAxes, yRange);\n      }\n    }\n\n    this.handleHideCursor();\n  };\n  /**\r\n   * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorPanStart = function (event) {\n    var xAxis = this.xAxes.getIndex(0);\n\n    if (xAxis) {\n      this._panStartXRange = {\n        start: xAxis.start,\n        end: xAxis.end\n      };\n\n      if (xAxis.renderer.inversed) {\n        this._panStartXRange = $math.invertRange(this._panStartXRange);\n      }\n    }\n\n    var yAxis = this.yAxes.getIndex(0);\n\n    if (yAxis) {\n      this._panStartYRange = {\n        start: yAxis.start,\n        end: yAxis.end\n      };\n\n      if (yAxis.renderer.inversed) {\n        this._panStartYRange = $math.invertRange(this._panStartYRange);\n      }\n    }\n  };\n  /**\r\n   * Performs zoom and other operations when user ends panning\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorPanEnd = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n\n    if (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\n      var panEndRange = this._panEndXRange;\n      var panStartRange = this._panStartXRange;\n      var delta = 0;\n\n      if (panEndRange.start < 0) {\n        delta = panEndRange.start;\n      }\n\n      if (panStartRange.end > 1) {\n        if (panEndRange.end > panStartRange.end) {\n          delta = panEndRange.end - panStartRange.end;\n        }\n      } else if (panEndRange.end > 1) {\n        delta = panEndRange.end - 1;\n      }\n\n      this.zoomAxes(this.xAxes, {\n        start: panEndRange.start - delta,\n        end: panEndRange.end - delta\n      }, false, cursor.snapOnPan);\n      this._panEndXRange = undefined;\n      this._panStartXRange = undefined;\n    }\n\n    if (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\n      var panEndRange = this._panEndYRange;\n      var delta = 0;\n\n      if (panEndRange.start < 0) {\n        delta = panEndRange.start;\n      }\n\n      if (panEndRange.end > 1) {\n        delta = panEndRange.end - 1;\n      }\n\n      this.zoomAxes(this.yAxes, {\n        start: panEndRange.start - delta,\n        end: panEndRange.end - delta\n      }, false, cursor.snapOnPan);\n      this._panEndYRange = undefined;\n      this._panStartYRange = undefined;\n    }\n  };\n\n  XYChart.prototype.handleCursorCanceled = function () {\n    this._panEndXRange = undefined;\n    this._panStartXRange = undefined;\n  };\n  /**\r\n   * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorPanning = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n    var maxPanOut = cursor.maxPanOut;\n\n    if (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\n      var panStartRange = this._panStartXRange;\n      var range = cursor.xRange;\n      var axisRange = this.getCommonAxisRange(this.xAxes);\n      var difference = panStartRange.end - panStartRange.start;\n      var delta = range.start * (axisRange.end - axisRange.start);\n      var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\n      var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\n\n      if (newStart <= 0) {\n        newEnd = newStart + difference;\n      }\n\n      if (newEnd >= 1) {\n        newStart = newEnd - difference;\n      }\n\n      var newRange = {\n        start: newStart,\n        end: newEnd\n      };\n      this._panEndXRange = newRange;\n      this.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\n    }\n\n    if (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\n      var panStartRange = this._panStartYRange;\n      var range = cursor.yRange;\n      var axisRange = this.getCommonAxisRange(this.yAxes);\n      var difference = panStartRange.end - panStartRange.start;\n      var delta = range.start * (axisRange.end - axisRange.start);\n      var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\n      var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\n\n      if (newStart <= 0) {\n        newEnd = newStart + difference;\n      }\n\n      if (newEnd >= 1) {\n        newStart = newEnd - difference;\n      }\n\n      var newRange = {\n        start: newStart,\n        end: newEnd\n      };\n      this._panEndYRange = newRange;\n      this.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\n    }\n\n    this.handleHideCursor();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.handleYAxisSet = function (series) {};\n  /**\r\n   * Performs zoom and other operations when user starts zooming using chart\r\n   * cursor, e.g. zooms axes.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorZoomStart = function (event) {// Nothing here\n    // This method is here only as a \"placeholder\" for extending classes to\n    // override if necessary\n  };\n\n  Object.defineProperty(XYChart.prototype, \"scrollbarX\", {\n    /**\r\n     * @return Scrollbar\r\n     */\n    get: function get() {\n      return this._scrollbarX;\n    },\n\n    /**\r\n     * Horizontal (X) scrollbar.\r\n     *\r\n     * @param scrollbar Scrollbar\r\n     */\n    set: function set(scrollbar) {\n      var _this = this;\n\n      if (this._scrollbarX) {\n        this.removeDispose(this._scrollbarX);\n      }\n\n      this._scrollbarX = scrollbar;\n\n      if (scrollbar) {\n        this._disposers.push(scrollbar);\n\n        scrollbar.parent = this.topAxesContainer;\n        scrollbar.shouldClone = false;\n        scrollbar.startGrip.exportable = false;\n        scrollbar.endGrip.exportable = false;\n        scrollbar.toBack();\n        scrollbar.orientation = \"horizontal\";\n        scrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\n        this.events.on(\"datavalidated\", function () {\n          return scrollbar.updateThumb(false);\n        }, this, false); // accessibility related\n\n        scrollbar.adapter.add(\"positionValue\", function (arg) {\n          var xAxis = _this.xAxes.getIndex(0);\n\n          if (xAxis) {\n            arg.value = xAxis.getPositionLabel(xAxis.renderer.inversed ? 1 - arg.position : arg.position);\n          }\n\n          return arg;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"scrollbarY\", {\n    /**\r\n     * @return Scrollbar\r\n     */\n    get: function get() {\n      return this._scrollbarY;\n    },\n\n    /**\r\n     * Vertical (Y) scrollbar.\r\n     *\r\n     * @param scrollbar Scrollbar\r\n     */\n    set: function set(scrollbar) {\n      var _this = this;\n\n      if (this._scrollbarY) {\n        this.removeDispose(this._scrollbarY);\n      }\n\n      this._scrollbarY = scrollbar;\n\n      if (scrollbar) {\n        this._disposers.push(scrollbar);\n\n        scrollbar.parent = this.rightAxesContainer;\n        scrollbar.startGrip.exportable = false;\n        scrollbar.shouldClone = false;\n        scrollbar.endGrip.exportable = false;\n        scrollbar.toFront();\n        scrollbar.orientation = \"vertical\";\n        scrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\n        this.events.on(\"datavalidated\", function () {\n          return scrollbar.updateThumb(false);\n        }, this, false); // accessibility related\n\n        scrollbar.adapter.add(\"positionValue\", function (arg) {\n          var yAxis = _this.yAxes.getIndex(0);\n\n          if (yAxis) {\n            arg.value = yAxis.getPositionLabel(arg.position);\n          }\n\n          return arg;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n   * on it changes.\r\n   *\r\n   * @param event Scrollbar range change event\r\n   */\n\n  XYChart.prototype.handleXScrollbarChange = function (event) {\n    if (this.inited) {\n      var scrollbar = event.target;\n      var range = scrollbar.range;\n\n      if (range.start == 0) {\n        range.priority = \"start\";\n      }\n\n      if (range.end == 1) {\n        range.priority = \"end\";\n      }\n\n      range = this.zoomAxes(this.xAxes, range);\n      scrollbar.fixRange(range);\n    }\n  };\n  /**\r\n   * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n   * on it changes.\r\n   *\r\n   * @param event Scrollbar range change event\r\n   */\n\n\n  XYChart.prototype.handleYScrollbarChange = function (event) {\n    if (this.inited) {\n      var scrollbar = event.target;\n      var range = scrollbar.range;\n\n      if (range.end == 1) {\n        range.priority = \"end\";\n      }\n\n      if (range.start == 0) {\n        range.priority = \"start\";\n      }\n\n      range = this.zoomAxes(this.yAxes, range);\n      scrollbar.fixRange(range);\n    }\n  };\n  /**\r\n   * Zooms axes that are affected by to specific relative range.\r\n   *\r\n   * @param axes       List of axes to zoom\r\n   * @param range      Range of values to zoom to (0-1)\r\n   * @param instantly  If set to `true` will skip zooming animation\r\n   * @return Recalculated range that is common to all involved axes\r\n   */\n\n\n  XYChart.prototype.zoomAxes = function (axes, range, instantly, round, declination, stop) {\n    var realRange = {\n      start: 0,\n      end: 1\n    };\n    this.showSeriesTooltip(); // hides\n\n    var originalRange = range;\n\n    if (!this.dataInvalid) {\n      $iter.each(axes.iterator(), function (axis) {\n        var maxZoomFactor = axis.maxZoomFactor;\n\n        if ($type.isNumber(axis.minZoomCount)) {\n          maxZoomFactor = maxZoomFactor / axis.minZoomCount;\n        }\n\n        if (stop && 1 / (range.end - range.start) >= maxZoomFactor) {// void\n        } else {\n          if (axis.zoomable) {\n            if (axis.renderer.inversed) {\n              range = $math.invertRange(originalRange);\n            } else {\n              range = originalRange;\n            }\n\n            axis.hideTooltip(0);\n\n            if (round) {\n              //let diff = range.end - range.start;\n              if (axis instanceof CategoryAxis) {\n                var cellWidth = axis.getCellEndPosition(0) - axis.getCellStartPosition(0);\n                range.start = axis.roundPosition(range.start + cellWidth / 2 - axis.startLocation * cellWidth, axis.startLocation);\n                range.end = axis.roundPosition(range.end - cellWidth / 2 + (1 - axis.endLocation) * cellWidth, axis.endLocation);\n              } else {\n                range.start = axis.roundPosition(range.start + 0.0001, 0, axis.startLocation);\n                range.end = axis.roundPosition(range.end + 0.0001, 0, axis.endLocation);\n              }\n            }\n\n            var axisRange = axis.zoom(range, instantly, instantly, declination);\n\n            if (axis.renderer.inversed) {\n              axisRange = $math.invertRange(axisRange);\n            }\n\n            realRange = axisRange;\n          }\n        }\n      });\n    }\n\n    return realRange;\n  };\n\n  Object.defineProperty(XYChart.prototype, \"maskBullets\", {\n    /**\r\n     * @return Mask bullet container?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"maskBullets\");\n    },\n\n    /**\r\n     * Indicates if bullet container is masked.\r\n     *\r\n     * If it is set to `true`, any bullets that do not fit into bullet container\r\n     * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n     * of the plot area so they are not cut off.\r\n     *\r\n     * @param value Mask bullet container?\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"maskBullets\", value, true) && this.bulletsContainer) {\n        if (value) {\n          this.bulletsContainer.mask = this._bulletMask;\n        } else {\n          this.bulletsContainer.mask = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"arrangeTooltips\", {\n    /**\r\n     * @return Arrange tooltips?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"arrangeTooltips\");\n    },\n\n    /**\r\n     * Indicates if chart should arrange series tooltips so that they would not\r\n     * overlap.\r\n     *\r\n     * If set to `true` (default), the chart will adjust vertical positions of\r\n     * all simultaneously shown tooltips to avoid overlapping.\r\n     *\r\n     * However, if you have a vertically-arranged chart, it might not make sense,\r\n     * because tooltips would most probably not be aligned horizontally. In this\r\n     * case it would probably be a good idea to set this setting to `false`.\r\n     *\r\n     * @default true\r\n     * @param value Arrange tooltips?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"arrangeTooltips\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles mouse wheel event.\r\n   *\r\n   * @param event  Original event\r\n   */\n\n  XYChart.prototype.handleWheel = function (event) {\n    var plotContainer = this.plotContainer;\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\n    var shift = event.shift.y;\n    this.handleWheelReal(shift, this.mouseWheelBehavior, plotPoint);\n  };\n  /**\r\n   * Handles mouse wheel event.\r\n   *\r\n   * @param event  Original event\r\n   */\n\n\n  XYChart.prototype.handleHorizontalWheel = function (event) {\n    var plotContainer = this.plotContainer;\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\n    this.handleWheelReal(event.shift.x, this.horizontalMouseWheelBehavior, plotPoint);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.handleWheelReal = function (shift, mouseWheelBehavior, plotPoint) {\n    if (shift != 0) {\n      var plotContainer = this.plotContainer;\n      var rangeX = this.getCommonAxisRange(this.xAxes);\n      var rangeY = this.getCommonAxisRange(this.yAxes);\n      var shiftStep = 0.1;\n      var maxPanOut = 0;\n\n      if (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\n        var differenceX = rangeX.end - rangeX.start;\n        var newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100 * (rangeX.end - rangeX.start));\n        var newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (rangeX.end - rangeX.start), 1 + maxPanOut);\n\n        if (newStartX <= 0) {\n          newEndX = newStartX + differenceX;\n        }\n\n        if (newEndX >= 1) {\n          newStartX = newEndX - differenceX;\n        }\n\n        this.zoomAxes(this.xAxes, {\n          start: newStartX,\n          end: newEndX\n        });\n      }\n\n      if (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\n        shift *= -1;\n        var differenceY = rangeY.end - rangeY.start;\n        var newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100 * (rangeY.end - rangeY.start));\n        var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * (rangeY.end - rangeY.start), 1 + maxPanOut);\n\n        if (newStartY <= 0) {\n          newEndY = newStartY + differenceY;\n        }\n\n        if (newEndY >= 1) {\n          newStartY = newEndY - differenceY;\n        }\n\n        this.zoomAxes(this.yAxes, {\n          start: newStartY,\n          end: newEndY\n        });\n      }\n\n      if (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\n        var locationX = plotPoint.x / plotContainer.maxWidth;\n        var location2X = this.xAxes.getIndex(0).toAxisPosition(locationX);\n        var newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * (rangeX.end - rangeX.start) * shift / 100 * locationX);\n        newStartX = Math.min(newStartX, location2X);\n        var newEndX = Math.min(rangeX.end + shiftStep * (rangeX.end - rangeX.start) * shift / 100 * (1 - locationX), 1 + maxPanOut);\n        newEndX = Math.max(newEndX, location2X);\n        this.zoomAxes(this.xAxes, {\n          start: newStartX,\n          end: newEndX\n        }, undefined, undefined, undefined, true);\n      }\n\n      if (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\n        var locationY = plotPoint.y / plotContainer.maxHeight;\n        var location2Y = this.yAxes.getIndex(0).toAxisPosition(locationY);\n        var newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * (rangeY.end - rangeY.start) * shift / 100 * (1 - locationY));\n        newStartY = Math.min(newStartY, location2Y);\n        var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY * (rangeY.end - rangeY.start), 1 + maxPanOut);\n        newEndY = Math.max(newEndY, location2Y);\n        this.zoomAxes(this.yAxes, {\n          start: newStartY,\n          end: newEndY\n        }, undefined, undefined, undefined, true);\n      }\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"mouseWheelBehavior\", {\n    /**\r\n     * @return Mouse wheel behavior\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"mouseWheelBehavior\");\n    },\n\n    /**\r\n     * Specifies action for when mouse wheel is used when over the chart.\r\n     *\r\n     * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`,`\"panXY\"`, `\"none\"` (default).\r\n     *\r\n     * You can control sensitivity of wheel zooming via `mouseOptions`.\r\n     *\r\n     * @default \"none\"\r\n     * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n     * @param mouse wheel behavior\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\n        if (value != \"none\") {\n          this._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\n\n          this._disposers.push(this._mouseWheelDisposer);\n        } else {\n          if (this._mouseWheelDisposer) {\n            this.plotContainer.wheelable = false;\n            this.plotContainer.hoverable = false;\n\n            this._mouseWheelDisposer.dispose();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"horizontalMouseWheelBehavior\", {\n    /**\r\n     * @return Horizontal mouse wheel behavior\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"horizontalMouseWheelBehavior\");\n    },\n\n    /**\r\n     * Specifies action for when horizontal mouse wheel is used when over the chart.\r\n     *\r\n     * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n     *\r\n     * @default \"none\"\r\n     * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n     * @param mouse wheel behavior\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"horizontalMouseWheelBehavior\", value)) {\n        if (value != \"none\") {\n          this._mouseWheelDisposer2 = this.plotContainer.events.on(\"wheel\", this.handleHorizontalWheel, this, false);\n\n          this._disposers.push(this._mouseWheelDisposer2);\n        } else {\n          if (this._mouseWheelDisposer2) {\n            this.plotContainer.wheelable = false;\n            this.plotContainer.hoverable = false;\n\n            this._mouseWheelDisposer2.dispose();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @param fields  Array of date fields\r\n   * @return Array of date fields populated with chart's date fields\r\n   */\n\n  XYChart.prototype.dataSourceDateFields = function (fields) {\n    var _this = this; // Process parent\n\n\n    fields = _super.prototype.dataSourceDateFields.call(this, fields); // Check if we have any series with date-fields\n\n    $iter.each(this.series.iterator(), function (series) {\n      fields = _this.populateDataSourceFields(fields, series.dataFields, [\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]);\n    });\n    return fields;\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @param value  Array of number fields\r\n   * @return Array of number fields populated with chart's number fields\r\n   */\n\n\n  XYChart.prototype.dataSourceNumberFields = function (fields) {\n    var _this = this;\n\n    fields = _super.prototype.dataSourceDateFields.call(this, fields); // Check if we have any series with date-fields\n\n    $iter.each(this.series.iterator(), function (series) {\n      fields = _this.populateDataSourceFields(fields, series.dataFields, [\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]);\n    });\n    return fields;\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  XYChart.prototype.processConfig = function (config) {\n    if (config) {\n      // Save axis ranges for later processing\n      var xAxes = [];\n      var yAxes = []; // Set up axes\n\n      if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\n        for (var i = 0, len = config.xAxes.length; i < len; i++) {\n          if (!config.xAxes[i].type) {\n            throw Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\n          } else if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\n            // Maybe convert string dates?\n            for (var x = 0, len_1 = config.xAxes[i][\"axisRanges\"].length; x < len_1; x++) {\n              var range = config.xAxes[i][\"axisRanges\"][x];\n\n              if ($type.hasValue(range.date) && $type.isString(range.date)) {\n                range.date = this.dateFormatter.parse(range.date);\n              }\n\n              if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\n                range.endDate = this.dateFormatter.parse(range.endDate);\n              }\n            }\n\n            xAxes.push({\n              axisRanges: config.xAxes[i][\"axisRanges\"],\n              index: i\n            });\n            delete config.xAxes[i][\"axisRanges\"];\n          }\n        }\n      }\n\n      if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\n        for (var i = 0, len = config.yAxes.length; i < len; i++) {\n          if (!config.yAxes[i].type) {\n            throw Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\n          } else if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\n            // Maybe convert string dates?\n            for (var x = 0, len_2 = config.yAxes[i][\"axisRanges\"].length; x < len_2; x++) {\n              var range = config.yAxes[i][\"axisRanges\"][x];\n\n              if ($type.hasValue(range.date) && $type.isString(range.date)) {\n                range.date = this.dateFormatter.parse(range.date);\n              }\n\n              if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\n                range.endDate = this.dateFormatter.parse(range.endDate);\n              }\n            }\n\n            yAxes.push({\n              axisRanges: config.yAxes[i][\"axisRanges\"],\n              index: i\n            });\n            delete config.yAxes[i][\"axisRanges\"];\n          }\n        }\n      } // Set up series\n\n\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          config.series[i].type = config.series[i].type || \"LineSeries\";\n        }\n      } // Set up cursor\n\n\n      if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\n        config.cursor.type = \"XYCursor\";\n      } // Set up scrollbars\n\n\n      if ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\n        config.scrollbarX.type = \"Scrollbar\";\n      }\n\n      if ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\n        config.scrollbarY.type = \"Scrollbar\";\n      }\n\n      _super.prototype.processConfig.call(this, config); // Finish up with ranges.\n      // We need to do this here because series are processed last in JSON\n      // config. Therefore their respective objects are not yet are available\n      // when axis (and respectively their ranges) are being processed.\n\n\n      if (yAxes.length) {\n        for (var i = 0, len = yAxes.length; i < len; i++) {\n          this.yAxes.getIndex(yAxes[i].index).config = {\n            axisRanges: yAxes[i].axisRanges\n          };\n        }\n      }\n\n      if (xAxes.length) {\n        for (var i = 0, len = xAxes.length; i < len; i++) {\n          this.xAxes.getIndex(xAxes[i].index).config = {\n            axisRanges: xAxes[i].axisRanges\n          };\n        }\n      }\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n\n\n  XYChart.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } // Must come last\n    else if (a == \"scrollbarX\") {\n      return 1;\n    } else if (b == \"scrollbarX\") {\n      return -1;\n    } else if (a == \"scrollbarY\") {\n      return 1;\n    } else if (b == \"scrollbarY\") {\n      return -1;\n    } else if (a == \"cursor\") {\n      return 1;\n    } else if (b == \"cursor\") {\n      return -1;\n    } else if (a == \"series\") {\n      return 1;\n    } else if (b == \"series\") {\n      return -1;\n    } else {\n      return _super.prototype.configOrder.call(this, a, b);\n    }\n  };\n  /**\r\n   * Creates a new Series of type suitable for this chart.\r\n   *\r\n   * @return New series\r\n   */\n\n\n  XYChart.prototype.createSeries = function () {\n    return new XYSeries();\n  };\n\n  Object.defineProperty(XYChart.prototype, \"zoomOutButton\", {\n    /**\r\n     * @return Zoom out button\r\n     */\n    get: function get() {\n      return this._zoomOutButton;\n    },\n\n    /**\r\n     * A [[Button]] element that is used for zooming out the chart.\r\n     *\r\n     * This button appears only when chart is zoomed in, and disappears\r\n     * autoamatically when it is zoome dout.\r\n     *\r\n     * @param button  Zoom out button\r\n     */\n    set: function set(button) {\n      var _this = this;\n\n      this._zoomOutButton = button;\n\n      if (button) {\n        button.events.on(\"hit\", function () {\n          _this.zoomAxes(_this.xAxes, {\n            start: 0,\n            end: 1\n          });\n\n          _this.zoomAxes(_this.yAxes, {\n            start: 0,\n            end: 1\n          });\n        }, undefined, false);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all parameters from another [[XYChart]].\r\n   *\r\n   * @param source Source XYChart\r\n   */\n\n  XYChart.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    source.xAxes.each(function (axis) {\n      var a = _this.xAxes.push(axis.clone());\n\n      a.chart = _this;\n      a.renderer.chart = _this;\n    });\n    source.yAxes.each(function (axis) {\n      var a = _this.yAxes.push(axis.clone());\n\n      a.renderer.chart = _this;\n      a.chart = _this;\n    }); //this.xAxes.copyFrom(source.xAxes);\n    //this.yAxes.copyFrom(source.yAxes);\n\n    _super.prototype.copyFrom.call(this, source); //this.zoomOutButton.copyFrom(source.zoomOutButton);\n\n\n    if (source.cursor) {\n      this.cursor = source.cursor.clone();\n    }\n\n    if (source.scrollbarX) {\n      this.scrollbarX = source.scrollbarX.clone();\n    }\n\n    if (source.scrollbarY) {\n      this.scrollbarY = source.scrollbarY.clone();\n    } //@todo copy all container properties\n\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    var scrollbarX = this.scrollbarX;\n\n    if (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\n      scrollbarX.scrollbarChart.disposeData();\n    }\n\n    var scrollbarY = this.scrollbarY;\n\n    if (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\n      scrollbarY.scrollbarChart.disposeData();\n    }\n\n    this.xAxes.each(function (axis) {\n      if (axis instanceof CategoryAxis) {\n        axis.disposeData();\n      }\n    });\n    this.yAxes.each(function (axis) {\n      if (axis instanceof CategoryAxis) {\n        axis.disposeData();\n      }\n    });\n  };\n  /**\r\n   * Adds one or several (array) of data items to the existing data.\r\n   *\r\n   * @param rawDataItem One or many raw data item objects\r\n   */\n\n\n  XYChart.prototype.addData = function (rawDataItem, removeCount) {\n    if (this.scrollbarX instanceof XYChartScrollbar) {\n      this.addScrollbarData(this.scrollbarX, removeCount);\n    }\n\n    if (this.scrollbarY instanceof XYChartScrollbar) {\n      this.addScrollbarData(this.scrollbarY, removeCount);\n    }\n\n    _super.prototype.addData.call(this, rawDataItem, removeCount);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.addScrollbarData = function (scrollbar, removeCount) {\n    var chart = scrollbar.scrollbarChart;\n    chart._parseDataFrom = chart.data.length;\n    chart.invalidateData();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.removeScrollbarData = function (scrollbar, removeCount) {\n    var chart = scrollbar.scrollbarChart;\n\n    if ($type.isNumber(removeCount)) {\n      while (removeCount > 0) {\n        var dataItem = this.dataItems.getIndex(0);\n\n        if (dataItem) {\n          chart.dataItems.remove(dataItem);\n        }\n\n        chart.dataUsers.each(function (dataUser) {\n          var dataItem = dataUser.dataItems.getIndex(0);\n\n          if (dataItem) {\n            dataUser.dataItems.remove(dataItem);\n          }\n        });\n        chart._parseDataFrom--;\n        removeCount--;\n      }\n\n      chart.invalidateData();\n    }\n  };\n  /**\r\n   * Removes elements from the beginning of data\r\n   *\r\n   * @param count number of elements to remove\r\n   */\n\n\n  XYChart.prototype.removeData = function (count) {\n    if (this.scrollbarX instanceof XYChartScrollbar) {\n      this.removeScrollbarData(this.scrollbarX, count);\n    }\n\n    if (this.scrollbarY instanceof XYChartScrollbar) {\n      this.removeScrollbarData(this.scrollbarY, count);\n    }\n\n    _super.prototype.removeData.call(this, count);\n  };\n  /**\r\n   * @param  value  Tap to activate?\r\n   */\n\n\n  XYChart.prototype.setTapToActivate = function (value) {\n    _super.prototype.setTapToActivate.call(this, value);\n\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = value;\n      this.plotContainer.interactions.isTouchProtected = value;\n    }\n  };\n\n  XYChart.prototype.handleTapToActivate = function () {\n    _super.prototype.handleTapToActivate.call(this);\n\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = false;\n      this.plotContainer.interactions.isTouchProtected = false;\n    }\n  };\n\n  XYChart.prototype.handleTapToActivateDeactivation = function () {\n    _super.prototype.handleTapToActivateDeactivation.call(this);\n\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = true;\n      this.plotContainer.interactions.isTouchProtected = true;\n    }\n  };\n\n  return XYChart;\n}(SerialChart);\n\nexport { XYChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"XYChart\"] = XYChart;\n/**\r\n * Add default responsive rules\r\n */\n\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function state(target, stateId) {\n    if (target instanceof XYChart && target.scrollbarX) {\n      var state = target.states.create(stateId);\n      var sbstate = target.scrollbarX.states.create(stateId);\n      sbstate.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function state(target, stateId) {\n    if (target instanceof XYChart && target.scrollbarY) {\n      var state = target.states.create(stateId);\n      var sbstate = target.scrollbarY.states.create(stateId);\n      sbstate.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});","map":{"version":3,"mappings":"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","names":["SerialChart","SerialChartDataItem","Container","List","ListDisposer","Color","ValueAxis","DateAxis","AxisRendererX","AxisRendererY","CategoryAxis","XYSeries","Disposer","ZoomOutButton","percent","registry","XYChartScrollbar","$math","$iter","$type","$utils","$array","$number","defaultRules","ResponsiveBreakpoints","__extends","_super","_this","className","applyTheme","maskBullets","arrangeTooltips","chartContainer","layout","padding","topAxesCont","createChild","shouldClone","width","zIndex","topAxesContainer","yAxesAndPlotCont","height","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","events","on","updateXAxesMargins","leftAxesContainer","plotCont","background","fillOpacity","plotContainer","mouseWheelBehavior","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","parent","bulletsContainer","zoomOutButton","align","valign","Number","MAX_SAFE_INTEGER","marginTop","marginRight","hide","axisBulletsContainer","isMeasured","_bulletMask","series","each","dataGrouped","_baseInterval","XYChart","applyInternalDefaults","call","exportable","hasValue","readerTitle","language","translate","draw","toFront","mask","updateSeriesLegend","iterator","invalidate","_parseDataFrom","xAxes","axis","dataChangeUpdate","yAxes","validateData","leftAxesWidth","measuredWidth","rightAxesWidth","paddingLeft","paddingRight","reinit","appeared","event","updateXAxis","target","updateYAxis","newValue","chart","renderer","_axisRendererX","observe","handleXAxisChange","axisLetter","handleXAxisRangeChange","dataProvider","processAxis","_axisRendererY","handleYAxisChange","handleYAxisRangeChange","range","getCommonAxisRange","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","eachContinue","maxZoomCount","minZoomFactor","maxZoomFactor","round","end","start","seriesAppeared","show","scrollbarY","scrollbar","skipRangeEvents","axes","zoomable","syncWithAxis","axisStart","axisEnd","inversed","isNumber","opposite","toBack","processRenderer","_dataUsers","moveValue","gridContainer","breakContainer","addDisposer","dataUsers","removeValue","_disposers","push","point","spritePointToSprite","x","y","undefined","inited","invalidateDataItems","updateSeriesMasks","isIE","mainContainer","oldValue","xAxis","invalidateProcessedData","yAxis","resetExtremes","handleSeriesRemoved","Object","_xAxes","processXAxis","handleAxisRemoval","autoDispose","dispose","_yAxes","processYAxis","handleSeriesAdded","length","removeFromInvalidComponents","dataInvalid","used","fill","patterns","stroke","colors","next","backgroundOpacity","e","raiseCriticalError","_cursor","cursor","removeDispose","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","tapToActivate","setTapToActivate","visible","isHiding","xPosition_1","xPosition","yPosition_1","yPosition","showSeriesTooltip","exceptAxes_1","snapToSeries","downPoint","dataItems_1","snpSeries","isHidden","dataItems","dataItem","move","baseAxis","getSeriesDataItem","toAxisPosition","closestDataItem_1","getClosest","closestSeries","component","hideTooltip","showTooltipAtDataItem","handleSnap","_seriesPoints","_cursorXPosition","showAxisTooltip","_cursorYPosition","sortSeriesTooltips","legend","afterDraw","minDistance","Infinity","closestDataItem","xPos","positionToCoordinate","toGlobalPosition","yPos","xField","yField","getValue","dxPosition","getPositionX","locations","dyPosition","getPositionY","distance","Math","sqrt","pow","hideObjectTooltip","updateLegendValue","sprites","sprite","cursorTooltipEnabled","position","seriesPoints","snapTooltip","showTooltipAtPosition","tooltip","setBounds","spriteRectToSvg","pixelWidth","pixelHeight","cursor_1","maxTooltipDistance","cursorPoint_1","spritePointToSvg","nearestSeries_1","nearestPoint_1","smallestDistance_1","seriesPoint","fixedPoint","abs","getDistance","newSeriesPoints_1","tooltipDataItem","isHover","handleOutReal","np","topLeft_1","bottomRight_1","sum_1","filteredSeriesPoints_1","isInRectangle","firstSeries","getIndex","sort","a","b","order","reverse","averageY","maxY","svgPointToDocument","svgContainer","SVGContainer","top_1","bottom","spritePointToDocument","dropped","nextHeight","i","pointY","invalid","validate","label","pixelY","pixelMarginTop","nextY","len","measuredHeight","pixelMarginBottom","except","indexOf","invertRange","difference","behavior","xRange","getUpdatedRange","priority","yRange","_panStartXRange","_panStartYRange","_panEndXRange","panEndRange","panStartRange","delta","snapOnPan","_panEndYRange","maxPanOut","axisRange","newStart","max","newEnd","min","newRange","_scrollbarX","startGrip","endGrip","orientation","handleXScrollbarChange","updateThumb","adapter","add","arg","value","getPositionLabel","_scrollbarY","handleYScrollbarChange","fixRange","instantly","declination","stop","realRange","originalRange","minZoomCount","cellWidth","getCellEndPosition","getCellStartPosition","roundPosition","startLocation","endLocation","zoom","getPropertyValue","setPropertyValue","svgPoint","documentPointToSvg","htmlContainer","cssScale","plotPoint","svgPointToSprite","shift","handleWheelReal","horizontalMouseWheelBehavior","rangeX","rangeY","shiftStep","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","locationX","maxWidth","location2X","locationY","maxHeight","location2Y","_mouseWheelDisposer","handleWheel","wheelable","hoverable","_mouseWheelDisposer2","handleHorizontalWheel","fields","dataSourceDateFields","populateDataSourceFields","dataFields","config","isArray","type","Error","len_1","date","isString","dateFormatter","parse","endDate","axisRanges","index","len_2","processConfig","configOrder","_zoomOutButton","button","source","clone","copyFrom","disposeData","scrollbarChart","rawDataItem","removeCount","addScrollbarData","addData","data","invalidateData","remove","dataUser","count","removeScrollbarData","removeData","interactions","isTouchProtected","handleTapToActivate","handleTapToActivateDeactivation","registeredClasses","relevant","maybeXS","state","stateId","states","create","sbstate","properties","disabled"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/types/XYChart.ts"],"sourcesContent":["/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $number from \"../../core/utils/Number\";\r\n\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when horizontal mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\thorizontalMouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies if chart should arrange series tooltips so that they won't\r\n\t * overlap.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tarrangeTooltips?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\tprotected _mouseWheelDisposer2: IDisposer;\r\n\r\n\tprotected _cursorXPosition: number;\r\n\r\n\tprotected _cursorYPosition: number;\r\n\r\n\t/**\r\n\t * Holds a reference to the container axis bullets are drawn in.\r\n\t */\r\n\tpublic axisBulletsContainer: Container;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\t\tthis.arrangeTooltips = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\t// Create a container for bullets\r\n\t\tlet axisBulletsContainer: Container = this.plotContainer.createChild(Container);\r\n\t\taxisBulletsContainer.shouldClone = false;\r\n\t\taxisBulletsContainer.width = percent(100);\r\n\t\taxisBulletsContainer.height = percent(100);\r\n\t\taxisBulletsContainer.isMeasured = false;\r\n\t\taxisBulletsContainer.zIndex = 4;\r\n\t\taxisBulletsContainer.layout = \"none\";\r\n\t\tthis.axisBulletsContainer = axisBulletsContainer;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\tthis.events.on(\"beforedatavalidated\", () => {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.dataGrouped = false;\r\n\t\t\t\tseries._baseInterval = {};\r\n\t\t\t})\r\n\t\t}, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tthis.zoomOutButton.exportable = false;\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a re-initialization of this element.\r\n\t *\r\n\t * Will result in complete redrawing of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic reinit(): void {\r\n\t\tsuper.reinit();\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tseries.appeared = false;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererX();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererY();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tpublic toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif (axis.toggleZoomOutButton) {\r\n\t\t\t\t\tif (axis.maxZoomCount > 0) {\r\n\t\t\t\t\t\tlet minZoomFactor: number = axis.maxZoomFactor / axis.maxZoomCount;\r\n\t\t\t\t\t\tif ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif (axis.toggleZoomOutButton) {\r\n\t\t\t\t\tif (axis.maxZoomCount > 0) {\r\n\t\t\t\t\t\tlet minZoomFactor: number = axis.maxZoomFactor / axis.maxZoomCount;\r\n\t\t\t\t\t\tif ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param scrollbar  Scrollbar instance\r\n\t * @param range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes  A list of axes\r\n\t * @return Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\taxes.each((axis) => {\r\n\t\t\tif (!axis.zoomable || (axis instanceof ValueAxis && axis.syncWithAxis)) {\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet axisStart = axis.start;\r\n\t\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\t\tstart = axisStart;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\t\tend = axisEnd;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\r\n\r\n\t\trenderer.bulletsContainer.parent = this.axisBulletsContainer;\r\n\r\n\t\tthis._disposers.push(axis.events.on(\"positionchanged\", () => {\r\n\t\t\tlet point = $utils.spritePointToSprite({ x: 0, y: 0 }, axis, this.axisBulletsContainer);\r\n\t\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\t\trenderer.bulletsContainer.y = point.y;\r\n\t\t\t}\r\n\t\t\tif (axis.renderer instanceof AxisRendererX) {\r\n\t\t\t\trenderer.bulletsContainer.x = point.x;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t\tthis.updateSeriesMasks();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tlet mask = series.mainContainer.mask;\r\n\t\t\t\tseries.mainContainer.mask = undefined;\r\n\t\t\t\tseries.mainContainer.mask = mask;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet series = event.oldValue;\r\n\r\n\t\tif (series) {\r\n\t\t\tif (series.xAxis) {\r\n\t\t\t\tseries.xAxis.series.removeValue(series);\r\n\t\t\t\tseries.xAxis.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t\tif (series.yAxis) {\r\n\t\t\t\tseries.yAxis.series.removeValue(series);\r\n\t\t\t\tseries.yAxis.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t\t// otherwise extremes won't change\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.resetExtremes();\r\n\t\t\t})\r\n\t\t}\r\n\t\tsuper.handleSeriesRemoved(event);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._xAxes, false));\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleAxisRemoval(event: IListEvents<Axis>[\"removed\"]) {\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif (axis.autoDispose) {\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._yAxes, false));\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\r\n\t\t\tif (this.xAxes.length == 0 || this.yAxes.length == 0) {\r\n\t\t\t\tregistry.removeFromInvalidComponents(series);\r\n\t\t\t\tseries.dataInvalid = false;\r\n\t\t\t}\r\n\r\n\t\t\t$utils.used(series.xAxis); // this is enough to get axis, handled in getter\r\n\t\t\t$utils.used(series.yAxis); // this is enough to get axis, handled in getter\r\n\r\n\t\t\tseries.maskBullets = series.maskBullets;\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tif (this.patterns) {\r\n\t\t\t\t\tif (!$type.hasValue(series.stroke)) {\r\n\t\t\t\t\t\tseries.stroke = this.colors.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tseries.fill = this.patterns.next();\r\n\t\t\t\t\tif ($type.hasValue(series.fillOpacity)) {\r\n\t\t\t\t\t\tseries.fill.backgroundOpacity = series.fillOpacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.stroke instanceof Color) {\r\n\t\t\t\t\t\tseries.fill.stroke = series.stroke;\r\n\t\t\t\t\t\tseries.fill.fill = series.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.hasValue(series.stroke)) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.shouldClone = false;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\r\n\t\t\t\tif (this.tapToActivate) {\r\n\t\t\t\t\t// We need this in order to setup cursor properly\r\n\t\t\t\t\tthis.setTapToActivate(this.tapToActivate);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tlet cursor = this.cursor;\r\n\r\n\t\tif (cursor.visible && !cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\r\n\t\t\tlet exceptAxes: Axis[] = [];\r\n\t\t\tlet snapToSeries = cursor.snapToSeries;\r\n\r\n\t\t\tif (snapToSeries && !cursor.downPoint) {\r\n\t\t\t\tif (snapToSeries instanceof XYSeries) {\r\n\t\t\t\t\tsnapToSeries = [snapToSeries];\r\n\t\t\t\t}\r\n\t\t\t\tlet dataItems: XYSeriesDataItem[] = [];\r\n\r\n\t\t\t\t$array.each(snapToSeries, (snpSeries) => {\r\n\t\t\t\t\tif (!snpSeries.isHidden && !snpSeries.isHiding) {\r\n\r\n\t\t\t\t\t\tlet xAxis = snpSeries.xAxis;\r\n\t\t\t\t\t\tlet yAxis = snpSeries.yAxis;\r\n\r\n\t\t\t\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\r\n\t\t\t\t\t\t\tsnpSeries.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\t\t\tdataItems.push(dataItem);\r\n\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.yAxis);\r\n\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.xAxis);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (snpSeries.baseAxis == snpSeries.xAxis) {\r\n\t\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.yAxis);\r\n\t\t\t\t\t\t\t\tdataItems.push(xAxis.getSeriesDataItem(snpSeries, xAxis.toAxisPosition(xPosition), true));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (snpSeries.baseAxis == snpSeries.yAxis) {\r\n\t\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.xAxis);\r\n\t\t\t\t\t\t\t\tdataItems.push(yAxis.getSeriesDataItem(snpSeries, yAxis.toAxisPosition(yPosition), true));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\tlet closestDataItem = this.getClosest(dataItems, xPosition, yPosition);\r\n\r\n\t\t\t\tif (closestDataItem) {\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tlet closestSeries = closestDataItem.component;\r\n\t\t\t\t\t\tif (series != closestSeries) {\r\n\t\t\t\t\t\t\tseries.hideTooltip();\r\n\t\t\t\t\t\t\tif (series.xAxis != closestSeries.xAxis) {\r\n\t\t\t\t\t\t\t\tseries.xAxis.hideTooltip();\r\n\t\t\t\t\t\t\t\texceptAxes.push(series.xAxis);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (series.yAxis != closestSeries.yAxis) {\r\n\t\t\t\t\t\t\t\tseries.yAxis.hideTooltip();\r\n\t\t\t\t\t\t\t\texceptAxes.push(series.yAxis);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tclosestDataItem.component.showTooltipAtDataItem(closestDataItem);\r\n\t\t\t\t\tcursor.handleSnap(closestDataItem.component);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t\tthis._seriesPoints = [];\r\n\r\n\t\t\tif (this._cursorXPosition != xPosition) {\r\n\t\t\t\tthis.showAxisTooltip(this.xAxes, xPosition, exceptAxes);\r\n\t\t\t}\r\n\t\t\tif (this._cursorYPosition != yPosition) {\r\n\t\t\t\tthis.showAxisTooltip(this.yAxes, yPosition, exceptAxes);\r\n\t\t\t}\r\n\t\t\tif (this.arrangeTooltips) {\r\n\t\t\t\tthis.sortSeriesTooltips(this._seriesPoints);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.legend) {\r\n\t\t\t\tthis.legend.afterDraw();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds closest data item to position out of the array of items.\r\n\t *\r\n\t * @since 4.9.29\r\n\t * @param   dataItems  Array of items\r\n\t * @param              xPosition X position\r\n\t * @param              yPosition Y position\r\n\t * @return             Data item\r\n\t */\r\n\tpublic getClosest(dataItems: XYSeriesDataItem[], xPosition: number, yPosition: number): XYSeriesDataItem {\r\n\t\tlet minDistance = Infinity;\r\n\t\tlet closestDataItem: XYSeriesDataItem\r\n\r\n\t\t$array.eachContinue(dataItems, (dataItem) => {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet xAxis = dataItem.component.xAxis;\r\n\t\t\t\tlet yAxis = dataItem.component.yAxis;\r\n\r\n\t\t\t\tlet xPos = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.toAxisPosition(xPosition)));\r\n\t\t\t\tlet yPos = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.toAxisPosition(yPosition)));\r\n\r\n\t\t\t\tlet xField = dataItem.component.xField;\r\n\t\t\t\tlet yField = dataItem.component.yField;\r\n\r\n\t\t\t\tif (xAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(xField))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif (yAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(yField))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet dxPosition = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\")));\r\n\t\t\t\tlet dyPosition = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.getPositionY(dataItem, yField, dataItem.locations[yField], \"valueY\")));\r\n\r\n\t\t\t\tlet distance = Math.sqrt(Math.pow(xPos - dxPosition, 2) + Math.pow(yPos - dyPosition, 2));\r\n\r\n\t\t\t\tif (distance < minDistance) {\r\n\t\t\t\t\tminDistance = distance;\r\n\t\t\t\t\tclosestDataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn closestDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\t\tthis._cursorXPosition = undefined;\r\n\t\tthis._cursorYPosition = undefined;\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Axis | XYSeries>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tif (sprite.cursorTooltipEnabled) {\r\n\t\t\t\tsprite.hideTooltip(0);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\r\n\t\t\tif ((series.xAxis instanceof DateAxis && series.xAxis.snapTooltip) || (series.yAxis instanceof DateAxis && series.yAxis.snapTooltip)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tseries.tooltip.setBounds($utils.spriteRectToSvg({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight }, this));\r\n\t\t\t\t\tseriesPoints.push({ series: series, point: point });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tif (this.arrangeTooltips) {\r\n\t\t\tthis.sortSeriesTooltips(seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic sortSeriesTooltips(seriesPoints: { point: IPoint, series: XYSeries }[]) {\r\n\t\tif (seriesPoints.length > 0) {\r\n\t\t\tlet cursor = this.cursor;\r\n\r\n\t\t\tif (cursor && $type.isNumber(cursor.maxTooltipDistance)) {\r\n\r\n\t\t\t\tlet cursorPoint = $utils.spritePointToSvg({ x: cursor.point.x, y: cursor.point.y }, cursor);\r\n\r\n\t\t\t\tlet nearestSeries: XYSeries;\r\n\t\t\t\tlet nearestPoint: IPoint;\r\n\t\t\t\tlet smallestDistance: number = Infinity;\r\n\r\n\t\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\t\tlet series = seriesPoint.series;\r\n\t\t\t\t\tlet fixedPoint = seriesPoint.point;\r\n\t\t\t\t\tif (fixedPoint) {\r\n\t\t\t\t\t\tlet point = { x: fixedPoint.x, y: fixedPoint.y };\r\n\r\n\t\t\t\t\t\tlet distance = Math.abs($math.getDistance(point, cursorPoint));\r\n\t\t\t\t\t\tif (distance < smallestDistance) {\r\n\t\t\t\t\t\t\tnearestPoint = point;\r\n\t\t\t\t\t\t\tsmallestDistance = distance;\r\n\t\t\t\t\t\t\tnearestSeries = series;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tlet newSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\t\tif (nearestSeries) {\r\n\r\n\t\t\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\t\t\tif (Math.abs($math.getDistance(seriesPoint.point, nearestPoint)) <= Math.abs(cursor.maxTooltipDistance)) {\r\n\t\t\t\t\t\t\tnewSeriesPoints.push({ series: seriesPoint.series, point: seriesPoint.point });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlet tooltipDataItem = seriesPoint.series.tooltipDataItem;\r\n\t\t\t\t\t\t\tif (tooltipDataItem) {\r\n\t\t\t\t\t\t\t\t$array.each(tooltipDataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\tsprite.isHover = false;\r\n\t\t\t\t\t\t\t\t\tsprite.handleOutReal(); // to avoid flicker\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tseriesPoint.series.hideTooltip(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tif (cursor.maxTooltipDistance < 0) {\r\n\t\t\t\t\t\tif (newSeriesPoints.length > 0) {\r\n\t\t\t\t\t\t\t$array.each(newSeriesPoints, (np) => {\r\n\t\t\t\t\t\t\t\tif (nearestSeries != np.series) {\r\n\t\t\t\t\t\t\t\t\tnp.series.hideTooltip(0);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnewSeriesPoints = [{ series: nearestSeries, point: nearestPoint }];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseriesPoints = newSeriesPoints;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\t\tlet sum = 0;\r\n\t\t\tlet filteredSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\tlet point = seriesPoint.point;\r\n\t\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\t\tfilteredSeriesPoints.push({ point: point, series: seriesPoint.series });\r\n\t\t\t\t\tsum += point.y;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tseriesPoints = filteredSeriesPoints;\r\n\r\n\t\t\tlet firstSeries = this.series.getIndex(0);\r\n\t\t\tlet inversed = false;\r\n\t\t\tif (firstSeries && firstSeries.yAxis && firstSeries.yAxis.renderer.inversed) {\r\n\t\t\t\tinversed = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (inversed) {\r\n\t\t\t\tseriesPoints.sort((a, b) => $number.order(a.point.y, b.point.y))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseriesPoints.sort((a, b) => $number.order(b.point.y, a.point.y))\r\n\t\t\t\tseriesPoints.reverse();\r\n\t\t\t}\r\n\r\n\t\t\tlet averageY = sum / seriesPoints.length;\r\n\t\t\tlet maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n\r\n\t\t\tif (seriesPoints.length > 0) {\r\n\t\t\t\tlet top = topLeft.y;\r\n\t\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t$utils.spritePointToDocument({ x: 0, y: top }, this);\r\n\r\n\t\t\t\tlet dropped = false;\r\n\r\n\t\t\t\tif (averageY > top + (bottom - top) / 2) {\r\n\t\t\t\t\tlet nextHeight = bottom;\r\n\t\t\t\t\tfor (let i = seriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\r\n\t\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\r\n\t\t\t\t\t\ttooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n\r\n\t\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttooltip.toBack();\r\n\t\t\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\r\n\t\t\t\t\t\tif (nextHeight < -maxY) {\r\n\t\t\t\t\t\t\tdropped = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (averageY <= top + (bottom - top) / 2 || dropped) {\r\n\t\t\t\t\tlet nextY = top;\r\n\t\t\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\t\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttooltip.toBack();\r\n\r\n\t\t\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes      List of axes to show tooltip on\r\n\t * @param position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number, except?: Axis[]): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (!except || except.indexOf(axis) == -1) {\r\n\t\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param axis   Axis\r\n\t * @param range  Range\r\n\t * @return Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis<this[\"_xAxisRendererType\"]>, range: IRange): IRange {\r\n\r\n\t\tif (!axis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t\tif (xAxis.renderer.inversed) {\r\n\t\t\t\tthis._panStartXRange = $math.invertRange(this._panStartXRange)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t\tif (yAxis.renderer.inversed) {\r\n\t\t\t\tthis._panStartYRange = $math.invertRange(this._panStartYRange)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet delta = 0;\r\n\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (panStartRange.end > 1) {\r\n\t\t\t\tif (panEndRange.end > panStartRange.end) {\r\n\t\t\t\t\tdelta = panEndRange.end - panStartRange.end;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.xAxes);\r\n\r\n\t\t\tlet difference = (panStartRange.end - panStartRange.start);\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleYAxisSet(series: XYSeries) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\tthis.events.on(\"datavalidated\", () => scrollbar.updateThumb(false), this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(\r\n\t\t\t\t\t\txAxis.renderer.inversed\r\n\t\t\t\t\t\t\t? 1 - arg.position\r\n\t\t\t\t\t\t\t: arg.position\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\tthis.events.on(\"datavalidated\", () => scrollbar.updateThumb(false), this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\r\n\t\t\trange = this.zoomAxes(this.xAxes, range);\r\n\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\t\t\trange = this.zoomAxes(this.yAxes, range);\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param axes       List of axes to zoom\r\n\t * @param range      Range of values to zoom to (0-1)\r\n\t * @param instantly  If set to `true` will skip zooming animation\r\n\t * @return Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis<this[\"_xAxisRendererType\"]>>, range: IRange, instantly?: boolean, round?: boolean, declination?: number, stop?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tlet originalRange = range;\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\r\n\t\t\t\tlet maxZoomFactor = axis.maxZoomFactor;\r\n\t\t\t\tif ($type.isNumber(axis.minZoomCount)) {\r\n\t\t\t\t\tmaxZoomFactor = maxZoomFactor / axis.minZoomCount\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (stop && 1 / (range.end - range.start) >= maxZoomFactor) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (axis.zoomable) {\r\n\t\t\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\t\t\trange = $math.invertRange(originalRange);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\trange = originalRange;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\t\t\tif (round) {\r\n\t\t\t\t\t\t\t//let diff = range.end - range.start;\r\n\t\t\t\t\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\t\t\t\t\tlet cellWidth = axis.getCellEndPosition(0) - axis.getCellStartPosition(0);\r\n\r\n\t\t\t\t\t\t\t\trange.start = axis.roundPosition(range.start + cellWidth / 2 - (axis.startLocation) * cellWidth, axis.startLocation);\r\n\t\t\t\t\t\t\t\trange.end = axis.roundPosition(range.end - cellWidth / 2 + (1 - axis.endLocation) * cellWidth, axis.endLocation);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0, axis.startLocation);\r\n\t\t\t\t\t\t\t\trange.end = axis.roundPosition(range.end + 0.0001, 0, axis.endLocation);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly, declination);\r\n\r\n\t\t\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\trealRange = axisRange;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"maskBullets\", value, true) && this.bulletsContainer) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.mask = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if chart should arrange series tooltips so that they would not\r\n\t * overlap.\r\n\t *\r\n\t * If set to `true` (default), the chart will adjust vertical positions of\r\n\t * all simultaneously shown tooltips to avoid overlapping.\r\n\t *\r\n\t * However, if you have a vertically-arranged chart, it might not make sense,\r\n\t * because tooltips would most probably not be aligned horizontally. In this\r\n\t * case it would probably be a good idea to set this setting to `false`.\r\n\t *\r\n\t * @default true\r\n\t * @param value Arrange tooltips?\r\n\t */\r\n\tpublic set arrangeTooltips(value: boolean) {\r\n\t\tthis.setPropertyValue(\"arrangeTooltips\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrange tooltips?\r\n\t */\r\n\tpublic get arrangeTooltips(): boolean {\r\n\t\treturn this.getPropertyValue(\"arrangeTooltips\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tthis.handleWheelReal(shift, this.mouseWheelBehavior, plotPoint);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleHorizontalWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\r\n\t\tthis.handleWheelReal(event.shift.x, this.horizontalMouseWheelBehavior, plotPoint)\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleWheelReal(shift: number, mouseWheelBehavior: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\", plotPoint: IPoint) {\r\n\t\tif (shift != 0) {\r\n\t\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet shiftStep = 0.1;\r\n\r\n\t\t\tlet maxPanOut = 0;\r\n\r\n\t\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100 * (rangeX.end - rangeX.start));\r\n\t\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (rangeX.end - rangeX.start), 1 + maxPanOut);\r\n\r\n\t\t\t\tif (newStartX <= 0) {\r\n\t\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newEndX >= 1) {\r\n\t\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\t\tshift *= -1;\r\n\t\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100 * (rangeY.end - rangeY.start));\r\n\t\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n\r\n\t\t\t\tif (newStartY <= 0) {\r\n\t\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newEndY >= 1) {\r\n\t\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\t\tlet location2X = this.xAxes.getIndex(0).toAxisPosition(locationX);\r\n\r\n\t\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * (rangeX.end - rangeX.start) * shift / 100 * locationX);\r\n\t\t\t\tnewStartX = Math.min(newStartX, location2X);\r\n\r\n\t\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * (rangeX.end - rangeX.start) * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\t\tnewEndX = Math.max(newEndX, location2X);\r\n\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX }, undefined, undefined, undefined, true);\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\t\tlet location2Y = this.yAxes.getIndex(0).toAxisPosition(locationY);\r\n\r\n\t\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * (rangeY.end - rangeY.start) * shift / 100 * (1 - locationY));\r\n\t\t\t\tnewStartY = Math.min(newStartY, location2Y);\r\n\r\n\t\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n\t\t\t\tnewEndY = Math.max(newEndY, location2Y);\r\n\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY }, undefined, undefined, undefined, true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`,`\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * You can control sensitivity of wheel zooming via `mouseOptions`.\r\n\t *\r\n\t * @default \"none\"\r\n\t * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when horizontal mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set horizontalMouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"horizontalMouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer2 = this.plotContainer.events.on(\"wheel\", this.handleHorizontalWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer2);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer2) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer2.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal mouse wheel behavior\r\n\t */\r\n\tpublic get horizontalMouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"horizontalMouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param fields  Array of date fields\r\n\t * @return Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param value  Array of number fields\r\n\t * @return Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\r\n\t\t\t\t\t\t// Maybe convert string dates?\r\n\t\t\t\t\t\tfor (let x = 0, len = config.xAxes[i][\"axisRanges\"].length; x < len; x++) {\r\n\t\t\t\t\t\t\tlet range = config.xAxes[i][\"axisRanges\"][x];\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n\t\t\t\t\t\t\t\trange.date = this.dateFormatter.parse(range.date);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n\t\t\t\t\t\t\t\trange.endDate = this.dateFormatter.parse(range.endDate);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\r\n\t\t\t\t\t\t// Maybe convert string dates?\r\n\t\t\t\t\t\tfor (let x = 0, len = config.yAxes[i][\"axisRanges\"].length; x < len; x++) {\r\n\t\t\t\t\t\t\tlet range = config.yAxes[i][\"axisRanges\"][x];\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n\t\t\t\t\t\t\t\trange.date = this.dateFormatter.parse(range.date);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n\t\t\t\t\t\t\t\trange.endDate = this.dateFormatter.parse(range.endDate);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"cursor\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"cursor\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\r\n\t\tsource.xAxes.each((axis) => {\r\n\t\t\tlet a = this.xAxes.push(axis.clone());\r\n\t\t\ta.chart = this;\r\n\t\t\ta.renderer.chart = this;\r\n\t\t})\r\n\r\n\t\tsource.yAxes.each((axis) => {\r\n\t\t\tlet a = this.yAxes.push(axis.clone());\r\n\t\t\ta.renderer.chart = this;\r\n\t\t\ta.chart = this;\r\n\t\t})\r\n\r\n\t\t//this.xAxes.copyFrom(source.xAxes);\r\n\t\t//this.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\t//this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\r\n\t\tif (source.cursor) {\r\n\t\t\tthis.cursor = source.cursor.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarX) {\r\n\t\t\tthis.scrollbarX = source.scrollbarX.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarY) {\r\n\t\t\tthis.scrollbarY = source.scrollbarY.clone();\r\n\t\t}\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX;\r\n\t\tif (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY;\r\n\t\tif (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\taxis.disposeData();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\taxis.disposeData();\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number): void {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarX, removeCount);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarY, removeCount);\r\n\t\t}\r\n\r\n\t\tsuper.addData(rawDataItem, removeCount);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected addScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tchart._parseDataFrom = chart.data.length;\r\n\t\tchart.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected removeScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tif ($type.isNumber(removeCount)) {\r\n\t\t\twhile (removeCount > 0) {\r\n\t\t\t\tlet dataItem = this.dataItems.getIndex(0);\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchart.dataItems.remove(dataItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchart.dataUsers.each((dataUser) => {\r\n\t\t\t\t\tlet dataItem = dataUser.dataItems.getIndex(0);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataUser.dataItems.remove(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tchart._parseDataFrom--;\r\n\r\n\t\t\t\tremoveCount--;\r\n\t\t\t}\r\n\r\n\t\t\tchart.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes elements from the beginning of data\r\n\t *\r\n\t * @param count number of elements to remove\r\n\t */\r\n\tpublic removeData(count: $type.Optional<number>) {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarX, count);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarY, count);\r\n\t\t}\r\n\r\n\t\tsuper.removeData(count);\r\n\t}\r\n\r\n\t/**\r\n\t * @param  value  Tap to activate?\r\n\t */\r\n\tprotected setTapToActivate(value: boolean): void {\r\n\t\tsuper.setTapToActivate(value);\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = value;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = value;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivate(): void {\r\n\t\tsuper.handleTapToActivate();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = false;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = false;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivateDeactivation(): void {\r\n\t\tsuper.handleTapToActivateDeactivation();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = true;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = true;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarX.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarY.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n"]},"metadata":{},"sourceType":"module"}