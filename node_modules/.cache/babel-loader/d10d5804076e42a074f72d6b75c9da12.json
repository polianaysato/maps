{"ast":null,"code":"/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\nimport { ConeColumn } from \"../elements/ConeColumn\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar ConeSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(ConeSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ConeSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ConeSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return ConeSeriesDataItem;\n}(ColumnSeriesDataItem);\n\nexport { ConeSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar ConeSeries =\n/** @class */\nfunction (_super) {\n  __extends(ConeSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ConeSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ConeSeries\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns an element to use for Candlestick\r\n   * @ignore\r\n   * @return Element.\r\n   */\n\n\n  ConeSeries.prototype.createColumnTemplate = function () {\n    return new ConeColumn();\n  };\n  /**\r\n   * Returns an SVG path to use as series mask.\r\n   *\r\n   * @return SVG path\r\n   */\n\n\n  ConeSeries.prototype.getMaskPath = function () {\n    var dx = 0;\n    var dy = 0;\n    var column = this.columns.getIndex(0);\n\n    if (column) {\n      if (this.baseAxis == this.xAxis) {\n        dy = column.coneColumn.innerWidth / 2 + 1;\n      } else {\n        dx = column.coneColumn.innerHeight / 2 + 1;\n      }\n\n      return $path.rectToPath({\n        x: -dx,\n        y: 0,\n        width: this.xAxis.axisLength + dx,\n        height: this.yAxis.axisLength + dy\n      });\n    }\n  };\n  /**\r\n   * Validates data item's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  ConeSeries.prototype.validateDataElementReal = function (dataItem) {\n    _super.prototype.validateDataElementReal.call(this, dataItem);\n\n    var column = dataItem.column;\n\n    if (column) {\n      var coneColumn = dataItem.column.coneColumn;\n      coneColumn.fill = dataItem.column.fill;\n\n      if (this.baseAxis == this.yAxis) {\n        coneColumn.orientation = \"horizontal\";\n      } else {\n        coneColumn.orientation = \"vertical\";\n      }\n    }\n  };\n\n  return ConeSeries;\n}(ColumnSeries);\n\nexport { ConeSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;","map":{"version":3,"mappings":"AAAA;;;;;AAKA;;;;;;;AAMA,SAASA,YAAT,EAAqHC,oBAArH,QAAiJ,gBAAjJ;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,2BAAvB;AAGA;;;;;;;AAOA;;;;;;AAKA;AAAA;AAAA;AAAwCC;AAavC;;;;;AAGA;AAAA,gBACCC,qBAAO,IADR;;AAECC,SAAI,CAACC,SAAL,GAAiB,oBAAjB;;AACAD,SAAI,CAACE,UAAL;;;AACA;;AAEF;AAtBA,EAAwCR,oBAAxC;;;AAuDA;;;;;;;AAOA;;;;;;;;;AAQA;AAAA;AAAA;AAAgCI;AA+B/B;;;;;AAGA;AAAA,gBACCC,qBAAO,IADR;;AAGCC,SAAI,CAACC,SAAL,GAAiB,YAAjB;;AACAD,SAAI,CAACE,UAAL;;;AACA;AAED;;;;;;;AAKUC,8CAAV;AACC,WAAO,IAAIR,UAAJ,EAAP;AACA,GAFS;AAIV;;;;;;;AAKUQ,qCAAV;AACC,QAAIC,EAAE,GAAG,CAAT;AACA,QAAIC,EAAE,GAAG,CAAT;AACA,QAAIC,MAAM,GAAG,KAAKC,OAAL,CAAaC,QAAb,CAAsB,CAAtB,CAAb;;AAEA,QAAGF,MAAH,EAAU;AACT,UAAI,KAAKG,QAAL,IAAiB,KAAKC,KAA1B,EAAiC;AAChCL,UAAE,GAAGC,MAAM,CAACK,UAAP,CAAkBC,UAAlB,GAA+B,CAA/B,GAAmC,CAAxC;AACA,OAFD,MAGK;AACJR,UAAE,GAAGE,MAAM,CAACK,UAAP,CAAkBE,WAAlB,GAAgC,CAAhC,GAAoC,CAAzC;AACA;;AAED,aAAOhB,KAAK,CAACiB,UAAN,CAAiB;AACvBC,SAAC,EAAE,CAACX,EADmB;AAEvBY,SAAC,EAAE,CAFoB;AAGvBC,aAAK,EAAE,KAAKP,KAAL,CAAWQ,UAAX,GAAwBd,EAHR;AAIvBe,cAAM,EAAE,KAAKC,KAAL,CAAWF,UAAX,GAAwBb;AAJT,OAAjB,CAAP;AAMA;AACD,GApBS;AAuBV;;;;;;;;AAMOF,iDAAP,UAA+BkB,QAA/B,EAA0D;AACzDtB,qBAAMuB,uBAAN,CAA6BC,IAA7B,CAA6B,IAA7B,EAA8BF,QAA9B;;AACA,QAAIf,MAAM,GAAGe,QAAQ,CAACf,MAAtB;;AACA,QAAGA,MAAH,EAAU;AACT,UAAIK,UAAU,GAAGU,QAAQ,CAACf,MAAT,CAAgBK,UAAjC;AAEAA,gBAAU,CAACa,IAAX,GAAkBH,QAAQ,CAACf,MAAT,CAAgBkB,IAAlC;;AAEA,UAAI,KAAKf,QAAL,IAAiB,KAAKW,KAA1B,EAAiC;AAChCT,kBAAU,CAACc,WAAX,GAAyB,YAAzB;AACA,OAFD,MAGK;AACJd,kBAAU,CAACc,WAAX,GAAyB,UAAzB;AACA;AACD;AACD,GAfM;;AAgBR;AApGA,EAAgChC,YAAhC;;;AAsGA;;;;;;;AAMAG,QAAQ,CAAC8B,iBAAT,CAA2B,YAA3B,IAA2CvB,UAA3C;AACAP,QAAQ,CAAC8B,iBAAT,CAA2B,oBAA3B,IAAmDC,kBAAnD","names":["ColumnSeries","ColumnSeriesDataItem","ConeColumn","registry","$path","__extends","_super","_this","className","applyTheme","ConeSeries","dx","dy","column","columns","getIndex","baseAxis","xAxis","coneColumn","innerWidth","innerHeight","rectToPath","x","y","width","axisLength","height","yAxis","dataItem","validateDataElementReal","call","fill","orientation","registeredClasses","ConeSeriesDataItem"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/series/ConeSeries.ts"],"sourcesContent":["/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\t\t\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.innerWidth / 2 + 1\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.innerHeight / 2 + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n"]},"metadata":{},"sourceType":"module"}