{"ast":null,"code":"/**\r\n * Preloader module.\r\n *\r\n * Preloader is a progress indicator.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../Container\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { Slice } from \"./Slice\";\nimport { Label } from \"./Label\";\nimport { registry } from \"../Registry\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A class used to draw and display progress indicator.\r\n *\r\n * @see {@link IPreloaderEvents} for a list of available events\r\n * @see {@link IPreloaderAdapters} for a list of available Adapters\r\n */\n\nvar Preloader =\n/** @class */\nfunction (_super) {\n  __extends(Preloader, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Preloader() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"Preloader\"; // Set dimensions\n\n    _this.width = percent(100);\n    _this.height = percent(100);\n    var interfaceColors = new InterfaceColorSet(); // Create main container\n\n    var sliceContainer = _this.createChild(Container);\n\n    sliceContainer.shouldClone = false; // Add background (100%) slice\n\n    var backgroundSlice = sliceContainer.createChild(Slice);\n    backgroundSlice.shouldClone = false;\n    backgroundSlice.radius = 53;\n    backgroundSlice.arc = 360;\n    backgroundSlice.fill = interfaceColors.getFor(\"fill\");\n    backgroundSlice.fillOpacity = 0.8;\n    backgroundSlice.innerRadius = 42;\n    backgroundSlice.isMeasured = false;\n    _this.backgroundSlice = backgroundSlice; // Add progress slice\n\n    var progressSlice = sliceContainer.createChild(Slice);\n    progressSlice.shouldClone = false;\n    progressSlice.radius = 50;\n    progressSlice.innerRadius = 45;\n    progressSlice.fill = interfaceColors.getFor(\"alternativeBackground\");\n    progressSlice.fillOpacity = 0.2;\n    progressSlice.isMeasured = false;\n    _this.progressSlice = progressSlice; // Add text label element\n\n    var label = sliceContainer.createChild(Label);\n    label.shouldClone = false;\n    label.horizontalCenter = \"middle\";\n    label.verticalCenter = \"middle\";\n    label.isMeasured = false;\n    label.fill = interfaceColors.getFor(\"text\");\n    label.align = \"center\";\n    label.valign = \"middle\";\n    label.textAlign = \"middle\";\n    label.fillOpacity = 0.4;\n    _this.label = label; // Set defaults\n\n    _this.background.opacity = 1;\n    _this.background.fill = interfaceColors.getFor(\"background\");\n    _this.contentAlign = \"center\";\n    _this.contentValign = \"middle\";\n    _this.delay = 300; // Create hidden state\n\n    var hiddenState = _this.states.create(\"hidden\");\n\n    hiddenState.properties.opacity = 0; // Hide by default\n\n    _this.visible = false;\n\n    _this.hide(0);\n\n    _this.__disabled = true; // Make it disposable\n    // @todo Maybe it's enough to just dispose `sliceContainer`?\n\n    _this._disposers.push(_this.backgroundSlice);\n\n    _this._disposers.push(_this.progressSlice);\n\n    _this._disposers.push(_this.label);\n\n    _this._disposers.push(sliceContainer);\n\n    return _this;\n  }\n\n  Object.defineProperty(Preloader.prototype, \"progress\", {\n    /**\r\n     * @return Progress (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"progress\");\n    },\n\n    /**\r\n     * Current preload progress. (0-1)\r\n     *\r\n     * * 0 - 0%\r\n     * * 0.5 - 50%\r\n     * * 1 - 100%\r\n     *\r\n     * Setting this to a value less than 1, will automatically reveal the\r\n     * preloader, while setting it to 1 (100%) will hide it.\r\n     *\r\n     * @param value Progress (0-1)\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      this.__disabled = false;\n      this.validateLayout(); // show not in center without this\n\n      this.setPropertyValue(\"progress\", value);\n      /*if (!this.visible && value == 1) {\r\n          return;\r\n      }*/\n\n      this.progressSlice.arc = 360 * value;\n\n      if (this.label) {\n        this.label.text = Math.round(value * 100) + \"%\";\n      }\n\n      if (value >= 1) {\n        // Cancel the timeout\n        if (this._started) {\n          this._started = undefined;\n        } // TODO remove closure ?\n\n\n        registry.events.once(\"enterframe\", function () {\n          var animation = _this.hide();\n\n          if (animation && !animation.isFinished()) {\n            animation.events.once(\"animationended\", function () {\n              _this.__disabled = true;\n            });\n          } else {\n            _this.__disabled = true;\n          }\n        });\n        this.interactionsEnabled = false;\n        this.setPropertyValue(\"progress\", 0);\n      } else if (value > 0) {\n        if (this.delay) {\n          if (!this._started) {\n            this._started = new Date().getTime();\n          } else if (this._started + this.delay <= new Date().getTime()) {\n            this.__disabled = false;\n            this.show();\n            this.interactionsEnabled = true;\n          }\n        } else {\n          this.__disabled = false;\n          this.show();\n          this.interactionsEnabled = true;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Preloader.prototype, \"delay\", {\n    /**\r\n     * @return Delay (ms)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"delay\");\n    },\n\n    /**\r\n     * Delay display of preloader by X milliseconds.\r\n     *\r\n     * When loading starts (`progress` is set to <1) and finishes (`progress` is\r\n     * set to 1) before `delay` ms, the loader is never shown.\r\n     *\r\n     * This is used to avoid brief flashing of the preload for very quick loads.\r\n     *\r\n     * @default 1000\r\n     * @param value  Delay (ms)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"delay\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Preloader;\n}(Container);\n\nexport { Preloader };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Preloader\"] = Preloader;","map":{"version":3,"mappings":"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","names":["Container","InterfaceColorSet","Slice","Label","registry","percent","__extends","_super","_this","className","width","height","interfaceColors","sliceContainer","createChild","shouldClone","backgroundSlice","radius","arc","fill","getFor","fillOpacity","innerRadius","isMeasured","progressSlice","label","horizontalCenter","verticalCenter","align","valign","textAlign","background","opacity","contentAlign","contentValign","delay","hiddenState","states","create","properties","visible","hide","__disabled","_disposers","push","Object","Preloader","getPropertyValue","value","validateLayout","setPropertyValue","text","Math","round","_started","undefined","events","once","animation","isFinished","interactionsEnabled","Date","getTime","show","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/core/elements/Preloader.ts"],"sourcesContent":["/**\r\n * Preloader module.\r\n *\r\n * Preloader is a progress indicator.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Slice } from \"./Slice\";\r\nimport { Label } from \"./Label\";\r\nimport { registry } from \"../Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Preloader]].\r\n */\r\nexport interface IPreloaderProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Current preload progress. (0-1)\r\n\t *\r\n\t * * 0 - 0%\r\n\t * * 0.5 - 50%\r\n\t * * 1 - 100%\r\n\t */\r\n\tprogress?: number;\r\n\r\n\t/**\r\n\t * Delay display of preloader by X milliseconds.\r\n\t *\r\n\t * When loading starts (`progress` is set to <1) and finishes (`progress` is\r\n\t * set to 1) before `delay` ms, the loader is never shown.\r\n\t *\r\n\t * This is used to avoid brief flashing of the preload for very quick loads.\r\n\t *\r\n\t * @default 1000\r\n\t */\r\n\tdelay?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Preloader]].\r\n */\r\nexport interface IPreloaderEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Preloader]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPreloaderAdapters extends IContainerAdapters, IPreloaderProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A class used to draw and display progress indicator.\r\n *\r\n * @see {@link IPreloaderEvents} for a list of available events\r\n * @see {@link IPreloaderAdapters} for a list of available Adapters\r\n */\r\nexport class Preloader extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPreloaderProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPreloaderAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPreloaderEvents;\r\n\r\n\t/**\r\n\t * A [[Slice]] element that indicates load progress.\r\n\t *\r\n\t * This can be used to modify appearance of the preloader elements.\r\n\t */\r\n\tpublic progressSlice: Slice;\r\n\r\n\t/**\r\n\t * A [[Slice]] element that shows the full ring. (background for the\r\n\t * `progressSlice`)\r\n\t *\r\n\t * This can be used to modify appearance of the preloader elements.\r\n\t */\r\n\tpublic backgroundSlice: Slice;\r\n\r\n\t/**\r\n\t * Label that displays progress in percent.\r\n\t *\r\n\t * This can be used to modify appearance of the preloader elements.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * Logs the timestamp of when the loader was initiated. It will be used to\r\n\t * delay showing of the Preloader so for quick operations it does not even\r\n\t * appear on screen.\r\n\t */\r\n\tprotected _started: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Preloader\";\r\n\r\n\t\t// Set dimensions\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create main container\r\n\t\tlet sliceContainer: Container = this.createChild(Container);\r\n\t\tsliceContainer.shouldClone = false;\r\n\r\n\t\t// Add background (100%) slice\r\n\t\tlet backgroundSlice: Slice = sliceContainer.createChild(Slice);\r\n\t\tbackgroundSlice.shouldClone = false;\r\n\t\tbackgroundSlice.radius = 53;\r\n\t\tbackgroundSlice.arc = 360;\r\n\t\tbackgroundSlice.fill = interfaceColors.getFor(\"fill\");\r\n\t\tbackgroundSlice.fillOpacity = 0.8;\r\n\t\tbackgroundSlice.innerRadius = 42;\r\n\t\tbackgroundSlice.isMeasured = false;\r\n\t\tthis.backgroundSlice = backgroundSlice;\r\n\r\n\t\t// Add progress slice\r\n\t\tlet progressSlice: Slice = sliceContainer.createChild(Slice);\r\n\t\tprogressSlice.shouldClone = false;\r\n\t\tprogressSlice.radius = 50;\r\n\t\tprogressSlice.innerRadius = 45;\r\n\t\tprogressSlice.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tprogressSlice.fillOpacity = 0.2;\r\n\t\tprogressSlice.isMeasured = false;\r\n\t\tthis.progressSlice = progressSlice;\r\n\r\n\t\t// Add text label element\r\n\t\tlet label: Label = sliceContainer.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.fill = interfaceColors.getFor(\"text\");\r\n\t\tlabel.align = \"center\";\r\n\t\tlabel.valign = \"middle\";\r\n\t\tlabel.textAlign = \"middle\";\r\n\t\tlabel.fillOpacity = 0.4;\r\n\t\tthis.label = label;\r\n\r\n\t\t// Set defaults\r\n\t\tthis.background.opacity = 1;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\t\tthis.contentAlign = \"center\";\r\n\t\tthis.contentValign = \"middle\";\r\n\t\tthis.delay = 300;\r\n\r\n\t\t// Create hidden state\r\n\t\tlet hiddenState = this.states.create(\"hidden\");\r\n\t\thiddenState.properties.opacity = 0;\r\n\r\n\t\t// Hide by default\r\n\t\tthis.visible = false;\r\n\t\tthis.hide(0);\r\n\t\tthis.__disabled = true;\r\n\r\n\t\t// Make it disposable\r\n\t\t// @todo Maybe it's enough to just dispose `sliceContainer`?\r\n\t\tthis._disposers.push(this.backgroundSlice);\r\n\t\tthis._disposers.push(this.progressSlice);\r\n\t\tthis._disposers.push(this.label);\r\n\t\tthis._disposers.push(sliceContainer);\r\n\t}\r\n\r\n\t/**\r\n\t * Current preload progress. (0-1)\r\n\t *\r\n\t * * 0 - 0%\r\n\t * * 0.5 - 50%\r\n\t * * 1 - 100%\r\n\t *\r\n\t * Setting this to a value less than 1, will automatically reveal the\r\n\t * preloader, while setting it to 1 (100%) will hide it.\r\n\t *\r\n\t * @param value Progress (0-1)\r\n\t */\r\n\tpublic set progress(value: number) {\r\n\t\tthis.__disabled = false;\r\n\r\n\t\tthis.validateLayout(); // show not in center without this\r\n\r\n\t\tthis.setPropertyValue(\"progress\", value);\r\n\r\n\t\t/*if (!this.visible && value == 1) {\r\n\t\t\treturn;\r\n\t\t}*/\r\n\r\n\t\tthis.progressSlice.arc = 360 * value;\r\n\r\n\t\tif (this.label) {\r\n\t\t\tthis.label.text = Math.round(value * 100) + \"%\";\r\n\t\t}\r\n\r\n\t\tif (value >= 1) {\r\n\r\n\t\t\t// Cancel the timeout\r\n\t\t\tif (this._started) {\r\n\t\t\t\tthis._started = undefined;\r\n\t\t\t}\r\n\r\n\t\t\t// TODO remove closure ?\r\n\t\t\tregistry.events.once(\"enterframe\", () => {\r\n\t\t\t\tlet animation = this.hide();\r\n\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\tanimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.interactionsEnabled = false;\r\n\t\t\tthis.setPropertyValue(\"progress\", 0);\r\n\t\t}\r\n\t\telse if (value > 0) {\r\n\t\t\tif (this.delay) {\r\n\t\t\t\tif (!this._started) {\r\n\t\t\t\t\tthis._started = new Date().getTime();\r\n\t\t\t\t}\r\n\t\t\t\telse if ((this._started + this.delay) <= new Date().getTime()) {\r\n\t\t\t\t\tthis.__disabled = false;\r\n\t\t\t\t\tthis.show();\r\n\t\t\t\t\tthis.interactionsEnabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.__disabled = false;\r\n\t\t\t\tthis.show();\r\n\t\t\t\tthis.interactionsEnabled = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @return Progress (0-1)\r\n\t */\r\n\tpublic get progress(): number {\r\n\t\treturn this.getPropertyValue(\"progress\");\r\n\t}\r\n\r\n\t/**\r\n\t * Delay display of preloader by X milliseconds.\r\n\t *\r\n\t * When loading starts (`progress` is set to <1) and finishes (`progress` is\r\n\t * set to 1) before `delay` ms, the loader is never shown.\r\n\t *\r\n\t * This is used to avoid brief flashing of the preload for very quick loads.\r\n\t *\r\n\t * @default 1000\r\n\t * @param value  Delay (ms)\r\n\t */\r\n\tpublic set delay(value: number) {\r\n\t\tthis.setPropertyValue(\"delay\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Delay (ms)\r\n\t */\r\n\tpublic get delay(): number {\r\n\t\treturn this.getPropertyValue(\"delay\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Preloader\"] = Preloader;\r\n"]},"metadata":{},"sourceType":"module"}