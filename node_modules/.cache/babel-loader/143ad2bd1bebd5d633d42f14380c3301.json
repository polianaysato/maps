{"ast":null,"code":"/**\r\n * Functionality for drawing triangles.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $path from \"../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to draw a triangle.\r\n *\r\n * @see {@link ITriangleEvents} for a list of available events\r\n * @see {@link ITriangleAdapters} for a list of available Adapters\r\n */\n\nvar Triangle =\n/** @class */\nfunction (_super) {\n  __extends(Triangle, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Triangle() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Triangle\";\n    _this.element = _this.paper.add(\"path\");\n    _this.direction = \"top\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Triangle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.pixelWidth;\n    var h = this.pixelHeight;\n    var path;\n\n    switch (this.direction) {\n      case \"right\":\n        path = $path.moveTo({\n          x: 0,\n          y: 0\n        }) + $path.lineTo({\n          x: w,\n          y: h / 2\n        }) + $path.lineTo({\n          x: 0,\n          y: h\n        }) + $path.closePath();\n        break;\n\n      case \"left\":\n        path = $path.moveTo({\n          x: w,\n          y: 0\n        }) + $path.lineTo({\n          x: 0,\n          y: h / 2\n        }) + $path.lineTo({\n          x: w,\n          y: h\n        }) + $path.closePath();\n        break;\n\n      case \"bottom\":\n        path = $path.moveTo({\n          x: 0,\n          y: 0\n        }) + $path.lineTo({\n          x: w,\n          y: 0\n        }) + $path.lineTo({\n          x: w / 2,\n          y: h\n        }) + $path.closePath();\n        break;\n\n      case \"top\":\n        path = $path.moveTo({\n          x: w / 2,\n          y: 0\n        }) + $path.lineTo({\n          x: w,\n          y: h\n        }) + $path.lineTo({\n          x: 0,\n          y: h\n        }) + $path.closePath();\n        break;\n    }\n\n    this.path = path;\n  };\n\n  Object.defineProperty(Triangle.prototype, \"direction\", {\n    /**\r\n     * Returns direction of a triangle\r\n     *\r\n     * @return value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"direction\");\n    },\n\n    /**\r\n     * Sets direction of a triangle\r\n     *\r\n     * @param value\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"direction\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Triangle;\n}(Sprite);\n\nexport { Triangle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Triangle\"] = Triangle;","map":{"version":3,"mappings":"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","names":["Sprite","registry","$path","__extends","_super","_this","className","element","paper","add","direction","applyTheme","Triangle","draw","call","w","pixelWidth","h","pixelHeight","path","moveTo","x","y","lineTo","closePath","Object","getPropertyValue","value","setPropertyValue","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/core/elements/Triangle.ts"],"sourcesContent":["/**\r\n * Functionality for drawing triangles.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Triangle]].\r\n */\r\nexport interface ITriangleProperties extends ISpriteProperties {\r\n\tdirection: \"left\" | \"right\" | \"top\" | \"bottom\"\r\n}\r\n\r\n/**\r\n * Defines events for [[Triangle]].\r\n */\r\nexport interface ITriangleEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Triangle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITriangleAdapters extends ISpriteAdapters, ITriangleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a triangle.\r\n *\r\n * @see {@link ITriangleEvents} for a list of available events\r\n * @see {@link ITriangleAdapters} for a list of available Adapters\r\n */\r\nexport class Triangle extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITriangleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITriangleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITriangleEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Triangle\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.direction = \"top\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w: number = this.pixelWidth;\r\n\t\tlet h: number = this.pixelHeight;\r\n\r\n\t\tlet path: string;\r\n\r\n\r\n\r\n\t\tswitch (this.direction) {\r\n\t\t\tcase \"right\":\r\n\t\t\t\tpath = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t\t+ $path.lineTo({ x: w, y: h / 2 })\r\n\t\t\t\t\t+ $path.lineTo({ x: 0, y: h })\r\n\t\t\t\t\t+ $path.closePath();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"left\":\r\n\t\t\t\tpath = $path.moveTo({ x: w, y: 0 })\r\n\t\t\t\t\t+ $path.lineTo({ x: 0, y: h / 2 })\r\n\t\t\t\t\t+ $path.lineTo({ x: w, y: h })\r\n\t\t\t\t\t+ $path.closePath();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"bottom\":\r\n\t\t\t\tpath = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t\t+ $path.lineTo({ x: w / 2, y: h })\r\n\t\t\t\t\t+ $path.closePath();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"top\":\r\n\t\t\t\tpath = $path.moveTo({ x: w / 2, y: 0 })\r\n\t\t\t\t\t+ $path.lineTo({ x: w, y: h })\r\n\t\t\t\t\t+ $path.lineTo({ x: 0, y: h })\r\n\t\t\t\t\t+ $path.closePath();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tthis.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets direction of a triangle\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set direction(value: \"left\" | \"right\" | \"top\" | \"bottom\") {\r\n\t\tthis.setPropertyValue(\"direction\", value, true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns direction of a triangle\r\n\t *\r\n\t * @return value\r\n\t */\r\n\tpublic get direction(): \"left\" | \"right\" | \"top\" | \"bottom\" {\r\n\t\treturn this.getPropertyValue(\"direction\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Triangle\"] = Triangle;\r\n"]},"metadata":{},"sourceType":"module"}