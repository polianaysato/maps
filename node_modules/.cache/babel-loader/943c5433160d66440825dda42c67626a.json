{"ast":null,"code":"/**\r\n * Serial chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Chart, ChartDataItem } from \"../Chart\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Container } from \"../../core/Container\";\nimport { Series } from \"../series/Series\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[SerialChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar SerialChartDataItem =\n/** @class */\nfunction (_super) {\n  __extends(SerialChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SerialChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"SerialChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return SerialChartDataItem;\n}(ChartDataItem);\n\nexport { SerialChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A base class for all series-based charts, like XY, Pie, etc.\r\n *\r\n * Is not useful on its own.\r\n *\r\n * @see {@link ISerialChartEvents} for a list of available Events\r\n * @see {@link ISerialChartAdapters} for a list of available Adapters\r\n */\n\nvar SerialChart =\n/** @class */\nfunction (_super) {\n  __extends(SerialChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SerialChart() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"SerialChart\";\n    _this.colors = new ColorSet();\n    _this._usesData = false; // Create a container for series\n\n    var seriesContainer = _this.chartContainer.createChild(Container);\n\n    seriesContainer.shouldClone = false;\n    seriesContainer.width = percent(100);\n    seriesContainer.height = percent(100);\n    seriesContainer.isMeasured = false;\n    seriesContainer.layout = \"none\";\n    seriesContainer.zIndex = 2;\n    _this.seriesContainer = seriesContainer; // Create a container for bullets\n\n    var bulletsContainer = _this.chartContainer.createChild(Container);\n\n    bulletsContainer.shouldClone = false;\n    bulletsContainer.width = percent(100);\n    bulletsContainer.height = percent(100);\n    bulletsContainer.isMeasured = false;\n    bulletsContainer.zIndex = 3;\n    bulletsContainer.layout = \"none\";\n    _this.bulletsContainer = bulletsContainer; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  SerialChart.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    if (this.colors) {\n      this.colors.dispose();\n    }\n\n    if (this.patterns) {\n      this.patterns.dispose();\n    }\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor\r\n   */\n\n\n  SerialChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Serial chart\");\n    }\n  };\n\n  Object.defineProperty(SerialChart.prototype, \"series\", {\n    /**\r\n     * A list of chart's series.\r\n     *\r\n     * @return Chart's series\r\n     */\n    get: function () {\n      if (!this._series) {\n        this._series = new ListTemplate(this.createSeries());\n\n        this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\n\n        this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\n\n        this._disposers.push(new ListDisposer(this._series, false));\n\n        this._disposers.push(this._series.template);\n      }\n\n      return this._series;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SerialChart.prototype.handleSeriesRemoved = function (event) {\n    var series = event.oldValue;\n    this.dataUsers.removeValue(series);\n    this.dataUsers.each(function (dataUser) {\n      dataUser.invalidateDataItems();\n    });\n\n    if (series.autoDispose) {\n      series.dispose();\n    } else {\n      series.parent = undefined;\n      series.bulletsContainer.parent = undefined;\n    } //this.feedLegend();\n\n\n    var legend = this.legend;\n\n    if (legend) {\n      var dataItems = this.legend.dataItems;\n\n      for (var i = dataItems.length - 1; i >= 0; i--) {\n        var dataItem = dataItems.getIndex(i);\n\n        if (dataItem && dataItem.dataContext == series) {\n          legend.dataItems.remove(dataItem);\n        }\n      }\n\n      for (var i = legend.data.length - 1; i >= 0; i--) {\n        var di = legend.data[i];\n\n        if (di && di == series) {\n          $array.remove(legend.data, di);\n        }\n      }\n    }\n  };\n  /**\r\n   * Decorates a new [[Series]] object with required parameters when it is\r\n   * added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  SerialChart.prototype.handleSeriesAdded = function (event) {\n    var _this = this;\n\n    var series = event.newValue;\n\n    if (series.isDisposed()) {\n      return;\n    }\n\n    series.chart = this;\n    series.parent = this.seriesContainer;\n    series.bulletsContainer.parent = this.bulletsContainer;\n\n    this._dataUsers.moveValue(series);\n\n    series.addDisposer(new Disposer(function () {\n      _this.dataUsers.removeValue(series);\n    }));\n    this.handleSeriesAdded2(series);\n    this.handleLegendSeriesAdded(series);\n  };\n\n  SerialChart.prototype.handleLegendSeriesAdded = function (series) {\n    if (!series.hiddenInLegend) {\n      if (this.legend) {\n        this.legend.addData(series);\n      }\n    }\n  };\n\n  SerialChart.prototype.handleSeriesAdded2 = function (series) {\n    var _this = this;\n\n    if (!this.dataInvalid) {\n      this._disposers.push( // on exit only as data is usually passed after push\n      registry.events.once(\"exitframe\", function () {\n        if (!series.data || series.data.length == 0) {\n          series.data = _this.data;\n\n          if (series.showOnInit) {\n            series.reinit();\n            series.setPropertyValue(\"showOnInit\", false);\n            series.showOnInit = true;\n          }\n\n          if (!series.isDisposed()) {\n            series.events.once(\"datavalidated\", function () {\n              if (series.data == _this.data) {\n                series._data = [];\n              }\n            });\n          }\n        }\n      }));\n    }\n  };\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n\n\n  SerialChart.prototype.feedLegend = function () {\n    var legend = this.legend;\n\n    if (legend) {\n      var legendData_1 = [];\n      $iter.each(this.series.iterator(), function (series) {\n        if (!series.hiddenInLegend) {\n          legendData_1.push(series);\n        }\n      });\n      legend.dataFields.name = \"name\";\n      legend.data = legendData_1;\n    }\n  };\n  /**\r\n   * Creates and returns a new Series, suitable for this chart type.\r\n   *\r\n   * @return New series\r\n   */\n\n\n  SerialChart.prototype.createSeries = function () {\n    return new Series();\n  };\n\n  Object.defineProperty(SerialChart.prototype, \"colors\", {\n    /**\r\n     * @return Color list\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"colors\");\n    },\n\n    /**\r\n     * Chart's color list.\r\n     *\r\n     * This list can be used by a number of serial items, like applying a new\r\n     * color for each Series added. Or, applying a new color for each slice\r\n     * of a Pie chart.\r\n     *\r\n     * Please see [[ColorSet]] for information on how you can set up to generate\r\n     * unique colors.\r\n     *\r\n     * A theme you are using may override default pre-defined colors.\r\n     *\r\n     * @param value Color list\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"colors\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SerialChart.prototype, \"patterns\", {\n    /**\r\n     * @return Pattern set\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"patterns\");\n    },\n\n    /**\r\n     * A [[PatternSet]] to use when creating patterned fills for slices.\r\n     *\r\n     * @since 4.7.5\r\n     * @param value  Pattern set\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"patterns\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all parameters from another [[SerialChart]].\r\n   *\r\n   * @param source Source SerialChart\r\n   */\n\n  SerialChart.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.series.copyFrom(source.series);\n  };\n  /**\r\n   * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n   */\n\n\n  SerialChart.prototype.appear = function () {\n    _super.prototype.appear.call(this);\n\n    this.series.each(function (series) {\n      if (series.showOnInit && series.inited) {\n        series.appear();\n      }\n    });\n  };\n\n  return SerialChart;\n}(Chart);\n\nexport { SerialChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"SerialChart\"] = SerialChart;","map":{"version":3,"mappings":"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","names":["Chart","ChartDataItem","ListTemplate","ListDisposer","Container","Series","percent","ColorSet","registry","$iter","$type","$array","Disposer","__extends","_super","_this","className","applyTheme","colors","_usesData","seriesContainer","chartContainer","createChild","shouldClone","width","height","isMeasured","layout","zIndex","bulletsContainer","SerialChart","dispose","call","patterns","applyInternalDefaults","hasValue","readerTitle","language","translate","Object","_series","createSeries","events","on","handleSeriesAdded","handleSeriesRemoved","_disposers","push","template","event","series","oldValue","dataUsers","removeValue","each","dataUser","invalidateDataItems","autoDispose","parent","undefined","legend","dataItems","i","length","dataItem","getIndex","dataContext","remove","data","di","newValue","isDisposed","chart","_dataUsers","moveValue","addDisposer","handleSeriesAdded2","handleLegendSeriesAdded","hiddenInLegend","addData","dataInvalid","once","showOnInit","reinit","setPropertyValue","_data","legendData_1","iterator","dataFields","name","getPropertyValue","value","source","copyFrom","appear","inited","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/types/SerialChart.ts"],"sourcesContent":["/**\r\n * Serial chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { IListEvents, ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Series } from \"../series/Series\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { PatternSet } from \"../../core/utils/PatternSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SerialChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SerialChartDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SerialChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SerialChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SerialChart]].\r\n */\r\nexport interface ISerialChartDataFields extends IChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SerialChart]]\r\n */\r\nexport interface ISerialChartProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * A set of colors to be used for chart elements, like Series, Slices, etc.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * A set of patterns to use for fills, like Series, Slices, etc.\r\n\t *\r\n\t * @since 4.7.5\r\n\t */\r\n\tpatterns?: PatternSet;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[SerialChart]].\r\n */\r\nexport interface ISerialChartEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SerialChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISerialChartAdapters extends IChartAdapters, ISerialChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all series-based charts, like XY, Pie, etc.\r\n *\r\n * Is not useful on its own.\r\n *\r\n * @see {@link ISerialChartEvents} for a list of available Events\r\n * @see {@link ISerialChartAdapters} for a list of available Adapters\r\n */\r\nexport class SerialChart extends Chart {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: ISerialChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISerialChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISerialChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISerialChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: Series;\r\n\r\n\t/**\r\n\t * Holds a list of [[Series]] displayed on the chart.\r\n\t */\r\n\tprotected _series: ListTemplate<this[\"_seriesType\"]>\r\n\r\n\t/**\r\n\t * Holds the reference to the container actual series are drawn in.\r\n\t */\r\n\tpublic readonly seriesContainer: Container;\r\n\r\n\t/**\r\n\t * Holds a reference to the container series' bullets are drawn in.\r\n\t */\r\n\tpublic readonly bulletsContainer: Container;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SerialChart\";\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\r\n\t\tthis._usesData = false;\r\n\r\n\t\t// Create a container for series\r\n\t\tlet seriesContainer: Container = this.chartContainer.createChild(Container);\r\n\t\tseriesContainer.shouldClone = false;\r\n\t\tseriesContainer.width = percent(100);\r\n\t\tseriesContainer.height = percent(100);\r\n\t\tseriesContainer.isMeasured = false;\r\n\t\tseriesContainer.layout = \"none\";\r\n\t\tseriesContainer.zIndex = 2;\r\n\t\tthis.seriesContainer = seriesContainer;\r\n\r\n\t\t// Create a container for bullets\r\n\t\tlet bulletsContainer: Container = this.chartContainer.createChild(Container);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.width = percent(100);\r\n\t\tbulletsContainer.height = percent(100);\r\n\t\tbulletsContainer.isMeasured = false;\r\n\t\tbulletsContainer.zIndex = 3;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\tif (this.colors) {\r\n\t\t\tthis.colors.dispose();\r\n\t\t}\r\n\r\n\t\tif (this.patterns) {\r\n\t\t\tthis.patterns.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Serial chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's series.\r\n\t *\r\n\t * @return Chart's series\r\n\t */\r\n\tpublic get series(): ListTemplate<this[\"_seriesType\"]> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new ListTemplate<this[\"_seriesType\"]>(this.createSeries());\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._series, false));\r\n\t\t\tthis._disposers.push(this._series.template);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\tprotected handleSeriesRemoved(event: IListEvents<Series>[\"removed\"]) {\r\n\t\tlet series = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(series);\r\n\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\tdataUser.invalidateDataItems();\r\n\t\t})\r\n\r\n\t\tif (series.autoDispose) {\r\n\t\t\tseries.dispose();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tseries.parent = undefined;\r\n\t\t\tseries.bulletsContainer.parent = undefined;\r\n\t\t}\r\n\t\t//this.feedLegend();\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet dataItems = this.legend.dataItems;\r\n\t\t\tfor (let i = dataItems.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem && dataItem.dataContext == series) {\r\n\t\t\t\t\tlegend.dataItems.remove(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = legend.data.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet di = legend.data[i];\r\n\t\t\t\tif (di && di == series) {\r\n\t\t\t\t\t$array.remove(legend.data, di);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<Series>[\"inserted\"]): void {\r\n\t\tlet series: Series = event.newValue;\r\n\t\tif (series.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tseries.chart = this;\r\n\t\tseries.parent = this.seriesContainer;\r\n\r\n\t\tseries.bulletsContainer.parent = this.bulletsContainer;\r\n\r\n\t\tthis._dataUsers.moveValue(series);\r\n\t\tseries.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(series);\r\n\t\t}))\r\n\r\n\t\tthis.handleSeriesAdded2(series);\r\n\t\tthis.handleLegendSeriesAdded(series);\r\n\t}\r\n\r\n\tprotected handleLegendSeriesAdded(series:Series){\r\n\t\tif (!series.hiddenInLegend) {\r\n\t\t\tif (this.legend) {\r\n\t\t\t\tthis.legend.addData(series);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesAdded2(series: Series) {\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\tthis._disposers.push(\r\n\t\t\t\t// on exit only as data is usually passed after push\r\n\t\t\t\tregistry.events.once(\"exitframe\", () => {\r\n\t\t\t\t\tif (!series.data || series.data.length == 0) {\r\n\t\t\t\t\t\tseries.data = this.data;\r\n\t\t\t\t\t\tif (series.showOnInit) {\r\n\t\t\t\t\t\t\tseries.reinit()\r\n\t\t\t\t\t\t\tseries.setPropertyValue(\"showOnInit\", false);\r\n\t\t\t\t\t\t\tseries.showOnInit = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(!series.isDisposed()) {\r\n\t\t\t\t\t\t\tseries.events.once(\"datavalidated\", () => {\r\n\t\t\t\t\t\t\t\tif (series.data == this.data) {\r\n\t\t\t\t\t\t\t\t\t(<any>series)._data = [];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for this chart type.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new Series();\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's color list.\r\n\t *\r\n\t * This list can be used by a number of serial items, like applying a new\r\n\t * color for each Series added. Or, applying a new color for each slice\r\n\t * of a Pie chart.\r\n\t *\r\n\t * Please see [[ColorSet]] for information on how you can set up to generate\r\n\t * unique colors.\r\n\t *\r\n\t * A theme you are using may override default pre-defined colors.\r\n\t *\r\n\t * @param value Color list\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color list\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * A [[PatternSet]] to use when creating patterned fills for slices.\r\n\t *\r\n\t * @since 4.7.5\r\n\t * @param value  Pattern set\r\n\t */\r\n\tpublic set patterns(value: PatternSet) {\r\n\t\tthis.setPropertyValue(\"patterns\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern set\r\n\t */\r\n\tpublic get patterns(): PatternSet {\r\n\t\treturn this.getPropertyValue(\"patterns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[SerialChart]].\r\n\t *\r\n\t * @param source Source SerialChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.series.copyFrom(source.series);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n\t */\r\n\tpublic appear() {\r\n\t\tsuper.appear();\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.showOnInit && series.inited) {\r\n\t\t\t\tseries.appear();\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SerialChart\"] = SerialChart;\r\n"]},"metadata":{},"sourceType":"module"}