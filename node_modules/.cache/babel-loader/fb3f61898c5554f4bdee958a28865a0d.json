{"ast":null,"code":"/**\r\n * Play button functionality.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Button } from \"./Button\";\nimport { RoundedRectangle } from \"./RoundedRectangle\";\nimport { registry } from \"../Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { Triangle } from \"./Triangle\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a zoom out button.\r\n *\r\n * @see {@link IPlayButtonEvents} for a list of available events\r\n * @see {@link IPlayButtonAdapters} for a list of available Adapters\r\n */\n\nvar PlayButton =\n/** @class */\nfunction (_super) {\n  __extends(PlayButton, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PlayButton() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"PlayButton\";\n\n    _this.padding(12, 12, 12, 12);\n\n    _this.showSystemTooltip = true;\n    var interfaceColors = new InterfaceColorSet();\n    var background = _this.background;\n    background.cornerRadius(25, 25, 25, 25);\n    background.fill = interfaceColors.getFor(\"primaryButton\");\n    background.stroke = interfaceColors.getFor(\"primaryButtonStroke\");\n    background.strokeOpacity = 0;\n    background.states.getKey(\"hover\").properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\n    background.states.getKey(\"down\").properties.fill = interfaceColors.getFor(\"primaryButtonActive\"); // Create a play icon\n\n    var playIcon = new Triangle();\n    playIcon.direction = \"right\";\n    playIcon.width = 9;\n    playIcon.height = 11;\n    playIcon.marginLeft = 1;\n    playIcon.marginRight = 1;\n    playIcon.horizontalCenter = \"middle\";\n    playIcon.verticalCenter = \"middle\";\n    playIcon.stroke = interfaceColors.getFor(\"primaryButtonText\");\n    playIcon.fill = playIcon.stroke;\n    _this.icon = playIcon; // Create a play icon\n\n    var stopIcon = new RoundedRectangle();\n    stopIcon.width = 11;\n    stopIcon.height = 11;\n    stopIcon.horizontalCenter = \"middle\";\n    stopIcon.verticalCenter = \"middle\";\n    stopIcon.cornerRadius(0, 0, 0, 0);\n    stopIcon.stroke = interfaceColors.getFor(\"primaryButtonText\");\n    stopIcon.fill = playIcon.stroke;\n    _this.togglable = true;\n\n    var activeState = _this.states.create(\"active\");\n\n    activeState.transitionDuration = 0;\n    activeState.properties.icon = stopIcon;\n    _this.defaultState.transitionDuration = 0; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  PlayButton.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Play\");\n    }\n  };\n\n  return PlayButton;\n}(Button);\n\nexport { PlayButton };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"PlayButton\"] = PlayButton;","map":{"version":3,"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAASA,MAAT,QAA0E,UAA1E;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,iBAAT,QAAkC,oCAAlC;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AA4BA;;;;;;;AAOA;;;;;;;AAMA;AAAA;AAAA;AAAgCC;AAiB/B;;;;;AAGA;AAAA,gBAEC;AACAC,yBAAO,IAHR;;AAICC,SAAI,CAACC,SAAL,GAAiB,YAAjB;;AAEAD,SAAI,CAACE,OAAL,CAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB;;AAEAF,SAAI,CAACG,iBAAL,GAAyB,IAAzB;AAEA,QAAIC,eAAe,GAAG,IAAIT,iBAAJ,EAAtB;AAEA,QAAIU,UAAU,GAAqBL,KAAI,CAACK,UAAxC;AACAA,cAAU,CAACC,YAAX,CAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC;AACAD,cAAU,CAACE,IAAX,GAAkBH,eAAe,CAACI,MAAhB,CAAuB,eAAvB,CAAlB;AACAH,cAAU,CAACI,MAAX,GAAoBL,eAAe,CAACI,MAAhB,CAAuB,qBAAvB,CAApB;AACAH,cAAU,CAACK,aAAX,GAA2B,CAA3B;AAEAL,cAAU,CAACM,MAAX,CAAkBC,MAAlB,CAAyB,OAAzB,EAAkCC,UAAlC,CAA6CN,IAA7C,GAAoDH,eAAe,CAACI,MAAhB,CAAuB,oBAAvB,CAApD;AACAH,cAAU,CAACM,MAAX,CAAkBC,MAAlB,CAAyB,MAAzB,EAAiCC,UAAjC,CAA4CN,IAA5C,GAAmDH,eAAe,CAACI,MAAhB,CAAuB,qBAAvB,CAAnD,CAnBD,CAqBC;;AACA,QAAIM,QAAQ,GAAa,IAAIlB,QAAJ,EAAzB;AACAkB,YAAQ,CAACC,SAAT,GAAqB,OAArB;AACAD,YAAQ,CAACE,KAAT,GAAiB,CAAjB;AACAF,YAAQ,CAACG,MAAT,GAAkB,EAAlB;AACAH,YAAQ,CAACI,UAAT,GAAsB,CAAtB;AACAJ,YAAQ,CAACK,WAAT,GAAuB,CAAvB;AACAL,YAAQ,CAACM,gBAAT,GAA4B,QAA5B;AACAN,YAAQ,CAACO,cAAT,GAA0B,QAA1B;AAEAP,YAAQ,CAACL,MAAT,GAAkBL,eAAe,CAACI,MAAhB,CAAuB,mBAAvB,CAAlB;AACAM,YAAQ,CAACP,IAAT,GAAgBO,QAAQ,CAACL,MAAzB;AACAT,SAAI,CAACsB,IAAL,GAAYR,QAAZ,CAjCD,CAmCC;;AACA,QAAIS,QAAQ,GAAqB,IAAI9B,gBAAJ,EAAjC;AACA8B,YAAQ,CAACP,KAAT,GAAiB,EAAjB;AACAO,YAAQ,CAACN,MAAT,GAAkB,EAAlB;AACAM,YAAQ,CAACH,gBAAT,GAA4B,QAA5B;AACAG,YAAQ,CAACF,cAAT,GAA0B,QAA1B;AACAE,YAAQ,CAACjB,YAAT,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B;AAEAiB,YAAQ,CAACd,MAAT,GAAkBL,eAAe,CAACI,MAAhB,CAAuB,mBAAvB,CAAlB;AACAe,YAAQ,CAAChB,IAAT,GAAgBO,QAAQ,CAACL,MAAzB;AAEAT,SAAI,CAACwB,SAAL,GAAiB,IAAjB;;AAEA,QAAIC,WAAW,GAAGzB,KAAI,CAACW,MAAL,CAAYe,MAAZ,CAAmB,QAAnB,CAAlB;;AACAD,eAAW,CAACE,kBAAZ,GAAiC,CAAjC;AACAF,eAAW,CAACZ,UAAZ,CAAuBS,IAAvB,GAA8BC,QAA9B;AAEAvB,SAAI,CAAC4B,YAAL,CAAkBD,kBAAlB,GAAuC,CAAvC,CApDD,CAsDC;;AACA3B,SAAI,CAAC6B,UAAL;;;AACA;AAED;;;;;;AAIUC,+CAAV;AACC/B,qBAAMgC,qBAAN,CAA2BC,IAA3B,CAA2B,IAA3B;;AACA,QAAI,CAACnC,KAAK,CAACoC,QAAN,CAAe,KAAKC,WAApB,CAAL,EAAuC;AACtC,WAAKA,WAAL,GAAmB,KAAKC,QAAL,CAAcC,SAAd,CAAwB,MAAxB,CAAnB;AACA;AACD,GALS;;AAOX;AAzFA,EAAgC5C,MAAhC;;;AA2FA;;;;;;;AAMAE,QAAQ,CAAC2C,iBAAT,CAA2B,YAA3B,IAA2CP,UAA3C","names":["Button","RoundedRectangle","registry","InterfaceColorSet","Triangle","$type","__extends","_super","_this","className","padding","showSystemTooltip","interfaceColors","background","cornerRadius","fill","getFor","stroke","strokeOpacity","states","getKey","properties","playIcon","direction","width","height","marginLeft","marginRight","horizontalCenter","verticalCenter","icon","stopIcon","togglable","activeState","create","transitionDuration","defaultState","applyTheme","PlayButton","applyInternalDefaults","call","hasValue","readerTitle","language","translate","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/core/elements/PlayButton.ts"],"sourcesContent":["/**\r\n * Play button functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button, IButtonProperties, IButtonAdapters, IButtonEvents } from \"./Button\";\r\nimport { RoundedRectangle } from \"./RoundedRectangle\";\r\nimport { registry } from \"../Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Triangle } from \"./Triangle\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PlayButton]].\r\n */\r\nexport interface IPlayButtonProperties extends IButtonProperties { }\r\n\r\n/**\r\n * Defines events for [[PlayButton]].\r\n */\r\nexport interface IPlayButtonEvents extends IButtonEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PlayButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPlayButtonAdapters extends IButtonAdapters, IPlayButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a zoom out button.\r\n *\r\n * @see {@link IPlayButtonEvents} for a list of available events\r\n * @see {@link IPlayButtonAdapters} for a list of available Adapters\r\n */\r\nexport class PlayButton extends Button {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPlayButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPlayButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPlayButtonEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PlayButton\";\r\n\r\n\t\tthis.padding(12, 12, 12, 12);\r\n\r\n\t\tthis.showSystemTooltip = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet background: RoundedRectangle = this.background;\r\n\t\tbackground.cornerRadius(25, 25, 25, 25);\r\n\t\tbackground.fill = interfaceColors.getFor(\"primaryButton\");\r\n\t\tbackground.stroke = interfaceColors.getFor(\"primaryButtonStroke\");\r\n\t\tbackground.strokeOpacity = 0;\r\n\r\n\t\tbackground.states.getKey(\"hover\").properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n\t\tbackground.states.getKey(\"down\").properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n\r\n\t\t// Create a play icon\r\n\t\tlet playIcon: Triangle = new Triangle();\r\n\t\tplayIcon.direction = \"right\";\r\n\t\tplayIcon.width = 9;\r\n\t\tplayIcon.height = 11;\r\n\t\tplayIcon.marginLeft = 1;\r\n\t\tplayIcon.marginRight = 1;\r\n\t\tplayIcon.horizontalCenter = \"middle\";\r\n\t\tplayIcon.verticalCenter = \"middle\";\r\n\r\n\t\tplayIcon.stroke = interfaceColors.getFor(\"primaryButtonText\");\r\n\t\tplayIcon.fill = playIcon.stroke;\r\n\t\tthis.icon = playIcon;\r\n\r\n\t\t// Create a play icon\r\n\t\tlet stopIcon: RoundedRectangle = new RoundedRectangle();\r\n\t\tstopIcon.width = 11;\r\n\t\tstopIcon.height = 11;\r\n\t\tstopIcon.horizontalCenter = \"middle\";\r\n\t\tstopIcon.verticalCenter = \"middle\";\r\n\t\tstopIcon.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tstopIcon.stroke = interfaceColors.getFor(\"primaryButtonText\");\r\n\t\tstopIcon.fill = playIcon.stroke;\r\n\r\n\t\tthis.togglable = true;\r\n\r\n\t\tlet activeState = this.states.create(\"active\");\r\n\t\tactiveState.transitionDuration = 0;\r\n\t\tactiveState.properties.icon = stopIcon;\r\n\r\n\t\tthis.defaultState.transitionDuration = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Play\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PlayButton\"] = PlayButton;\r\n"]},"metadata":{},"sourceType":"module"}