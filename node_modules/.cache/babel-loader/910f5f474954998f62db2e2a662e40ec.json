{"ast":null,"code":"/**\r\n * Resize button module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Button } from \"./Button\";\nimport { Sprite } from \"../Sprite\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { registry } from \"../Registry\";\nimport * as $path from \"../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a draggable resize/grip button.\r\n *\r\n * @see {@link IResizeButtonEvents} for a list of available events\r\n * @see {@link IResizeButtonAdapters} for a list of available Adapters\r\n */\n\nvar ResizeButton =\n/** @class */\nfunction (_super) {\n  __extends(ResizeButton, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ResizeButton() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"ResizeButton\"; // Set defaults\n\n    _this.orientation = \"horizontal\";\n    _this.layout = \"absolute\";\n    _this.horizontalCenter = \"middle\";\n    _this.verticalCenter = \"middle\";\n    _this.draggable = true;\n\n    _this.padding(8, 8, 8, 8);\n\n    _this.background.cornerRadius(20, 20, 20, 20); // Create an icon\n\n\n    var icon = new Sprite();\n    icon.element = _this.paper.add(\"path\");\n    var path = $path.moveTo({\n      x: -2,\n      y: -6\n    });\n    path += $path.lineTo({\n      x: -2,\n      y: 6\n    });\n    path += $path.moveTo({\n      x: 2,\n      y: -6\n    });\n    path += $path.lineTo({\n      x: 2,\n      y: 6\n    });\n    icon.path = path;\n    icon.pixelPerfect = true;\n    icon.padding(0, 4, 0, 4);\n    icon.stroke = new InterfaceColorSet().getFor(\"alternativeText\");\n    icon.strokeOpacity = 0.7; //icon.align = \"center\";\n    //icon.valign = \"middle\";\n\n    _this.icon = icon;\n\n    _this.label.dispose();\n\n    _this.label = undefined; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(ResizeButton.prototype, \"orientation\", {\n    /**\r\n     * Use for setting of direction (orientation) of the resize button.\r\n     *\r\n     * Available options: \"horizontal\", \"vertical\".\r\n     *\r\n     * @param value Orientation\r\n     */\n    set: function set(value) {\n      var icon = this.icon;\n\n      if (icon) {\n        if (value == \"horizontal\") {\n          icon.rotation = 0;\n        } else {\n          icon.rotation = -90;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ResizeButton;\n}(Button);\n\nexport { ResizeButton };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ResizeButton\"] = ResizeButton;","map":{"version":3,"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAASA,MAAT,QAA0E,UAA1E;AACA,SAASC,MAAT,QAAuB,WAAvB;AAEA,SAASC,iBAAT,QAAkC,oCAAlC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,mBAAvB;AA4BA;;;;;;;AAOA;;;;;;;AAMA;AAAA;AAAA;AAAkCC;AAwBjC;;;;;AAGA;AAAA,gBAEC;AACAC,yBAAO,IAHR;;AAICC,SAAI,CAACC,SAAL,GAAiB,cAAjB,CAJD,CAMC;;AACAD,SAAI,CAACE,WAAL,GAAmB,YAAnB;AACAF,SAAI,CAACG,MAAL,GAAc,UAAd;AACAH,SAAI,CAACI,gBAAL,GAAwB,QAAxB;AACAJ,SAAI,CAACK,cAAL,GAAsB,QAAtB;AAEAL,SAAI,CAACM,SAAL,GAAiB,IAAjB;;AACAN,SAAI,CAACO,OAAL,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB;;AAEAP,SAAI,CAACQ,UAAL,CAAgBC,YAAhB,CAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAfD,CAiBC;;;AACA,QAAIC,IAAI,GAAW,IAAIhB,MAAJ,EAAnB;AACAgB,QAAI,CAACC,OAAL,GAAeX,KAAI,CAACY,KAAL,CAAWC,GAAX,CAAe,MAAf,CAAf;AAEA,QAAIC,IAAI,GAAGjB,KAAK,CAACkB,MAAN,CAAa;AAAEC,OAAC,EAAE,CAAC,CAAN;AAASC,OAAC,EAAE,CAAC;AAAb,KAAb,CAAX;AACAH,QAAI,IAAIjB,KAAK,CAACqB,MAAN,CAAa;AAAEF,OAAC,EAAE,CAAC,CAAN;AAASC,OAAC,EAAE;AAAZ,KAAb,CAAR;AACAH,QAAI,IAAIjB,KAAK,CAACkB,MAAN,CAAa;AAAEC,OAAC,EAAE,CAAL;AAAQC,OAAC,EAAE,CAAC;AAAZ,KAAb,CAAR;AACAH,QAAI,IAAIjB,KAAK,CAACqB,MAAN,CAAa;AAAEF,OAAC,EAAE,CAAL;AAAQC,OAAC,EAAE;AAAX,KAAb,CAAR;AACAP,QAAI,CAACI,IAAL,GAAYA,IAAZ;AAEAJ,QAAI,CAACS,YAAL,GAAoB,IAApB;AACAT,QAAI,CAACH,OAAL,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB;AACAG,QAAI,CAACU,MAAL,GAAc,IAAIzB,iBAAJ,GAAwB0B,MAAxB,CAA+B,iBAA/B,CAAd;AACAX,QAAI,CAACY,aAAL,GAAqB,GAArB,CA9BD,CA+BC;AACA;;AACAtB,SAAI,CAACU,IAAL,GAAYA,IAAZ;;AAEAV,SAAI,CAACuB,KAAL,CAAWC,OAAX;;AACAxB,SAAI,CAACuB,KAAL,GAAaE,SAAb,CApCD,CAsCC;;AACAzB,SAAI,CAAC0B,UAAL;;;AAEA;;AASDC,wBAAWC,sBAAX,EAAW,aAAX,EAAsB;AAPtB;;;;;;;SAOA,aAAuBC,KAAvB,EAAyC;AACxC,UAAInB,IAAI,GAAG,KAAKA,IAAhB;;AACA,UAAIA,IAAJ,EAAU;AACT,YAAImB,KAAK,IAAI,YAAb,EAA2B;AAC1BnB,cAAI,CAACoB,QAAL,GAAgB,CAAhB;AACA,SAFD,MAGK;AACJpB,cAAI,CAACoB,QAAL,GAAgB,CAAC,EAAjB;AACA;AACD;AACD,KAVqB;oBAAA;;AAAA,GAAtB;AAYD;AAzFA,EAAkCrC,MAAlC;;;AA2FA;;;;;;;AAMAG,QAAQ,CAACmC,iBAAT,CAA2B,cAA3B,IAA6CH,YAA7C","names":["Button","Sprite","InterfaceColorSet","registry","$path","__extends","_super","_this","className","orientation","layout","horizontalCenter","verticalCenter","draggable","padding","background","cornerRadius","icon","element","paper","add","path","moveTo","x","y","lineTo","pixelPerfect","stroke","getFor","strokeOpacity","label","dispose","undefined","applyTheme","Object","ResizeButton","value","rotation","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/core/elements/ResizeButton.ts"],"sourcesContent":["/**\r\n * Resize button module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button, IButtonProperties, IButtonAdapters, IButtonEvents } from \"./Button\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Orientation } from \"../defs/Orientation\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ResizeButton]].\r\n */\r\nexport interface IResizeButtonProperties extends IButtonProperties { }\r\n\r\n/**\r\n * Defines events for [[ResizeButton]] for [[ResizeButton]].\r\n */\r\nexport interface IResizeButtonEvents extends IButtonEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ResizeButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IResizeButtonAdapters extends IButtonAdapters, IResizeButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a draggable resize/grip button.\r\n *\r\n * @see {@link IResizeButtonEvents} for a list of available events\r\n * @see {@link IResizeButtonAdapters} for a list of available Adapters\r\n */\r\nexport class ResizeButton extends Button {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IResizeButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IResizeButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IResizeButtonEvents;\r\n\r\n\t/**\r\n\t * Orientation of the resize direction.\r\n\t *\r\n\t * @deprecated Not used\r\n\t */\r\n\tprotected _orientation: Orientation;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ResizeButton\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.orientation = \"horizontal\";\r\n\t\tthis.layout = \"absolute\";\r\n\t\tthis.horizontalCenter = \"middle\";\r\n\t\tthis.verticalCenter = \"middle\";\r\n\r\n\t\tthis.draggable = true;\r\n\t\tthis.padding(8, 8, 8, 8);\r\n\r\n\t\tthis.background.cornerRadius(20, 20, 20, 20);\r\n\r\n\t\t// Create an icon\r\n\t\tlet icon: Sprite = new Sprite();\r\n\t\ticon.element = this.paper.add(\"path\");\r\n\r\n\t\tlet path = $path.moveTo({ x: -2, y: -6 });\r\n\t\tpath += $path.lineTo({ x: -2, y: 6 });\r\n\t\tpath += $path.moveTo({ x: 2, y: -6 });\r\n\t\tpath += $path.lineTo({ x: 2, y: 6 });\r\n\t\ticon.path = path;\r\n\r\n\t\ticon.pixelPerfect = true;\r\n\t\ticon.padding(0, 4, 0, 4);\r\n\t\ticon.stroke = new InterfaceColorSet().getFor(\"alternativeText\");\r\n\t\ticon.strokeOpacity = 0.7;\r\n\t\t//icon.align = \"center\";\r\n\t\t//icon.valign = \"middle\";\r\n\t\tthis.icon = icon;\r\n\r\n\t\tthis.label.dispose();\r\n\t\tthis.label = undefined;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Use for setting of direction (orientation) of the resize button.\r\n\t *\r\n\t * Available options: \"horizontal\", \"vertical\".\r\n\t *\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tlet icon = this.icon;\r\n\t\tif (icon) {\r\n\t\t\tif (value == \"horizontal\") {\r\n\t\t\t\ticon.rotation = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ticon.rotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ResizeButton\"] = ResizeButton;\r\n"]},"metadata":{},"sourceType":"module"}