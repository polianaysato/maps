{"ast":null,"code":"/**\r\n * Contains code and logic for generating radial gradients.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../../Base\";\nimport { List } from \"../../utils/List\";\nimport { getGhostPaper } from \"../Paper\";\nimport { registry } from \"../../Registry\";\nimport * as $iter from \"../../utils/Iterator\";\nimport * as $type from \"../../utils/Type\";\nimport { Percent } from \"../../utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Radial gradient class.\r\n */\n\nvar RadialGradient =\n/** @class */\nfunction (_super) {\n  __extends(RadialGradient, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function RadialGradient() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * List of colors switch definitions in a gradient.\r\n     */\n\n\n    _this._stops = new List();\n    _this.element = _this.paper.addGroup(\"radialGradient\");\n    _this.id = \"gradient-\" + registry.getUniqueId();\n\n    _this.element.attr({\n      \"id\": _this.id\n    });\n\n    _this._disposers.push(_this.element);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws gradient.\r\n   */\n\n\n  RadialGradient.prototype.draw = function () {\n    var _this = this;\n\n    var gradientElement = this.element;\n\n    if ($type.isNumber(this.cx)) {\n      var value = this.cx;\n\n      if (value instanceof Percent) {\n        value = value.percent + \"%\";\n      }\n\n      gradientElement.attr({\n        \"cx\": value\n      });\n    }\n\n    if ($type.isNumber(this.cy)) {\n      var value = this.cy;\n\n      if (value instanceof Percent) {\n        value = value.percent + \"%\";\n      }\n\n      gradientElement.attr({\n        \"cy\": value\n      });\n    }\n\n    if (this.fx) {\n      var value = this.fx;\n\n      if (value instanceof Percent) {\n        value = value.percent + \"%\";\n      }\n\n      gradientElement.attr({\n        \"fx\": value\n      });\n    }\n\n    if (this.fy) {\n      var value = this.fy;\n\n      if (value instanceof Percent) {\n        value = value.percent + \"%\";\n      }\n\n      gradientElement.attr({\n        \"fy\": value\n      });\n    }\n\n    gradientElement.removeChildNodes();\n    $iter.each($iter.indexed(this._stops.iterator()), function (a) {\n      var i = a[0];\n      var stop = a[1];\n      var offset = stop.offset;\n\n      if (!$type.isNumber(offset)) {\n        offset = i / (_this._stops.length - 1);\n      }\n\n      var gradientStop = _this.paper.add(\"stop\");\n\n      if ($type.hasValue(stop.color)) {\n        gradientStop.attr({\n          \"stop-color\": stop.color.toString()\n        });\n      }\n\n      if ($type.isNumber(stop.opacity)) {\n        gradientStop.attr({\n          \"stop-opacity\": stop.opacity\n        });\n      }\n\n      if ($type.isNumber(offset)) {\n        gradientStop.attr({\n          \"offset\": offset\n        });\n      }\n\n      gradientElement.add(gradientStop);\n    });\n  };\n  /**\r\n   * Adds a color step to the gradient.\r\n   *\r\n   * @param color    Color (hex code or named color)\r\n   * @param opacity  Opacity (value from 0 to 1; 0 completely transaprent, 1 fully opaque)\r\n   * @param offset   Position of color in the gradient (value 0 to 1; 0 meaning start of the gradient and 1 end)\r\n   */\n\n\n  RadialGradient.prototype.addColor = function (color, opacity, offset) {\n    this._stops.push({\n      color: color,\n      opacity: opacity,\n      offset: offset\n    });\n\n    this.draw();\n  };\n\n  Object.defineProperty(RadialGradient.prototype, \"paper\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Paper\r\n     */\n    get: function get() {\n      if (this._paper) {\n        return this._paper;\n      }\n\n      return getGhostPaper();\n    },\n\n    /**\r\n     * A [[Paper]] instace to use for the gradient.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param paper  Paper\r\n     */\n    set: function set(paper) {\n      if (this._paper != paper) {\n        this._paper = paper;\n        this.draw();\n        paper.appendDef(this.element);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadialGradient.prototype, \"cx\", {\n    get: function get() {\n      return this._cx;\n    },\n\n    /**\r\n     * Center x coordinate of the gradient, can be set as number or Percent\r\n     *\r\n     * @param point  Center point\r\n     */\n    set: function set(value) {\n      this._cx = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadialGradient.prototype, \"cy\", {\n    get: function get() {\n      return this._cy;\n    },\n\n    /**\r\n     * Center y coordinate of the gradient, can be set as number or Percent\r\n     *\r\n     * @param point  Center point\r\n     */\n    set: function set(value) {\n      this._cy = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadialGradient.prototype, \"fx\", {\n    get: function get() {\n      return this._fx;\n    },\n\n    /**\r\n     * y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n     *\r\n     * @param point  Center point\r\n     */\n    set: function set(value) {\n      this._fx = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadialGradient.prototype, \"fy\", {\n    get: function get() {\n      return this._fy;\n    },\n\n    /**\r\n     * y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n     *\r\n     * @param point  Center point\r\n     */\n    set: function set(value) {\n      this._fy = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  RadialGradient.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.stops.copyFrom(source.stops);\n    this.cx = source.cx;\n    this.cy = source.cy;\n    this.fx = source.fx;\n    this.fy = source.fy;\n  };\n\n  Object.defineProperty(RadialGradient.prototype, \"stops\", {\n    /**\r\n     * A list of color stops in the gradient.\r\n     *\r\n     * @return Stops\r\n     */\n    get: function get() {\n      return this._stops;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Clears the gradient.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  RadialGradient.prototype.clear = function () {\n    this._stops.clear();\n  };\n\n  return RadialGradient;\n}(BaseObject);\n\nexport { RadialGradient };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"RadialGradient\"] = RadialGradient;","map":{"version":3,"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAASA,UAAT,QAA2B,YAA3B;AACA,SAASC,IAAT,QAAqB,kBAArB;AAGA,SAAgBC,aAAhB,QAAqC,UAArC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAGA,OAAO,KAAKC,KAAZ,MAAuB,sBAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AAGA;;;;;;;AAOA;;;;AAGA;AAAA;AAAA;AAAoCC;AAwCnC;;;;;AAGA;AAAA,gBACCC,qBAAO,IADR;AAzCA;;;;;AAGUC,mBAA8B,IAAIR,IAAJ,EAA9B;AAwCTQ,SAAI,CAACC,OAAL,GAAeD,KAAI,CAACE,KAAL,CAAWC,QAAX,CAAoB,gBAApB,CAAf;AACAH,SAAI,CAACI,EAAL,GAAU,cAAcV,QAAQ,CAACW,WAAT,EAAxB;;AACAL,SAAI,CAACC,OAAL,CAAaK,IAAb,CAAkB;AAAE,YAAMN,KAAI,CAACI;AAAb,KAAlB;;AACAJ,SAAI,CAACO,UAAL,CAAgBC,IAAhB,CAAqBR,KAAI,CAACC,OAA1B;;AAEAD,SAAI,CAACS,UAAL;;;AACA;AAED;;;;;AAGUC,kCAAV;AAAA;;AAEC,QAAIC,eAAe,GAAG,KAAKV,OAA3B;;AAEA,QAAIL,KAAK,CAACgB,QAAN,CAAe,KAAKC,EAApB,CAAJ,EAA6B;AAC5B,UAAIC,KAAK,GAAO,KAAKD,EAArB;;AACA,UAAGC,KAAK,YAAYjB,OAApB,EAA4B;AAC3BiB,aAAK,GAAGA,KAAK,CAACC,OAAN,GAAgB,GAAxB;AACA;;AACDJ,qBAAe,CAACL,IAAhB,CAAqB;AAAE,cAAMQ;AAAR,OAArB;AACA;;AAED,QAAIlB,KAAK,CAACgB,QAAN,CAAe,KAAKI,EAApB,CAAJ,EAA6B;AAC5B,UAAIF,KAAK,GAAO,KAAKE,EAArB;;AACA,UAAGF,KAAK,YAAYjB,OAApB,EAA4B;AAC3BiB,aAAK,GAAGA,KAAK,CAACC,OAAN,GAAgB,GAAxB;AACA;;AACDJ,qBAAe,CAACL,IAAhB,CAAqB;AAAE,cAAMQ;AAAR,OAArB;AACA;;AAED,QAAI,KAAKG,EAAT,EAAa;AACZ,UAAIH,KAAK,GAAO,KAAKG,EAArB;;AACA,UAAGH,KAAK,YAAYjB,OAApB,EAA4B;AAC3BiB,aAAK,GAAGA,KAAK,CAACC,OAAN,GAAgB,GAAxB;AACA;;AACDJ,qBAAe,CAACL,IAAhB,CAAqB;AAAE,cAAMQ;AAAR,OAArB;AACA;;AAED,QAAI,KAAKI,EAAT,EAAa;AACZ,UAAIJ,KAAK,GAAO,KAAKI,EAArB;;AACA,UAAGJ,KAAK,YAAYjB,OAApB,EAA4B;AAC3BiB,aAAK,GAAGA,KAAK,CAACC,OAAN,GAAgB,GAAxB;AACA;;AACDJ,qBAAe,CAACL,IAAhB,CAAqB;AAAE,cAAMQ;AAAR,OAArB;AACA;;AAEDH,mBAAe,CAACQ,gBAAhB;AAEAxB,SAAK,CAACyB,IAAN,CAAWzB,KAAK,CAAC0B,OAAN,CAAc,KAAKC,MAAL,CAAYC,QAAZ,EAAd,CAAX,EAAkD,UAACC,CAAD,EAAE;AACnD,UAAIC,CAAC,GAAGD,CAAC,CAAC,CAAD,CAAT;AACA,UAAIE,IAAI,GAAGF,CAAC,CAAC,CAAD,CAAZ;AACA,UAAIG,MAAM,GAA2BD,IAAI,CAACC,MAA1C;;AAEA,UAAI,CAAC/B,KAAK,CAACgB,QAAN,CAAee,MAAf,CAAL,EAA6B;AAC5BA,cAAM,GAAGF,CAAC,IAAIzB,KAAI,CAACsB,MAAL,CAAYM,MAAZ,GAAqB,CAAzB,CAAV;AACA;;AAED,UAAIC,YAAY,GAAc7B,KAAI,CAACE,KAAL,CAAW4B,GAAX,CAAe,MAAf,CAA9B;;AACA,UAAIlC,KAAK,CAACmC,QAAN,CAAeL,IAAI,CAACM,KAApB,CAAJ,EAAgC;AAC/BH,oBAAY,CAACvB,IAAb,CAAkB;AAAE,wBAAcoB,IAAI,CAACM,KAAL,CAAWC,QAAX;AAAhB,SAAlB;AACA;;AACD,UAAIrC,KAAK,CAACgB,QAAN,CAAec,IAAI,CAACQ,OAApB,CAAJ,EAAkC;AACjCL,oBAAY,CAACvB,IAAb,CAAkB;AAAE,0BAAgBoB,IAAI,CAACQ;AAAvB,SAAlB;AACA;;AAED,UAAItC,KAAK,CAACgB,QAAN,CAAee,MAAf,CAAJ,EAA4B;AAC3BE,oBAAY,CAACvB,IAAb,CAAkB;AAAE,oBAAUqB;AAAZ,SAAlB;AACA;;AAEDhB,qBAAe,CAACmB,GAAhB,CAAoBD,YAApB;AACA,KAtBD;AAuBA,GA7DS;AA+DV;;;;;;;;;AAOOnB,sCAAP,UAAgBsB,KAAhB,EAA8BE,OAA9B,EAAgDP,MAAhD,EAA+D;AAC9D,SAAKL,MAAL,CAAYd,IAAZ,CAAiB;AAAEwB,WAAK,EAAEA,KAAT;AAAgBE,aAAO,EAAEA,OAAzB;AAAkCP,YAAM,EAAEA;AAA1C,KAAjB;;AACA,SAAKQ,IAAL;AACA,GAHM;;AAWPC,wBAAW1B,wBAAX,EAAW,OAAX,EAAgB;AAQhB;;;;SAIA;AACC,UAAI,KAAK2B,MAAT,EAAiB;AAChB,eAAO,KAAKA,MAAZ;AACA;;AACD,aAAO5C,aAAa,EAApB;AACA,KAjBe;;AANhB;;;;;;SAMA,aAAiBS,KAAjB,EAA6B;AAC5B,UAAI,KAAKmC,MAAL,IAAenC,KAAnB,EAA0B;AACzB,aAAKmC,MAAL,GAAcnC,KAAd;AACA,aAAKiC,IAAL;AACAjC,aAAK,CAACoC,SAAN,CAAgB,KAAKrC,OAArB;AACA;AACD,KANe;oBAAA;;AAAA,GAAhB;AAwBAmC,wBAAW1B,wBAAX,EAAW,IAAX,EAAa;SAKb;AACC,aAAO,KAAK6B,GAAZ;AACA,KAPY;;AALb;;;;;SAKA,aAAczB,KAAd,EAAqD;AACpD,WAAKyB,GAAL,GAAWzB,KAAX;AACA,WAAKqB,IAAL;AACA,KAHY;oBAAA;;AAAA,GAAb;AAcAC,wBAAW1B,wBAAX,EAAW,IAAX,EAAa;SAKb;AACC,aAAO,KAAK8B,GAAZ;AACA,KAPY;;AALb;;;;;SAKA,aAAc1B,KAAd,EAAqD;AACpD,WAAK0B,GAAL,GAAW1B,KAAX;AACA,WAAKqB,IAAL;AACA,KAHY;oBAAA;;AAAA,GAAb;AAeAC,wBAAW1B,wBAAX,EAAW,IAAX,EAAa;SAKb;AACC,aAAO,KAAK+B,GAAZ;AACA,KAPY;;AALb;;;;;SAKA,aAAc3B,KAAd,EAAqD;AACpD,WAAK2B,GAAL,GAAW3B,KAAX;AACA,WAAKqB,IAAL;AACA,KAHY;oBAAA;;AAAA,GAAb;AAcAC,wBAAW1B,wBAAX,EAAW,IAAX,EAAa;SAKb;AACC,aAAO,KAAKgC,GAAZ;AACA,KAPY;;AALb;;;;;SAKA,aAAc5B,KAAd,EAAqD;AACpD,WAAK4B,GAAL,GAAW5B,KAAX;AACA,WAAKqB,IAAL;AACA,KAHY;oBAAA;;AAAA,GAAb;;AAWOzB,sCAAP,UAAgBiC,MAAhB,EAA2B;AAC1B5C,qBAAM6C,QAAN,CAAcC,IAAd,CAAc,IAAd,EAAeF,MAAf;;AAEA,SAAKG,KAAL,CAAWF,QAAX,CAAoBD,MAAM,CAACG,KAA3B;AAEA,SAAKjC,EAAL,GAAU8B,MAAM,CAAC9B,EAAjB;AACA,SAAKG,EAAL,GAAU2B,MAAM,CAAC3B,EAAjB;AAEA,SAAKC,EAAL,GAAU0B,MAAM,CAAC1B,EAAjB;AACA,SAAKC,EAAL,GAAUyB,MAAM,CAACzB,EAAjB;AACA,GAVM;;AAiBPkB,wBAAW1B,wBAAX,EAAW,OAAX,EAAgB;AALhB;;;;;SAKA;AACC,aAAO,KAAKY,MAAZ;AACA,KAFe;oBAAA;;AAAA,GAAhB;AAIA;;;;;;AAKOZ,mCAAP;AACC,SAAKY,MAAL,CAAYyB,KAAZ;AACA,GAFM;;AAKR;AAtPA,EAAoCxD,UAApC;;;AAwPA;;;;;;;AAMAG,QAAQ,CAACsD,iBAAT,CAA2B,gBAA3B,IAA+CtC,cAA/C","names":["BaseObject","List","getGhostPaper","registry","$iter","$type","Percent","__extends","_super","_this","element","paper","addGroup","id","getUniqueId","attr","_disposers","push","applyTheme","RadialGradient","gradientElement","isNumber","cx","value","percent","cy","fx","fy","removeChildNodes","each","indexed","_stops","iterator","a","i","stop","offset","length","gradientStop","add","hasValue","color","toString","opacity","draw","Object","_paper","appendDef","_cx","_cy","_fx","_fy","source","copyFrom","call","stops","clear","registeredClasses"],"sourceRoot":"","sources":["../../../../../../src/.internal/core/rendering/fills/RadialGradient.ts"],"sourcesContent":["/**\r\n * Contains code and logic for generating radial gradients.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../../Base\";\r\nimport { List } from \"../../utils/List\";\r\nimport { Group } from \"../Group\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Paper, getGhostPaper } from \"../Paper\";\r\nimport { registry } from \"../../Registry\";\r\nimport { IGradientStop } from \"./LinearGradient\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport * as $iter from \"../../utils/Iterator\";\r\nimport * as $type from \"../../utils/Type\";\r\nimport { Percent } from \"../../utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Radial gradient class.\r\n */\r\nexport class RadialGradient extends BaseObject {\r\n\r\n\t/**\r\n\t * List of colors switch definitions in a gradient.\r\n\t */\r\n\tprotected _stops: List<IGradientStop> = new List<IGradientStop>();\r\n\r\n\t/**\r\n\t * An SVG `<group>` element used to draw gradient.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic element: Group;\r\n\r\n\t/**\r\n\t * Reference to Paper to add element to.\r\n\t */\r\n\tprotected _paper: $type.Optional<Paper>;\r\n\r\n\t/**\r\n\t * A center x coordinate for the radial gradient, can be set in pixels or as Percent\r\n\t */\r\n\tprotected _cx: $type.Optional<number | Percent>;\r\n\r\n\t/**\r\n\t * A center y coordinate for the radial gradient, can be set in pixels or as Percent\r\n\t */\r\n\tprotected _cy: $type.Optional<number | Percent>;\r\n\r\n\t/**\r\n\t * A y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n\t */\r\n\tprotected _fx: $type.Optional<number | Percent>;\r\n\r\n\t/**\r\n\t * A y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n\t */\r\n\tprotected _fy: $type.Optional<number | Percent>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.element = this.paper.addGroup(\"radialGradient\");\r\n\t\tthis.id = \"gradient-\" + registry.getUniqueId();\r\n\t\tthis.element.attr({ \"id\": this.id });\r\n\t\tthis._disposers.push(this.element);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws gradient.\r\n\t */\r\n\tprotected draw(): void {\r\n\r\n\t\tlet gradientElement = this.element;\r\n\r\n\t\tif ($type.isNumber(this.cx)) {\r\n\t\t\tlet value:any = this.cx;\r\n\t\t\tif(value instanceof Percent){\r\n\t\t\t\tvalue = value.percent + \"%\";\r\n\t\t\t}\r\n\t\t\tgradientElement.attr({ \"cx\": value });\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(this.cy)) {\r\n\t\t\tlet value:any = this.cy;\r\n\t\t\tif(value instanceof Percent){\r\n\t\t\t\tvalue = value.percent + \"%\";\r\n\t\t\t}\r\n\t\t\tgradientElement.attr({ \"cy\": value });\r\n\t\t}\r\n\r\n\t\tif (this.fx) {\r\n\t\t\tlet value:any = this.fx;\r\n\t\t\tif(value instanceof Percent){\r\n\t\t\t\tvalue = value.percent + \"%\";\r\n\t\t\t}\r\n\t\t\tgradientElement.attr({ \"fx\": value});\r\n\t\t}\r\n\r\n\t\tif (this.fy) {\r\n\t\t\tlet value:any = this.fy;\r\n\t\t\tif(value instanceof Percent){\r\n\t\t\t\tvalue = value.percent + \"%\";\r\n\t\t\t}\r\n\t\t\tgradientElement.attr({ \"fy\": value});\r\n\t\t}\r\n\r\n\t\tgradientElement.removeChildNodes();\r\n\r\n\t\t$iter.each($iter.indexed(this._stops.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet stop = a[1];\r\n\t\t\tlet offset: $type.Optional<number> = stop.offset;\r\n\r\n\t\t\tif (!$type.isNumber(offset)) {\r\n\t\t\t\toffset = i / (this._stops.length - 1)\r\n\t\t\t}\r\n\r\n\t\t\tlet gradientStop: AMElement = this.paper.add(\"stop\");\r\n\t\t\tif ($type.hasValue(stop.color)) {\r\n\t\t\t\tgradientStop.attr({ \"stop-color\": stop.color.toString() });\r\n\t\t\t}\r\n\t\t\tif ($type.isNumber(stop.opacity)) {\r\n\t\t\t\tgradientStop.attr({ \"stop-opacity\": stop.opacity });\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(offset)) {\r\n\t\t\t\tgradientStop.attr({ \"offset\": offset });\r\n\t\t\t}\r\n\r\n\t\t\tgradientElement.add(gradientStop);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a color step to the gradient.\r\n\t *\r\n\t * @param color    Color (hex code or named color)\r\n\t * @param opacity  Opacity (value from 0 to 1; 0 completely transaprent, 1 fully opaque)\r\n\t * @param offset   Position of color in the gradient (value 0 to 1; 0 meaning start of the gradient and 1 end)\r\n\t */\r\n\tpublic addColor(color: Color, opacity?: number, offset?: number): void {\r\n\t\tthis._stops.push({ color: color, opacity: opacity, offset: offset });\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Paper]] instace to use for the gradient.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param paper  Paper\r\n\t */\r\n\tpublic set paper(paper: Paper) {\r\n\t\tif (this._paper != paper) {\r\n\t\t\tthis._paper = paper;\r\n\t\t\tthis.draw();\r\n\t\t\tpaper.appendDef(this.element);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Paper\r\n\t */\r\n\tpublic get paper(): Paper {\r\n\t\tif (this._paper) {\r\n\t\t\treturn this._paper;\r\n\t\t}\r\n\t\treturn getGhostPaper();\r\n\t}\r\n\r\n\t/**\r\n\t * Center x coordinate of the gradient, can be set as number or Percent\r\n\t *\r\n\t * @param point  Center point\r\n\t */\r\n\tpublic set cx(value: $type.Optional<number | Percent>) {\r\n\t\tthis._cx = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\tpublic get cx(): $type.Optional<number | Percent> {\r\n\t\treturn this._cx;\r\n\t}\r\n\r\n\t/**\r\n\t * Center y coordinate of the gradient, can be set as number or Percent\r\n\t *\r\n\t * @param point  Center point\r\n\t */\r\n\tpublic set cy(value: $type.Optional<number | Percent>) {\r\n\t\tthis._cy = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\tpublic get cy(): $type.Optional<number | Percent> {\r\n\t\treturn this._cy;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n\t *\r\n\t * @param point  Center point\r\n\t */\r\n\tpublic set fx(value: $type.Optional<number | Percent>) {\r\n\t\tthis._fx = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\tpublic get fx(): $type.Optional<number | Percent> {\r\n\t\treturn this._fx;\r\n\t}\r\n\r\n\t/**\r\n\t * y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n\t *\r\n\t * @param point  Center point\r\n\t */\r\n\tpublic set fy(value: $type.Optional<number | Percent>) {\r\n\t\tthis._fy = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\tpublic get fy(): $type.Optional<number | Percent> {\r\n\t\treturn this._fy;\r\n\t}\r\n\r\n\r\n\r\n\tpublic copyFrom(source:this){\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tthis.stops.copyFrom(source.stops);\r\n\r\n\t\tthis.cx = source.cx;\r\n\t\tthis.cy = source.cy;\r\n\r\n\t\tthis.fx = source.fx;\r\n\t\tthis.fy = source.fy;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of color stops in the gradient.\r\n\t *\r\n\t * @return Stops\r\n\t */\r\n\tpublic get stops(): List<IGradientStop> {\r\n\t\treturn this._stops;\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the gradient.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tthis._stops.clear();\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadialGradient\"] = RadialGradient;\r\n"]},"metadata":{},"sourceType":"module"}