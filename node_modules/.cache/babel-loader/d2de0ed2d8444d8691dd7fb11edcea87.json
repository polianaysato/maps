{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\n\nvar AxisRendererY3D =\n/** @class */\nfunction (_super) {\n  __extends(AxisRendererY3D, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRendererY3D() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A related chart.\r\n     *\r\n     * @todo Description\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"AxisRendererY3D\";\n\n    _this._disposers.push(_this._chart);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererY3D.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n\n    if (grid.element) {\n      var dx = this.chart.dx3D || 0;\n      var dy = this.chart.dy3D || 0;\n      var w = this.getWidth();\n      grid.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: dx,\n        y: dy\n      }) + $path.lineTo({\n        x: w + dx,\n        y: dy\n      });\n    }\n\n    this.positionItem(grid, point);\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererY3D.prototype.updateBaseGridElement = function () {\n    _super.prototype.updateBaseGridElement.call(this);\n\n    var dx = this.chart.dx3D || 0;\n    var dy = this.chart.dy3D || 0;\n    var w = this.getWidth();\n    this.baseGrid.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: w,\n      y: 0\n    }) + $path.lineTo({\n      x: w + dx,\n      y: dy\n    });\n  };\n\n  Object.defineProperty(AxisRendererY3D.prototype, \"chart\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n\n    /**\r\n     * Chart, associated with the Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Chart\r\n     */\n    set: function (chart) {\n      if (chart) {\n        this._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Invoked when 3D-related settings change, like depth or angle.\r\n   *\r\n   * @param event Event\r\n   */\n\n  AxisRendererY3D.prototype.handle3DChanged = function (event) {\n    if (event.property == \"depth\" || event.property == \"angle\") {\n      this.invalidate();\n    }\n  };\n\n  return AxisRendererY3D;\n}(AxisRendererY);\n\nexport { AxisRendererY3D };","map":{"version":3,"mappings":"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","names":["AxisRendererY","MutableValueDisposer","$path","__extends","_super","_this","className","_disposers","push","_chart","applyTheme","AxisRendererY3D","grid","position","endPosition","location","point","positionToPoint","element","dx","chart","dx3D","dy","dy3D","w","getWidth","path","moveTo","x","y","lineTo","positionItem","toggleVisibility","updateBaseGridElement","call","baseGrid","Object","get","set","events","on","handle3DChanged","event","property","invalidate"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/axes/AxisRendererY3D.ts"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w + dx, y: dy });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}