{"ast":null,"code":"/**\r\n * Module, defining base Axis Renderer.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { AxisDataItem } from \"./Axis\";\nimport { AxisLine } from \"./AxisLine\";\nimport { AxisFill } from \"./AxisFill\";\nimport { Grid } from \"./Grid\";\nimport { AxisLabel } from \"./AxisLabel\";\nimport { AxisTick } from \"./AxisTick\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A base class for all axis renderers.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\n\nvar AxisRenderer =\n/** @class */\nfunction (_super) {\n  __extends(AxisRenderer, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRenderer() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A related chart.\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"AxisRenderer\"; // Set defaults\n\n    _this.minGridDistance = 50;\n    _this.inside = false;\n    _this.inversed = false;\n    _this.tooltipLocation = 0.5;\n    _this.fullWidthTooltip = false;\n    _this.cellStartLocation = 0;\n    _this.cellEndLocation = 1;\n    _this.minLabelPosition = 0;\n    _this.maxLabelPosition = 1;\n    _this.shouldClone = false;\n\n    var gridContainer = _this.createChild(Container);\n\n    gridContainer.shouldClone = false;\n    gridContainer.layout = \"none\"; //\tgridContainer.isMeasured = false;\n\n    gridContainer.virtualParent = _this;\n    gridContainer.width = percent(100);\n    gridContainer.height = percent(100);\n    _this.gridContainer = gridContainer; // not good without this\n\n    gridContainer.events.on(\"maxsizechanged\", function () {\n      if (_this.inited) {\n        _this.invalidateAxisItems();\n      }\n    }, _this, false);\n\n    var breakContainer = _this.createChild(Container);\n\n    breakContainer.shouldClone = false;\n    breakContainer.isMeasured = false;\n    breakContainer.layout = \"none\";\n    breakContainer.width = percent(100);\n    breakContainer.height = percent(100);\n    _this.breakContainer = breakContainer;\n\n    var bulletsContainer = _this.createChild(Container);\n\n    bulletsContainer.shouldClone = false;\n    bulletsContainer.isMeasured = false;\n    bulletsContainer.layout = \"none\";\n    bulletsContainer.width = percent(100);\n    bulletsContainer.height = percent(100);\n    _this.bulletsContainer = bulletsContainer;\n    _this.line = _this.createChild(AxisLine);\n    _this.line.shouldClone = false;\n    _this.line.strokeOpacity = 0;\n\n    var baseGrid = _this.createChild(Grid);\n\n    baseGrid.shouldClone = false;\n    _this.baseGrid = baseGrid; // Make elements disposable\n\n    var disposers = _this._disposers;\n    disposers.push(baseGrid);\n    disposers.push(_this.line);\n    disposers.push(gridContainer);\n    disposers.push(breakContainer);\n    disposers.push(bulletsContainer);\n    disposers.push(_this._chart);\n    _this.ticks.template.disabled = true;\n    _this.axisFills.template.disabled = true;\n    _this.axisFills.template.interactionsEnabled = false; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(AxisRenderer.prototype, \"axis\", {\n    /**\r\n     * Axis of a renderer\r\n     * @return axis Axis\r\n     */\n    get: function () {\n      return this._axis;\n    },\n\n    /**\r\n     * Axis of a renderer\r\n     * @param axis Axis\r\n     */\n    set: function (axis) {\n      this.setAxis(axis);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n  * @ignore\r\n  */\n\n  AxisRenderer.prototype.setAxis = function (axis) {\n    this._axis = axis;\n    this.baseGrid.parent = axis;\n    this.line.parent = axis;\n    this.gridContainer.bind(\"opacity\", axis);\n  };\n  /**\r\n   * Called when rendered is attached to an Axis, as well as a property of\r\n   * Axis that might affect the appearance is updated.\r\n   *\r\n   * E.g. `axis.opposite`, `axis.inside`, etc.\r\n   *\r\n   * This method is called **before** draw, so that any related setting\r\n   * changed in this method can be changed.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRenderer.prototype.processRenderer = function () {\n    this.events.on(\"sizechanged\", this.updateTooltip, this, false);\n    this.events.on(\"positionchanged\", this.updateTooltip, this, false);\n    this.labels.template.inside = this.inside;\n    this.ticks.template.inside = this.inside;\n  };\n  /**\r\n   * Updates Axis' tooltip.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRenderer.prototype.updateTooltip = function () {// This is a placeholder method for extending classes to override.\n  };\n\n  Object.defineProperty(AxisRenderer.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      // This is a placeholder method for extending classes to override.\n      return 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Re-positions an element to new coordinates.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item   A target element\r\n   * @param point  New coordinates\r\n   */\n\n  AxisRenderer.prototype.positionItem = function (item, point) {\n    if (item) {\n      item.moveTo(point);\n    }\n  };\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Point\r\n   */\n\n\n  AxisRenderer.prototype.positionToPoint = function (position, position2) {\n    // This is a placeholder method for extending classes to override.\n    return {\n      x: 0,\n      y: 0\n    };\n  };\n  /**\r\n   * Converts relative position on axis to angle.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review / units)\r\n   * @param position  Position (0-1)\r\n   * @return Angle\r\n   */\n\n\n  AxisRenderer.prototype.positionToAngle = function (position) {\n    // This is a placeholder method for extending classes to override.\n    return 0;\n  };\n  /**\r\n   * Converts relative position (0-1) on axis to a pixel coordinate.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinate (px)\r\n   */\n\n\n  AxisRenderer.prototype.positionToCoordinate = function (position) {\n    var coordinate;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n\n    if (axis.renderer.inversed) {\n      coordinate = (axis.end - position) * axisFullLength;\n    } else {\n      coordinate = (position - axis.start) * axisFullLength;\n    }\n\n    return coordinate;\n  };\n\n  AxisRenderer.prototype.updateGridContainer = function () {};\n\n  AxisRenderer.prototype.getHeight = function () {\n    var gridContainer = this.gridContainer;\n\n    if (gridContainer.parent) {\n      return gridContainer.parent.pixelHeight;\n    }\n\n    return this.gridContainer.pixelHeight || 0;\n  };\n\n  AxisRenderer.prototype.getWidth = function () {\n    var gridContainer = this.gridContainer;\n\n    if (gridContainer.parent) {\n      return gridContainer.parent.pixelWidth;\n    }\n\n    return this.gridContainer.pixelWidth || 0;\n  };\n  /**\r\n   * Converts a coordinate in pixels to a relative position. (0-1)\r\n   *\r\n   * @param coordinate  Coordinate (px)\r\n   * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRenderer.prototype.coordinateToPosition = function (coordinate, coordinate2) {\n    var position;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n\n    if (axis.renderer.inversed) {\n      position = axis.end - coordinate / axisFullLength;\n    } else {\n      position = coordinate / axisFullLength + axis.start;\n    }\n\n    return $math.round(position, 5);\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRenderer.prototype.pointToPosition = function (point) {\n    // This is a placeholder method for extending classes to override.\n    return 0;\n  };\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n\n\n  AxisRenderer.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    return \"\";\n  };\n  /**\r\n   * Invalidates all axis data items, effectively causing them re-evaluated.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   */\n\n\n  AxisRenderer.prototype.invalidateAxisItems = function () {\n    var axis = this.axis;\n\n    if (axis) {\n      axis.invalidateDataItems();\n    }\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRenderer.prototype.updateGridElement = function (grid, position, endPosition) {// This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRenderer.prototype.updateTickElement = function (tick, position, endPosition) {// This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions axis bullet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRenderer.prototype.updateBullet = function (bullet, position, endPosition) {// This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n\n\n  AxisRenderer.prototype.updateLabelElement = function (label, position, endPosition, location) {// This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions the axis fill element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fill         Fill element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n\n\n  AxisRenderer.prototype.updateFillElement = function (fill, position, endPosition) {\n    fill.startPosition = position;\n    fill.endPosition = endPosition;\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRenderer.prototype.updateAxisLine = function () {// This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRenderer.prototype.updateBaseGridElement = function () {// This is a placeholder method for extending classes to override.\n  };\n  /**\r\n   * Updates and positions an axis break element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Break element\r\n   */\n\n\n  AxisRenderer.prototype.updateBreakElement = function (axisBreak) {\n    this.positionItem(axisBreak.startLine, axisBreak.startPoint);\n    this.toggleVisibility(axisBreak.startLine, axisBreak.startPosition, 0, 1);\n    this.positionItem(axisBreak.endLine, axisBreak.endPoint);\n    this.toggleVisibility(axisBreak.endLine, axisBreak.endPosition, 0, 1);\n  };\n\n  Object.defineProperty(AxisRenderer.prototype, \"minGridDistance\", {\n    /**\r\n     * @return Min distance (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minGridDistance\");\n    },\n\n    /**\r\n     * Minimum distance in pixels between grid elements.\r\n     *\r\n     * Use it to control density of the grid/labels on the axis.element.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} for more info\r\n     * @param value  Min distance (px)\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"minGridDistance\", value)) {\n        if (this.axis) {\n          this.axis.invalidateDataItems();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"chart\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n\n    /**\r\n     * A chart, associated with the Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Chart\r\n     */\n    set: function (value) {\n      this._chart.set(value, null);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Toggles visibility of an element, based on its current position and\r\n   * min/max position settings.\r\n   *\r\n   * E.g. labels based on `minLabelPosition` and `maxLabelPosition`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprite       An element to toggle\r\n   * @param position     Elements current position\r\n   * @param minPosition  Min position setting\r\n   * @param maxPosition  Max position setting\r\n   */\n\n  AxisRenderer.prototype.toggleVisibility = function (sprite, position, minPosition, maxPosition) {\n    var axis = this.axis;\n    var dataItem = sprite.dataItem;\n\n    if (dataItem && dataItem instanceof AxisDataItem) {\n      if ($type.isNumber(dataItem.minPosition)) {\n        minPosition = dataItem.minPosition;\n      }\n\n      if ($type.isNumber(dataItem.maxPosition)) {\n        maxPosition = dataItem.maxPosition;\n      }\n    }\n\n    var updatedStart = axis.start + (axis.end - axis.start) * (minPosition - 0.0001);\n    var updatedEnd = axis.start + (axis.end - axis.start) * (maxPosition + 0.0001);\n\n    if (!sprite.disabled) {\n      if (position < updatedStart || position > updatedEnd) {\n        sprite.__disabled = true;\n      } else {\n        sprite.__disabled = false;\n      }\n    }\n  };\n  /**\r\n   * Creates visual elements for and axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Axis break\r\n   */\n\n\n  AxisRenderer.prototype.createBreakSprites = function (axisBreak) {// This is a placeholder method for extending classes to override.\n  };\n\n  Object.defineProperty(AxisRenderer.prototype, \"axisFills\", {\n    /**\r\n     * A list of Axis' Fill elements.\r\n     *\r\n     * Those are fill elements that cover the space between every second set\r\n     * of grid lines, and can be configured to create striped charts.\r\n     *\r\n     * Please note that these are disabled by default. To enable them, set\r\n     * template to true.\r\n     *\r\n     * ```TypeScript\r\n     * categoryAxis.renderer.axisFills.template.disabled = false;\r\n     * ```\r\n     * ```JavaScript\r\n     * categoryAxis.renderer.axisFills.template.disabled = false;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"xAxes\": [{\r\n     *     // ...\r\n     *     \"renderer\": {\r\n     *       \"axisFills\": {\r\n     *         \"disabled\": false\r\n     *       }\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/alternated-axis-fills/} this tutorial for more info.\r\n     * @return Fill elements\r\n     */\n    get: function () {\n      if (!this._axisFills) {\n        var fill = this.createFill(this.axis);\n        this._axisFills = new ListTemplate(fill);\n        fill.applyOnClones = true;\n        fill.events.on(\"enabled\", this.invalidateAxisItems, this, false);\n\n        this._disposers.push(new ListDisposer(this._axisFills));\n\n        this._disposers.push(this._axisFills.template);\n      }\n\n      return this._axisFills;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new fill element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Fill element\r\n   */\n\n  AxisRenderer.prototype.createFill = function (axis) {\n    return new AxisFill(axis);\n  };\n\n  Object.defineProperty(AxisRenderer.prototype, \"grid\", {\n    /**\r\n     * A list of Axis' Grid elements.\r\n     *\r\n     * @return Grid elements\r\n     */\n    get: function () {\n      if (!this._grid) {\n        var grid = this.createGrid();\n        this._grid = new ListTemplate(grid);\n        grid.applyOnClones = true;\n        grid.events.on(\"enabled\", this.invalidateAxisItems, this, false);\n\n        this._disposers.push(new ListDisposer(this._grid));\n\n        this._disposers.push(this._grid.template);\n      }\n\n      return this._grid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new grid element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Grid element\r\n   */\n\n  AxisRenderer.prototype.createGrid = function () {\n    return new Grid();\n  };\n\n  Object.defineProperty(AxisRenderer.prototype, \"ticks\", {\n    /**\r\n     * A list of Axis' Tick elements.\r\n     *\r\n     * Please note that these are disabled by default. To enable ticks, you'll\r\n     * need to set `disabled` and `strokeOpacity` properties of the tick template.\r\n     *\r\n     * ```TypeScript\r\n     * categoryAxis.renderer.ticks.template.disabled = false;\r\n     * categoryAxis.renderer.ticks.template.strokeOpacity = 0.5;\r\n     * ```\r\n     * ```JavaScript\r\n     * categoryAxis.renderer.ticks.template.disabled = false;\r\n     * categoryAxis.renderer.ticks.template.strokeOpacity = 0.5;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"xAxes\": [{\r\n     *     // ...\r\n     *     \"renderer\": {\r\n     *       \"ticks\": {\r\n     *         \"disabled\": false,\r\n     *         \"strokeOpacity\": 0.5\r\n     *       }\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @return Tick elements\r\n     */\n    get: function () {\n      if (!this._ticks) {\n        var tick = this.createTick();\n        tick.applyOnClones = true;\n        tick.isMeasured = false;\n        tick.events.on(\"enabled\", this.invalidateAxisItems, this, false);\n        this._ticks = new ListTemplate(tick);\n\n        this._disposers.push(new ListDisposer(this._ticks));\n\n        this._disposers.push(this._ticks.template);\n      }\n\n      return this._ticks;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new tick element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Tick element\r\n   */\n\n  AxisRenderer.prototype.createTick = function () {\n    return new AxisTick();\n  };\n\n  Object.defineProperty(AxisRenderer.prototype, \"labels\", {\n    /**\r\n     * A list of Axis' Label elements.\r\n     *\r\n     * @return Label elements\r\n     */\n    get: function () {\n      if (!this._labels) {\n        var label = this.createLabel();\n        this._labels = new ListTemplate(label);\n        label.applyOnClones = true;\n        label.events.on(\"enabled\", this.invalidateAxisItems, this, false);\n\n        this._disposers.push(new ListDisposer(this._labels));\n\n        this._disposers.push(this._labels.template);\n      }\n\n      return this._labels;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new label element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Label element\r\n   */\n\n  AxisRenderer.prototype.createLabel = function () {\n    return new AxisLabel();\n  };\n\n  Object.defineProperty(AxisRenderer.prototype, \"inside\", {\n    /**\r\n     * @return Labels inside?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"inside\");\n    },\n\n    /**\r\n     * Indicates whether Axis' labels and ticks should be drawn inside Plot area.\r\n     *\r\n     * Does not work with all renderers, like AxisRendererRadial.\r\n     *\r\n     * @param value  Labels inside?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"inside\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n        }\n      }\n\n      if (value) {\n        this.width = 0;\n        this.height = 0;\n      } else {\n        this.width = undefined;\n        this.height = undefined;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"opposite\", {\n    /**\r\n     * @return Draw axis on opposite side?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"opposite\");\n    },\n\n    /**\r\n     * Indicates whether Axis should be drawn on the opposite side of the plot\r\n     * area than it would normally be drawn based on chart's settings.\r\n     *\r\n     * Does not work with all renderers, like [[AxisRendererRadial]] and\r\n     * [[AxisRenderer Circular].\r\n     *\r\n     * @param value  Draw axis on opposite side?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"opposite\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"fullWidthTooltip\", {\n    /**\r\n     * @return Full width tooltip?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fullWidthTooltip\");\n    },\n\n    /**\r\n     * Indicates if Axis tooltip should take the whole width of the axis cell.\r\n     * (between two grid lines)\r\n     *\r\n     * NOTE: this setting is ignored on circular axis types.\r\n     *\r\n     * @param value Full width tooltip?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"fullWidthTooltip\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"tooltipLocation\", {\n    /**\r\n     * @return Tooltip location\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipLocation\");\n    },\n\n    /**\r\n     * Location within axis cell to show tooltip on. (0-1)\r\n     *\r\n     * 0 - show at the start\r\n     * 0.5 - show right in the middle\r\n     * 1 - show at the end\r\n     *\r\n     * @param value Tooltip location\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tooltipLocation\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"tooltipLocation2\", {\n    /**\r\n     * @return Tooltip location\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipLocation2\");\n    },\n\n    /**\r\n     * Location within secondary axis cell to show tooltip on. (0-1)\r\n     *\r\n     * 0 - show at the start\r\n     * 0.5 - show right in the middle\r\n     * 1 - show at the end\r\n     *\r\n     * @param value Tooltip location\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tooltipLocation2\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"cellStartLocation\", {\n    /**\r\n     * @return Cell start (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cellStartLocation\");\n    },\n\n    /**\r\n     * Location for the cell start.\r\n     *\r\n     * Normally a \"cell\" is the whole available width in a category.\r\n     *\r\n     * If there are several clustered column-like series available, the whole\r\n     * space is divided between each clustered column, or column stacks.\r\n     *\r\n     * `cellStartLocation` identifies where, within available space, the actual\r\n     * cell starts.\r\n     *\r\n     * This, together with column series' `width` will affect actual width of\r\n     * columns, and thus gaps between them.\r\n     *\r\n     * This will affect category-like axes only, like [[DateAxis]], or\r\n     * [[CategoryAxis]].\r\n     *\r\n     * This is used to limit a space occupied by series like column.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n     * @param value Cell start (0-1)\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"cellStartLocation\", value)) {\n        if (this.axis) {\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"cellEndLocation\", {\n    /**\r\n     * @return Cell end (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cellEndLocation\");\n    },\n\n    /**\r\n     * Location for the cell end.\r\n     *\r\n     * Normally a \"cell\" is the whole available width in a category.\r\n     *\r\n     * If there are several clustered column-like series available, the whole\r\n     * space is divided between each clustered column, or column stacks.\r\n     *\r\n     * `cellEndLocation` identifies where, within available space, the actual\r\n     * cell ends.\r\n     *\r\n     * This, together with column series' `width` will affect actual width of\r\n     * columns, and thus gaps between them.\r\n     *\r\n     * This will affect category-like axes only, like [[DateAxis]], or\r\n     * [[CategoryAxis]].\r\n     *\r\n     * This is used to limit a space occupied by series like column.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n     * @param value Cell end (0-1)\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"cellEndLocation\", value)) {\n        if (this.axis) {\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"inversed\", {\n    /**\r\n     * @return Flip axis?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"inversed\");\n    },\n\n    /**\r\n     * Indicates if the scale of the axis should be flipped.\r\n     *\r\n     * @param value Flip axis?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"inversed\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"minLabelPosition\", {\n    /**\r\n     * @return Min label position (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minLabelPosition\");\n    },\n\n    /**\r\n     * Minimum position along the Axis, for labels.\r\n     *\r\n     * Labels, which have their position closer to the start of the Axis, will be\r\n     * automatically hidden.\r\n     *\r\n     * E.g., setting this to 0.05 (5% of total axis length) would hide labels,\r\n     * that would otherwise be drawn very near start of the Axis.\r\n     *\r\n     * This is especially usefull with `inside = true`, or if the chart hasn't\r\n     * got any extra margins.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n     * @param value  Min label position (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minLabelPosition\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRenderer.prototype, \"maxLabelPosition\", {\n    /**\r\n     * @return Max label position (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxLabelPosition\");\n    },\n\n    /**\r\n     * Maximum position along the Axis, for labels.\r\n     *\r\n     * Labels, which have their position closer to the and of the Axis, will be\r\n     * automatically hidden.\r\n     *\r\n     * E.g., setting this to 0.95 (95% of total axis length) would hide labels,\r\n     * that would otherwise be drawn very near end of the Axis.\r\n     *\r\n     * This is especially usefull with `inside = true`, or if the chart hasn't\r\n     * got any extra margins.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n     * @param value  Max label position (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxLabelPosition\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all settings and related items from another object of the same\r\n   * type.\r\n   *\r\n   * @param source  Source object\r\n   */\n\n  AxisRenderer.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.grid.template.copyFrom(source.grid.template);\n    this.ticks.template.copyFrom(source.ticks.template);\n    this.labels.template.copyFrom(source.labels.template);\n    this.axisFills.template.copyFrom(source.axisFills.template);\n    this.line.copyFrom(source.line);\n    this.baseGrid.copyFrom(source.baseGrid);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  AxisRenderer.prototype.toAxisPosition = function (value) {\n    return value;\n  };\n  /**\r\n   * Sets `visibility` property:\r\n   *\r\n   * * `true` - visible\r\n   * * `false` - hidden\r\n   *\r\n   * @param value  true - visible, false - hidden\r\n   * @return Current visibility\r\n   */\n\n\n  AxisRenderer.prototype.setVisibility = function (value) {\n    _super.prototype.setVisibility.call(this, value);\n\n    this.bulletsContainer.visible = value;\n  };\n\n  return AxisRenderer;\n}(Container);\n\nexport { AxisRenderer };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisRenderer\"] = AxisRenderer;","map":{"version":3,"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAASA,SAAT,QAAsF,sBAAtF;AAGA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAAeC,YAAf,QAAmC,QAAnC;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,YAAzB;AAGA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,uBAA3C;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AAsFA;;;;;;;AAOA;;;;;;;AAMA;AAAA;AAAA;AAAkCC;AAkGjC;;;;;;;AAKA;AAAA,gBAEC;AACAC,yBAAO,IAHR;AAnDA;;;;;AAGUC,mBAAS,IAAIf,oBAAJ,EAAT;AAoDTe,SAAI,CAACC,SAAL,GAAiB,cAAjB,CAJD,CAMC;;AACAD,SAAI,CAACE,eAAL,GAAuB,EAAvB;AACAF,SAAI,CAACG,MAAL,GAAc,KAAd;AACAH,SAAI,CAACI,QAAL,GAAgB,KAAhB;AACAJ,SAAI,CAACK,eAAL,GAAuB,GAAvB;AACAL,SAAI,CAACM,gBAAL,GAAwB,KAAxB;AACAN,SAAI,CAACO,iBAAL,GAAyB,CAAzB;AACAP,SAAI,CAACQ,eAAL,GAAuB,CAAvB;AAEAR,SAAI,CAACS,gBAAL,GAAwB,CAAxB;AACAT,SAAI,CAACU,gBAAL,GAAwB,CAAxB;AACAV,SAAI,CAACW,WAAL,GAAmB,KAAnB;;AAEA,QAAIC,aAAa,GAAGZ,KAAI,CAACa,WAAL,CAAiB7B,SAAjB,CAApB;;AACA4B,iBAAa,CAACD,WAAd,GAA4B,KAA5B;AACAC,iBAAa,CAACE,MAAd,GAAuB,MAAvB,CArBD,CAsBC;;AACAF,iBAAa,CAACG,aAAd,GAA8Bf,KAA9B;AACAY,iBAAa,CAACI,KAAd,GAAsBrB,OAAO,CAAC,GAAD,CAA7B;AACAiB,iBAAa,CAACK,MAAd,GAAuBtB,OAAO,CAAC,GAAD,CAA9B;AAEAK,SAAI,CAACY,aAAL,GAAqBA,aAArB,CA3BD,CA4BC;;AACAA,iBAAa,CAACM,MAAd,CAAqBC,EAArB,CAAwB,gBAAxB,EAA0C;AACzC,UAAInB,KAAI,CAACoB,MAAT,EAAiB;AAChBpB,aAAI,CAACqB,mBAAL;AACA;AACD,KAJD,EAIGrB,KAJH,EAIS,KAJT;;AAMA,QAAIsB,cAAc,GAAGtB,KAAI,CAACa,WAAL,CAAiB7B,SAAjB,CAArB;;AACAsC,kBAAc,CAACX,WAAf,GAA6B,KAA7B;AACAW,kBAAc,CAACC,UAAf,GAA4B,KAA5B;AACAD,kBAAc,CAACR,MAAf,GAAwB,MAAxB;AACAQ,kBAAc,CAACN,KAAf,GAAuBrB,OAAO,CAAC,GAAD,CAA9B;AACA2B,kBAAc,CAACL,MAAf,GAAwBtB,OAAO,CAAC,GAAD,CAA/B;AACAK,SAAI,CAACsB,cAAL,GAAsBA,cAAtB;;AAEA,QAAIE,gBAAgB,GAAGxB,KAAI,CAACa,WAAL,CAAiB7B,SAAjB,CAAvB;;AACAwC,oBAAgB,CAACb,WAAjB,GAA+B,KAA/B;AACAa,oBAAgB,CAACD,UAAjB,GAA8B,KAA9B;AACAC,oBAAgB,CAACV,MAAjB,GAA0B,MAA1B;AACAU,oBAAgB,CAACR,KAAjB,GAAyBrB,OAAO,CAAC,GAAD,CAAhC;AACA6B,oBAAgB,CAACP,MAAjB,GAA0BtB,OAAO,CAAC,GAAD,CAAjC;AACAK,SAAI,CAACwB,gBAAL,GAAwBA,gBAAxB;AAEAxB,SAAI,CAACyB,IAAL,GAAYzB,KAAI,CAACa,WAAL,CAAiB1B,QAAjB,CAAZ;AACAa,SAAI,CAACyB,IAAL,CAAUd,WAAV,GAAwB,KAAxB;AACAX,SAAI,CAACyB,IAAL,CAAUC,aAAV,GAA0B,CAA1B;;AAEA,QAAIC,QAAQ,GAAS3B,KAAI,CAACa,WAAL,CAAiBxB,IAAjB,CAArB;;AACAsC,YAAQ,CAAChB,WAAT,GAAuB,KAAvB;AACAX,SAAI,CAAC2B,QAAL,GAAgBA,QAAhB,CAzDD,CA2DC;;AACA,QAAIC,SAAS,GAAG5B,KAAI,CAAC6B,UAArB;AACAD,aAAS,CAACE,IAAV,CAAeH,QAAf;AACAC,aAAS,CAACE,IAAV,CAAe9B,KAAI,CAACyB,IAApB;AACAG,aAAS,CAACE,IAAV,CAAelB,aAAf;AACAgB,aAAS,CAACE,IAAV,CAAeR,cAAf;AACAM,aAAS,CAACE,IAAV,CAAeN,gBAAf;AACAI,aAAS,CAACE,IAAV,CAAe9B,KAAI,CAAC+B,MAApB;AAEA/B,SAAI,CAACgC,KAAL,CAAWC,QAAX,CAAoBC,QAApB,GAA+B,IAA/B;AACAlC,SAAI,CAACmC,SAAL,CAAeF,QAAf,CAAwBC,QAAxB,GAAmC,IAAnC;AACAlC,SAAI,CAACmC,SAAL,CAAeF,QAAf,CAAwBG,mBAAxB,GAA8C,KAA9C,CAtED,CAuEC;;AACApC,SAAI,CAACqC,UAAL;;;AACA;;AAMDC,wBAAIC,sBAAJ,EAAI,MAAJ,EAAQ;AAIR;;;;SAIA;AACC,aAAO,KAAKC,KAAZ;AACA,KAVO;;AAJR;;;;SAIA,UAASC,IAAT,EAAmB;AAClB,WAAKC,OAAL,CAAaD,IAAb;AACA,KAFO;oBAAA;;AAAA,GAAR;AAYA;;;;AAGOF,mCAAP,UAAeE,IAAf,EAAyB;AACxB,SAAKD,KAAL,GAAaC,IAAb;AACA,SAAKd,QAAL,CAAcgB,MAAd,GAAuBF,IAAvB;AACA,SAAKhB,IAAL,CAAUkB,MAAV,GAAmBF,IAAnB;AACA,SAAK7B,aAAL,CAAmBgC,IAAnB,CAAwB,SAAxB,EAAmCH,IAAnC;AACA,GALM;AAQP;;;;;;;;;;;;;;AAYOF,2CAAP;AACC,SAAKrB,MAAL,CAAYC,EAAZ,CAAe,aAAf,EAA8B,KAAK0B,aAAnC,EAAkD,IAAlD,EAAwD,KAAxD;AACA,SAAK3B,MAAL,CAAYC,EAAZ,CAAe,iBAAf,EAAkC,KAAK0B,aAAvC,EAAsD,IAAtD,EAA4D,KAA5D;AACA,SAAKC,MAAL,CAAYb,QAAZ,CAAqB9B,MAArB,GAA8B,KAAKA,MAAnC;AACA,SAAK6B,KAAL,CAAWC,QAAX,CAAoB9B,MAApB,GAA6B,KAAKA,MAAlC;AACA,GALM;AAOP;;;;;;;;AAMOoC,yCAAP,aACC;AACA,GAFM;;AASPD,wBAAWC,sBAAX,EAAW,YAAX,EAAqB;AALrB;;;;;SAKA;AACC;AACA,aAAO,CAAP;AACA,KAHoB;oBAAA;;AAAA,GAArB;AAKA;;;;;;;;AAOOA,wCAAP,UAAoBQ,IAApB,EAAkCC,KAAlC,EAA+C;AAC9C,QAAID,IAAJ,EAAU;AACTA,UAAI,CAACE,MAAL,CAAYD,KAAZ;AACA;AACD,GAJM;AAMP;;;;;;;;AAMOT,2CAAP,UAAuBW,QAAvB,EAAyCC,SAAzC,EAA0D;AACzD;AACA,WAAO;AAAEC,OAAC,EAAE,CAAL;AAAQC,OAAC,EAAE;AAAX,KAAP;AACA,GAHM;AAKP;;;;;;;;;;AAQOd,2CAAP,UAAuBW,QAAvB,EAAuC;AACtC;AACA,WAAO,CAAP;AACA,GAHM;AAKP;;;;;;;;AAMOX,gDAAP,UAA4BW,QAA5B,EAA4C;AAC3C,QAAII,UAAJ;AACA,QAAIb,IAAI,GAAS,KAAKA,IAAtB;AACA,QAAIc,cAAc,GAAGd,IAAI,CAACc,cAA1B;;AAEA,QAAId,IAAI,CAACe,QAAL,CAAcpD,QAAlB,EAA4B;AAC3BkD,gBAAU,GAAG,CAACb,IAAI,CAACgB,GAAL,GAAWP,QAAZ,IAAwBK,cAArC;AACA,KAFD,MAGK;AACJD,gBAAU,GAAG,CAACJ,QAAQ,GAAGT,IAAI,CAACiB,KAAjB,IAA0BH,cAAvC;AACA;;AAED,WAAOD,UAAP;AACA,GAbM;;AAeAf,+CAAP,aAEC,CAFM;;AAKGA,qCAAV;AACC,QAAI3B,aAAa,GAAG,KAAKA,aAAzB;;AACA,QAAGA,aAAa,CAAC+B,MAAjB,EAAwB;AACvB,aAAO/B,aAAa,CAAC+B,MAAd,CAAqBgB,WAA5B;AACA;;AACD,WAAO,KAAK/C,aAAL,CAAmB+C,WAAnB,IAAkC,CAAzC;AACA,GANS;;AAQApB,oCAAV;AACC,QAAI3B,aAAa,GAAG,KAAKA,aAAzB;;AACA,QAAGA,aAAa,CAAC+B,MAAjB,EAAwB;AACvB,aAAO/B,aAAa,CAAC+B,MAAd,CAAqBiB,UAA5B;AACA;;AACD,WAAO,KAAKhD,aAAL,CAAmBgD,UAAnB,IAAiC,CAAxC;AACA,GANS;AASV;;;;;;;;;AAOOrB,gDAAP,UAA4Be,UAA5B,EAAgDO,WAAhD,EAAmE;AAClE,QAAIX,QAAJ;AACA,QAAIT,IAAI,GAAS,KAAKA,IAAtB;AACA,QAAIc,cAAc,GAAGd,IAAI,CAACc,cAA1B;;AAEA,QAAId,IAAI,CAACe,QAAL,CAAcpD,QAAlB,EAA4B;AAC3B8C,cAAQ,GAAGT,IAAI,CAACgB,GAAL,GAAWH,UAAU,GAAGC,cAAnC;AACA,KAFD,MAGK;AACJL,cAAQ,GAAGI,UAAU,GAAGC,cAAb,GAA8Bd,IAAI,CAACiB,KAA9C;AACA;;AAED,WAAO9D,KAAK,CAACkE,KAAN,CAAYZ,QAAZ,EAAsB,CAAtB,CAAP;AACA,GAbM;AAeP;;;;;;;;;;AAQOX,2CAAP,UAAuBS,KAAvB,EAAoC;AACnC;AACA,WAAO,CAAP;AACA,GAHM;AAKP;;;;;;;;;;;AASOT,gDAAP,UAA4BwB,aAA5B,EAAmDC,WAAnD,EAAsE;AACrE,WAAO,EAAP;AACA,GAFM;AAIP;;;;;;;;AAMOzB,+CAAP;AACC,QAAIE,IAAI,GAAS,KAAKA,IAAtB;;AACA,QAAIA,IAAJ,EAAU;AACTA,UAAI,CAACwB,mBAAL;AACA;AACD,GALM;AAOP;;;;;;;;;;AAQO1B,6CAAP,UAAyB2B,IAAzB,EAAuChB,QAAvC,EAAyDc,WAAzD,EAA4E,CAC3E;AACA,GAFM;AAIP;;;;;;;;;;AAQOzB,6CAAP,UAAyB4B,IAAzB,EAAyCjB,QAAzC,EAA2Dc,WAA3D,EAA8E,CAC7E;AACA,GAFM;AAIP;;;;;;;;;;AAQOzB,wCAAP,UAAoB6B,MAApB,EAAoClB,QAApC,EAAsDc,WAAtD,EAAyE,CACxE;AACA,GAFM;AAIP;;;;;;;;;;AAQOzB,8CAAP,UAA0B8B,KAA1B,EAA4CnB,QAA5C,EAA8Dc,WAA9D,EAAmFM,QAAnF,EAAoG,CACnG;AACA,GAFM;AAIP;;;;;;;;;;AAQO/B,6CAAP,UAAyBgC,IAAzB,EAAyCrB,QAAzC,EAA2Dc,WAA3D,EAA8E;AAC7EO,QAAI,CAACR,aAAL,GAAqBb,QAArB;AACAqB,QAAI,CAACP,WAAL,GAAmBA,WAAnB;AACA,GAHM;AAKP;;;;;;;AAKOzB,0CAAP,aACC;AACA,GAFM;AAIP;;;;;;;AAKOA,iDAAP,aACC;AACA,GAFM;AAIP;;;;;;;;AAMOA,8CAAP,UAA0BiC,SAA1B,EAA8C;AAC7C,SAAKC,YAAL,CAAkBD,SAAS,CAACE,SAA5B,EAAuCF,SAAS,CAACG,UAAjD;AACA,SAAKC,gBAAL,CAAsBJ,SAAS,CAACE,SAAhC,EAA2CF,SAAS,CAACT,aAArD,EAAoE,CAApE,EAAuE,CAAvE;AACA,SAAKU,YAAL,CAAkBD,SAAS,CAACK,OAA5B,EAAqCL,SAAS,CAACM,QAA/C;AACA,SAAKF,gBAAL,CAAsBJ,SAAS,CAACK,OAAhC,EAAyCL,SAAS,CAACR,WAAnD,EAAgE,CAAhE,EAAmE,CAAnE;AACA,GALM;;AAeP1B,wBAAWC,sBAAX,EAAW,iBAAX,EAA0B;AAQ1B;;;SAGA;AACC,aAAO,KAAKwC,gBAAL,CAAsB,iBAAtB,CAAP;AACA,KAbyB;;AAR1B;;;;;;;;SAQA,UAA2BC,KAA3B,EAAwC;AACvC,UAAI,KAAKC,gBAAL,CAAsB,iBAAtB,EAAyCD,KAAzC,CAAJ,EAAqD;AACpD,YAAI,KAAKvC,IAAT,EAAe;AACd,eAAKA,IAAL,CAAUwB,mBAAV;AACA;AACD;AACD,KANyB;oBAAA;;AAAA,GAA1B;AAqBA3B,wBAAWC,sBAAX,EAAW,OAAX,EAAgB;AAIhB;;;;SAIA;AACC,aAAO,KAAKR,MAAL,CAAYmD,GAAZ,EAAP;AACA,KAVe;;AANhB;;;;;;SAMA,UAAiBF,KAAjB,EAA6B;AAC5B,WAAKjD,MAAL,CAAYoD,GAAZ,CAAgBH,KAAhB,EAAuB,IAAvB;AACA,KAFe;oBAAA;;AAAA,GAAhB;AAYA;;;;;;;;;;;;;AAYUzC,4CAAV,UAA2B6C,MAA3B,EAA2ClC,QAA3C,EAA6DmC,WAA7D,EAAkFC,WAAlF,EAAqG;AACpG,QAAI7C,IAAI,GAAG,KAAKA,IAAhB;AAEA,QAAI8C,QAAQ,GAAGH,MAAM,CAACG,QAAtB;;AACA,QAAGA,QAAQ,IAAIA,QAAQ,YAAYrG,YAAnC,EAAgD;AAC/C,UAAGW,KAAK,CAAC2F,QAAN,CAAeD,QAAQ,CAACF,WAAxB,CAAH,EAAwC;AACvCA,mBAAW,GAAGE,QAAQ,CAACF,WAAvB;AACA;;AACD,UAAGxF,KAAK,CAAC2F,QAAN,CAAeD,QAAQ,CAACD,WAAxB,CAAH,EAAwC;AACvCA,mBAAW,GAAGC,QAAQ,CAACD,WAAvB;AACA;AACD;;AAED,QAAIG,YAAY,GAAGhD,IAAI,CAACiB,KAAL,GAAa,CAACjB,IAAI,CAACgB,GAAL,GAAWhB,IAAI,CAACiB,KAAjB,KAA2B2B,WAAW,GAAG,MAAzC,CAAhC;AACA,QAAIK,UAAU,GAAGjD,IAAI,CAACiB,KAAL,GAAa,CAACjB,IAAI,CAACgB,GAAL,GAAWhB,IAAI,CAACiB,KAAjB,KAA2B4B,WAAW,GAAG,MAAzC,CAA9B;;AAEA,QAAI,CAACF,MAAM,CAAClD,QAAZ,EAAsB;AACrB,UAAIgB,QAAQ,GAAGuC,YAAX,IAA2BvC,QAAQ,GAAGwC,UAA1C,EAAsD;AACrDN,cAAM,CAACO,UAAP,GAAoB,IAApB;AACA,OAFD,MAGK;AACJP,cAAM,CAACO,UAAP,GAAoB,KAApB;AACA;AACD;AACD,GAxBS;AA0BV;;;;;;;;AAMOpD,8CAAP,UAA0BiC,SAA1B,EAA8C,CAC7C;AACA,GAFM;;AAoCPlC,wBAAWC,sBAAX,EAAW,WAAX,EAAoB;AAhCpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAgCA;AACC,UAAI,CAAC,KAAKqD,UAAV,EAAsB;AACrB,YAAIrB,IAAI,GAAG,KAAKsB,UAAL,CAAgB,KAAKpD,IAArB,CAAX;AACA,aAAKmD,UAAL,GAAkB,IAAIpG,YAAJ,CAA2B+E,IAA3B,CAAlB;AACAA,YAAI,CAACuB,aAAL,GAAqB,IAArB;AACAvB,YAAI,CAACrD,MAAL,CAAYC,EAAZ,CAAe,SAAf,EAA0B,KAAKE,mBAA/B,EAAoD,IAApD,EAA0D,KAA1D;;AACA,aAAKQ,UAAL,CAAgBC,IAAhB,CAAqB,IAAIrC,YAAJ,CAAiB,KAAKmG,UAAtB,CAArB;;AACA,aAAK/D,UAAL,CAAgBC,IAAhB,CAAqB,KAAK8D,UAAL,CAAgB3D,QAArC;AACA;;AACD,aAAO,KAAK2D,UAAZ;AACA,KAVmB;oBAAA;;AAAA,GAApB;AAYA;;;;;;AAKOrD,sCAAP,UAAkBE,IAAlB,EAA4B;AAC3B,WAAO,IAAIrD,QAAJ,CAAaqD,IAAb,CAAP;AACA,GAFM;;AASPH,wBAAWC,sBAAX,EAAW,MAAX,EAAe;AALf;;;;;SAKA;AACC,UAAI,CAAC,KAAKwD,KAAV,EAAiB;AAChB,YAAI7B,IAAI,GAAG,KAAK8B,UAAL,EAAX;AACA,aAAKD,KAAL,GAAa,IAAIvG,YAAJ,CAAuB0E,IAAvB,CAAb;AACAA,YAAI,CAAC4B,aAAL,GAAqB,IAArB;AACA5B,YAAI,CAAChD,MAAL,CAAYC,EAAZ,CAAe,SAAf,EAA0B,KAAKE,mBAA/B,EAAoD,IAApD,EAA0D,KAA1D;;AACA,aAAKQ,UAAL,CAAgBC,IAAhB,CAAqB,IAAIrC,YAAJ,CAAiB,KAAKsG,KAAtB,CAArB;;AACA,aAAKlE,UAAL,CAAgBC,IAAhB,CAAqB,KAAKiE,KAAL,CAAW9D,QAAhC;AACA;;AACD,aAAO,KAAK8D,KAAZ;AACA,KAVc;oBAAA;;AAAA,GAAf;AAYA;;;;;;AAKOxD,sCAAP;AACC,WAAO,IAAIlD,IAAJ,EAAP;AACA,GAFM;;AAmCPiD,wBAAWC,sBAAX,EAAW,OAAX,EAAgB;AA/BhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA+BA;AACC,UAAI,CAAC,KAAK0D,MAAV,EAAkB;AACjB,YAAI9B,IAAI,GAAa,KAAK+B,UAAL,EAArB;AACA/B,YAAI,CAAC2B,aAAL,GAAqB,IAArB;AACA3B,YAAI,CAAC5C,UAAL,GAAkB,KAAlB;AACA4C,YAAI,CAACjD,MAAL,CAAYC,EAAZ,CAAe,SAAf,EAA0B,KAAKE,mBAA/B,EAAoD,IAApD,EAA0D,KAA1D;AACA,aAAK4E,MAAL,GAAc,IAAIzG,YAAJ,CAA2B2E,IAA3B,CAAd;;AACA,aAAKtC,UAAL,CAAgBC,IAAhB,CAAqB,IAAIrC,YAAJ,CAAiB,KAAKwG,MAAtB,CAArB;;AACA,aAAKpE,UAAL,CAAgBC,IAAhB,CAAqB,KAAKmE,MAAL,CAAYhE,QAAjC;AACA;;AACD,aAAO,KAAKgE,MAAZ;AACA,KAXe;oBAAA;;AAAA,GAAhB;AAaA;;;;;;AAKO1D,sCAAP;AACC,WAAO,IAAIhD,QAAJ,EAAP;AACA,GAFM;;AASP+C,wBAAWC,sBAAX,EAAW,QAAX,EAAiB;AALjB;;;;;SAKA;AACC,UAAI,CAAC,KAAK4D,OAAV,EAAmB;AAClB,YAAI9B,KAAK,GAAG,KAAK+B,WAAL,EAAZ;AACA,aAAKD,OAAL,GAAe,IAAI3G,YAAJ,CAA4B6E,KAA5B,CAAf;AACAA,aAAK,CAACyB,aAAN,GAAsB,IAAtB;AACAzB,aAAK,CAACnD,MAAN,CAAaC,EAAb,CAAgB,SAAhB,EAA2B,KAAKE,mBAAhC,EAAqD,IAArD,EAA2D,KAA3D;;AACA,aAAKQ,UAAL,CAAgBC,IAAhB,CAAqB,IAAIrC,YAAJ,CAAiB,KAAK0G,OAAtB,CAArB;;AACA,aAAKtE,UAAL,CAAgBC,IAAhB,CAAqB,KAAKqE,OAAL,CAAalE,QAAlC;AACA;;AACD,aAAO,KAAKkE,OAAZ;AACA,KAVgB;oBAAA;;AAAA,GAAjB;AAYA;;;;;;AAKO5D,uCAAP;AACC,WAAO,IAAIjD,SAAJ,EAAP;AACA,GAFM;;AAWPgD,wBAAWC,sBAAX,EAAW,QAAX,EAAiB;AAkBjB;;;SAGA;AACC,aAAO,KAAKwC,gBAAL,CAAsB,QAAtB,CAAP;AACA,KAvBgB;;AAPjB;;;;;;;SAOA,UAAkBC,KAAlB,EAAgC;AAE/B,UAAI,KAAKC,gBAAL,CAAsB,QAAtB,EAAgCD,KAAhC,CAAJ,EAA4C;AAC3C,YAAI,KAAKvC,IAAT,EAAe;AACd,eAAKA,IAAL,CAAU4D,UAAV;AACA;AACD;;AAED,UAAIrB,KAAJ,EAAW;AACV,aAAKhE,KAAL,GAAa,CAAb;AACA,aAAKC,MAAL,GAAc,CAAd;AACA,OAHD,MAIK;AACJ,aAAKD,KAAL,GAAasF,SAAb;AACA,aAAKrF,MAAL,GAAcqF,SAAd;AACA;AACD,KAhBgB;oBAAA;;AAAA,GAAjB;AAkCAhE,wBAAWC,sBAAX,EAAW,UAAX,EAAmB;AAInB;;;SAGA;AACC,aAAO,KAAKwC,gBAAL,CAAsB,UAAtB,CAAP;AACA,KATkB;;AATnB;;;;;;;;;SASA,UAAoBC,KAApB,EAAkC;AACjC,WAAKC,gBAAL,CAAsB,UAAtB,EAAkCD,KAAlC;AACA,KAFkB;oBAAA;;AAAA,GAAnB;AAmBA1C,wBAAWC,sBAAX,EAAW,kBAAX,EAA2B;AAI3B;;;SAGA;AACC,aAAO,KAAKwC,gBAAL,CAAsB,kBAAtB,CAAP;AACA,KAT0B;;AAR3B;;;;;;;;SAQA,UAA4BC,KAA5B,EAA0C;AACzC,WAAKC,gBAAL,CAAsB,kBAAtB,EAA0CD,KAA1C;AACA,KAF0B;oBAAA;;AAAA,GAA3B;AAoBA1C,wBAAWC,sBAAX,EAAW,iBAAX,EAA0B;AAI1B;;;SAGA;AACC,aAAO,KAAKwC,gBAAL,CAAsB,iBAAtB,CAAP;AACA,KATyB;;AAT1B;;;;;;;;;SASA,UAA2BC,KAA3B,EAAwC;AACvC,WAAKC,gBAAL,CAAsB,iBAAtB,EAAyCD,KAAzC;AACA,KAFyB;oBAAA;;AAAA,GAA1B;AAoBA1C,wBAAWC,sBAAX,EAAW,kBAAX,EAA2B;AAI3B;;;SAGA;AACC,aAAO,KAAKwC,gBAAL,CAAsB,kBAAtB,CAAP;AACA,KAT0B;;AAT3B;;;;;;;;;SASA,UAA4BC,KAA5B,EAAyC;AACxC,WAAKC,gBAAL,CAAsB,kBAAtB,EAA0CD,KAA1C;AACA,KAF0B;oBAAA;;AAAA,GAA3B;AAiCA1C,wBAAWC,sBAAX,EAAW,mBAAX,EAA4B;AAQ5B;;;SAGA;AACC,aAAO,KAAKwC,gBAAL,CAAsB,mBAAtB,CAAP;AACA,KAb2B;;AAtB5B;;;;;;;;;;;;;;;;;;;;;;SAsBA,UAA6BC,KAA7B,EAA0C;AACzC,UAAI,KAAKC,gBAAL,CAAsB,mBAAtB,EAA2CD,KAA3C,CAAJ,EAAuD;AACtD,YAAI,KAAKvC,IAAT,EAAe;AACd,eAAKA,IAAL,CAAU8D,gBAAV;AACA;AACD;AACD,KAN2B;oBAAA;;AAAA,GAA5B;AAqCAjE,wBAAWC,sBAAX,EAAW,iBAAX,EAA0B;AAQ1B;;;SAGA;AACC,aAAO,KAAKwC,gBAAL,CAAsB,iBAAtB,CAAP;AACA,KAbyB;;AAtB1B;;;;;;;;;;;;;;;;;;;;;;SAsBA,UAA2BC,KAA3B,EAAwC;AACvC,UAAI,KAAKC,gBAAL,CAAsB,iBAAtB,EAAyCD,KAAzC,CAAJ,EAAqD;AACpD,YAAI,KAAKvC,IAAT,EAAe;AACd,eAAKA,IAAL,CAAU8D,gBAAV;AACA;AACD;AACD,KANyB;oBAAA;;AAAA,GAA1B;AAoBAjE,wBAAWC,sBAAX,EAAW,UAAX,EAAmB;AAInB;;;SAGA;AACC,aAAO,KAAKwC,gBAAL,CAAsB,UAAtB,CAAP;AACA,KATkB;;AALnB;;;;;SAKA,UAAoBC,KAApB,EAAkC;AACjC,WAAKC,gBAAL,CAAsB,UAAtB,EAAkCD,KAAlC;AACA,KAFkB;oBAAA;;AAAA,GAAnB;AA0BA1C,wBAAWC,sBAAX,EAAW,kBAAX,EAA2B;AAI3B;;;SAGA;AACC,aAAO,KAAKwC,gBAAL,CAAsB,kBAAtB,CAAP;AACA,KAT0B;;AAf3B;;;;;;;;;;;;;;;SAeA,UAA4BC,KAA5B,EAAyC;AACxC,WAAKC,gBAAL,CAAsB,kBAAtB,EAA0CD,KAA1C,EAAiD,IAAjD;AACA,KAF0B;oBAAA;;AAAA,GAA3B;AA0BA1C,wBAAWC,sBAAX,EAAW,kBAAX,EAA2B;AAI3B;;;SAGA;AACC,aAAO,KAAKwC,gBAAL,CAAsB,kBAAtB,CAAP;AACA,KAT0B;;AAf3B;;;;;;;;;;;;;;;SAeA,UAA4BC,KAA5B,EAAyC;AACxC,WAAKC,gBAAL,CAAsB,kBAAtB,EAA0CD,KAA1C,EAAiD,IAAjD;AACA,KAF0B;oBAAA;;AAAA,GAA3B;AAWA;;;;;;;AAMOzC,oCAAP,UAAgBiE,MAAhB,EAA4B;AAC3BzG,qBAAM0G,QAAN,CAAcC,IAAd,CAAc,IAAd,EAAeF,MAAf;;AACA,SAAKtC,IAAL,CAAUjC,QAAV,CAAmBwE,QAAnB,CAA4BD,MAAM,CAACtC,IAAP,CAAYjC,QAAxC;AACA,SAAKD,KAAL,CAAWC,QAAX,CAAoBwE,QAApB,CAA6BD,MAAM,CAACxE,KAAP,CAAaC,QAA1C;AACA,SAAKa,MAAL,CAAYb,QAAZ,CAAqBwE,QAArB,CAA8BD,MAAM,CAAC1D,MAAP,CAAcb,QAA5C;AACA,SAAKE,SAAL,CAAeF,QAAf,CAAwBwE,QAAxB,CAAiCD,MAAM,CAACrE,SAAP,CAAiBF,QAAlD;AACA,SAAKR,IAAL,CAAUgF,QAAV,CAAmBD,MAAM,CAAC/E,IAA1B;AACA,SAAKE,QAAL,CAAc8E,QAAd,CAAuBD,MAAM,CAAC7E,QAA9B;AACA,GARM;AAUP;;;;;AAGOY,0CAAP,UAAsByC,KAAtB,EAAmC;AAClC,WAAOA,KAAP;AACA,GAFM;AAIP;;;;;;;;;;;AASOzC,yCAAP,UAAqByC,KAArB,EAAmC;AAClCjF,qBAAM4G,aAAN,CAAmBD,IAAnB,CAAmB,IAAnB,EAAoB1B,KAApB;;AACA,SAAKxD,gBAAL,CAAsBoF,OAAtB,GAAgC5B,KAAhC;AACA,GAHM;;AAKR;AAt/BA,EAAkChG,SAAlC;;;AAw/BA;;;;;;;AAMAU,QAAQ,CAACmH,iBAAT,CAA2B,cAA3B,IAA6CtE,YAA7C","names":["Container","MutableValueDisposer","AxisDataItem","AxisLine","AxisFill","Grid","AxisLabel","AxisTick","ListTemplate","ListDisposer","registry","percent","$math","$type","__extends","_super","_this","className","minGridDistance","inside","inversed","tooltipLocation","fullWidthTooltip","cellStartLocation","cellEndLocation","minLabelPosition","maxLabelPosition","shouldClone","gridContainer","createChild","layout","virtualParent","width","height","events","on","inited","invalidateAxisItems","breakContainer","isMeasured","bulletsContainer","line","strokeOpacity","baseGrid","disposers","_disposers","push","_chart","ticks","template","disabled","axisFills","interactionsEnabled","applyTheme","Object","AxisRenderer","_axis","axis","setAxis","parent","bind","updateTooltip","labels","item","point","moveTo","position","position2","x","y","coordinate","axisFullLength","renderer","end","start","pixelHeight","pixelWidth","coordinate2","round","startPosition","endPosition","invalidateDataItems","grid","tick","bullet","label","location","fill","axisBreak","positionItem","startLine","startPoint","toggleVisibility","endLine","endPoint","getPropertyValue","value","setPropertyValue","get","set","sprite","minPosition","maxPosition","dataItem","isNumber","updatedStart","updatedEnd","__disabled","_axisFills","createFill","applyOnClones","_grid","createGrid","_ticks","createTick","_labels","createLabel","invalidate","undefined","invalidateSeries","source","copyFrom","call","setVisibility","visible","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/axes/AxisRenderer.ts"],"sourcesContent":["/**\r\n * Module, defining base Axis Renderer.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisLine } from \"./AxisLine\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { Chart } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRenderer]].\r\n */\r\nexport interface IAxisRendererProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between grid elements.\r\n\t */\r\n\tminGridDistance?: number;\r\n\r\n\t/**\r\n\t * Draw axis labels inside axis.\r\n\t */\r\n\tinside?: boolean;\r\n\r\n\t/**\r\n\t * Draw axis on opposite side of the plot area?\r\n\t */\r\n\topposite?: boolean;\r\n\r\n\t/**\r\n\t * Inverse the order of the scale for the Axis.\r\n\t */\r\n\tinversed?: boolean;\r\n\r\n\t/**\r\n\t * Location of the cell start. (0-1)\r\n\t */\r\n\tcellStartLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the cell end. (0-1)\r\n\t */\r\n\tcellEndLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the axis tooltip. (0-1)\r\n\t */\r\n\ttooltipLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the tooltip relative secondary axis cell. (0-1)\r\n\t */\r\n\ttooltipLocation2?: number;\t\r\n\r\n\t/**\r\n\t * Resize axis tooltip to the full width of the cell.\r\n\t */\r\n\tfullWidthTooltip?: boolean;\r\n\r\n\t/**\r\n\t * Labels with position less than this will be hidden.\r\n\t */\r\n\tminLabelPosition?: number;\r\n\r\n\t/**\r\n\t * Labels with position bigger than this will be hidden.\r\n\t */\r\n\tmaxLabelPosition?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRenderer]].\r\n */\r\nexport interface IAxisRendererEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererAdapters extends IContainerAdapters, IAxisRendererProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all axis renderers.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRenderer extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererEvents;\r\n\r\n\t/**\r\n\t * A related Axis.\r\n\t */\r\n\tprotected _axis: Axis;\r\n\r\n\t/**\r\n\t * A line object of the related axis.\r\n\t */\r\n\tpublic line: AxisLine;\r\n\r\n\t/**\r\n\t * Base grid element. ([[Sprite]])\r\n\t *\r\n\t * For value axes base grid is at value 0.\r\n\t *\r\n\t * For category/date axis it is added at the end of the last item/date.\r\n\t *\r\n\t */\r\n\tpublic baseGrid: Sprite;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the [[Grid]] elements.\r\n\t */\r\n\tpublic gridContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the axis bullets.\r\n\t */\r\n\tpublic bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the [[AxisBreak]] elements.\r\n\t */\r\n\tpublic breakContainer: Container;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<Chart>();\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: Grid;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFill;\r\n\r\n\t/**\r\n\t * Defines type for tick elements.\r\n\t */\r\n\tpublic _tickType: AxisTick;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabel;\r\n\r\n\t/**\r\n\t * A list of grid elements.\r\n\t */\r\n\tprotected _grid: ListTemplate<this[\"_gridType\"]>;\r\n\r\n\t/**\r\n\t * A list of tick elements.\r\n\t */\r\n\tprotected _ticks: ListTemplate<this[\"_tickType\"]>;\r\n\r\n\t/**\r\n\t * A list of label elements.\r\n\t */\r\n\tprotected _labels: ListTemplate<this[\"_labelType\"]>;\r\n\r\n\t/**\r\n\t * A list of fill elements.\r\n\t */\r\n\tprotected _axisFills: ListTemplate<this[\"_fillType\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRenderer\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.minGridDistance = 50;\r\n\t\tthis.inside = false;\r\n\t\tthis.inversed = false;\r\n\t\tthis.tooltipLocation = 0.5;\r\n\t\tthis.fullWidthTooltip = false;\r\n\t\tthis.cellStartLocation = 0;\r\n\t\tthis.cellEndLocation = 1;\r\n\r\n\t\tthis.minLabelPosition = 0;\r\n\t\tthis.maxLabelPosition = 1;\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tlet gridContainer = this.createChild(Container);\r\n\t\tgridContainer.shouldClone = false;\r\n\t\tgridContainer.layout = \"none\";\r\n\t\t//\tgridContainer.isMeasured = false;\r\n\t\tgridContainer.virtualParent = this;\r\n\t\tgridContainer.width = percent(100);\r\n\t\tgridContainer.height = percent(100);\r\n\r\n\t\tthis.gridContainer = gridContainer;\r\n\t\t// not good without this\r\n\t\tgridContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tthis.invalidateAxisItems();\r\n\t\t\t}\r\n\t\t}, this, false);\r\n\r\n\t\tlet breakContainer = this.createChild(Container);\r\n\t\tbreakContainer.shouldClone = false;\r\n\t\tbreakContainer.isMeasured = false;\r\n\t\tbreakContainer.layout = \"none\";\r\n\t\tbreakContainer.width = percent(100);\r\n\t\tbreakContainer.height = percent(100);\r\n\t\tthis.breakContainer = breakContainer;\r\n\r\n\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.isMeasured = false;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tbulletsContainer.width = percent(100);\r\n\t\tbulletsContainer.height = percent(100);\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\t\tthis.line = this.createChild(AxisLine);\r\n\t\tthis.line.shouldClone = false;\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tlet baseGrid: Grid = this.createChild(Grid);\r\n\t\tbaseGrid.shouldClone = false;\r\n\t\tthis.baseGrid = baseGrid;\r\n\r\n\t\t// Make elements disposable\r\n\t\tlet disposers = this._disposers;\r\n\t\tdisposers.push(baseGrid);\r\n\t\tdisposers.push(this.line);\r\n\t\tdisposers.push(gridContainer);\r\n\t\tdisposers.push(breakContainer);\r\n\t\tdisposers.push(bulletsContainer);\r\n\t\tdisposers.push(this._chart);\r\n\r\n\t\tthis.ticks.template.disabled = true;\r\n\t\tthis.axisFills.template.disabled = true;\r\n\t\tthis.axisFills.template.interactionsEnabled = false;\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Axis of a renderer\r\n\t * @param axis Axis\r\n\t */\r\n\tset axis(axis: Axis) {\r\n\t\tthis.setAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Axis of a renderer\r\n\t * @return axis Axis\r\n\t */\r\n\tget axis(): Axis {\r\n\t\treturn this._axis;\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tthis._axis = axis;\r\n\t\tthis.baseGrid.parent = axis;\r\n\t\tthis.line.parent = axis;\r\n\t\tthis.gridContainer.bind(\"opacity\", axis);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tthis.events.on(\"sizechanged\", this.updateTooltip, this, false);\r\n\t\tthis.events.on(\"positionchanged\", this.updateTooltip, this, false);\r\n\t\tthis.labels.template.inside = this.inside;\r\n\t\tthis.ticks.template.inside = this.inside;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Axis' tooltip.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Re-positions an element to new coordinates.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item   A target element\r\n\t * @param point  New coordinates\r\n\t */\r\n\tpublic positionItem(item: Sprite, point: IPoint): void {\r\n\t\tif (item) {\r\n\t\t\titem.moveTo(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?:number): IPoint {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to angle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review / units)\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to a pixel coordinate.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength;\r\n\t\t}\r\n\r\n\t\treturn coordinate;\r\n\t}\r\n\r\n\tpublic updateGridContainer() {\r\n\r\n\t}\r\n\r\n\r\n\tprotected getHeight(): number {\r\n\t\tlet gridContainer = this.gridContainer;\r\n\t\tif(gridContainer.parent){\r\n\t\t\treturn gridContainer.parent.pixelHeight;\r\n\t\t}\r\n\t\treturn this.gridContainer.pixelHeight || 0;\r\n\t}\r\n\r\n\tprotected getWidth(): number {\r\n\t\tlet gridContainer = this.gridContainer;\r\n\t\tif(gridContainer.parent){\r\n\t\t\treturn gridContainer.parent.pixelWidth;\r\n\t\t}\r\n\t\treturn this.gridContainer.pixelWidth || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a coordinate in pixels to a relative position. (0-1)\r\n\t *\r\n\t * @param coordinate  Coordinate (px)\r\n\t * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic coordinateToPosition(coordinate: number, coordinate2?:number): number {\r\n\t\tlet position: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = axis.end - coordinate / axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = coordinate / axisFullLength + axis.start;\r\n\t\t}\r\n\r\n\t\treturn $math.round(position, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all axis data items, effectively causing them re-evaluated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic invalidateAxisItems(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\taxis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Sprite, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fill         Fill element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateFillElement(fill: AxisFill, position: number, endPosition: number): void {\r\n\t\tfill.startPosition = position;\r\n\t\tfill.endPosition = endPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak): void {\r\n\t\tthis.positionItem(axisBreak.startLine, axisBreak.startPoint);\r\n\t\tthis.toggleVisibility(axisBreak.startLine, axisBreak.startPosition, 0, 1);\r\n\t\tthis.positionItem(axisBreak.endLine, axisBreak.endPoint);\r\n\t\tthis.toggleVisibility(axisBreak.endLine, axisBreak.endPosition, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between grid elements.\r\n\t *\r\n\t * Use it to control density of the grid/labels on the axis.element.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} for more info\r\n\t * @param value  Min distance (px)\r\n\t */\r\n\tpublic set minGridDistance(value: number) {\r\n\t\tif (this.setPropertyValue(\"minGridDistance\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min distance (px)\r\n\t */\r\n\tpublic get minGridDistance(): number {\r\n\t\treturn this.getPropertyValue(\"minGridDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * A chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: Chart) {\r\n\t\tthis._chart.set(value, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): Chart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles visibility of an element, based on its current position and\r\n\t * min/max position settings.\r\n\t *\r\n\t * E.g. labels based on `minLabelPosition` and `maxLabelPosition`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprite       An element to toggle\r\n\t * @param position     Elements current position\r\n\t * @param minPosition  Min position setting\r\n\t * @param maxPosition  Max position setting\r\n\t */\r\n\tprotected toggleVisibility(sprite: Sprite, position: number, minPosition: number, maxPosition: number): void {\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tlet dataItem = sprite.dataItem;\r\n\t\tif(dataItem && dataItem instanceof AxisDataItem){\r\n\t\t\tif($type.isNumber(dataItem.minPosition)){\r\n\t\t\t\tminPosition = dataItem.minPosition;\r\n\t\t\t}\r\n\t\t\tif($type.isNumber(dataItem.maxPosition)){\r\n\t\t\t\tmaxPosition = dataItem.maxPosition;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tlet updatedStart = axis.start + (axis.end - axis.start) * (minPosition - 0.0001);\r\n\t\tlet updatedEnd = axis.start + (axis.end - axis.start) * (maxPosition + 0.0001);\r\n\r\n\t\tif (!sprite.disabled) {\r\n\t\t\tif (position < updatedStart || position > updatedEnd) {\r\n\t\t\t\tsprite.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak) {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Fill elements.\r\n\t *\r\n\t * Those are fill elements that cover the space between every second set\r\n\t * of grid lines, and can be configured to create striped charts.\r\n\t *\r\n\t * Please note that these are disabled by default. To enable them, set\r\n\t * template to true.\r\n\t *\r\n\t * ```TypeScript\r\n\t * categoryAxis.renderer.axisFills.template.disabled = false;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * categoryAxis.renderer.axisFills.template.disabled = false;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"renderer\": {\r\n\t *       \"axisFills\": {\r\n\t *         \"disabled\": false\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/alternated-axis-fills/} this tutorial for more info.\r\n\t * @return Fill elements\r\n\t */\r\n\tpublic get axisFills(): ListTemplate<this[\"_fillType\"]> {\r\n\t\tif (!this._axisFills) {\r\n\t\t\tlet fill = this.createFill(this.axis);\r\n\t\t\tthis._axisFills = new ListTemplate<AxisFill>(fill);\r\n\t\t\tfill.applyOnClones = true;\r\n\t\t\tfill.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisFills));\r\n\t\t\tthis._disposers.push(this._axisFills.template);\r\n\t\t}\r\n\t\treturn this._axisFills;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFill(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Grid elements.\r\n\t *\r\n\t * @return Grid elements\r\n\t */\r\n\tpublic get grid(): ListTemplate<this[\"_gridType\"]> {\r\n\t\tif (!this._grid) {\r\n\t\t\tlet grid = this.createGrid();\r\n\t\t\tthis._grid = new ListTemplate<Grid>(grid);\r\n\t\t\tgrid.applyOnClones = true;\r\n\t\t\tgrid.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._grid));\r\n\t\t\tthis._disposers.push(this._grid.template);\r\n\t\t}\r\n\t\treturn this._grid;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new Grid();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Tick elements.\r\n\t *\r\n\t * Please note that these are disabled by default. To enable ticks, you'll\r\n\t * need to set `disabled` and `strokeOpacity` properties of the tick template.\r\n\t *\r\n\t * ```TypeScript\r\n\t * categoryAxis.renderer.ticks.template.disabled = false;\r\n\t * categoryAxis.renderer.ticks.template.strokeOpacity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * categoryAxis.renderer.ticks.template.disabled = false;\r\n\t * categoryAxis.renderer.ticks.template.strokeOpacity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"renderer\": {\r\n\t *       \"ticks\": {\r\n\t *         \"disabled\": false,\r\n\t *         \"strokeOpacity\": 0.5\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Tick elements\r\n\t */\r\n\tpublic get ticks(): ListTemplate<this[\"_tickType\"]> {\r\n\t\tif (!this._ticks) {\r\n\t\t\tlet tick: AxisTick = this.createTick();\r\n\t\t\ttick.applyOnClones = true;\r\n\t\t\ttick.isMeasured = false;\r\n\t\t\ttick.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._ticks = new ListTemplate<AxisTick>(tick);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._ticks));\r\n\t\t\tthis._disposers.push(this._ticks.template);\r\n\t\t}\r\n\t\treturn this._ticks;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new tick element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Tick element\r\n\t */\r\n\tpublic createTick(): this[\"_tickType\"] {\r\n\t\treturn new AxisTick();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Label elements.\r\n\t *\r\n\t * @return Label elements\r\n\t */\r\n\tpublic get labels(): ListTemplate<this[\"_labelType\"]> {\r\n\t\tif (!this._labels) {\r\n\t\t\tlet label = this.createLabel();\r\n\t\t\tthis._labels = new ListTemplate<AxisLabel>(label);\r\n\t\t\tlabel.applyOnClones = true;\r\n\t\t\tlabel.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._labels));\r\n\t\t\tthis._disposers.push(this._labels.template);\r\n\t\t}\r\n\t\treturn this._labels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabel();\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether Axis' labels and ticks should be drawn inside Plot area.\r\n\t *\r\n\t * Does not work with all renderers, like AxisRendererRadial.\r\n\t *\r\n\t * @param value  Labels inside?\r\n\t */\r\n\tpublic set inside(value: boolean) {\r\n\r\n\t\tif (this.setPropertyValue(\"inside\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tthis.width = 0;\r\n\t\t\tthis.height = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.height = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Labels inside?\r\n\t */\r\n\tpublic get inside(): boolean {\r\n\t\treturn this.getPropertyValue(\"inside\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether Axis should be drawn on the opposite side of the plot\r\n\t * area than it would normally be drawn based on chart's settings.\r\n\t *\r\n\t * Does not work with all renderers, like [[AxisRendererRadial]] and\r\n\t * [[AxisRenderer Circular].\r\n\t *\r\n\t * @param value  Draw axis on opposite side?\r\n\t */\r\n\tpublic set opposite(value: boolean) {\r\n\t\tthis.setPropertyValue(\"opposite\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw axis on opposite side?\r\n\t */\r\n\tpublic get opposite(): boolean {\r\n\t\treturn this.getPropertyValue(\"opposite\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if Axis tooltip should take the whole width of the axis cell.\r\n\t * (between two grid lines)\r\n\t *\r\n\t * NOTE: this setting is ignored on circular axis types.\r\n\t *\r\n\t * @param value Full width tooltip?\r\n\t */\r\n\tpublic set fullWidthTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width tooltip?\r\n\t */\r\n\tpublic get fullWidthTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthTooltip\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location within axis cell to show tooltip on. (0-1)\r\n\t *\r\n\t * 0 - show at the start\r\n\t * 0.5 - show right in the middle\r\n\t * 1 - show at the end\r\n\t *\r\n\t * @param value Tooltip location\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip location\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location within secondary axis cell to show tooltip on. (0-1)\r\n\t *\r\n\t * 0 - show at the start\r\n\t * 0.5 - show right in the middle\r\n\t * 1 - show at the end\r\n\t *\r\n\t * @param value Tooltip location\r\n\t */\r\n\tpublic set tooltipLocation2(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation2\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip location\r\n\t */\r\n\tpublic get tooltipLocation2(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation2\");\r\n\t}\t\r\n\r\n\t/**\r\n\t * Location for the cell start.\r\n\t *\r\n\t * Normally a \"cell\" is the whole available width in a category.\r\n\t *\r\n\t * If there are several clustered column-like series available, the whole\r\n\t * space is divided between each clustered column, or column stacks.\r\n\t *\r\n\t * `cellStartLocation` identifies where, within available space, the actual\r\n\t * cell starts.\r\n\t *\r\n\t * This, together with column series' `width` will affect actual width of\r\n\t * columns, and thus gaps between them.\r\n\t *\r\n\t * This will affect category-like axes only, like [[DateAxis]], or\r\n\t * [[CategoryAxis]].\r\n\t *\r\n\t * This is used to limit a space occupied by series like column.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value Cell start (0-1)\r\n\t */\r\n\tpublic set cellStartLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"cellStartLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cell start (0-1)\r\n\t */\r\n\tpublic get cellStartLocation(): number {\r\n\t\treturn this.getPropertyValue(\"cellStartLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location for the cell end.\r\n\t *\r\n\t * Normally a \"cell\" is the whole available width in a category.\r\n\t *\r\n\t * If there are several clustered column-like series available, the whole\r\n\t * space is divided between each clustered column, or column stacks.\r\n\t *\r\n\t * `cellEndLocation` identifies where, within available space, the actual\r\n\t * cell ends.\r\n\t *\r\n\t * This, together with column series' `width` will affect actual width of\r\n\t * columns, and thus gaps between them.\r\n\t *\r\n\t * This will affect category-like axes only, like [[DateAxis]], or\r\n\t * [[CategoryAxis]].\r\n\t *\r\n\t * This is used to limit a space occupied by series like column.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value Cell end (0-1)\r\n\t */\r\n\tpublic set cellEndLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"cellEndLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cell end (0-1)\r\n\t */\r\n\tpublic get cellEndLocation(): number {\r\n\t\treturn this.getPropertyValue(\"cellEndLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if the scale of the axis should be flipped.\r\n\t *\r\n\t * @param value Flip axis?\r\n\t */\r\n\tpublic set inversed(value: boolean) {\r\n\t\tthis.setPropertyValue(\"inversed\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Flip axis?\r\n\t */\r\n\tpublic get inversed(): boolean {\r\n\t\treturn this.getPropertyValue(\"inversed\");\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum position along the Axis, for labels.\r\n\t *\r\n\t * Labels, which have their position closer to the start of the Axis, will be\r\n\t * automatically hidden.\r\n\t *\r\n\t * E.g., setting this to 0.05 (5% of total axis length) would hide labels,\r\n\t * that would otherwise be drawn very near start of the Axis.\r\n\t *\r\n\t * This is especially usefull with `inside = true`, or if the chart hasn't\r\n\t * got any extra margins.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value  Min label position (0-1)\r\n\t */\r\n\tpublic set minLabelPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"minLabelPosition\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min label position (0-1)\r\n\t */\r\n\tpublic get minLabelPosition(): number {\r\n\t\treturn this.getPropertyValue(\"minLabelPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum position along the Axis, for labels.\r\n\t *\r\n\t * Labels, which have their position closer to the and of the Axis, will be\r\n\t * automatically hidden.\r\n\t *\r\n\t * E.g., setting this to 0.95 (95% of total axis length) would hide labels,\r\n\t * that would otherwise be drawn very near end of the Axis.\r\n\t *\r\n\t * This is especially usefull with `inside = true`, or if the chart hasn't\r\n\t * got any extra margins.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value  Max label position (0-1)\r\n\t */\r\n\tpublic set maxLabelPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLabelPosition\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max label position (0-1)\r\n\t */\r\n\tpublic get maxLabelPosition(): number {\r\n\t\treturn this.getPropertyValue(\"maxLabelPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all settings and related items from another object of the same\r\n\t * type.\r\n\t *\r\n\t * @param source  Source object\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.grid.template.copyFrom(source.grid.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.axisFills.template.copyFrom(source.axisFills.template);\r\n\t\tthis.line.copyFrom(source.line);\r\n\t\tthis.baseGrid.copyFrom(source.baseGrid);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `visibility` property:\r\n\t *\r\n\t * * `true` - visible\r\n\t * * `false` - hidden\r\n\t *\r\n\t * @param value  true - visible, false - hidden\r\n\t * @return Current visibility\r\n\t */\r\n\tpublic setVisibility(value: boolean) {\r\n\t\tsuper.setVisibility(value);\r\n\t\tthis.bulletsContainer.visible = value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRenderer\"] = AxisRenderer;\r\n"]},"metadata":{},"sourceType":"module"}