{"ast":null,"code":"/**\r\n * This module contains ColorSet object definition\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../Base\";\nimport { Color, color } from \"./Color\";\nimport { registry } from \"../Registry\";\nimport * as $colors from \"./Colors\";\nimport * as $type from \"./Type\";\nimport * as $utils from \"./Utils\";\nimport * as $math from \"./Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Represents a set of colors. Can also generate colors according to set rules.\r\n *\r\n * @important\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\n\nvar ColorSet =\n/** @class */\nfunction (_super) {\n  __extends(ColorSet, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ColorSet() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Holds the list of the colors in this set. (preset or auto-generated)\r\n     */\n\n\n    _this._list = [];\n    /**\r\n     * Current step in a color generator's cycle.\r\n     */\n\n    _this._currentStep = 0;\n    /**\r\n     * If set to non-zero value, the ColorSet will start iterating colors from\r\n     * that particular index, not the first color in the list.\r\n     */\n\n    _this._startIndex = 0;\n    /**\r\n     * Current pass in the color generator's cycle. Normally a generator would\r\n     * cycle through all available hue range, then repeat it, alternating other\r\n     * color properties, to generate distinctive colors.\r\n     */\n\n    _this._currentPass = 0;\n    /**\r\n     * A base color. If there are no colors pre-set in the color list, ColorSet\r\n     * will use this color as a base when generating new ones, applying\r\n     * `stepOptions` and `passOptions` to this base color.\r\n     */\n\n    _this.baseColor = new Color({\n      r: 103,\n      g: 183,\n      b: 220\n    });\n    /**\r\n     * Modifications to apply with each new generated color.\r\n     */\n\n    _this.stepOptions = {};\n    /**\r\n     * Modifications to apply on top of `stepOptions` for each \"pass\" of the\r\n     * color generation.\r\n     *\r\n     * A \"pass\" is when ColorSet generates `minColors` number of colors.\r\n     */\n\n    _this.passOptions = {\n      brighten: -0.2\n    };\n    /**\r\n     * An index increment to use when iterating through color list.\r\n     *\r\n     * Default is 1, which means returning each and every color.\r\n     *\r\n     * Setting it to a bigger number will make ColorSet `next()` iterator skip\r\n     * some colors.\r\n     *\r\n     * E.g. setting to 2, will return every second color in the list.\r\n     *\r\n     * This is useful, when the color list has colors that are too close each\r\n     * other for contrast.\r\n     *\r\n     * However, having bigger number will mean that `next()` iterator will go\r\n     * through the list quicker, and the generator will kick sooner.\r\n     */\n\n    _this.step = 1;\n    /**\r\n     * A number of colors to generate in one \"pass\".\r\n     *\r\n     * This setting can be automatically overridden, if ColorSet has a list of\r\n     * pre-set colors. In such case ColorSet will generate exactly the same\r\n     * number of colors with each pass as there were colors in original set.\r\n     */\n\n    _this.minColors = 20;\n    /**\r\n     * Do not let the \"lightness\" of generated color to fall below this\r\n     * threshold.\r\n     */\n\n    _this.minLightness = 0.2;\n    /**\r\n     * Do not let the \"lightness\" of generated color to get above this threshold.\r\n     */\n\n    _this.maxLightness = 0.9;\n    /**\r\n     * Randomly shuffle generated colors.\r\n     */\n\n    _this.shuffle = false;\n    /**\r\n     * When colors are generated, based on `stepOptions`, each generated color\r\n     * gets either lighter or darker.\r\n     *\r\n     * If this is set to `true`, color generator will switch to opposing spectrum\r\n     * when reaching `minLightness` or `maxLightness`.\r\n     *\r\n     * E.g. if we start off with a red color, then gradually generate lighter\r\n     * colors through rose shades, then switch back to dark red and gradually\r\n     * increase the lightness of it until it reaches the starting red.\r\n     *\r\n     * If set to `false` it will stop there and cap lightness at whatever level\r\n     * we hit `minLightness` or `maxLightness`, which may result in a number of\r\n     * the same colors.\r\n     */\n\n    _this.wrap = true;\n    /**\r\n     * Re-use same colors in the pre-set list, when ColorSet runs out of colors,\r\n     * rather than start generating new ones.\r\n     */\n\n    _this.reuse = false;\n    /**\r\n     * Saturation of colors. This will change saturation of all colors of color\r\n     * set.\r\n     *\r\n     * It is recommended to set this in theme, as changing it at run time won't\r\n     * make the items to redraw and change color.\r\n     */\n\n    _this.saturation = 1;\n    _this.className = \"ColorSet\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(ColorSet.prototype, \"list\", {\n    /**\r\n     * Returns current list of colors.\r\n     *\r\n     * If there are none, a new list of colors is generated, based on various\r\n     * ColorSet settings.\r\n     *\r\n     * @return Color list\r\n     */\n    get: function () {\n      if (!this._list) {\n        this.generate(this.minColors);\n      }\n\n      return this._list;\n    },\n\n    /**\r\n     * Sets a list of pre-defined colors to use for the iterator.\r\n     *\r\n     * @param value Color list\r\n     */\n    set: function (value) {\n      this._list = value;\n      this.reset();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Gets reusable color.\r\n   *\r\n   * @param   index  Index of color\r\n   * @return         Color\r\n   */\n\n  ColorSet.prototype.getReusableColor = function (index) {\n    if (this._list.length == 0) {\n      this.generate(1);\n      return this.list[0];\n    } else {\n      var tmpstep = index - Math.floor(index / this._list.length) * this.list.length;\n      return this.list[tmpstep];\n    }\n  };\n  /**\r\n   * Returns next color in the list using internal iterator counter.\r\n   *\r\n   * If `step` is set to something other than 1, it may return other color than\r\n   * exact next one in the list.\r\n   *\r\n   * @return Color\r\n   */\n\n\n  ColorSet.prototype.next = function () {\n    var color;\n\n    if (this.list.length <= this._currentStep) {\n      if (this.reuse) {\n        color = this.getReusableColor(this._currentStep);\n      } else {\n        this.generate($math.max(this.minColors, this._currentStep + 1));\n        color = this.list[this._currentStep];\n      }\n    } else {\n      color = this.list[this._currentStep];\n    }\n\n    this._currentStep += this.step;\n    return color.saturate(this.saturation);\n  };\n  /**\r\n   * Returns a color at specific index in the list.\r\n   *\r\n   * @param i  Index\r\n   * @return Color\r\n   */\n\n\n  ColorSet.prototype.getIndex = function (i) {\n    var color;\n\n    if (this.list.length <= i) {\n      if (this.reuse) {\n        color = this.getReusableColor(i);\n      } else {\n        this.generate(this.minColors);\n        color = this.getIndex(i);\n      }\n    } else {\n      color = this.list[i];\n    }\n\n    return color.saturate(this.saturation);\n  };\n  /**\r\n   * Resets internal iterator.\r\n   *\r\n   * Calling `next()` after this will return the very first color in the color\r\n   * list, even if it was already returned before.\r\n   */\n\n\n  ColorSet.prototype.reset = function () {\n    this._currentStep = this._startIndex;\n  };\n\n  Object.defineProperty(ColorSet.prototype, \"currentStep\", {\n    /**\r\n     * @return Step\r\n     */\n    get: function () {\n      return this._currentStep;\n    },\n\n    /**\r\n     * Sets current color iteration. You can use this property to skip some\r\n     * colors from iteration. E.g. setting it to `10` will skip first ten\r\n     * colors.\r\n     *\r\n     * Please note that the number is zero-based.\r\n     *\r\n     * @param value  Step\r\n     */\n    set: function (value) {\n      this._currentStep = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColorSet.prototype, \"startIndex\", {\n    /**\r\n     * @return Index\r\n     */\n    get: function () {\n      return this._startIndex;\n    },\n\n    /**\r\n     * If set to non-zero value, the ColorSet will start iterating colors from\r\n     * that particular index, not the first color in the list.\r\n     *\r\n     * @default 0\r\n     * @since 4.4.9\r\n     * @param  value  Index\r\n     */\n    set: function (value) {\n      this._startIndex = value;\n      this.reset();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Generates colors based on the various ColorSet settings.\r\n   *\r\n   * @param count Number of colors to generate\r\n   */\n\n  ColorSet.prototype.generate = function (count) {\n    // Init\n    var curColor = this.currentColor;\n    var hsl = $colors.rgbToHsl($type.getValue(curColor.rgb));\n    var hueStep = $type.hasValue(this.stepOptions.hue) ? this.stepOptions.hue : 1 / count;\n    var mods = {\n      brighten: 0,\n      lighten: 0,\n      hue: hsl.h,\n      lightness: hsl.l,\n      saturation: hsl.s\n    }; // Generate list of hues, and shuffle them\n\n    var hues = [];\n    var startIndex = this.list.length == 0 ? 0 : 1;\n\n    if (this.reuse) {\n      for (var i = startIndex; i <= count; i++) {\n        hues.push($colors.rgbToHsl($type.getValue(this._list[i].rgb)).h);\n      }\n    } else {\n      for (var i = startIndex; i <= count; i++) {\n        var h = hsl.h + hueStep * i;\n\n        if (this.wrap && h > 1) {\n          h -= 1;\n        }\n\n        hues.push(h);\n      }\n    } // Shuffle colors randomly\n\n\n    if (this.shuffle) {\n      hues.sort(function (a, b) {\n        return Math.random() - 0.5;\n      });\n    } // Generate colors by rotating hue\n\n\n    for (var i = 0; i < count; i++) {\n      // Update hue\n      if (this.reuse) {\n        hsl = $colors.rgbToHsl($type.getValue(this._list[i].rgb));\n      } else {\n        hsl.h = hues.shift();\n      } // Apply HSL mods\n\n\n      this.applyStepOptions(hsl, mods, i, this._currentPass); // Convert back to Color\n\n      var c = color($colors.hslToRgb(hsl)); // Apply regular color mods\n\n      var brighten = (this.stepOptions.brighten || 0) * i + (this.passOptions.brighten || 0) * this._currentPass;\n\n      if (brighten != 0) {\n        if (this.wrap) {\n          brighten = $utils.fitNumberRelative(brighten, this.minLightness, this.maxLightness);\n        } else {\n          brighten = $utils.fitNumber(brighten, this.minLightness, this.maxLightness);\n        }\n\n        c = c.brighten(brighten);\n      }\n\n      var lighten = (this.stepOptions.lighten || 0) * i + (this.passOptions.lighten || 0) * this._currentPass;\n\n      if (lighten != 0) {\n        if (this.wrap) {\n          lighten = $utils.fitNumberRelative(lighten, this.minLightness, this.maxLightness);\n        } else {\n          lighten = $utils.fitNumber(lighten, this.minLightness, this.maxLightness);\n        }\n\n        c = c.lighten(lighten);\n      }\n\n      this._list.push(c);\n    }\n\n    this._currentPass++;\n  };\n\n  Object.defineProperty(ColorSet.prototype, \"currentColor\", {\n    /**\r\n     * Returns current last color. It's either the last color in the list of\r\n     * colors, or `baseColor` if list is empty.\r\n     *\r\n     * @return Color\r\n     */\n    get: function () {\n      if (this._list.length == 0) {\n        return this.baseColor.saturate(this.saturation);\n      } else {\n        return this._list[this._list.length - 1].saturate(this.saturation);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Generates modifiers for color, based on what step and pass.\r\n   *\r\n   * @param hsl   Curren HSL value of the color to modify\r\n   * @param base  The modifiers that were before modification to use as a base\r\n   * @param step  Current step\r\n   * @param pass  Current pass\r\n   */\n\n  ColorSet.prototype.applyStepOptions = function (hsl, base, step, pass) {\n    // Process lightness\n    hsl.l = base.lightness + (this.stepOptions.lightness || 0) * step + (this.passOptions.lightness || 0) * pass;\n\n    if (this.wrap) {\n      if (hsl.l > 1) {\n        hsl.l = hsl.l - Math.floor(hsl.l);\n      } else if (hsl.l < 0) {\n        hsl.l = -(hsl.l - Math.floor(hsl.l));\n      }\n\n      hsl.l = $utils.fitNumberRelative(hsl.l, this.minLightness, this.maxLightness);\n    } else {\n      if (hsl.l > 1) {\n        hsl.l = 1;\n      } else if (hsl.l < 0) {\n        hsl.l = 0;\n      }\n\n      hsl.l = $utils.fitNumber(hsl.l, this.minLightness, this.maxLightness);\n    }\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  ColorSet.prototype.processConfig = function (config) {\n    if (config) {\n      // Cast colors\n      if ($type.hasValue(config.list) && $type.isArray(config.list)) {\n        for (var i = 0, len = config.list.length; i < len; i++) {\n          if (!(config.list[i] instanceof Color)) {\n            config.list[i] = color(config.list[i]);\n          }\n        }\n      }\n\n      if ($type.hasValue(config.baseColor) && !(config.baseColor instanceof Color)) {\n        config.baseColor = color(config.baseColor);\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return ColorSet;\n}(BaseObject);\n\nexport { ColorSet };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ColorSet\"] = ColorSet;","map":{"version":3,"mappings":"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","names":["BaseObject","Color","color","registry","$colors","$type","$utils","$math","__extends","_super","_this","r","g","b","brighten","className","applyTheme","Object","ColorSet","_list","generate","minColors","value","reset","index","length","list","tmpstep","Math","floor","_currentStep","reuse","getReusableColor","max","step","saturate","saturation","i","getIndex","_startIndex","count","curColor","currentColor","hsl","rgbToHsl","getValue","rgb","hueStep","hasValue","stepOptions","hue","mods","lighten","h","lightness","l","s","hues","startIndex","push","wrap","shuffle","sort","a","random","shift","applyStepOptions","_currentPass","c","hslToRgb","passOptions","fitNumberRelative","minLightness","maxLightness","fitNumber","baseColor","base","pass","config","isArray","len","processConfig","call","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/core/utils/ColorSet.ts"],"sourcesContent":["/**\r\n * This module contains ColorSet object definition\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { Color, color, iHSL } from \"./Color\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $colors from \"./Colors\";\r\nimport * as $type from \"./Type\";\r\nimport * as $utils from \"./Utils\";\r\nimport * as $math from \"./Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines an interface for objects identifying a color step.\r\n *\r\n * A \"color step\" object is used when [[ColorSet]] is generating colors, when\r\n * it has ran out of pre-set colors.\r\n *\r\n * It takes the last available color, then applies one or several of the\r\n * properties, like hue, or saturation with each subsequent generated color.\r\n */\r\nexport interface IColorSetStepOptions {\r\n\thue: number;\r\n\tbrighten: number;\r\n\tlighten: number;\r\n\tlightness: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tsaturation: number;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a set of colors. Can also generate colors according to set rules.\r\n *\r\n * @important\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nexport class ColorSet extends BaseObject {\r\n\r\n\t/**\r\n\t * Holds the list of the colors in this set. (preset or auto-generated)\r\n\t */\r\n\tprotected _list: Color[] = [];\r\n\r\n\t/**\r\n\t * Current step in a color generator's cycle.\r\n\t */\r\n\tprotected _currentStep: number = 0;\r\n\r\n\t/**\r\n\t * If set to non-zero value, the ColorSet will start iterating colors from\r\n\t * that particular index, not the first color in the list.\r\n\t */\r\n\tprotected _startIndex: number = 0;\r\n\r\n\t/**\r\n\t * Current pass in the color generator's cycle. Normally a generator would\r\n\t * cycle through all available hue range, then repeat it, alternating other\r\n\t * color properties, to generate distinctive colors.\r\n\t */\r\n\tprotected _currentPass: number = 0;\r\n\r\n\t/**\r\n\t * A base color. If there are no colors pre-set in the color list, ColorSet\r\n\t * will use this color as a base when generating new ones, applying\r\n\t * `stepOptions` and `passOptions` to this base color.\r\n\t */\r\n\tpublic baseColor: Color = new Color({\r\n\t\tr: 103,\r\n\t\tg: 183,\r\n\t\tb: 220\r\n\t});\r\n\r\n\t/**\r\n\t * Modifications to apply with each new generated color.\r\n\t */\r\n\tpublic stepOptions: Partial<IColorSetStepOptions> = {};\r\n\r\n\t/**\r\n\t * Modifications to apply on top of `stepOptions` for each \"pass\" of the\r\n\t * color generation.\r\n\t *\r\n\t * A \"pass\" is when ColorSet generates `minColors` number of colors.\r\n\t */\r\n\tpublic passOptions: Partial<IColorSetStepOptions> = {\r\n\t\tbrighten: -0.2\r\n\t};\r\n\r\n\t/**\r\n\t * An index increment to use when iterating through color list.\r\n\t *\r\n\t * Default is 1, which means returning each and every color.\r\n\t *\r\n\t * Setting it to a bigger number will make ColorSet `next()` iterator skip\r\n\t * some colors.\r\n\t *\r\n\t * E.g. setting to 2, will return every second color in the list.\r\n\t *\r\n\t * This is useful, when the color list has colors that are too close each\r\n\t * other for contrast.\r\n\t *\r\n\t * However, having bigger number will mean that `next()` iterator will go\r\n\t * through the list quicker, and the generator will kick sooner.\r\n\t */\r\n\tpublic step: number = 1;\r\n\r\n\t/**\r\n\t * A number of colors to generate in one \"pass\".\r\n\t *\r\n\t * This setting can be automatically overridden, if ColorSet has a list of\r\n\t * pre-set colors. In such case ColorSet will generate exactly the same\r\n\t * number of colors with each pass as there were colors in original set.\r\n\t */\r\n\tpublic minColors: number = 20;\r\n\r\n\t/**\r\n\t * Do not let the \"lightness\" of generated color to fall below this\r\n\t * threshold.\r\n\t */\r\n\tpublic minLightness: number = 0.2;\r\n\r\n\t/**\r\n\t * Do not let the \"lightness\" of generated color to get above this threshold.\r\n\t */\r\n\tpublic maxLightness: number = 0.9;\r\n\r\n\t/**\r\n\t * Randomly shuffle generated colors.\r\n\t */\r\n\tpublic shuffle: boolean = false;\r\n\r\n\t/**\r\n\t * When colors are generated, based on `stepOptions`, each generated color\r\n\t * gets either lighter or darker.\r\n\t *\r\n\t * If this is set to `true`, color generator will switch to opposing spectrum\r\n\t * when reaching `minLightness` or `maxLightness`.\r\n\t *\r\n\t * E.g. if we start off with a red color, then gradually generate lighter\r\n\t * colors through rose shades, then switch back to dark red and gradually\r\n\t * increase the lightness of it until it reaches the starting red.\r\n\t *\r\n\t * If set to `false` it will stop there and cap lightness at whatever level\r\n\t * we hit `minLightness` or `maxLightness`, which may result in a number of\r\n\t * the same colors.\r\n\t */\r\n\tpublic wrap: boolean = true;\r\n\r\n\t/**\r\n\t * Re-use same colors in the pre-set list, when ColorSet runs out of colors,\r\n\t * rather than start generating new ones.\r\n\t */\r\n\tpublic reuse: boolean = false;\r\n\r\n\t/**\r\n\t * Saturation of colors. This will change saturation of all colors of color\r\n\t * set.\r\n\t *\r\n\t * It is recommended to set this in theme, as changing it at run time won't\r\n\t * make the items to redraw and change color.\r\n\t */\r\n\tpublic saturation: number = 1;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColorSet\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a list of pre-defined colors to use for the iterator.\r\n\t *\r\n\t * @param value Color list\r\n\t */\r\n\tpublic set list(value: Color[]) {\r\n\t\tthis._list = value;\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current list of colors.\r\n\t *\r\n\t * If there are none, a new list of colors is generated, based on various\r\n\t * ColorSet settings.\r\n\t *\r\n\t * @return Color list\r\n\t */\r\n\tpublic get list(): Color[] {\r\n\t\tif (!this._list) {\r\n\t\t\tthis.generate(this.minColors);\r\n\t\t}\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets reusable color.\r\n\t * \r\n\t * @param   index  Index of color\r\n\t * @return         Color\r\n\t */\r\n\tprotected getReusableColor(index: number): Color {\r\n\t\tif (this._list.length == 0) {\r\n\t\t\tthis.generate(1);\r\n\t\t\treturn this.list[0];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tmpstep = index - (Math.floor(index / this._list.length) * this.list.length);\r\n\t\t\treturn this.list[tmpstep];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns next color in the list using internal iterator counter.\r\n\t *\r\n\t * If `step` is set to something other than 1, it may return other color than\r\n\t * exact next one in the list.\r\n\t *\r\n\t * @return Color\r\n\t */\r\n\tpublic next(): Color {\r\n\t\tlet color;\r\n\t\tif (this.list.length <= this._currentStep) {\r\n\t\t\tif (this.reuse) {\r\n\t\t\t\tcolor = this.getReusableColor(this._currentStep);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.generate($math.max(this.minColors, this._currentStep + 1));\r\n\t\t\t\tcolor = this.list[this._currentStep];\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcolor = this.list[this._currentStep];\r\n\t\t}\r\n\t\tthis._currentStep += this.step;\r\n\t\treturn color.saturate(this.saturation);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a color at specific index in the list.\r\n\t *\r\n\t * @param i  Index\r\n\t * @return Color\r\n\t */\r\n\tpublic getIndex(i: number): Color {\r\n\t\tlet color;\r\n\t\tif (this.list.length <= i) {\r\n\t\t\tif (this.reuse) {\r\n\t\t\t\tcolor = this.getReusableColor(i);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.generate(this.minColors);\r\n\t\t\t\tcolor = this.getIndex(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcolor = this.list[i];\r\n\t\t}\r\n\t\treturn color.saturate(this.saturation);\r\n\t}\r\n\r\n\t/**\r\n\t * Resets internal iterator.\r\n\t *\r\n\t * Calling `next()` after this will return the very first color in the color\r\n\t * list, even if it was already returned before.\r\n\t */\r\n\tpublic reset(): void {\r\n\t\tthis._currentStep = this._startIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current color iteration. You can use this property to skip some\r\n\t * colors from iteration. E.g. setting it to `10` will skip first ten\r\n\t * colors.\r\n\t *\r\n\t * Please note that the number is zero-based.\r\n\t *\r\n\t * @param value  Step\r\n\t */\r\n\tpublic set currentStep(value: number) {\r\n\t\tthis._currentStep = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get currentStep(): number {\r\n\t\treturn this._currentStep;\r\n\t}\r\n\r\n\t/**\r\n\t * If set to non-zero value, the ColorSet will start iterating colors from\r\n\t * that particular index, not the first color in the list.\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.4.9\r\n\t * @param  value  Index\r\n\t */\r\n\tpublic set startIndex(value: number) {\r\n\t\tthis._startIndex = value;\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Index\r\n\t */\r\n\tpublic get startIndex(): number {\r\n\t\treturn this._startIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Generates colors based on the various ColorSet settings.\r\n\t *\r\n\t * @param count Number of colors to generate\r\n\t */\r\n\tpublic generate(count: number): void {\r\n\r\n\t\t// Init\r\n\t\tlet curColor = this.currentColor;\r\n\t\tlet hsl = $colors.rgbToHsl($type.getValue(curColor.rgb));\r\n\t\tlet hueStep = $type.hasValue(this.stepOptions.hue) ? this.stepOptions.hue : 1 / count;\r\n\t\tlet mods: IColorSetStepOptions = {\r\n\t\t\tbrighten: 0,\r\n\t\t\tlighten: 0,\r\n\t\t\thue: hsl.h,\r\n\t\t\tlightness: hsl.l,\r\n\t\t\tsaturation: hsl.s\r\n\t\t};\r\n\r\n\t\t// Generate list of hues, and shuffle them\r\n\t\tlet hues: number[] = [];\r\n\t\tconst startIndex = this.list.length == 0 ? 0 : 1;\r\n\t\tif (this.reuse) {\r\n\t\t\tfor (let i = startIndex; i <= count; i++) {\r\n\t\t\t\thues.push($colors.rgbToHsl($type.getValue(this._list[i].rgb)).h);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor (let i = startIndex; i <= count; i++) {\r\n\t\t\t\tlet h = hsl.h + hueStep * i;\r\n\t\t\t\tif (this.wrap && (h > 1)) {\r\n\t\t\t\t\th -= 1;\r\n\t\t\t\t}\r\n\t\t\t\thues.push(h);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Shuffle colors randomly\r\n\t\tif (this.shuffle) {\r\n\t\t\thues.sort((a: number, b: number) => {\r\n\t\t\t\treturn Math.random() - 0.5;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\t// Generate colors by rotating hue\r\n\t\tfor (let i = 0; i < count; i++) {\r\n\r\n\t\t\t// Update hue\r\n\t\t\tif (this.reuse) {\r\n\t\t\t\thsl = $colors.rgbToHsl($type.getValue(this._list[i].rgb));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thsl.h = <number>hues.shift();\r\n\t\t\t}\r\n\r\n\t\t\t// Apply HSL mods\r\n\t\t\tthis.applyStepOptions(hsl, mods, i, this._currentPass);\r\n\r\n\t\t\t// Convert back to Color\r\n\t\t\tlet c = color($colors.hslToRgb(hsl));\r\n\r\n\t\t\t// Apply regular color mods\r\n\t\t\tlet brighten = (this.stepOptions.brighten || 0) * i + (this.passOptions.brighten || 0) * this._currentPass;\r\n\t\t\tif (brighten != 0) {\r\n\t\t\t\tif (this.wrap) {\r\n\t\t\t\t\tbrighten = $utils.fitNumberRelative(brighten, this.minLightness, this.maxLightness);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbrighten = $utils.fitNumber(brighten, this.minLightness, this.maxLightness);\r\n\t\t\t\t}\r\n\t\t\t\tc = c.brighten(brighten);\r\n\t\t\t}\r\n\r\n\t\t\tlet lighten = (this.stepOptions.lighten || 0) * i + (this.passOptions.lighten || 0) * this._currentPass;\r\n\t\t\tif (lighten != 0) {\r\n\t\t\t\tif (this.wrap) {\r\n\t\t\t\t\tlighten = $utils.fitNumberRelative(lighten, this.minLightness, this.maxLightness);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlighten = $utils.fitNumber(lighten, this.minLightness, this.maxLightness);\r\n\t\t\t\t}\r\n\t\t\t\tc = c.lighten(lighten);\r\n\t\t\t}\r\n\r\n\t\t\tthis._list.push(c);\r\n\t\t}\r\n\r\n\t\tthis._currentPass++;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current last color. It's either the last color in the list of\r\n\t * colors, or `baseColor` if list is empty.\r\n\t *\r\n\t * @return Color\r\n\t */\r\n\tprotected get currentColor(): Color {\r\n\t\tif (this._list.length == 0) {\r\n\t\t\treturn this.baseColor.saturate(this.saturation);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._list[this._list.length - 1].saturate(this.saturation);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Generates modifiers for color, based on what step and pass.\r\n\t *\r\n\t * @param hsl   Curren HSL value of the color to modify\r\n\t * @param base  The modifiers that were before modification to use as a base\r\n\t * @param step  Current step\r\n\t * @param pass  Current pass\r\n\t */\r\n\tprotected applyStepOptions(hsl: iHSL, base: IColorSetStepOptions, step: number, pass: number): void {\r\n\r\n\t\t// Process lightness\r\n\t\thsl.l = base.lightness + (this.stepOptions.lightness || 0) * step + (this.passOptions.lightness || 0) * pass;\r\n\r\n\t\tif (this.wrap) {\r\n\t\t\tif (hsl.l > 1) {\r\n\t\t\t\thsl.l = hsl.l - Math.floor(hsl.l);\r\n\t\t\t}\r\n\t\t\telse if (hsl.l < 0) {\r\n\t\t\t\thsl.l = -(hsl.l - Math.floor(hsl.l));\r\n\t\t\t}\r\n\t\t\thsl.l = $utils.fitNumberRelative(hsl.l, this.minLightness, this.maxLightness);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (hsl.l > 1) {\r\n\t\t\t\thsl.l = 1\r\n\t\t\t}\r\n\t\t\telse if (hsl.l < 0) {\r\n\t\t\t\thsl.l = 0;\r\n\t\t\t}\r\n\t\t\thsl.l = $utils.fitNumber(hsl.l, this.minLightness, this.maxLightness);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Cast colors\r\n\t\t\tif ($type.hasValue(config.list) && $type.isArray(config.list)) {\r\n\t\t\t\tfor (let i = 0, len = config.list.length; i < len; i++) {\r\n\t\t\t\t\tif (!(config.list[i] instanceof Color)) {\r\n\t\t\t\t\t\tconfig.list[i] = color(config.list[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.baseColor) && !(config.baseColor instanceof Color)) {\r\n\t\t\t\tconfig.baseColor = color(config.baseColor);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColorSet\"] = ColorSet;"]},"metadata":{},"sourceType":"module"}