{"ast":null,"code":"/**\r\n * Creates a 3D rectangle.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../Container\";\nimport { Sprite } from \"../../Sprite\";\nimport * as $math from \"../../utils/Math\";\nimport * as $path from \"../../rendering/Path\";\nimport { Color, color, toColor } from \"../../utils/Color\";\nimport { RadialGradient } from \"../../rendering/fills/RadialGradient\";\nimport { LinearGradient } from \"../../rendering/fills/LinearGradient\";\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\nimport * as $type from \"../../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Builds a 3D rectangle\r\n * @see {@link IRectangle3DEvents} for a list of available events\r\n * @see {@link IRectangle3DAdapters} for a list of available Adapters\r\n */\n\nvar Rectangle3D =\n/** @class */\nfunction (_super) {\n  __extends(Rectangle3D, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Rectangle3D() {\n    var _this = _super.call(this) || this;\n\n    _this.angle = 30;\n    _this.depth = 30;\n    _this.className = \"Rectangle3D\";\n    _this.layout = \"none\";\n\n    var sideBack = _this.createChild(Sprite);\n\n    sideBack.shouldClone = false;\n    sideBack.setElement(_this.paper.add(\"path\"));\n    sideBack.isMeasured = false;\n    _this.sideBack = sideBack;\n\n    _this._disposers.push(_this.sideBack);\n\n    var sideBottom = _this.createChild(Sprite);\n\n    sideBottom.shouldClone = false;\n    sideBottom.setElement(_this.paper.add(\"path\"));\n    sideBottom.isMeasured = false;\n    _this.sideBottom = sideBottom;\n\n    _this._disposers.push(_this.sideBottom);\n\n    var sideLeft = _this.createChild(Sprite);\n\n    sideLeft.shouldClone = false;\n    sideLeft.setElement(_this.paper.add(\"path\"));\n    sideLeft.isMeasured = false;\n    _this.sideLeft = sideLeft;\n\n    _this._disposers.push(_this.sideLeft);\n\n    var sideRight = _this.createChild(Sprite);\n\n    sideRight.shouldClone = false;\n    sideRight.setElement(_this.paper.add(\"path\"));\n    sideRight.isMeasured = false;\n    _this.sideRight = sideRight;\n\n    _this._disposers.push(_this.sideRight);\n\n    var sideTop = _this.createChild(Sprite);\n\n    sideTop.shouldClone = false;\n    sideTop.setElement(_this.paper.add(\"path\"));\n    sideTop.isMeasured = false;\n    _this.sideTop = sideTop;\n\n    _this._disposers.push(_this.sideTop);\n\n    var sideFront = _this.createChild(Sprite);\n\n    sideFront.shouldClone = false;\n    sideFront.setElement(_this.paper.add(\"path\"));\n    sideFront.isMeasured = false;\n    _this.sideFront = sideFront;\n\n    _this._disposers.push(_this.sideFront);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Rectangle3D.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.innerWidth;\n    var h = this.innerHeight;\n    var depth = this.depth;\n    var angle = this.angle;\n    var sin = $math.sin(angle);\n    var cos = $math.cos(angle);\n    var a = {\n      x: 0,\n      y: 0\n    };\n    var b = {\n      x: w,\n      y: 0\n    };\n    var c = {\n      x: w,\n      y: h\n    };\n    var d = {\n      x: 0,\n      y: h\n    };\n    var ah = {\n      x: depth * cos,\n      y: -depth * sin\n    };\n    var bh = {\n      x: depth * cos + w,\n      y: -depth * sin\n    };\n    var ch = {\n      x: depth * cos + w,\n      y: -depth * sin + h\n    };\n    var dh = {\n      x: depth * cos,\n      y: -depth * sin + h\n    };\n    this.sideFront.path = $path.moveTo(a) + $path.lineTo(b) + $path.lineTo(c) + $path.lineTo(d) + $path.closePath();\n    this.sideBack.path = $path.moveTo(ah) + $path.lineTo(bh) + $path.lineTo(ch) + $path.lineTo(dh) + $path.closePath();\n    this.sideLeft.path = $path.moveTo(a) + $path.lineTo(ah) + $path.lineTo(dh) + $path.lineTo(d) + $path.closePath();\n    this.sideRight.path = $path.moveTo(b) + $path.lineTo(bh) + $path.lineTo(ch) + $path.lineTo(c) + $path.closePath();\n    this.sideBottom.path = $path.moveTo(d) + $path.lineTo(dh) + $path.lineTo(ch) + $path.lineTo(c) + $path.closePath();\n    this.sideTop.path = $path.moveTo(a) + $path.lineTo(ah) + $path.lineTo(bh) + $path.lineTo(b) + $path.closePath();\n  };\n\n  Object.defineProperty(Rectangle3D.prototype, \"depth\", {\n    /**\r\n     * @return Depth (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"depth\");\n    },\n\n    /**\r\n     * Depth (Z dimension) of the 3D rectangle in pixels.\r\n     *\r\n     * @default 30\r\n     * @param value  Depth (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"depth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle3D.prototype, \"angle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"angle\");\n    },\n\n    /**\r\n     * Angle of the point of view to the 3D element. (0-360)\r\n     *\r\n     * @default 30\r\n     * @param value  Angle\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"angle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets actual `fill` property on the SVG element, including applicable color\r\n   * modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Fill\r\n   */\n\n  Rectangle3D.prototype.setFill = function (value) {\n    _super.prototype.setFill.call(this, value);\n\n    if (!$type.isObject(value) || \"r\" in value) {\n      value = toColor(value);\n    }\n\n    var colorStr;\n\n    if (value instanceof Color) {\n      colorStr = value.hex;\n    } else if (value instanceof LinearGradient || value instanceof RadialGradient) {\n      colorStr = value.stops.getIndex(0).color.hex;\n    } else {\n      var filter = new LightenFilter();\n      filter.lightness = -0.2;\n      this.sideBack.filters.push(filter);\n      var filter2 = filter.clone();\n      filter2.lightness = -0.4;\n      this.sideLeft.filters.push(filter2);\n      var filter3 = filter.clone();\n      filter3.lightness = -0.2;\n      this.sideRight.filters.push(filter3);\n      var filter4 = filter.clone();\n      filter4.lightness = -0.1;\n      this.sideTop.filters.push(filter4);\n      var filter5 = filter.clone();\n      filter5.lightness = -0.5;\n      this.sideBottom.filters.push(filter5);\n    }\n\n    if (colorStr) {\n      this.sideBack.fill = color(colorStr).lighten(-0.2);\n      this.sideLeft.fill = color(colorStr).lighten(-0.4);\n      this.sideRight.fill = color(colorStr).lighten(-0.2);\n      this.sideTop.fill = color(colorStr).lighten(-0.1);\n      this.sideBottom.fill = color(colorStr).lighten(-0.5);\n    }\n  };\n  /**\r\n   * Copies all properties and related data from a different instance of Rectangle3D.\r\n   *\r\n   * @param source Source Rectangle3D\r\n   */\n\n\n  Rectangle3D.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.sideBack.copyFrom(source.sideBack);\n    this.sideLeft.copyFrom(source.sideLeft);\n    this.sideRight.copyFrom(source.sideRight);\n    this.sideTop.copyFrom(source.sideTop);\n    this.sideBottom.copyFrom(source.sideBottom);\n  };\n\n  return Rectangle3D;\n}(Container);\n\nexport { Rectangle3D };","map":{"version":3,"mappings":"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","names":["Container","Sprite","$math","$path","Color","color","toColor","RadialGradient","LinearGradient","LightenFilter","$type","__extends","_super","_this","angle","depth","className","layout","sideBack","createChild","shouldClone","setElement","paper","add","isMeasured","_disposers","push","sideBottom","sideLeft","sideRight","sideTop","sideFront","applyTheme","Rectangle3D","draw","call","w","innerWidth","h","innerHeight","sin","cos","a","x","y","b","c","d","ah","bh","ch","dh","path","moveTo","lineTo","closePath","Object","getPropertyValue","value","setPropertyValue","setFill","isObject","colorStr","hex","stops","getIndex","filter","lightness","filters","filter2","clone","filter3","filter4","filter5","fill","lighten","source","copyFrom"],"sourceRoot":"","sources":["../../../../../../src/.internal/core/elements/3d/Rectangle3D.ts"],"sourcesContent":["/**\r\n * Creates a 3D rectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../Container\";\r\nimport { Sprite } from \"../../Sprite\";\r\nimport { IPoint } from \"../../defs/IPoint\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $path from \"../../rendering/Path\";\r\nimport { Color, color, toColor } from \"../../utils/Color\";\r\nimport { RadialGradient } from \"../../rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../../rendering/fills/Pattern\";\r\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Rectangle3D]].\r\n */\r\nexport interface Rectangle3DProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Depth (Z dimension) of the 3D rectangle in pixels.\r\n\t *\r\n\t * @default 30\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Rectangle3D]]\r\n */\r\nexport interface Rectangle3DEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Rectangle3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface Rectangle3DAdapters extends IContainerAdapters, Rectangle3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Builds a 3D rectangle\r\n * @see {@link IRectangle3DEvents} for a list of available events\r\n * @see {@link IRectangle3DAdapters} for a list of available Adapters\r\n */\r\nexport class Rectangle3D extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: Rectangle3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: Rectangle3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: Rectangle3DEvents;\r\n\r\n\t/**\r\n\t * Left side element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideLeft: Sprite;\r\n\r\n\t/**\r\n\t * Right side element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideRight: Sprite;\r\n\r\n\t/**\r\n\t * Top element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideTop: Sprite;\r\n\r\n\t/**\r\n\t * Bottom element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideBottom: Sprite;\r\n\r\n\t/**\r\n\t * Back element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideBack: Sprite;\r\n\r\n\t/**\r\n\t * Front element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideFront: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.angle = 30;\r\n\t\tthis.depth = 30;\r\n\t\tthis.className = \"Rectangle3D\";\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tlet sideBack: Sprite = this.createChild(Sprite);\r\n\t\tsideBack.shouldClone = false;\r\n\t\tsideBack.setElement(this.paper.add(\"path\"));\r\n\t\tsideBack.isMeasured = false;\r\n\r\n\t\tthis.sideBack = sideBack;\r\n\t\tthis._disposers.push(this.sideBack);\r\n\r\n\t\tlet sideBottom: Sprite = this.createChild(Sprite);\r\n\t\tsideBottom.shouldClone = false;\r\n\t\tsideBottom.setElement(this.paper.add(\"path\"));\r\n\t\tsideBottom.isMeasured = false;\r\n\t\tthis.sideBottom = sideBottom;\r\n\t\tthis._disposers.push(this.sideBottom);\r\n\r\n\t\tlet sideLeft: Sprite = this.createChild(Sprite);\r\n\t\tsideLeft.shouldClone = false;\r\n\t\tsideLeft.setElement(this.paper.add(\"path\"));\r\n\t\tsideLeft.isMeasured = false;\r\n\t\tthis.sideLeft = sideLeft;\r\n\t\tthis._disposers.push(this.sideLeft);\r\n\r\n\t\tlet sideRight: Sprite = this.createChild(Sprite);\r\n\t\tsideRight.shouldClone = false;\r\n\t\tsideRight.setElement(this.paper.add(\"path\"));\r\n\t\tsideRight.isMeasured = false;\r\n\t\tthis.sideRight = sideRight;\r\n\t\tthis._disposers.push(this.sideRight);\r\n\r\n\t\tlet sideTop: Sprite = this.createChild(Sprite);\r\n\t\tsideTop.shouldClone = false;\r\n\t\tsideTop.setElement(this.paper.add(\"path\"));\r\n\t\tsideTop.isMeasured = false;\r\n\t\tthis.sideTop = sideTop;\r\n\t\tthis._disposers.push(this.sideTop);\r\n\r\n\t\tlet sideFront: Sprite = this.createChild(Sprite);\r\n\t\tsideFront.shouldClone = false;\r\n\t\tsideFront.setElement(this.paper.add(\"path\"));\r\n\t\tsideFront.isMeasured = false;\r\n\t\tthis.sideFront = sideFront;\r\n\t\tthis._disposers.push(this.sideFront);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet w: number = this.innerWidth;\r\n\t\tlet h: number = this.innerHeight;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tlet angle: number = this.angle;\r\n\t\tlet sin: number = $math.sin(angle);\r\n\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\tlet a: IPoint = { x: 0, y: 0 };\r\n\t\tlet b: IPoint = { x: w, y: 0 };\r\n\t\tlet c: IPoint = { x: w, y: h };\r\n\t\tlet d: IPoint = { x: 0, y: h };\r\n\r\n\t\tlet ah: IPoint = { x: depth * cos, y: -depth * sin };\r\n\t\tlet bh: IPoint = { x: depth * cos + w, y: -depth * sin };\r\n\t\tlet ch: IPoint = { x: depth * cos + w, y: -depth * sin + h };\r\n\t\tlet dh: IPoint = { x: depth * cos, y: -depth * sin + h };\r\n\r\n\t\tthis.sideFront.path = $path.moveTo(a) + $path.lineTo(b) + $path.lineTo(c) + $path.lineTo(d) + $path.closePath();\r\n\t\tthis.sideBack.path = $path.moveTo(ah) + $path.lineTo(bh) + $path.lineTo(ch) + $path.lineTo(dh) + $path.closePath();\r\n\t\tthis.sideLeft.path = $path.moveTo(a) + $path.lineTo(ah) + $path.lineTo(dh) + $path.lineTo(d) + $path.closePath();\r\n\t\tthis.sideRight.path = $path.moveTo(b) + $path.lineTo(bh) + $path.lineTo(ch) + $path.lineTo(c) + $path.closePath();\r\n\t\tthis.sideBottom.path = $path.moveTo(d) + $path.lineTo(dh) + $path.lineTo(ch) + $path.lineTo(c) + $path.closePath();\r\n\t\tthis.sideTop.path = $path.moveTo(a) + $path.lineTo(ah) + $path.lineTo(bh) + $path.lineTo(b) + $path.closePath();\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (Z dimension) of the 3D rectangle in pixels.\r\n\t *\r\n\t * @default 30\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tsuper.setFill(value);\r\n\r\n\t\tif (!$type.isObject(value) || \"r\" in value) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tlet colorStr: string;\r\n\t\tif (value instanceof Color) {\r\n\t\t\tcolorStr = value.hex;\r\n\t\t}\r\n\t\telse if (value instanceof LinearGradient || value instanceof RadialGradient) {\r\n\t\t\tcolorStr = value.stops.getIndex(0).color.hex;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet filter = new LightenFilter();\r\n\t\t\tfilter.lightness = -0.2;\r\n\t\t\tthis.sideBack.filters.push(filter);\r\n\r\n\t\t\tlet filter2 = filter.clone()\r\n\t\t\tfilter2.lightness = -0.4;\r\n\t\t\tthis.sideLeft.filters.push(filter2);\r\n\r\n\t\t\tlet filter3 = filter.clone()\r\n\t\t\tfilter3.lightness = -0.2;\r\n\t\t\tthis.sideRight.filters.push(filter3);\r\n\r\n\t\t\tlet filter4 = filter.clone()\r\n\t\t\tfilter4.lightness = -0.1;\r\n\t\t\tthis.sideTop.filters.push(filter4);\r\n\r\n\t\t\tlet filter5 = filter.clone()\r\n\t\t\tfilter5.lightness = -0.5;\r\n\t\t\tthis.sideBottom.filters.push(filter5);\r\n\t\t}\r\n\r\n\t\tif (colorStr) {\r\n\t\t\tthis.sideBack.fill = color(colorStr).lighten(-0.2);\r\n\t\t\tthis.sideLeft.fill = color(colorStr).lighten(-0.4);\r\n\t\t\tthis.sideRight.fill = color(colorStr).lighten(-0.2);\r\n\t\t\tthis.sideTop.fill = color(colorStr).lighten(-0.1);\r\n\t\t\tthis.sideBottom.fill = color(colorStr).lighten(-0.5);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Rectangle3D.\r\n\t *\r\n\t * @param source Source Rectangle3D\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.sideBack.copyFrom(source.sideBack);\r\n\t\tthis.sideLeft.copyFrom(source.sideLeft);\r\n\t\tthis.sideRight.copyFrom(source.sideRight);\r\n\t\tthis.sideTop.copyFrom(source.sideTop);\r\n\t\tthis.sideBottom.copyFrom(source.sideBottom);\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}