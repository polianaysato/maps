{"ast":null,"code":"/**\r\n * Funnel tick module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Tick } from \"../elements/Tick\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws an tick line for a funnel slice connecting it to a related label.\r\n *\r\n * @see {@link IFunnelTickEvents} for a list of available events\r\n * @see {@link IFunnelTickAdapters} for a list of available Adapters\r\n */\n\nvar FunnelTick =\n/** @class */\nfunction (_super) {\n  __extends(FunnelTick, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FunnelTick() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A label element this tick is attached to.\r\n     */\n\n\n    _this._label = new MutableValueDisposer();\n    /**\r\n     * A slice element this tick is attached to.\r\n     */\n\n    _this._slice = new MutableValueDisposer();\n    _this.className = \"FunnelTick\";\n    _this.element = _this.paper.add(\"path\");\n\n    _this._disposers.push(_this._label);\n\n    _this._disposers.push(_this._slice);\n\n    _this.setPropertyValue(\"locationX\", 0);\n\n    _this.setPropertyValue(\"locationY\", 0);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FunnelTick.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var slice = this.slice;\n    var point = slice.getPoint(this.locationX, this.locationY);\n\n    if (point) {\n      var label = this.label;\n      var series = slice.dataItem.component;\n      var p0 = void 0;\n      var p1 = void 0;\n      var p2 = void 0;\n\n      if (series.orientation == \"vertical\") {\n        var x1 = label.pixelX;\n        var y1 = label.pixelY;\n\n        if (!series.labelsOpposite) {\n          x1 += label.maxRight;\n        }\n\n        p0 = $utils.spritePointToSprite(point, slice, this.parent);\n        p2 = $utils.spritePointToSprite({\n          x: x1,\n          y: y1\n        }, label.parent, this.parent);\n        p1 = {\n          x: label.parent.pixelX - this.length,\n          y: p2.y\n        };\n\n        if (!series.labelsOpposite) {\n          p1.x = label.parent.measuredWidth + this.length;\n        }\n      } else {\n        var x1 = label.pixelX;\n        var y1 = label.pixelY;\n\n        if (!series.labelsOpposite) {\n          y1 += label.maxBottom;\n        }\n\n        p0 = $utils.spritePointToSprite(point, slice, this.parent);\n        p2 = $utils.spritePointToSprite({\n          x: x1,\n          y: y1\n        }, label.parent, this.parent);\n        p1 = {\n          x: p2.x,\n          y: label.parent.pixelY - this.length\n        };\n\n        if (!series.labelsOpposite) {\n          p1.y = label.parent.measuredHeight + this.length;\n        }\n      }\n\n      this.path = $path.moveTo(p0) + $path.lineTo(p1) + $path.lineTo(p2);\n    }\n  };\n\n  Object.defineProperty(FunnelTick.prototype, \"slice\", {\n    /**\r\n     * @return FunnelSlice\r\n     */\n    get: function get() {\n      return this._slice.get();\n    },\n\n    /**\r\n     * [[FunnelSlice]] element tick is attached to.\r\n     *\r\n     * @param slice  Slice\r\n     */\n    set: function set(slice) {\n      this._slice.set(slice, new MultiDisposer([slice.events.on(\"transformed\", this.invalidate, this, false), slice.events.on(\"validated\", this.invalidate, this, false)]));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelTick.prototype, \"label\", {\n    /**\r\n     * @return Label\r\n     */\n    get: function get() {\n      return this._label.get();\n    },\n\n    /**\r\n     * [[Label]] element tick is attached to.\r\n     *\r\n     * @param label  Label\r\n     */\n    set: function set(label) {\n      this._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelTick.prototype, \"locationX\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"locationX\");\n    },\n\n    /**\r\n     * A relative horizontal position within target element a tick is pointing\r\n     * to.\r\n     *\r\n     * A scale is from 0 to 1, where 0 means left edge, and 1 right edge.\r\n     *\r\n     * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n     * of the slice), or outside 0-1 range, which will put tick anchor position\r\n     * outside target element.\r\n     *\r\n     * @param value  Location (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"locationX\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelTick.prototype, \"locationY\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"locationY\");\n    },\n\n    /**\r\n     * A relative vertical position within target element a tick is pointing\r\n     * to.\r\n     *\r\n     * A scale is from 0 to 1, where 0 means top edge, and 1 bottom edge.\r\n     *\r\n     * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n     * of the slice), or outside 0-1 range, which will put tick anchor position\r\n     * outside target element.\r\n     *\r\n     * @param value  Location (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"locationY\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FunnelTick;\n}(Tick);\n\nexport { FunnelTick };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"FunnelTick\"] = FunnelTick;","map":{"version":3,"mappings":"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","names":["Tick","MutableValueDisposer","MultiDisposer","registry","$utils","$path","__extends","_super","_this","className","element","paper","add","_disposers","push","_label","_slice","setPropertyValue","applyTheme","FunnelTick","draw","call","slice","point","getPoint","locationX","locationY","label","series","dataItem","component","p0","p1","p2","orientation","x1","pixelX","y1","pixelY","labelsOpposite","maxRight","spritePointToSprite","parent","x","y","length","measuredWidth","maxBottom","measuredHeight","path","moveTo","lineTo","Object","get","set","events","on","invalidate","getPropertyValue","value","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/elements/FunnelTick.ts"],"sourcesContent":["/**\r\n * Funnel tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelSlice } from \"./FunnelSlice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickProperties extends ITickProperties {\r\n\tlocationX?: number;\r\n\r\n\tlocationY?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelTickAdapters extends ITickAdapters, IFunnelTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a funnel slice connecting it to a related label.\r\n *\r\n * @see {@link IFunnelTickEvents} for a list of available events\r\n * @see {@link IFunnelTickAdapters} for a list of available Adapters\r\n */\r\nexport class FunnelTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<Label>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<FunnelSlice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelTick\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\r\n\t\tthis.setPropertyValue(\"locationX\", 0);\r\n\t\tthis.setPropertyValue(\"locationY\", 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: FunnelSlice = this.slice;\r\n\t\tlet point = slice.getPoint(this.locationX, this.locationY);\r\n\r\n\t\tif (point) {\r\n\t\t\tlet label = this.label;\r\n\r\n\t\t\tlet series = <FunnelSeries>slice.dataItem.component;\r\n\t\t\tlet p0:IPoint;\r\n\t\t\tlet p1:IPoint;\r\n\t\t\tlet p2:IPoint;\r\n\r\n\t\t\tif (series.orientation == \"vertical\") {\r\n\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tx1 += label.maxRight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp0 = $utils.spritePointToSprite(point, slice, this.parent);\t\t\t\t\r\n\t\t\t\tp2 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\t\t\t\tp1 = { x: label.parent.pixelX - this.length, y: p2.y };\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tp1.x = label.parent.measuredWidth + this.length; \r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\ty1 += label.maxBottom;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n\t\t\t\tp2 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\t\t\t\tp1 = { x: p2.x, y: label.parent.pixelY - this.length };\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tp1.y = label.parent.measuredHeight + this.length; \r\n\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\tthis.path = $path.moveTo(p0) + $path.lineTo(p1) + $path.lineTo(p2);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [[FunnelSlice]] element tick is attached to.\r\n\t *\r\n\t * @param slice  Slice\r\n\t */\r\n\tpublic set slice(slice: FunnelSlice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this, false),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return FunnelSlice\r\n\t */\r\n\tpublic get slice(): FunnelSlice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element tick is attached to.\r\n\t *\r\n\t * @param label  Label\r\n\t */\r\n\tpublic set label(label: Label) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A relative horizontal position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means left edge, and 1 right edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationX(value: number) {\r\n\t\tthis.setPropertyValue(\"locationX\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationX(): number {\r\n\t\treturn this.getPropertyValue(\"locationX\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative vertical position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means top edge, and 1 bottom edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationY(value: number) {\r\n\t\tthis.setPropertyValue(\"locationY\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationY(): number {\r\n\t\treturn this.getPropertyValue(\"locationY\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelTick\"] = FunnelTick;\r\n"]},"metadata":{},"sourceType":"module"}