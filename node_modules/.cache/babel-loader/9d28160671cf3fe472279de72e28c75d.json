{"ast":null,"code":"/**\r\n * Defines Pyramid Series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo: sequenced?\n\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar PyramidSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(PyramidSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PyramidSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PyramidSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return PyramidSeriesDataItem;\n}(FunnelSeriesDataItem);\n\nexport { PyramidSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\n\nvar PyramidSeries =\n/** @class */\nfunction (_super) {\n  __extends(PyramidSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PyramidSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PyramidSeries\";\n    _this.topWidth = percent(0);\n    _this.bottomWidth = percent(100);\n    _this.pyramidHeight = percent(100);\n    _this.valueIs = \"area\";\n    _this.sliceLinks.template.width = 0;\n    _this.sliceLinks.template.height = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  PyramidSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Pyramid Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  PyramidSeries.prototype.createDataItem = function () {\n    return new PyramidSeriesDataItem();\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PyramidSeries.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    this._nextWidth = undefined;\n  };\n  /**\r\n   * [getNextValue description]\r\n   *\r\n   * @todo Description\r\n   * @param dataItem [description]\r\n   * @return [description]\r\n   */\n\n\n  PyramidSeries.prototype.getNextValue = function (dataItem) {\n    var index = dataItem.index;\n    var nextValue = dataItem.getWorkingValue(\"value\");\n\n    if (index < this.dataItems.length - 1) {\n      var nextItem = this.dataItems.getIndex(index + 1);\n      nextValue = nextItem.getWorkingValue(\"value\");\n    }\n\n    if (nextValue == 0) {\n      nextValue = 0.000001;\n    }\n\n    return nextValue;\n  };\n  /**\r\n   * [validateDataElements description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PyramidSeries.prototype.validateDataElements = function () {\n    var _this = this;\n\n    var maxWidth = this.slicesContainer.innerWidth;\n    var maxHeight = this.slicesContainer.innerHeight;\n    this.dataItems.each(function (dataItem) {\n      if (dataItem.value > 0) {\n        var relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\n        var sliceLink = dataItem.sliceLink;\n\n        if (_this.orientation == \"vertical\") {\n          maxHeight -= sliceLink.pixelHeight * relValue;\n        } else {\n          maxWidth -= sliceLink.pixelWidth * relValue;\n        }\n      }\n    });\n    this._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\n    this._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\n\n    if (this.orientation == \"vertical\") {\n      var y = (maxHeight - this._pyramidHeight) / 2;\n      this.slicesContainer.y = y;\n      this.labelsContainer.y = y;\n      this.ticksContainer.y = y;\n    } else {\n      var x = (maxWidth - this._pyramidWidth) / 2;\n      this.slicesContainer.x = x;\n      this.labelsContainer.x = x;\n      this.ticksContainer.x = x;\n    }\n\n    _super.prototype.validateDataElements.call(this);\n  };\n  /**\r\n   * [decorateSlice description]\r\n   *\r\n   * @todo Description\r\n   * @param dataItem [description]\r\n   */\n\n\n  PyramidSeries.prototype.decorateSlice = function (dataItem) {\n    var sum = this.dataItem.values.value.absoluteSum;\n\n    if (sum == 0) {\n      return;\n    }\n\n    var slice = dataItem.slice;\n    var sliceLink = dataItem.sliceLink;\n    var label = dataItem.label;\n    var tick = dataItem.tick; // TODO can this be removed ?\n\n    this.getNextValue(dataItem);\n    var workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\n    var pyramidWidth = this._pyramidWidth;\n    var pyramidHeight = this._pyramidHeight;\n    var maxWidth = this.slicesContainer.innerWidth;\n    var maxHeight = this.slicesContainer.innerHeight;\n    var linkWidth = sliceLink.pixelWidth;\n    var linkHeight = sliceLink.pixelHeight;\n\n    if ((dataItem.value == 0 || dataItem.value == null) && this.ignoreZeroValues) {\n      dataItem.__disabled = true;\n    } else {\n      dataItem.__disabled = false;\n    }\n\n    if (this.orientation == \"vertical\") {\n      var topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\n\n      if (!$type.isNumber(this._nextWidth)) {\n        this._nextWidth = topWidth;\n      }\n\n      var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\n      var sliceTopWidth = this._nextWidth;\n      var angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\n      var c = Math.tan(Math.PI / 2 - angle);\n\n      if (c == 0) {\n        c = 0.00000001;\n      }\n\n      var sliceHeight = void 0;\n      var sliceBottomWidth = void 0;\n\n      if (this.valueIs == \"area\") {\n        var totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\n        var square = totalSquare * workingValue / sum;\n        var s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\n        sliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\n\n        if (sliceHeight > 0) {\n          sliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\n        } else {\n          sliceBottomWidth = sliceTopWidth;\n        }\n      } else {\n        sliceHeight = pyramidHeight * workingValue / sum;\n        sliceBottomWidth = sliceTopWidth - sliceHeight * c;\n      }\n\n      slice.height = sliceHeight;\n      slice.width = maxWidth;\n      slice.bottomWidth = sliceBottomWidth;\n      slice.topWidth = sliceTopWidth;\n      sliceLink.topWidth = slice.bottomWidth;\n      sliceLink.bottomWidth = slice.bottomWidth;\n      slice.y = this._nextY; //slice.x = maxWidth / 2;\n\n      if (!this.alignLabels) {\n        label.x = maxWidth / 2;\n      } else {\n        label.x = 0;\n      }\n\n      label.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\n      this._nextY += slice.pixelHeight + linkHeight * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\n      sliceLink.y = this._nextY - linkHeight;\n      sliceLink.x = maxWidth / 2;\n    } else {\n      var topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\n\n      if (!$type.isNumber(this._nextWidth)) {\n        this._nextWidth = topWidth;\n      }\n\n      var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\n      var sliceTopWidth = this._nextWidth;\n      var angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\n      var c = Math.tan(Math.PI / 2 - angle);\n\n      if (c == 0) {\n        c = 0.00000001;\n      }\n\n      var sliceWidth = void 0;\n      var sliceBottomWidth = void 0;\n\n      if (this.valueIs == \"area\") {\n        var totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\n        var square = totalSquare * workingValue / sum;\n        sliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\n        sliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\n      } else {\n        sliceWidth = pyramidWidth * workingValue / sum;\n        sliceBottomWidth = sliceTopWidth - sliceWidth * c;\n      }\n\n      slice.width = sliceWidth;\n      slice.height = maxHeight;\n      slice.bottomWidth = sliceBottomWidth;\n      slice.topWidth = sliceTopWidth;\n      sliceLink.topWidth = slice.bottomWidth;\n      sliceLink.bottomWidth = slice.bottomWidth;\n      slice.x = this._nextY;\n\n      if (!this.alignLabels) {\n        label.y = maxHeight / 2;\n      } else {\n        label.y = this.labelsContainer.measuredHeight;\n      }\n\n      label.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\n      this._nextY += slice.pixelWidth + linkWidth * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\n      sliceLink.x = this._nextY - linkWidth;\n      sliceLink.y = maxHeight / 2;\n    }\n\n    this._nextWidth = slice.bottomWidth;\n  };\n\n  Object.defineProperty(PyramidSeries.prototype, \"topWidth\", {\n    /**\r\n     * @return {number | Percent}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"topWidth\");\n    },\n\n    /**\r\n     * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n     *\r\n     * `0%` (default) means the pyramid will be perfectly pointy.\r\n     * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n     * `100%` will take the whole width of the chart.\r\n     *\r\n     * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n     * `100%` and `bottomWidth` to `0%`.\r\n     *\r\n     * @default 0%\r\n     * @param {number | Percent}\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"pyramidHeight\", {\n    /**\r\n     * @return {number | Percent}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pyramidHeight\");\n    },\n\n    /**\r\n     * Height of pyramid\r\n     *\r\n     *\r\n     * @default 100%\r\n     * @param {number | Percent}\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"bottomWidth\", {\n    /**\r\n     * @return {number | Percent}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"bottomWidth\");\n    },\n\n    /**\r\n     * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n     *\r\n     * `0%` means the pyramid's botto will be pointy.\r\n     * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n     * `100%` (default) will take the whole width of the chart.\r\n     *\r\n     * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n     * `100%` and `bottomWidth` to `0%`.\r\n     *\r\n     * @param {number | Percent}\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"valueIs\", {\n    /**\r\n     * @return {\"area\" | \"height\"}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"valueIs\");\n    },\n\n    /**\r\n     * Indicates how slice's value will influence its size.\r\n     *\r\n     * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n     * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n     * slices based on their value.\r\n     *\r\n     * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n     * will represent their value relatively to values of the other slices.\r\n     *\r\n     * This is a correct way to depict \"weight\" of each slice based on their\r\n     * values.\r\n     *\r\n     * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n     * divvied up between slices. Actual slice width or area is not counted in.\r\n     *\r\n     * From the data-viz standpoint this does not make a lot of sense, since\r\n     * slices with lesser values might appear more prominent if they are placed\r\n     * towards thick end of the pyramid since their areas will be bigger.\r\n     *\r\n     * @default \"area\"\r\n     * @param {\"area\" | \"height\"}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"valueIs\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PyramidSeries;\n}(FunnelSeries);\n\nexport { PyramidSeries };\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;","map":{"version":3,"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAAuGA,YAAvG,EAAqHC,oBAArH,QAAiJ,gBAAjJ;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,SAAkBC,OAAlB,QAAiC,0BAAjC;AAGA;;;;;;AAOA;;AAEA;;;;;;AAKA;AAAA;AAAA;AAA2CC;AAO1C;;;;;AAGA;AAAA,gBACCC,qBAAO,IADR;;AAECC,SAAI,CAACC,SAAL,GAAiB,uBAAjB;;AAEAD,SAAI,CAACE,UAAL;;;AACA;;AACF;AAhBA,EAA2CT,oBAA3C;;;AAyEA;;;;;;;AAOA;;;;;;;;;AAQA;AAAA;AAAA;AAAmCK;AAsClC;;;;;AAGA;AAAA,gBACCC,qBAAO,IADR;;AAGCC,SAAI,CAACC,SAAL,GAAiB,eAAjB;AACAD,SAAI,CAACG,QAAL,GAAgBN,OAAO,CAAC,CAAD,CAAvB;AACAG,SAAI,CAACI,WAAL,GAAmBP,OAAO,CAAC,GAAD,CAA1B;AACAG,SAAI,CAACK,aAAL,GAAqBR,OAAO,CAAC,GAAD,CAA5B;AACAG,SAAI,CAACM,OAAL,GAAe,MAAf;AAEAN,SAAI,CAACO,UAAL,CAAgBC,QAAhB,CAAyBC,KAAzB,GAAiC,CAAjC;AACAT,SAAI,CAACO,UAAL,CAAgBC,QAAhB,CAAyBE,MAAzB,GAAkC,CAAlC;;AAEAV,SAAI,CAACE,UAAL;;;AACA;AAGD;;;;;;AAIUS,kDAAV;AACCZ,qBAAMa,qBAAN,CAA2BC,IAA3B,CAA2B,IAA3B;;AACA,QAAI,CAAClB,KAAK,CAACmB,QAAN,CAAe,KAAKC,WAApB,CAAL,EAAuC;AACtC,WAAKA,WAAL,GAAmB,KAAKC,QAAL,CAAcC,SAAd,CAAwB,gBAAxB,CAAnB;AACA;AACD,GALS;AAOV;;;;;;;;AAMUN,2CAAV;AACC,WAAO,IAAIO,qBAAJ,EAAP;AACA,GAFS;AAIV;;;;;;;AAKOP,qCAAP;AACCZ,qBAAMoB,QAAN,CAAcN,IAAd,CAAc,IAAd;;AACA,SAAKO,UAAL,GAAkBC,SAAlB;AACA,GAHM;AAKP;;;;;;;;;AAOUV,yCAAV,UAAuBW,QAAvB,EAAqD;AACpD,QAAIC,KAAK,GAAGD,QAAQ,CAACC,KAArB;AACA,QAAIC,SAAS,GAAWF,QAAQ,CAACG,eAAT,CAAyB,OAAzB,CAAxB;;AACA,QAAIF,KAAK,GAAG,KAAKG,SAAL,CAAeC,MAAf,GAAwB,CAApC,EAAuC;AACtC,UAAIC,QAAQ,GAAG,KAAKF,SAAL,CAAeG,QAAf,CAAwBN,KAAK,GAAG,CAAhC,CAAf;AACAC,eAAS,GAAGI,QAAQ,CAACH,eAAT,CAAyB,OAAzB,CAAZ;AACA;;AACD,QAAID,SAAS,IAAI,CAAjB,EAAoB;AACnBA,eAAS,GAAG,QAAZ;AACA;;AACD,WAAOA,SAAP;AACA,GAXS;AAaV;;;;;;;;AAMOb,iDAAP;AAAA;;AACC,QAAImB,QAAQ,GAAG,KAAKC,eAAL,CAAqBC,UAApC;AACA,QAAIC,SAAS,GAAG,KAAKF,eAAL,CAAqBG,WAArC;AAEA,SAAKR,SAAL,CAAeS,IAAf,CAAoB,UAACb,QAAD,EAAS;AAC5B,UAAIA,QAAQ,CAACc,KAAT,GAAiB,CAArB,EAAwB;AACvB,YAAIC,QAAQ,GAAGf,QAAQ,CAACG,eAAT,CAAyB,OAAzB,IAAoCH,QAAQ,CAACc,KAA5D;AACA,YAAIE,SAAS,GAAGhB,QAAQ,CAACgB,SAAzB;;AACA,YAAItC,KAAI,CAACuC,WAAL,IAAoB,UAAxB,EAAoC;AACnCN,mBAAS,IAAKK,SAAS,CAACE,WAAV,GAAwBH,QAAtC;AACA,SAFD,MAGK;AACJP,kBAAQ,IAAKQ,SAAS,CAACG,UAAV,GAAuBJ,QAApC;AACA;AACD;AACD,KAXD;AAaA,SAAKK,cAAL,GAAsB9C,MAAM,CAAC+C,eAAP,CAAuB,KAAKtC,aAA5B,EAA2C4B,SAA3C,CAAtB;AACA,SAAKW,aAAL,GAAqBhD,MAAM,CAAC+C,eAAP,CAAuB,KAAKtC,aAA5B,EAA2CyB,QAA3C,CAArB;;AAEA,QAAI,KAAKS,WAAL,IAAoB,UAAxB,EAAoC;AACnC,UAAIM,CAAC,GAAG,CAACZ,SAAS,GAAG,KAAKS,cAAlB,IAAoC,CAA5C;AACA,WAAKX,eAAL,CAAqBc,CAArB,GAAyBA,CAAzB;AACA,WAAKC,eAAL,CAAqBD,CAArB,GAAyBA,CAAzB;AACA,WAAKE,cAAL,CAAoBF,CAApB,GAAwBA,CAAxB;AACA,KALD,MAMK;AACJ,UAAIG,CAAC,GAAG,CAAClB,QAAQ,GAAG,KAAKc,aAAjB,IAAkC,CAA1C;AACA,WAAKb,eAAL,CAAqBiB,CAArB,GAAyBA,CAAzB;AACA,WAAKF,eAAL,CAAqBE,CAArB,GAAyBA,CAAzB;AACA,WAAKD,cAAL,CAAoBC,CAApB,GAAwBA,CAAxB;AACA;;AAEDjD,qBAAMkD,oBAAN,CAA0BpC,IAA1B,CAA0B,IAA1B;AACA,GAlCM;AAoCP;;;;;;;;AAMUF,0CAAV,UAAwBW,QAAxB,EAAmD;AAElD,QAAI4B,GAAG,GAAG,KAAK5B,QAAL,CAAc6B,MAAd,CAAqBf,KAArB,CAA2BgB,WAArC;;AAEA,QAAIF,GAAG,IAAI,CAAX,EAAc;AACb;AACA;;AAED,QAAIG,KAAK,GAAG/B,QAAQ,CAAC+B,KAArB;AACA,QAAIf,SAAS,GAAGhB,QAAQ,CAACgB,SAAzB;AACA,QAAIgB,KAAK,GAAGhC,QAAQ,CAACgC,KAArB;AACA,QAAIC,IAAI,GAAGjC,QAAQ,CAACiC,IAApB,CAXkD,CAalD;;AACA,SAAKC,YAAL,CAAkBlC,QAAlB;AAEA,QAAImC,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASrC,QAAQ,CAACG,eAAT,CAAyB,OAAzB,CAAT,CAAnB;AAEA,QAAImC,YAAY,GAAG,KAAKhB,aAAxB;AACA,QAAIvC,aAAa,GAAG,KAAKqC,cAAzB;AAEA,QAAIZ,QAAQ,GAAG,KAAKC,eAAL,CAAqBC,UAApC;AACA,QAAIC,SAAS,GAAG,KAAKF,eAAL,CAAqBG,WAArC;AAEA,QAAI2B,SAAS,GAAGvB,SAAS,CAACG,UAA1B;AACA,QAAIqB,UAAU,GAAGxB,SAAS,CAACE,WAA3B;;AAEA,QAAI,CAAClB,QAAQ,CAACc,KAAT,IAAkB,CAAlB,IAAuBd,QAAQ,CAACc,KAAT,IAAkB,IAA1C,KAAmD,KAAK2B,gBAA5D,EAA8E;AAC7EzC,cAAQ,CAAC0C,UAAT,GAAsB,IAAtB;AACA,KAFD,MAGK;AACJ1C,cAAQ,CAAC0C,UAAT,GAAsB,KAAtB;AACA;;AAED,QAAI,KAAKzB,WAAL,IAAoB,UAAxB,EAAoC;AACnC,UAAIpC,QAAQ,GAAGP,MAAM,CAAC+C,eAAP,CAAuB,KAAKxC,QAA5B,EAAsC2B,QAAtC,CAAf;;AAEA,UAAI,CAACnC,KAAK,CAACsE,QAAN,CAAe,KAAK7C,UAApB,CAAL,EAAsC;AACrC,aAAKA,UAAL,GAAkBjB,QAAlB;AACA;;AAED,UAAIC,WAAW,GAAGR,MAAM,CAAC+C,eAAP,CAAuB,KAAKvC,WAA5B,EAAyC0B,QAAzC,CAAlB;AACA,UAAIoC,aAAa,GAAG,KAAK9C,UAAzB;AAEA,UAAI+C,KAAK,GAAGT,IAAI,CAACU,KAAL,CAAW/D,aAAX,EAA0BF,QAAQ,GAAGC,WAArC,CAAZ;AACA,UAAIiE,CAAC,GAAGX,IAAI,CAACY,GAAL,CAASZ,IAAI,CAACa,EAAL,GAAU,CAAV,GAAcJ,KAAvB,CAAR;;AACA,UAAIE,CAAC,IAAI,CAAT,EAAY;AACXA,SAAC,GAAG,UAAJ;AACA;;AAED,UAAIG,WAAW,SAAf;AACA,UAAIC,gBAAgB,SAApB;;AAEA,UAAI,KAAKnE,OAAL,IAAgB,MAApB,EAA4B;AAC3B,YAAIoE,WAAW,GAAG,CAACvE,QAAQ,GAAGC,WAAZ,IAA2B,CAA3B,GAA+BC,aAAjD;AACA,YAAIsE,MAAM,GAAGD,WAAW,GAAGjB,YAAd,GAA6BP,GAA1C;AAEA,YAAI0B,CAAC,GAAGlB,IAAI,CAACC,GAAL,CAASO,aAAa,GAAGA,aAAhB,GAAgC,IAAIS,MAAJ,GAAaN,CAAtD,CAAR;AAEAG,mBAAW,GAAG,CAACN,aAAa,GAAGR,IAAI,CAACmB,IAAL,CAAUD,CAAV,CAAjB,IAAiCP,CAA/C;;AACA,YAAIG,WAAW,GAAG,CAAlB,EAAqB;AACpBC,0BAAgB,GAAG,CAAC,IAAIE,MAAJ,GAAaH,WAAW,GAAGN,aAA5B,IAA6CM,WAAhE;AACA,SAFD,MAGK;AACJC,0BAAgB,GAAGP,aAAnB;AACA;AACD,OAbD,MAcK;AACJM,mBAAW,GAAGnE,aAAa,GAAGoD,YAAhB,GAA+BP,GAA7C;AACAuB,wBAAgB,GAAGP,aAAa,GAAGM,WAAW,GAAGH,CAAjD;AACA;;AAEDhB,WAAK,CAAC3C,MAAN,GAAe8D,WAAf;AACAnB,WAAK,CAAC5C,KAAN,GAAcqB,QAAd;AACAuB,WAAK,CAACjD,WAAN,GAAoBqE,gBAApB;AACApB,WAAK,CAAClD,QAAN,GAAiB+D,aAAjB;AAEA5B,eAAS,CAACnC,QAAV,GAAqBkD,KAAK,CAACjD,WAA3B;AACAkC,eAAS,CAAClC,WAAV,GAAwBiD,KAAK,CAACjD,WAA9B;AAEAiD,WAAK,CAACR,CAAN,GAAU,KAAKiC,MAAf,CA9CmC,CA+CnC;;AAEA,UAAI,CAAC,KAAKC,WAAV,EAAuB;AACtBzB,aAAK,CAACN,CAAN,GAAUlB,QAAQ,GAAG,CAArB;AACA,OAFD,MAGK;AACJwB,aAAK,CAACN,CAAN,GAAU,CAAV;AACA;;AAEDM,WAAK,CAACT,CAAN,GAAUQ,KAAK,CAAC2B,MAAN,GAAe3B,KAAK,CAACb,WAAN,GAAoBe,IAAI,CAAC0B,SAAxC,GAAoD5B,KAAK,CAAC6B,EAApE;AAEA,WAAKJ,MAAL,IAAezB,KAAK,CAACb,WAAN,GAAoBsB,UAAU,GAAGL,YAAb,GAA4BC,IAAI,CAACyB,GAAL,CAASzB,IAAI,CAACC,GAAL,CAASrC,QAAQ,CAACc,KAAlB,CAAT,EAAmC,UAAnC,CAA/D;AACAE,eAAS,CAACO,CAAV,GAAc,KAAKiC,MAAL,GAAchB,UAA5B;AACAxB,eAAS,CAACU,CAAV,GAAclB,QAAQ,GAAG,CAAzB;AACA,KA7DD,MA8DK;AACJ,UAAI3B,QAAQ,GAAGP,MAAM,CAAC+C,eAAP,CAAuB,KAAKxC,QAA5B,EAAsC8B,SAAtC,CAAf;;AAEA,UAAI,CAACtC,KAAK,CAACsE,QAAN,CAAe,KAAK7C,UAApB,CAAL,EAAsC;AACrC,aAAKA,UAAL,GAAkBjB,QAAlB;AACA;;AAED,UAAIC,WAAW,GAAGR,MAAM,CAAC+C,eAAP,CAAuB,KAAKvC,WAA5B,EAAyC6B,SAAzC,CAAlB;AACA,UAAIiC,aAAa,GAAG,KAAK9C,UAAzB;AAEA,UAAI+C,KAAK,GAAGT,IAAI,CAACU,KAAL,CAAWR,YAAX,EAAyBzD,QAAQ,GAAGC,WAApC,CAAZ;AACA,UAAIiE,CAAC,GAAGX,IAAI,CAACY,GAAL,CAASZ,IAAI,CAACa,EAAL,GAAU,CAAV,GAAcJ,KAAvB,CAAR;;AACA,UAAIE,CAAC,IAAI,CAAT,EAAY;AACXA,SAAC,GAAG,UAAJ;AACA;;AAED,UAAIe,UAAU,SAAd;AACA,UAAIX,gBAAgB,SAApB;;AAEA,UAAI,KAAKnE,OAAL,IAAgB,MAApB,EAA4B;AAC3B,YAAIoE,WAAW,GAAG,CAACvE,QAAQ,GAAGC,WAAZ,IAA2B,CAA3B,GAA+BwD,YAAjD;AACA,YAAIe,MAAM,GAAGD,WAAW,GAAGjB,YAAd,GAA6BP,GAA1C;AACAkC,kBAAU,GAAG,CAAClB,aAAa,GAAGR,IAAI,CAACmB,IAAL,CAAUX,aAAa,GAAGA,aAAhB,GAAgC,IAAIS,MAAJ,GAAaN,CAAvD,CAAjB,IAA8EA,CAA3F;AACAI,wBAAgB,GAAG,CAAC,IAAIE,MAAJ,GAAaS,UAAU,GAAGlB,aAA3B,IAA4CkB,UAA/D;AACA,OALD,MAMK;AACJA,kBAAU,GAAGxB,YAAY,GAAGH,YAAf,GAA8BP,GAA3C;AACAuB,wBAAgB,GAAGP,aAAa,GAAGkB,UAAU,GAAGf,CAAhD;AACA;;AAEDhB,WAAK,CAAC5C,KAAN,GAAc2E,UAAd;AACA/B,WAAK,CAAC3C,MAAN,GAAeuB,SAAf;AACAoB,WAAK,CAACjD,WAAN,GAAoBqE,gBAApB;AACApB,WAAK,CAAClD,QAAN,GAAiB+D,aAAjB;AAEA5B,eAAS,CAACnC,QAAV,GAAqBkD,KAAK,CAACjD,WAA3B;AACAkC,eAAS,CAAClC,WAAV,GAAwBiD,KAAK,CAACjD,WAA9B;AAEAiD,WAAK,CAACL,CAAN,GAAU,KAAK8B,MAAf;;AAEA,UAAI,CAAC,KAAKC,WAAV,EAAuB;AACtBzB,aAAK,CAACT,CAAN,GAAUZ,SAAS,GAAG,CAAtB;AACA,OAFD,MAGK;AACJqB,aAAK,CAACT,CAAN,GAAU,KAAKC,eAAL,CAAqBuC,cAA/B;AACA;;AAED/B,WAAK,CAACN,CAAN,GAAUK,KAAK,CAACiC,MAAN,GAAejC,KAAK,CAACZ,UAAN,GAAmBc,IAAI,CAACgC,SAAvC,GAAmDlC,KAAK,CAACmC,EAAnE;AAEA,WAAKV,MAAL,IAAezB,KAAK,CAACZ,UAAN,GAAmBoB,SAAS,GAAGJ,YAAZ,GAA2BC,IAAI,CAACyB,GAAL,CAASzB,IAAI,CAACC,GAAL,CAASrC,QAAQ,CAACc,KAAlB,CAAT,EAAmC,UAAnC,CAA7D;AACAE,eAAS,CAACU,CAAV,GAAc,KAAK8B,MAAL,GAAcjB,SAA5B;AACAvB,eAAS,CAACO,CAAV,GAAcZ,SAAS,GAAG,CAA1B;AACA;;AAED,SAAKb,UAAL,GAAkBiC,KAAK,CAACjD,WAAxB;AACA,GAvJS;;AAsKVqF,wBAAW9E,uBAAX,EAAW,UAAX,EAAmB;AAMnB;;;SAGA;AACC,aAAO,KAAK+E,gBAAL,CAAsB,UAAtB,CAAP;AACA,KAXkB;;AAbnB;;;;;;;;;;;;;SAaA,UAAoBtD,KAApB,EAA2C;AAC1C,UAAI,KAAKuD,kBAAL,CAAwB,UAAxB,EAAoCvD,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,EAAzD,EAA6D,KAA7D,CAAJ,EAAyE;AACxE,aAAKwD,UAAL;AACA;AACD,KAJkB;oBAAA;;AAAA,GAAnB;AAqBAH,wBAAW9E,uBAAX,EAAW,eAAX,EAAwB;AAMxB;;;SAGA;AACC,aAAO,KAAK+E,gBAAL,CAAsB,eAAtB,CAAP;AACA,KAXuB;;AAPxB;;;;;;;SAOA,UAAyBtD,KAAzB,EAAgD;AAC/C,UAAI,KAAKuD,kBAAL,CAAwB,eAAxB,EAAyCvD,KAAzC,EAAgD,KAAhD,EAAuD,KAAvD,EAA8D,EAA9D,EAAkE,KAAlE,CAAJ,EAA8E;AAC7E,aAAKwD,UAAL;AACA;AACD,KAJuB;oBAAA;;AAAA,GAAxB;AAyBAH,wBAAW9E,uBAAX,EAAW,aAAX,EAAsB;AAMtB;;;SAGA;AACC,aAAO,KAAK+E,gBAAL,CAAsB,aAAtB,CAAP;AACA,KAXqB;;AAZtB;;;;;;;;;;;;SAYA,UAAuBtD,KAAvB,EAA8C;AAC7C,UAAI,KAAKuD,kBAAL,CAAwB,aAAxB,EAAuCvD,KAAvC,EAA8C,KAA9C,EAAqD,KAArD,EAA4D,EAA5D,EAAgE,KAAhE,CAAJ,EAA4E;AAC3E,aAAKwD,UAAL;AACA;AACD,KAJqB;oBAAA;;AAAA,GAAtB;AAoCAH,wBAAW9E,uBAAX,EAAW,SAAX,EAAkB;AAMlB;;;SAGA;AACC,aAAO,KAAK+E,gBAAL,CAAsB,SAAtB,CAAP;AACA,KAXiB;;AAvBlB;;;;;;;;;;;;;;;;;;;;;;;SAuBA,UAAmBtD,KAAnB,EAA2C;AAC1C,UAAI,KAAKyD,gBAAL,CAAsB,SAAtB,EAAiCzD,KAAjC,CAAJ,EAA6C;AAC5C,aAAKwD,UAAL;AACA;AACD,KAJiB;oBAAA;;AAAA,GAAlB;AAYD;AAhaA,EAAmCpG,YAAnC;;;AAkaA;;;;;;;AAMAE,QAAQ,CAACoG,iBAAT,CAA2B,eAA3B,IAA8CnF,aAA9C;AACAjB,QAAQ,CAACoG,iBAAT,CAA2B,uBAA3B,IAAsD5E,qBAAtD","names":["FunnelSeries","FunnelSeriesDataItem","registry","$type","$utils","percent","__extends","_super","_this","className","applyTheme","topWidth","bottomWidth","pyramidHeight","valueIs","sliceLinks","template","width","height","PyramidSeries","applyInternalDefaults","call","hasValue","readerTitle","language","translate","PyramidSeriesDataItem","validate","_nextWidth","undefined","dataItem","index","nextValue","getWorkingValue","dataItems","length","nextItem","getIndex","maxWidth","slicesContainer","innerWidth","maxHeight","innerHeight","each","value","relValue","sliceLink","orientation","pixelHeight","pixelWidth","_pyramidHeight","relativeToValue","_pyramidWidth","y","labelsContainer","ticksContainer","x","validateDataElements","sum","values","absoluteSum","slice","label","tick","getNextValue","workingValue","Math","abs","pyramidWidth","linkWidth","linkHeight","ignoreZeroValues","__disabled","isNumber","sliceTopWidth","angle","atan2","c","tan","PI","sliceHeight","sliceBottomWidth","totalSquare","square","s","sqrt","_nextY","alignLabels","pixelY","locationY","dy","max","sliceWidth","measuredHeight","pixelX","locationX","dx","Object","getPropertyValue","setPercentProperty","invalidate","setPropertyValue","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/series/PyramidSeries.ts"],"sourcesContent":["/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.value > 0) {\r\n\t\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.absoluteSum;\r\n\r\n\t\tif (sum == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tthis.getNextValue(dataItem);\r\n\r\n\t\tlet workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif ((dataItem.value == 0 || dataItem.value == null) && this.ignoreZeroValues) {\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tif (sliceHeight > 0) {\r\n\t\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsliceBottomWidth = sliceTopWidth;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n"]},"metadata":{},"sourceType":"module"}