{"ast":null,"code":"/**\r\n * Number formatting-related functionality.\r\n */\nimport { __extends } from \"tslib\";\nimport { Language } from \"../utils/Language\";\nimport { BaseObject } from \"../Base\";\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\nimport { registry } from \"../Registry\";\nimport * as $strings from \"../utils/Strings\";\nimport * as $object from \"../utils/Object\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $type from \"../utils/Type\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * NumberFormatter class. Formats numbers according to specified formats.\r\n *\r\n * @todo Apply translations to suffixes/prefixes\r\n */\n\nvar NumberFormatter =\n/** @class */\nfunction (_super) {\n  __extends(NumberFormatter, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function NumberFormatter() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A base value for negative numbers. Will treat all numbers below this value\r\n     * as negative numbers.\r\n     */\n\n\n    _this._negativeBase = 0;\n    /**\r\n     * Holds number format.\r\n     *\r\n     * @default #,###.#####\r\n     */\n\n    _this._numberFormat = \"#,###.#####\";\n    /**\r\n     * Output format to produce. If the format calls for applying color to the\r\n     * formatted value, this setting will determine what markup to use: SVG or\r\n     * HTML.\r\n     *\r\n     * Available options: svg, html.\r\n     *\r\n     * @default \"svg\"\r\n     */\n\n    _this._outputFormat = \"svg\";\n    /**\r\n     * Any number smaller than this will be considered \"small\" number, which will\r\n     * trigger special formatting if \"a\" format modifier is used.\r\n     */\n\n    _this._smallNumberThreshold = 1.00;\n    _this._forceLTR = false;\n    _this.className = \"NumberFormatter\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  NumberFormatter.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    if (this.language) {\n      this.language.dispose();\n    }\n  };\n\n  Object.defineProperty(NumberFormatter.prototype, \"language\", {\n    /**\r\n     * @return Language\r\n     */\n    get: function get() {\n      if (!this._language) {\n        if (this.sprite) {\n          this._language = this.sprite.language;\n        } else {\n          this._language = new Language();\n        }\n      }\n\n      return this._language;\n    },\n\n    /**\r\n     * A reference to [[Language]] instance.\r\n     *\r\n     * Formatter will use language to translate various items, like number\r\n     * suffixes, etc.\r\n     *\r\n     * @param value  Language\r\n     */\n    set: function set(value) {\n      this._language = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Formats the number according to specific format.\r\n   *\r\n   * @param value   Value to format\r\n   * @param format  Format to apply\r\n   * @return Formatted number\r\n   */\n\n  NumberFormatter.prototype.format = function (value, format, precision) {\n    // no format passed in or \"Number\"\n    if (typeof format === \"undefined\" || $type.isString(format) && format.toLowerCase() === \"number\") {\n      format = this._numberFormat;\n    } // Init return value\n\n\n    var formatted; // Cast to number just in case\n    // TODO: maybe use better casting\n\n    var source = Number(value); // Is it a built-in format or Intl.NumberFormatOptions\n\n    if ($type.isObject(format)) {\n      try {\n        if (this.intlLocales) {\n          return new Intl.NumberFormat(this.intlLocales, format).format(source);\n        } else {\n          return new Intl.NumberFormat(undefined, format).format(source);\n        }\n      } catch (e) {\n        return \"Invalid\";\n      }\n    } else {\n      // Clean format\n      format = $utils.cleanFormat(format); // Get format info (it will also deal with parser caching)\n\n      var info = this.parseFormat(format, this.language); // format and replace the number\n\n      var details = void 0;\n\n      if (source > this._negativeBase) {\n        details = info.positive;\n      } else if (source < this._negativeBase) {\n        details = info.negative;\n      } else {\n        details = info.zero;\n      } // Adjust precision\n\n\n      if ($type.hasValue(precision) && !details.mod) {\n        details = $object.clone(details);\n        details.decimals.active = source == 0 ? 0 : precision;\n      } // Format\n\n\n      formatted = details.template.split($strings.PLACEHOLDER).join(this.applyFormat(source, details));\n    }\n\n    if (this.forceLTR) {\n      formatted = \"‎\" + formatted;\n    }\n\n    return formatted;\n  };\n  /**\r\n   * Parses supplied format into structured object which can be used to format\r\n   * the number.\r\n   *\r\n   * @param format Format string, i.e. \"#,###.00\"\r\n   * @param language Language\r\n   */\n\n\n  NumberFormatter.prototype.parseFormat = function (format, language) {\n    var _this = this; // Check cache\n\n\n    var cached = this.getCache(format);\n\n    if ($type.hasValue(cached)) {\n      return cached;\n    } // init format parse info holder\n\n\n    var info = {\n      \"positive\": {\n        \"thousands\": {\n          \"active\": -1,\n          \"passive\": -1,\n          \"interval\": -1,\n          \"separator\": language.translateEmpty(\"_thousandSeparator\")\n        },\n        \"decimals\": {\n          \"active\": -1,\n          \"passive\": -1,\n          \"separator\": language.translateEmpty(\"_decimalSeparator\")\n        },\n        \"template\": \"\",\n        \"source\": \"\",\n        \"parsed\": false\n      },\n      \"negative\": {\n        \"thousands\": {\n          \"active\": -1,\n          \"passive\": -1,\n          \"interval\": -1,\n          \"separator\": language.translateEmpty(\"_thousandSeparator\")\n        },\n        \"decimals\": {\n          \"active\": -1,\n          \"passive\": -1,\n          \"separator\": language.translateEmpty(\"_decimalSeparator\")\n        },\n        \"template\": \"\",\n        \"source\": \"\",\n        \"parsed\": false\n      },\n      \"zero\": {\n        \"thousands\": {\n          \"active\": -1,\n          \"passive\": -1,\n          \"interval\": -1,\n          \"separator\": language.translateEmpty(\"_thousandSeparator\")\n        },\n        \"decimals\": {\n          \"active\": -1,\n          \"passive\": -1,\n          \"separator\": language.translateEmpty(\"_decimalSeparator\")\n        },\n        \"template\": \"\",\n        \"source\": \"\",\n        \"parsed\": false\n      }\n    }; // Escape double vertical bars (that mean display one vertical bar)\n\n    format = format.replace(\"||\", $strings.PLACEHOLDER2); // Split it up and deal with different formats\n\n    var parts = format.split(\"|\");\n    info.positive.source = parts[0];\n\n    if (typeof parts[2] === \"undefined\") {\n      info.zero = info.positive;\n    } else {\n      info.zero.source = parts[2];\n    }\n\n    if (typeof parts[1] === \"undefined\") {\n      info.negative = info.positive;\n    } else {\n      info.negative.source = parts[1];\n    } // Parse each\n\n\n    $object.each(info, function (part, item) {\n      // Already parsed\n      if (item.parsed) {\n        return;\n      } // Check cached\n\n\n      if (typeof _this.getCache(item.source) !== \"undefined\") {\n        info[part] = _this.getCache(item.source);\n        return;\n      } // Begin parsing\n\n\n      var partFormat = item.source; // Just \"Number\"?\n\n      if (partFormat.toLowerCase() === \"number\") {\n        partFormat = $type.isString(_this._numberFormat) ? _this._numberFormat : \"#,###.#####\";\n      } // Let TextFormatter split into chunks\n\n\n      var chunks = getTextFormatter().chunk(partFormat, true);\n\n      for (var i = 0; i < chunks.length; i++) {\n        var chunk = chunks[i]; // replace back double vertical bar\n\n        chunk.text = chunk.text.replace($strings.PLACEHOLDER2, \"|\");\n\n        if (chunk.type === \"value\") {\n          // Parse format\n          // Look for codes\n          var matches = chunk.text.match(/[#0.,]+[ ]?[abesABES%!]?[abesABES‰!]?/);\n\n          if (matches) {\n            if (matches === null || matches[0] === \"\") {\n              // no codes here - assume string\n              // nothing to do here\n              item.template += chunk.text;\n            } else {\n              // look for the format modifiers at the end\n              var mods = matches[0].match(/[abesABES%‰!]{2}|[abesABES%‰]{1}$/);\n\n              if (mods) {\n                item.mod = mods[0].toLowerCase();\n                item.modSpacing = matches[0].match(/[ ]{1}[abesABES%‰!]{1}$/) ? true : false;\n              } // break the format up\n\n\n              var a = matches[0].split(\".\"); // Deal with thousands\n\n              if (a[0] === \"\") {// No directives for thousands\n                // Leave default settings (no formatting)\n              } else {\n                // Counts\n                item.thousands.active = (a[0].match(/0/g) || []).length;\n                item.thousands.passive = (a[0].match(/\\#/g) || []).length + item.thousands.active; // Separator interval\n\n                var b = a[0].split(\",\");\n\n                if (b.length === 1) {// No thousands separators\n                  // Do nothing\n                } else {\n                  // Use length fo the last chunk as thousands length\n                  item.thousands.interval = $type.getValue(b.pop()).length;\n\n                  if (item.thousands.interval === 0) {\n                    item.thousands.interval = -1;\n                  }\n                }\n              } // Deal with decimals\n\n\n              if (typeof a[1] === \"undefined\") {// No directives for decimals\n                // Leave at defaults (no formatting)\n              } else {\n                // Counts\n                item.decimals.active = (a[1].match(/0/g) || []).length;\n                item.decimals.passive = (a[1].match(/\\#/g) || []).length + item.decimals.active;\n              } // Add special code to template\n\n\n              item.template += chunk.text.split(matches[0]).join($strings.PLACEHOLDER);\n            }\n          }\n        } else {\n          // Quoted string - take it as it is\n          item.template += chunk.text;\n        }\n      } // Apply style formatting\n      //item.template = getTextFormatter().format(item.template, this.outputFormat);\n      // Save cache\n\n\n      _this.setCache(item.source, item); // Mark this as parsed\n\n\n      item.parsed = true;\n    }); // Save cache (the whole thing)\n\n    this.setCache(format, info);\n    return info;\n  };\n  /**\r\n   * Applies parsed format to a numeric value.\r\n   *\r\n   * @param value    Value\r\n   * @param details  Parsed format as returned by parseFormat()\r\n   * @return Formatted number\r\n   */\n\n\n  NumberFormatter.prototype.applyFormat = function (value, details) {\n    // Use absolute values\n    var negative = value < 0;\n    value = Math.abs(value); // Recalculate according to modifier\n\n    var prefix = \"\",\n        suffix = \"\";\n    var mods = details.mod ? details.mod.split(\"\") : [];\n\n    if (mods.indexOf(\"b\") !== -1) {\n      var a_1 = this.applyPrefix(value, this.bytePrefixes, mods.indexOf(\"!\") !== -1);\n      value = a_1[0];\n      prefix = a_1[1];\n      suffix = a_1[2];\n\n      if (details.modSpacing) {\n        suffix = \" \" + suffix;\n      }\n    } else if (mods.indexOf(\"a\") !== -1) {\n      var a_2 = this.applyPrefix(value, value < this.smallNumberThreshold ? this.smallNumberPrefixes : this.bigNumberPrefixes, mods.indexOf(\"!\") !== -1);\n      value = a_2[0];\n      prefix = a_2[1];\n      suffix = a_2[2];\n\n      if (details.modSpacing) {\n        suffix = \" \" + suffix;\n      }\n    } else if (mods.indexOf(\"%\") !== -1) {\n      var ol = $math.min(value.toString().length + 2, 21);\n      value *= 100;\n      value = parseFloat(value.toPrecision(ol));\n      suffix = \"%\";\n    } else if (mods.indexOf(\"‰\") !== -1) {\n      var ol = $math.min(value.toString().length + 3, 21);\n      value *= 1000;\n      value = parseFloat(value.toPrecision(ol));\n      suffix = \"‰\";\n    } // Round to passive\n\n\n    if (mods.indexOf(\"e\") !== -1) {\n      // convert the value to exponential\n      var exp = void 0;\n\n      if (details.decimals.passive >= 0) {\n        exp = value.toExponential(details.decimals.passive).split(\"e\");\n      } else {\n        exp = value.toExponential().split(\"e\");\n      }\n\n      value = Number(exp[0]);\n      suffix = \"e\" + exp[1];\n\n      if (details.modSpacing) {\n        suffix = \" \" + suffix;\n      }\n    } else if (details.decimals.passive === 0) {\n      value = Math.round(value);\n    } else if (details.decimals.passive > 0) {\n      var d = Math.pow(10, details.decimals.passive);\n      value = Math.round(value * d) / d;\n    } // Init return value\n\n\n    var res = \"\"; // Calc integer and decimal parts\n\n    var a = $utils.numberToString(value).split(\".\"); // Format integers\n\n    var ints = a[0]; // Pad integers to active length\n\n    if (ints.length < details.thousands.active) {\n      ints = Array(details.thousands.active - ints.length + 1).join(\"0\") + ints;\n    } // Insert thousands separators\n\n\n    if (details.thousands.interval > 0) {\n      var ip = [];\n      var intsr = ints.split(\"\").reverse().join(\"\");\n\n      for (var i = 0, len = ints.length; i <= len; i += details.thousands.interval) {\n        var c = intsr.substr(i, details.thousands.interval).split(\"\").reverse().join(\"\");\n\n        if (c !== \"\") {\n          ip.unshift(c);\n        }\n      }\n\n      ints = ip.join(details.thousands.separator);\n    } // Add integers\n\n\n    res += ints; // Add decimals\n\n    if (a.length === 1) {\n      a.push(\"\");\n    }\n\n    var decs = a[1]; // Fill zeros?\n\n    if (decs.length < details.decimals.active) {\n      decs += Array(details.decimals.active - decs.length + 1).join(\"0\");\n    }\n\n    if (decs !== \"\") {\n      res += details.decimals.separator + decs;\n    } // Can't have empty return value\n\n\n    if (res === \"\") {\n      res = \"0\";\n    } // Add minus sign back\n\n\n    if (value !== 0 && negative && mods.indexOf(\"s\") === -1) {\n      res = \"-\" + res;\n    } // Add suffixes/prefixes\n\n\n    if (prefix) {\n      res = prefix + res;\n    }\n\n    if (suffix) {\n      res += suffix;\n    }\n\n    return res;\n  };\n  /**\r\n   * Chooses appropriate prefix and suffix based on the passed in rules.\r\n   *\r\n   * @param  value     Value\r\n   * @param  prefixes  Prefix array\r\n   * @param  force     Force application of a first prefix (@sice 4.5.4)\r\n   * @return Result\r\n   */\n\n\n  NumberFormatter.prototype.applyPrefix = function (value, prefixes, force) {\n    if (force === void 0) {\n      force = false;\n    }\n\n    var newvalue = value;\n    var prefix = \"\";\n    var suffix = \"\";\n    var applied = false;\n    var k = 1;\n\n    for (var i = 0, len = prefixes.length; i < len; i++) {\n      if (prefixes[i].number <= value) {\n        if (prefixes[i].number === 0) {\n          newvalue = 0;\n        } else {\n          newvalue = value / prefixes[i].number;\n          k = prefixes[i].number;\n        }\n\n        prefix = prefixes[i].prefix;\n        suffix = prefixes[i].suffix;\n        applied = true;\n      }\n    }\n\n    if (!applied && force && prefixes.length && value != 0) {\n      // Prefix was not applied. Use the first prefix.\n      newvalue = value / prefixes[0].number;\n      prefix = prefixes[0].prefix;\n      suffix = prefixes[0].suffix;\n      applied = true;\n    }\n\n    if (applied) {\n      newvalue = parseFloat(newvalue.toPrecision($math.min(k.toString().length + Math.floor(newvalue).toString().replace(/[^0-9]*/g, \"\").length, 21)));\n    }\n\n    return [newvalue, prefix, suffix];\n  };\n  /**\r\n   * Invalidates the parent [[Sprite]] object.\r\n   */\n\n\n  NumberFormatter.prototype.invalidateSprite = function () {\n    if (this.sprite) {\n      this.sprite.invalidate();\n    }\n  };\n\n  Object.defineProperty(NumberFormatter.prototype, \"numberFormat\", {\n    /**\r\n     * @return A format to use for number formatting\r\n     */\n    get: function get() {\n      return this._numberFormat;\n    },\n\n    /**\r\n     * Number format.\r\n     *\r\n     * @default \"#,###.#####\"\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n     * @param format  A format to use for number formatting\r\n     */\n    set: function set(format) {\n      this._numberFormat = format;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"intlLocales\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function get() {\n      return this._intlLocales;\n    },\n\n    /**\r\n     * Locales if you are using date formats in `Intl.NumberFormatOptions` syntax.\r\n     *\r\n     * @see (@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) about using Intl for number formatting\r\n     * @param value Locales\r\n     */\n    set: function set(value) {\n      this._intlLocales = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"negativeBase\", {\n    /**\r\n     * @return A format to use for number formatting\r\n     */\n    get: function get() {\n      return this._negativeBase;\n    },\n\n    /**\r\n     * Negative base for negative numbers.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n     * @param format  A format to use for number formatting\r\n     */\n    set: function set(value) {\n      this._negativeBase = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"bigNumberPrefixes\", {\n    /**\r\n     * @return Prefixes for big numbers\r\n     */\n    get: function get() {\n      if (!$type.hasValue(this._bigNumberPrefixes)) {\n        this._bigNumberPrefixes = [{\n          \"number\": 1e+3,\n          \"suffix\": this.language.translate(\"_big_number_suffix_3\")\n        }, {\n          \"number\": 1e+6,\n          \"suffix\": this.language.translate(\"_big_number_suffix_6\")\n        }, {\n          \"number\": 1e+9,\n          \"suffix\": this.language.translate(\"_big_number_suffix_9\")\n        }, {\n          \"number\": 1e+12,\n          \"suffix\": this.language.translate(\"_big_number_suffix_12\")\n        }, {\n          \"number\": 1e+15,\n          \"suffix\": this.language.translate(\"_big_number_suffix_15\")\n        }, {\n          \"number\": 1e+18,\n          \"suffix\": this.language.translate(\"_big_number_suffix_18\")\n        }, {\n          \"number\": 1e+21,\n          \"suffix\": this.language.translate(\"_big_number_suffix_21\")\n        }, {\n          \"number\": 1e+24,\n          \"suffix\": this.language.translate(\"_big_number_suffix_24\")\n        }];\n      }\n\n      return this._bigNumberPrefixes;\n    },\n\n    /**\r\n     * Prefixes for big numbers.\r\n     *\r\n     * It's an array of objects of number/prefix pairs.\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   { \"number\": 1e+3, \"suffix\": \"K\" },\r\n     *   { \"number\": 1e+6, \"suffix\": \"M\" },\r\n     *   { \"number\": 1e+9, \"suffix\": \"G\" },\r\n     *   { \"number\": 1e+12, \"suffix\": \"T\" },\r\n     *   { \"number\": 1e+15, \"suffix\": \"P\" },\r\n     *   { \"number\": 1e+18, \"suffix\": \"E\" },\r\n     *   { \"number\": 1e+21, \"suffix\": \"Z\" },\r\n     *   { \"number\": 1e+24, \"suffix\": \"Y\" }\r\n     * ]\r\n     * ```\r\n     *\r\n     * If the number is bigger than the `number` ir will be converted to the\r\n     * appropriate bigger number with prefix.\r\n     *\r\n     * E.g. as per above `1500` will be converted to `1.5K`.\r\n     *\r\n     * Please note that for this transformation to be enabled, you need to\r\n     * enable it specific modifier in your format setting.\r\n     *\r\n     * The modifier for big/small number modification is \"a\":\r\n     *\r\n     * ```Text\r\n     * {myfield.formatNumber(\"#,###.00a\")}\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n     * @param prefixes  Prefixes for big numbers\r\n     */\n    set: function set(prefixes) {\n      this._bigNumberPrefixes = prefixes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"smallNumberPrefixes\", {\n    /**\r\n     * @return Prefixes for small numbers\r\n     */\n    get: function get() {\n      if (!$type.hasValue(this._smallNumberPrefixes)) {\n        this._smallNumberPrefixes = [{\n          \"number\": 1e-24,\n          \"suffix\": this.language.translate(\"_small_number_suffix_24\")\n        }, {\n          \"number\": 1e-21,\n          \"suffix\": this.language.translate(\"_small_number_suffix_21\")\n        }, {\n          \"number\": 1e-18,\n          \"suffix\": this.language.translate(\"_small_number_suffix_18\")\n        }, {\n          \"number\": 1e-15,\n          \"suffix\": this.language.translate(\"_small_number_suffix_15\")\n        }, {\n          \"number\": 1e-12,\n          \"suffix\": this.language.translate(\"_small_number_suffix_12\")\n        }, {\n          \"number\": 1e-9,\n          \"suffix\": this.language.translate(\"_small_number_suffix_9\")\n        }, {\n          \"number\": 1e-6,\n          \"suffix\": this.language.translate(\"_small_number_suffix_6\")\n        }, {\n          \"number\": 1e-3,\n          \"suffix\": this.language.translate(\"_small_number_suffix_3\")\n        }];\n      }\n\n      return this._smallNumberPrefixes;\n    },\n\n    /**\r\n     * Prefixes for big numbers.\r\n     *\r\n     * It's an array of objects of number/prefix pairs.\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   { \"number\": 1e-24, \"suffix\": \"y\" },\r\n     *   { \"number\": 1e-21, \"suffix\": \"z\" },\r\n     *   { \"number\": 1e-18, \"suffix\": \"a\" },\r\n     *   { \"number\": 1e-15, \"suffix\": \"f\" },\r\n     *   { \"number\": 1e-12, \"suffix\": \"p\" },\r\n     *   { \"number\": 1e-9, \"suffix\": \"n\" },\r\n     *   { \"number\": 1e-6, \"suffix\": \"μ\" },\r\n     *   { \"number\": 1e-3, \"suffix\": \"m\" }\r\n     * ]\r\n     * ```\r\n     *\r\n     * If the number is smaller than the `number` ir will be converted to the\r\n     * appropriate smaller number with prefix.\r\n     *\r\n     * E.g. as per above `0.0015` will be converted to `1.5m`.\r\n     *\r\n     * Please note that for this transformation to be enabled, you need to\r\n     * enable it specific modifier in your format setting.\r\n     *\r\n     * The modifier for big/small number modification is \"a\":\r\n     *\r\n     * ```Text\r\n     * {myfield.formatNumber(\"#,###.00a\")}\r\n     * ```\r\n     *\r\n     * IMPORTANT: The order of the suffixes is important. The list must start\r\n     * from the smallest number and work towards bigger ones.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n     * @param prefixes  Prefixes for small numbers\r\n     */\n    set: function set(prefixes) {\n      this._smallNumberPrefixes = prefixes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"smallNumberThreshold\", {\n    /**\r\n     * @return Small number threshold\r\n     */\n    get: function get() {\n      return this._smallNumberThreshold;\n    },\n\n    /**\r\n     * Any number smaller than this will be considered \"small\" number, which will\r\n     * trigger special formatting if \"a\" format modifier is used.\r\n     *\r\n     * @since 4.6.8\r\n     * @param  value  Small number threshold\r\n     */\n    set: function set(value) {\n      this._smallNumberThreshold = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"bytePrefixes\", {\n    /**\r\n     * @return Prefixes for byte-size formatting\r\n     */\n    get: function get() {\n      if (!$type.hasValue(this._bytePrefixes)) {\n        this._bytePrefixes = [{\n          \"number\": 1,\n          suffix: this.language.translate(\"_byte_suffix_B\")\n        }, {\n          \"number\": 1024,\n          suffix: this.language.translate(\"_byte_suffix_KB\")\n        }, {\n          \"number\": 1048576,\n          suffix: this.language.translate(\"_byte_suffix_MB\")\n        }, {\n          \"number\": 1073741824,\n          suffix: this.language.translate(\"_byte_suffix_GB\")\n        }, {\n          \"number\": 1099511627776,\n          suffix: this.language.translate(\"_byte_suffix_TB\")\n        }, {\n          \"number\": 1125899906842624,\n          suffix: this.language.translate(\"_byte_suffix_PB\")\n        }];\n      }\n\n      return this._bytePrefixes;\n    },\n\n    /**\r\n     * Basically the same as `bigNumberPrefixes`, except base for calculation\r\n     * is not thousand but byte (1024).\r\n     *\r\n     * The modifier is \"b\".\r\n     *\r\n     *  ```Text\r\n     * {myfield.formatNumber(\"#,###.00b\")}\r\n     * ```\r\n     *\r\n     * The above `2048` will change to `2K`.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n     * @param prefixes  Prefixes for byte-size formatting\r\n     */\n    set: function set(prefixes) {\n      this._bytePrefixes = prefixes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"outputFormat\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Output format\r\n     */\n    get: function get() {\n      return this._outputFormat;\n    },\n\n    /**\r\n     * Ooutput format: \"svg\" or \"html\".\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Output format\r\n     */\n    set: function set(outputFormat) {\n      this._outputFormat = outputFormat.toLowerCase();\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"forceLTR\", {\n    get: function get() {\n      return this._forceLTR;\n    },\n    set: function set(value) {\n      this._forceLTR = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Replaces brackets with temporary placeholders.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Input text\r\n   * @return Escaped text\r\n   */\n\n  NumberFormatter.prototype.escape = function (text) {\n    return text.replace(\"||\", $strings.PLACEHOLDER2);\n  };\n  /**\r\n   * Replaces placeholders back to brackets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Escaped text\r\n   * @return Unescaped text\r\n   */\n\n\n  NumberFormatter.prototype.unescape = function (text) {\n    return text.replace($strings.PLACEHOLDER2, \"|\");\n  };\n\n  return NumberFormatter;\n}(BaseObject);\n\nexport { NumberFormatter };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"NumberFormatter\"] = NumberFormatter;","map":{"version":3,"mappings":"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","names":["Language","BaseObject","getTextFormatter","registry","$strings","$object","$utils","$type","$math","__extends","_super","_this","className","applyTheme","NumberFormatter","dispose","call","language","Object","_language","sprite","value","format","precision","isString","toLowerCase","_numberFormat","formatted","source","Number","isObject","intlLocales","Intl","NumberFormat","undefined","e","cleanFormat","info","parseFormat","details","_negativeBase","positive","negative","zero","hasValue","mod","clone","decimals","active","template","split","PLACEHOLDER","join","applyFormat","forceLTR","cached","getCache","translateEmpty","replace","PLACEHOLDER2","parts","each","part","item","parsed","partFormat","chunks","chunk","i","length","text","type","matches","match","mods","modSpacing","a","thousands","passive","b","interval","getValue","pop","setCache","Math","abs","prefix","suffix","indexOf","a_1","applyPrefix","bytePrefixes","a_2","smallNumberThreshold","smallNumberPrefixes","bigNumberPrefixes","ol","min","toString","parseFloat","toPrecision","exp","toExponential","round","d","pow","res","numberToString","ints","Array","ip","intsr","reverse","len","c","substr","unshift","separator","push","decs","prefixes","force","newvalue","applied","k","number","floor","invalidate","_intlLocales","invalidateSprite","_bigNumberPrefixes","translate","_smallNumberPrefixes","_smallNumberThreshold","_bytePrefixes","_outputFormat","outputFormat","_forceLTR","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/core/formatters/NumberFormatter.ts"],"sourcesContent":["/**\r\n * Number formatting-related functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { BaseObject } from \"../Base\";\r\nimport { ITextChunk, getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $math from \"../utils/Math\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport interface INumberSuffix {\r\n\tnumber: number;\r\n\tsuffix: string;\r\n}\r\n\r\n/**\r\n * NumberFormatter class. Formats numbers according to specified formats.\r\n *\r\n * @todo Apply translations to suffixes/prefixes\r\n */\r\nexport class NumberFormatter extends BaseObject {\r\n\r\n\t/**\r\n\t * A base value for negative numbers. Will treat all numbers below this value\r\n\t * as negative numbers.\r\n\t */\r\n\tprotected _negativeBase: number = 0;\r\n\r\n\t/**\r\n\t * Holds number format.\r\n\t *\r\n\t * @default #,###.#####\r\n\t */\r\n\tprotected _numberFormat: string | Intl.NumberFormatOptions = \"#,###.#####\";\r\n\r\n\t/**\r\n\t * Locales to use when formatting using Intl.NumberFormatter\r\n\t */\r\n\tprotected _intlLocales: string;\r\n\r\n\t/**\r\n\t * Output format to produce. If the format calls for applying color to the\r\n\t * formatted value, this setting will determine what markup to use: SVG or\r\n\t * HTML.\r\n\t *\r\n\t * Available options: svg, html.\r\n\t *\r\n\t * @default \"svg\"\r\n\t */\r\n\tprotected _outputFormat: string = \"svg\";\r\n\r\n\t/**\r\n\t * Holds big number prefixes to apply to numbers if `a` modifier is used in\r\n\t * format.\r\n\t */\r\n\tprotected _bigNumberPrefixes: INumberSuffix[];\r\n\r\n\t/**\r\n\t * Holds small number prefixes to apply to numbers if `a` modifier is used in\r\n\t * format.\r\n\t */\r\n\tprotected _smallNumberPrefixes: INumberSuffix[];\r\n\r\n\t/**\r\n\t * Any number smaller than this will be considered \"small\" number, which will\r\n\t * trigger special formatting if \"a\" format modifier is used.\r\n\t */\r\n\tprotected _smallNumberThreshold: number = 1.00;\r\n\r\n\t/**\r\n\t * Holds prefixes to apply to data size numbers if `b` modifier is used in\r\n\t * format.\r\n\t */\r\n\tprotected _bytePrefixes: INumberSuffix[];\r\n\r\n\tprotected _forceLTR: boolean = false;\r\n\r\n\t/**\r\n\t * Holds reference to parent [[Sprite]] object.\r\n\t */\r\n\tpublic sprite: $type.Optional<Sprite>;\r\n\r\n\t/**\r\n\t * Holds reference to [[Language]] object.\r\n\t */\r\n\tprivate _language: $type.Optional<Language>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NumberFormatter\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\tif (this.language) {\r\n\t\t\tthis.language.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to [[Language]] instance.\r\n\t *\r\n\t * Formatter will use language to translate various items, like number\r\n\t * suffixes, etc.\r\n\t *\r\n\t * @param value  Language\r\n\t */\r\n\tpublic set language(value: Language) {\r\n\t\tthis._language = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Language\r\n\t */\r\n\tpublic get language(): Language {\r\n\t\tif (!this._language) {\r\n\t\t\tif (this.sprite) {\r\n\t\t\t\tthis._language = this.sprite.language;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._language = new Language;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._language;\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the number according to specific format.\r\n\t *\r\n\t * @param value   Value to format\r\n\t * @param format  Format to apply\r\n\t * @return Formatted number\r\n\t */\r\n\tpublic format(value: number | string, format?: string | Intl.NumberFormatOptions, precision?: number): string {\r\n\r\n\t\t// no format passed in or \"Number\"\r\n\t\tif (typeof format === \"undefined\" || ($type.isString(format) && format.toLowerCase() === \"number\")) {\r\n\t\t\tformat = this._numberFormat;\r\n\t\t}\r\n\r\n\t\t// Init return value\r\n\t\tlet formatted;\r\n\r\n\t\t// Cast to number just in case\r\n\t\t// TODO: maybe use better casting\r\n\t\tlet source: number = Number(value);\r\n\r\n\t\t// Is it a built-in format or Intl.NumberFormatOptions\r\n\t\tif ($type.isObject(format)) {\r\n\t\t\ttry {\r\n\t\t\t\tif (this.intlLocales) {\r\n\t\t\t\t\treturn new Intl.NumberFormat(this.intlLocales, <Intl.NumberFormatOptions>format).format(source);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn new Intl.NumberFormat(undefined, <Intl.NumberFormatOptions>format).format(source);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\treturn \"Invalid\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\t// Clean format\r\n\t\t\tformat = $utils.cleanFormat(format);\r\n\r\n\t\t\t// Get format info (it will also deal with parser caching)\r\n\t\t\tlet info = this.parseFormat(format, this.language);\r\n\r\n\r\n\t\t\t// format and replace the number\r\n\t\t\tlet details;\r\n\t\t\tif (source > this._negativeBase) {\r\n\t\t\t\tdetails = info.positive;\r\n\t\t\t}\r\n\t\t\telse if (source < this._negativeBase) {\r\n\t\t\t\tdetails = info.negative;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdetails = info.zero;\r\n\t\t\t}\r\n\r\n\t\t\t// Adjust precision\r\n\t\t\tif ($type.hasValue(precision) && !details.mod) {\r\n\t\t\t\tdetails = $object.clone(details);\r\n\t\t\t\tdetails.decimals.active = source == 0 ? 0: precision;\r\n\t\t\t}\r\n\r\n\t\t\t// Format\r\n\t\t\tformatted = details.template.split($strings.PLACEHOLDER).join(this.applyFormat(source, details));\r\n\r\n\t\t}\r\n\r\n\t\tif (this.forceLTR) {\r\n\t\t\tformatted = \"‎\" + formatted;\r\n\t\t}\r\n\r\n\t\treturn formatted;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses supplied format into structured object which can be used to format\r\n\t * the number.\r\n\t *\r\n\t * @param format Format string, i.e. \"#,###.00\"\r\n\t * @param language Language\r\n\t */\r\n\tprotected parseFormat(format: string, language: Language): any {\r\n\r\n\t\t// Check cache\r\n\t\tlet cached = this.getCache(format);\r\n\t\tif ($type.hasValue(cached)) {\r\n\t\t\treturn cached;\r\n\t\t}\r\n\r\n\t\t// init format parse info holder\r\n\t\tlet info: any = {\r\n\t\t\t\"positive\": {\r\n\t\t\t\t\"thousands\": {\r\n\t\t\t\t\t\"active\": -1,\r\n\t\t\t\t\t\"passive\": -1,\r\n\t\t\t\t\t\"interval\": -1,\r\n\t\t\t\t\t\"separator\": language.translateEmpty(\"_thousandSeparator\")\r\n\t\t\t\t},\r\n\t\t\t\t\"decimals\": {\r\n\t\t\t\t\t\"active\": -1,\r\n\t\t\t\t\t\"passive\": -1,\r\n\t\t\t\t\t\"separator\": language.translateEmpty(\"_decimalSeparator\")\r\n\t\t\t\t},\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"parsed\": false\r\n\t\t\t},\r\n\t\t\t\"negative\": {\r\n\t\t\t\t\"thousands\": {\r\n\t\t\t\t\t\"active\": -1,\r\n\t\t\t\t\t\"passive\": -1,\r\n\t\t\t\t\t\"interval\": -1,\r\n\t\t\t\t\t\"separator\": language.translateEmpty(\"_thousandSeparator\")\r\n\t\t\t\t},\r\n\t\t\t\t\"decimals\": {\r\n\t\t\t\t\t\"active\": -1,\r\n\t\t\t\t\t\"passive\": -1,\r\n\t\t\t\t\t\"separator\": language.translateEmpty(\"_decimalSeparator\")\r\n\t\t\t\t},\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"parsed\": false\r\n\t\t\t},\r\n\t\t\t\"zero\": {\r\n\t\t\t\t\"thousands\": {\r\n\t\t\t\t\t\"active\": -1,\r\n\t\t\t\t\t\"passive\": -1,\r\n\t\t\t\t\t\"interval\": -1,\r\n\t\t\t\t\t\"separator\": language.translateEmpty(\"_thousandSeparator\")\r\n\t\t\t\t},\r\n\t\t\t\t\"decimals\": {\r\n\t\t\t\t\t\"active\": -1,\r\n\t\t\t\t\t\"passive\": -1,\r\n\t\t\t\t\t\"separator\": language.translateEmpty(\"_decimalSeparator\")\r\n\t\t\t\t},\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"parsed\": false\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Escape double vertical bars (that mean display one vertical bar)\r\n\t\tformat = format.replace(\"||\", $strings.PLACEHOLDER2);\r\n\r\n\t\t// Split it up and deal with different formats\r\n\t\tlet parts = format.split(\"|\");\r\n\t\tinfo.positive.source = parts[0];\r\n\r\n\t\tif (typeof parts[2] === \"undefined\") {\r\n\t\t\tinfo.zero = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.zero.source = parts[2];\r\n\t\t}\r\n\r\n\t\tif (typeof parts[1] === \"undefined\") {\r\n\t\t\tinfo.negative = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.negative.source = parts[1];\r\n\t\t}\r\n\r\n\t\t// Parse each\r\n\t\t$object.each(info, (part, item) => {\r\n\t\t\t// Already parsed\r\n\t\t\tif (item.parsed) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Check cached\r\n\t\t\tif (typeof this.getCache(item.source) !== \"undefined\") {\r\n\t\t\t\tinfo[part] = this.getCache(item.source);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Begin parsing\r\n\t\t\tlet partFormat: string = item.source;\r\n\r\n\t\t\t// Just \"Number\"?\r\n\t\t\tif (partFormat.toLowerCase() === \"number\") {\r\n\t\t\t\tpartFormat = $type.isString(this._numberFormat) ? this._numberFormat : \"#,###.#####\";\r\n\t\t\t}\r\n\r\n\t\t\t// Let TextFormatter split into chunks\r\n\t\t\tlet chunks: ITextChunk[] = getTextFormatter().chunk(partFormat, true);\r\n\t\t\tfor (let i: number = 0; i < chunks.length; i++) {\r\n\t\t\t\tlet chunk: ITextChunk = chunks[i];\r\n\r\n\t\t\t\t// replace back double vertical bar\r\n\t\t\t\tchunk.text = chunk.text.replace($strings.PLACEHOLDER2, \"|\");\r\n\r\n\t\t\t\tif (chunk.type === \"value\") {\r\n\t\t\t\t\t// Parse format\r\n\r\n\t\t\t\t\t// Look for codes\r\n\t\t\t\t\tlet matches: string[] | null = chunk.text.match(/[#0.,]+[ ]?[abesABES%!]?[abesABES‰!]?/);\r\n\r\n\t\t\t\t\tif (matches) {\r\n\t\t\t\t\t\tif (matches === null || matches[0] === \"\") {\r\n\t\t\t\t\t\t\t// no codes here - assume string\r\n\t\t\t\t\t\t\t// nothing to do here\r\n\t\t\t\t\t\t\titem.template += chunk.text;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\t// look for the format modifiers at the end\r\n\t\t\t\t\t\t\tlet mods: string[] | null = matches[0].match(/[abesABES%‰!]{2}|[abesABES%‰]{1}$/);\r\n\r\n\t\t\t\t\t\t\tif (mods) {\r\n\t\t\t\t\t\t\t\titem.mod = mods[0].toLowerCase();\r\n\t\t\t\t\t\t\t\titem.modSpacing = matches[0].match(/[ ]{1}[abesABES%‰!]{1}$/) ? true : false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// break the format up\r\n\t\t\t\t\t\t\tlet a = matches[0].split(\".\");\r\n\r\n\t\t\t\t\t\t\t// Deal with thousands\r\n\t\t\t\t\t\t\tif (a[0] === \"\") {\r\n\t\t\t\t\t\t\t\t// No directives for thousands\r\n\t\t\t\t\t\t\t\t// Leave default settings (no formatting)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t// Counts\r\n\t\t\t\t\t\t\t\titem.thousands.active = (a[0].match(/0/g) || []).length;\r\n\t\t\t\t\t\t\t\titem.thousands.passive = (a[0].match(/\\#/g) || []).length + item.thousands.active;\r\n\r\n\t\t\t\t\t\t\t\t// Separator interval\r\n\t\t\t\t\t\t\t\tlet b = a[0].split(\",\");\r\n\t\t\t\t\t\t\t\tif (b.length === 1) {\r\n\t\t\t\t\t\t\t\t\t// No thousands separators\r\n\t\t\t\t\t\t\t\t\t// Do nothing\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// Use length fo the last chunk as thousands length\r\n\t\t\t\t\t\t\t\t\titem.thousands.interval = $type.getValue(b.pop()).length;\r\n\r\n\t\t\t\t\t\t\t\t\tif (item.thousands.interval === 0) {\r\n\t\t\t\t\t\t\t\t\t\titem.thousands.interval = -1;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Deal with decimals\r\n\t\t\t\t\t\t\tif (typeof (a[1]) === \"undefined\") {\r\n\t\t\t\t\t\t\t\t// No directives for decimals\r\n\t\t\t\t\t\t\t\t// Leave at defaults (no formatting)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t// Counts\r\n\t\t\t\t\t\t\t\titem.decimals.active = (a[1].match(/0/g) || []).length;\r\n\t\t\t\t\t\t\t\titem.decimals.passive = (a[1].match(/\\#/g) || []).length + item.decimals.active;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Add special code to template\r\n\t\t\t\t\t\t\titem.template += chunk.text.split(matches[0]).join($strings.PLACEHOLDER);\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Quoted string - take it as it is\r\n\t\t\t\t\titem.template += chunk.text;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Apply style formatting\r\n\t\t\t//item.template = getTextFormatter().format(item.template, this.outputFormat);\r\n\r\n\t\t\t// Save cache\r\n\t\t\tthis.setCache(item.source, item);\r\n\r\n\t\t\t// Mark this as parsed\r\n\t\t\titem.parsed = true;\r\n\r\n\t\t});\r\n\r\n\t\t// Save cache (the whole thing)\r\n\t\tthis.setCache(format, info);\r\n\r\n\t\treturn info;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies parsed format to a numeric value.\r\n\t *\r\n\t * @param value    Value\r\n\t * @param details  Parsed format as returned by parseFormat()\r\n\t * @return Formatted number\r\n\t */\r\n\tprotected applyFormat(value: number, details: any): string {\r\n\r\n\t\t// Use absolute values\r\n\t\tlet negative: boolean = value < 0;\r\n\t\tvalue = Math.abs(value);\r\n\r\n\t\t// Recalculate according to modifier\r\n\t\tlet prefix: string = \"\", suffix: string = \"\";\r\n\t\tlet mods: string[] = details.mod ? details.mod.split(\"\") : [];\r\n\t\tif (mods.indexOf(\"b\") !== -1) {\r\n\t\t\tlet a = this.applyPrefix(value, this.bytePrefixes, mods.indexOf(\"!\") !== -1);\r\n\t\t\tvalue = a[0];\r\n\t\t\tprefix = a[1];\r\n\t\t\tsuffix = a[2];\r\n\t\t\tif (details.modSpacing) {\r\n\t\t\t\tsuffix = \" \" + suffix;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (mods.indexOf(\"a\") !== -1) {\r\n\t\t\tlet a = this.applyPrefix(value, value < this.smallNumberThreshold ? this.smallNumberPrefixes : this.bigNumberPrefixes, mods.indexOf(\"!\") !== -1);\r\n\t\t\tvalue = a[0];\r\n\t\t\tprefix = a[1];\r\n\t\t\tsuffix = a[2];\r\n\t\t\tif (details.modSpacing) {\r\n\t\t\t\tsuffix = \" \" + suffix;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (mods.indexOf(\"%\") !== -1) {\r\n\t\t\tlet ol = $math.min(value.toString().length + 2, 21);\r\n\t\t\tvalue *= 100;\r\n\t\t\tvalue = parseFloat(value.toPrecision(ol));\r\n\t\t\tsuffix = \"%\";\r\n\t\t}\r\n\t\telse if (mods.indexOf(\"‰\") !== -1) {\r\n\t\t\tlet ol = $math.min(value.toString().length + 3, 21);\r\n\t\t\tvalue *= 1000;\r\n\t\t\tvalue = parseFloat(value.toPrecision(ol));\r\n\t\t\tsuffix = \"‰\";\r\n\t\t}\r\n\r\n\t\t// Round to passive\r\n\t\tif (mods.indexOf(\"e\") !== -1) {\r\n\t\t\t// convert the value to exponential\r\n\t\t\tlet exp: string[];\r\n\t\t\tif (details.decimals.passive >= 0) {\r\n\t\t\t\texp = value.toExponential(details.decimals.passive).split(\"e\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\texp = value.toExponential().split(\"e\");\r\n\t\t\t}\r\n\t\t\tvalue = Number(exp[0]);\r\n\t\t\tsuffix = \"e\" + exp[1];\r\n\t\t\tif (details.modSpacing) {\r\n\t\t\t\tsuffix = \" \" + suffix;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (details.decimals.passive === 0) {\r\n\t\t\tvalue = Math.round(value);\r\n\t\t}\r\n\t\telse if (details.decimals.passive > 0) {\r\n\t\t\tlet d: number = Math.pow(10, details.decimals.passive);\r\n\t\t\tvalue = Math.round(value * d) / d;\r\n\t\t}\r\n\r\n\t\t// Init return value\r\n\t\tlet res: string = \"\";\r\n\r\n\t\t// Calc integer and decimal parts\r\n\t\tlet a = $utils.numberToString(value).split(\".\");\r\n\r\n\t\t// Format integers\r\n\t\tlet ints = a[0];\r\n\r\n\t\t// Pad integers to active length\r\n\t\tif (ints.length < details.thousands.active) {\r\n\t\t\tints = Array(details.thousands.active - ints.length + 1).join(\"0\") + ints;\r\n\t\t}\r\n\r\n\t\t// Insert thousands separators\r\n\t\tif (details.thousands.interval > 0) {\r\n\t\t\tlet ip: string[] = [];\r\n\t\t\tlet intsr: string = ints.split(\"\").reverse().join(\"\");\r\n\t\t\tfor (let i = 0, len = ints.length; i <= len; i += details.thousands.interval) {\r\n\t\t\t\tlet c: string = intsr.substr(i, details.thousands.interval).split(\"\").reverse().join(\"\");\r\n\t\t\t\tif (c !== \"\") {\r\n\t\t\t\t\tip.unshift(c);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tints = ip.join(details.thousands.separator);\r\n\t\t}\r\n\r\n\t\t// Add integers\r\n\t\tres += ints;\r\n\r\n\t\t// Add decimals\r\n\t\tif (a.length === 1) {\r\n\t\t\ta.push(\"\");\r\n\t\t}\r\n\t\tlet decs: string = a[1];\r\n\r\n\t\t// Fill zeros?\r\n\t\tif (decs.length < details.decimals.active) {\r\n\t\t\tdecs += Array(details.decimals.active - decs.length + 1).join(\"0\");\r\n\t\t}\r\n\r\n\t\tif (decs !== \"\") {\r\n\t\t\tres += details.decimals.separator + decs;\r\n\t\t}\r\n\r\n\t\t// Can't have empty return value\r\n\t\tif (res === \"\") {\r\n\t\t\tres = \"0\";\r\n\t\t}\r\n\r\n\t\t// Add minus sign back\r\n\t\tif (value !== 0 && negative && (mods.indexOf(\"s\") === -1)) {\r\n\t\t\tres = \"-\" + res;\r\n\t\t}\r\n\r\n\t\t// Add suffixes/prefixes\r\n\t\tif (prefix) {\r\n\t\t\tres = prefix + res;\r\n\t\t}\r\n\t\tif (suffix) {\r\n\t\t\tres += suffix;\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Chooses appropriate prefix and suffix based on the passed in rules.\r\n\t *\r\n\t * @param  value     Value\r\n\t * @param  prefixes  Prefix array\r\n\t * @param  force     Force application of a first prefix (@sice 4.5.4)\r\n\t * @return Result\r\n\t */\r\n\tprotected applyPrefix(value: number, prefixes: any[], force: boolean = false): any[] {\r\n\t\tlet newvalue = value;\r\n\t\tlet prefix = \"\";\r\n\t\tlet suffix = \"\";\r\n\t\tlet applied = false;\r\n\t\tlet k = 1;\r\n\r\n\t\tfor (let i = 0, len = prefixes.length; i < len; i++) {\r\n\t\t\tif (prefixes[i].number <= value) {\r\n\t\t\t\tif (prefixes[i].number === 0) {\r\n\t\t\t\t\tnewvalue = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnewvalue = value / prefixes[i].number;\r\n\t\t\t\t\tk = prefixes[i].number;\r\n\t\t\t\t}\r\n\t\t\t\tprefix = prefixes[i].prefix;\r\n\t\t\t\tsuffix = prefixes[i].suffix;\r\n\t\t\t\tapplied = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tif (!applied && force && prefixes.length && value != 0) {\r\n\t\t\t// Prefix was not applied. Use the first prefix.\r\n\t\t\tnewvalue = value / prefixes[0].number;\r\n\t\t\tprefix = prefixes[0].prefix;\r\n\t\t\tsuffix = prefixes[0].suffix;\r\n\t\t\tapplied = true;\r\n\t\t}\r\n\r\n\t\tif (applied) {\r\n\t\t\tnewvalue = parseFloat(\r\n\t\t\t\tnewvalue.toPrecision(\r\n\t\t\t\t\t$math.min(k.toString().length + Math.floor(newvalue).toString().replace(/[^0-9]*/g, \"\").length, 21)\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn [newvalue, prefix, suffix];\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates the parent [[Sprite]] object.\r\n\t */\r\n\tprotected invalidateSprite(): void {\r\n\t\tif (this.sprite) {\r\n\t\t\tthis.sprite.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Number format.\r\n\t *\r\n\t * @default \"#,###.#####\"\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n\t * @param format  A format to use for number formatting\r\n\t */\r\n\tpublic set numberFormat(format: string | Intl.NumberFormatOptions) {\r\n\t\tthis._numberFormat = format;\r\n\t}\r\n\r\n\t/**\r\n\t * @return A format to use for number formatting\r\n\t */\r\n\tpublic get numberFormat(): string | Intl.NumberFormatOptions {\r\n\t\treturn this._numberFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Locales if you are using date formats in `Intl.NumberFormatOptions` syntax.\r\n\t * \r\n\t * @see (@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) about using Intl for number formatting\r\n\t * @param value Locales\r\n\t */\r\n\tpublic set intlLocales(value: string) {\r\n\t\tthis._intlLocales = value;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get intlLocales(): string {\r\n\t\treturn this._intlLocales;\r\n\t}\r\n\r\n\t/**\r\n\t * Negative base for negative numbers.\r\n\t *\r\n\t * @default 0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n\t * @param format  A format to use for number formatting\r\n\t */\r\n\tpublic set negativeBase(value: number) {\r\n\t\tthis._negativeBase = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return A format to use for number formatting\r\n\t */\r\n\tpublic get negativeBase(): number {\r\n\t\treturn this._negativeBase;\r\n\t}\r\n\r\n\t/**\r\n\t * Prefixes for big numbers.\r\n\t *\r\n\t * It's an array of objects of number/prefix pairs.\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { \"number\": 1e+3, \"suffix\": \"K\" },\r\n\t *   { \"number\": 1e+6, \"suffix\": \"M\" },\r\n\t *   { \"number\": 1e+9, \"suffix\": \"G\" },\r\n\t *   { \"number\": 1e+12, \"suffix\": \"T\" },\r\n\t *   { \"number\": 1e+15, \"suffix\": \"P\" },\r\n\t *   { \"number\": 1e+18, \"suffix\": \"E\" },\r\n\t *   { \"number\": 1e+21, \"suffix\": \"Z\" },\r\n\t *   { \"number\": 1e+24, \"suffix\": \"Y\" }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * If the number is bigger than the `number` ir will be converted to the\r\n\t * appropriate bigger number with prefix.\r\n\t *\r\n\t * E.g. as per above `1500` will be converted to `1.5K`.\r\n\t *\r\n\t * Please note that for this transformation to be enabled, you need to\r\n\t * enable it specific modifier in your format setting.\r\n\t *\r\n\t * The modifier for big/small number modification is \"a\":\r\n\t *\r\n\t * ```Text\r\n\t * {myfield.formatNumber(\"#,###.00a\")}\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n\t * @param prefixes  Prefixes for big numbers\r\n\t */\r\n\tpublic set bigNumberPrefixes(prefixes: INumberSuffix[]) {\r\n\t\tthis._bigNumberPrefixes = prefixes;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Prefixes for big numbers\r\n\t */\r\n\tpublic get bigNumberPrefixes(): INumberSuffix[] {\r\n\t\tif (!$type.hasValue(this._bigNumberPrefixes)) {\r\n\t\t\tthis._bigNumberPrefixes = [\r\n\t\t\t\t{ \"number\": 1e+3, \"suffix\": this.language.translate(\"_big_number_suffix_3\") },\r\n\t\t\t\t{ \"number\": 1e+6, \"suffix\": this.language.translate(\"_big_number_suffix_6\") },\r\n\t\t\t\t{ \"number\": 1e+9, \"suffix\": this.language.translate(\"_big_number_suffix_9\") },\r\n\t\t\t\t{ \"number\": 1e+12, \"suffix\": this.language.translate(\"_big_number_suffix_12\") },\r\n\t\t\t\t{ \"number\": 1e+15, \"suffix\": this.language.translate(\"_big_number_suffix_15\") },\r\n\t\t\t\t{ \"number\": 1e+18, \"suffix\": this.language.translate(\"_big_number_suffix_18\") },\r\n\t\t\t\t{ \"number\": 1e+21, \"suffix\": this.language.translate(\"_big_number_suffix_21\") },\r\n\t\t\t\t{ \"number\": 1e+24, \"suffix\": this.language.translate(\"_big_number_suffix_24\") }\r\n\t\t\t]\r\n\t\t}\r\n\t\treturn this._bigNumberPrefixes;\r\n\t}\r\n\r\n\t/**\r\n\t * Prefixes for big numbers.\r\n\t *\r\n\t * It's an array of objects of number/prefix pairs.\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { \"number\": 1e-24, \"suffix\": \"y\" },\r\n\t *   { \"number\": 1e-21, \"suffix\": \"z\" },\r\n\t *   { \"number\": 1e-18, \"suffix\": \"a\" },\r\n\t *   { \"number\": 1e-15, \"suffix\": \"f\" },\r\n\t *   { \"number\": 1e-12, \"suffix\": \"p\" },\r\n\t *   { \"number\": 1e-9, \"suffix\": \"n\" },\r\n\t *   { \"number\": 1e-6, \"suffix\": \"μ\" },\r\n\t *   { \"number\": 1e-3, \"suffix\": \"m\" }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * If the number is smaller than the `number` ir will be converted to the\r\n\t * appropriate smaller number with prefix.\r\n\t *\r\n\t * E.g. as per above `0.0015` will be converted to `1.5m`.\r\n\t *\r\n\t * Please note that for this transformation to be enabled, you need to\r\n\t * enable it specific modifier in your format setting.\r\n\t *\r\n\t * The modifier for big/small number modification is \"a\":\r\n\t *\r\n\t * ```Text\r\n\t * {myfield.formatNumber(\"#,###.00a\")}\r\n\t * ```\r\n\t *\r\n\t * IMPORTANT: The order of the suffixes is important. The list must start\r\n\t * from the smallest number and work towards bigger ones.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n\t * @param prefixes  Prefixes for small numbers\r\n\t */\r\n\tpublic set smallNumberPrefixes(prefixes: INumberSuffix[]) {\r\n\t\tthis._smallNumberPrefixes = prefixes;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Prefixes for small numbers\r\n\t */\r\n\tpublic get smallNumberPrefixes(): INumberSuffix[] {\r\n\t\tif (!$type.hasValue(this._smallNumberPrefixes)) {\r\n\t\t\tthis._smallNumberPrefixes = [\r\n\t\t\t\t{ \"number\": 1e-24, \"suffix\": this.language.translate(\"_small_number_suffix_24\") },\r\n\t\t\t\t{ \"number\": 1e-21, \"suffix\": this.language.translate(\"_small_number_suffix_21\") },\r\n\t\t\t\t{ \"number\": 1e-18, \"suffix\": this.language.translate(\"_small_number_suffix_18\") },\r\n\t\t\t\t{ \"number\": 1e-15, \"suffix\": this.language.translate(\"_small_number_suffix_15\") },\r\n\t\t\t\t{ \"number\": 1e-12, \"suffix\": this.language.translate(\"_small_number_suffix_12\") },\r\n\t\t\t\t{ \"number\": 1e-9, \"suffix\": this.language.translate(\"_small_number_suffix_9\") },\r\n\t\t\t\t{ \"number\": 1e-6, \"suffix\": this.language.translate(\"_small_number_suffix_6\") },\r\n\t\t\t\t{ \"number\": 1e-3, \"suffix\": this.language.translate(\"_small_number_suffix_3\") }\r\n\t\t\t]\r\n\t\t}\r\n\t\treturn this._smallNumberPrefixes;\r\n\t}\r\n\r\n\t/**\r\n\t * Any number smaller than this will be considered \"small\" number, which will\r\n\t * trigger special formatting if \"a\" format modifier is used.\r\n\t *\r\n\t * @since 4.6.8\r\n\t * @param  value  Small number threshold\r\n\t */\r\n\tpublic set smallNumberThreshold(value: number) {\r\n\t\tthis._smallNumberThreshold = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Small number threshold\r\n\t */\r\n\tpublic get smallNumberThreshold(): number {\r\n\t\treturn this._smallNumberThreshold;\r\n\t}\r\n\r\n\t/**\r\n\t * Basically the same as `bigNumberPrefixes`, except base for calculation\r\n\t * is not thousand but byte (1024).\r\n\t *\r\n\t * The modifier is \"b\".\r\n\t *\r\n\t *  ```Text\r\n\t * {myfield.formatNumber(\"#,###.00b\")}\r\n\t * ```\r\n\t *\r\n\t * The above `2048` will change to `2K`.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n\t * @param prefixes  Prefixes for byte-size formatting\r\n\t */\r\n\tpublic set bytePrefixes(prefixes: INumberSuffix[]) {\r\n\t\tthis._bytePrefixes = prefixes;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Prefixes for byte-size formatting\r\n\t */\r\n\tpublic get bytePrefixes(): INumberSuffix[] {\r\n\t\tif (!$type.hasValue(this._bytePrefixes)) {\r\n\t\t\tthis._bytePrefixes = [\r\n\t\t\t\t{ \"number\": 1, suffix: this.language.translate(\"_byte_suffix_B\") },\r\n\t\t\t\t{ \"number\": 1024, suffix: this.language.translate(\"_byte_suffix_KB\") },\r\n\t\t\t\t{ \"number\": 1048576, suffix: this.language.translate(\"_byte_suffix_MB\") },\r\n\t\t\t\t{ \"number\": 1073741824, suffix: this.language.translate(\"_byte_suffix_GB\") },\r\n\t\t\t\t{ \"number\": 1099511627776, suffix: this.language.translate(\"_byte_suffix_TB\") },\r\n\t\t\t\t{ \"number\": 1125899906842624, suffix: this.language.translate(\"_byte_suffix_PB\") }\r\n\t\t\t]\r\n\t\t}\r\n\t\treturn this._bytePrefixes;\r\n\t}\r\n\r\n\t/**\r\n\t * Ooutput format: \"svg\" or \"html\".\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Output format\r\n\t */\r\n\tpublic set outputFormat(outputFormat: string) {\r\n\t\tthis._outputFormat = outputFormat.toLowerCase();\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Output format\r\n\t */\r\n\tpublic get outputFormat(): string {\r\n\t\treturn this._outputFormat;\r\n\t}\r\n\r\n\tpublic set forceLTR(value: boolean) {\r\n\t\tthis._forceLTR = value;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\tpublic get forceLTR(): boolean {\r\n\t\treturn this._forceLTR;\r\n\t}\r\n\r\n\t/**\r\n\t * Replaces brackets with temporary placeholders.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param text  Input text\r\n\t * @return Escaped text\r\n\t */\r\n\tpublic escape(text: string): string {\r\n\t\treturn text.replace(\"||\", $strings.PLACEHOLDER2);\r\n\t}\r\n\r\n\t/**\r\n\t * Replaces placeholders back to brackets.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param text  Escaped text\r\n\t * @return Unescaped text\r\n\t */\r\n\tpublic unescape(text: string): string {\r\n\t\treturn text.replace($strings.PLACEHOLDER2, \"|\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NumberFormatter\"] = NumberFormatter;\r\n"]},"metadata":{},"sourceType":"module"}