{"ast":null,"code":"/**\r\n * A collection of functions that deals with path calculations.\r\n */\nimport * as $math from \"../utils/Math\";\nimport * as $type from \"../utils/Type\";\nimport { getGhostPaper } from \"../rendering/Paper\";\nimport { options } from \"../Options\";\n/**\r\n * ============================================================================\r\n * PATH FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Returns an SVG path from a number of points.\r\n *\r\n * @ignore Exclude from docs\r\n * @param points  An array of line elbow points\r\n * @return SVG path\r\n */\n\nexport function polyline(points) {\n  var path = lineTo(points[0]);\n  var prevPoint = {\n    x: 0,\n    y: 0\n  };\n  var minStep = options.minPolylineStep;\n\n  if (!$type.isNumber(minStep)) {\n    minStep = 0.5;\n  }\n\n  for (var i = 0, len = points.length; i < len; i++) {\n    var point = points[i];\n\n    if ($math.getDistance(point, prevPoint) > minStep) {\n      path += lineTo(point);\n      prevPoint = point;\n    }\n  }\n\n  return path;\n}\n/**\r\n * Returns a starting point of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point  Starting point\r\n * @return SVG path\r\n */\n\nexport function moveTo(point) {\n  return \" M\" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4) + \" \";\n}\n/**\r\n * Returns a line part of SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point  SVG path\r\n * @return SVG path\r\n */\n\nexport function lineTo(point) {\n  return \" L\" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4) + \" \";\n}\n/**\r\n * Returns a quadratic curve part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point         End point of the curve\r\n * @param controlPoint  Control point\r\n * @return SVG path\r\n */\n\nexport function quadraticCurveTo(point, controlPoint) {\n  return \" Q\" + $math.round(controlPoint.x, 4) + \",\" + $math.round(controlPoint.y, 4) + \" \" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4);\n}\n/**\r\n * Returns a cubic curve part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point          End point of the curve\r\n * @param controlPointA  Control point A\r\n * @param controlPointB  Control point B\r\n * @return SVG path\r\n */\n\nexport function cubicCurveTo(point, controlPointA, controlPointB) {\n  return \" C\" + $math.round(controlPointA.x, 4) + \",\" + $math.round(controlPointA.y, 4) + \" \" + $math.round(controlPointB.x, 4) + \",\" + $math.round(controlPointB.y, 4) + \" \" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4);\n}\n/**\r\n * Returns a terminator for an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @return SVG path\r\n */\n\nexport function closePath() {\n  return \" Z\";\n}\n/**\r\n * Returns an arc part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Better parameter descriptions\r\n * @param startAngle  Starting angle\r\n * @param arc         Arc\r\n * @param radius      Radius\r\n * @param radiusY     Vertical radius\r\n * @return SVG path\r\n */\n\nexport function arcTo(startAngle, arc, radius, radiusY) {\n  if (arc == 0) {\n    return \"\";\n  }\n\n  if (!$type.isNumber(radiusY)) {\n    radiusY = radius;\n  }\n\n  var path = \"\";\n  var c = \",\";\n  var segments = Math.ceil(Math.abs(arc) / 180);\n  var l = 1;\n\n  if (arc < 0) {\n    l = 0;\n  } // previous, as we use a not A\n\n\n  var pax = 0;\n  var pay = 0; // center\n\n  var cx = -$math.cos(startAngle) * radius;\n  var cy = -$math.sin(startAngle) * radiusY; // foir very short angles and big radius, solves artefacts\n\n  if (arc < 0.5 && radius > 3000) {\n    var endAngle = startAngle + arc;\n    var ax = $math.round($math.cos(endAngle) * radius, 4);\n    var ay = $math.round($math.sin(endAngle) * radiusY, 4);\n    return lineTo({\n      x: ax,\n      y: ay\n    });\n  }\n\n  for (var i = 0; i < segments; i++) {\n    var endAngle = startAngle + arc / segments * (i + 1);\n    var ax = $math.round($math.cos(endAngle) * radius + cx - pax, 4);\n    var ay = $math.round($math.sin(endAngle) * radiusY + cy - pay, 4);\n    path += \" a\" + radius + c + radiusY + c + 0 + c + 0 + c + l + c + ax + c + ay;\n    pax = ax;\n    pay = ay;\n  }\n\n  return path;\n}\n/**\r\n * Creates an arc path.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param startAngle         [description]\r\n * @param arc                [description]\r\n * @param radius             [description]\r\n * @param innerRadius        [description]\r\n * @param radiusY            [description]\r\n * @param cornerRadius       [description]\r\n * @param innerCornerRadius  [description]\r\n * @return SVG path\r\n */\n\nexport function arc(startAngle, arc, radius, innerRadius, radiusY, cornerRadius, innerCornerRadius) {\n  if (arc == 0) {\n    return \"\";\n  }\n\n  if (!$type.isNumber(innerRadius)) {\n    innerRadius = 0;\n  }\n\n  if (radius == 0 && innerRadius <= 0) {\n    return \"\";\n  }\n\n  if (radius < innerRadius) {\n    var temp = radius;\n    radius = innerRadius;\n    innerRadius = temp;\n\n    if ($type.isNumber(radiusY)) {\n      radiusY = radiusY / innerRadius * radius;\n    }\n  }\n\n  arc = $math.min(arc, 360);\n\n  if (arc == 360) {\n    cornerRadius = 0;\n    innerCornerRadius = 0;\n  }\n\n  var endAngle = startAngle + arc;\n  var crSin = $math.sin($math.min(arc, 45) / 2);\n  radiusY = $type.isNumber(radiusY) ? radiusY : radius;\n  cornerRadius = cornerRadius || 0;\n  innerCornerRadius = $type.isNumber(innerCornerRadius) ? innerCornerRadius : cornerRadius;\n  var innerRadiusY = radiusY / radius * innerRadius;\n  var cornerRadiusY = radiusY / radius * cornerRadius;\n  var innerCornerRadiusY = radiusY / radius * innerCornerRadius;\n  cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\n  cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\n  innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\n  innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\n  cornerRadius = $math.round($math.fitToRange(cornerRadius, 0, radius * crSin), 4);\n  cornerRadiusY = $math.round($math.fitToRange(cornerRadiusY, 0, radiusY * crSin), 4);\n  innerCornerRadius = $math.round($math.fitToRange(innerCornerRadius, 0, innerRadius * crSin), 4);\n  innerCornerRadiusY = $math.round($math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin), 4);\n  var crAngle = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\n  var crAngleY = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\n\n  if (innerRadius < innerCornerRadius) {\n    innerRadius = innerCornerRadius;\n  }\n\n  if (innerRadiusY < innerCornerRadiusY) {\n    innerRadiusY = innerCornerRadiusY;\n  }\n\n  var crInnerAngle = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\n  var crInnerAngleY = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\n\n  if (!$type.isNumber(crInnerAngle)) {\n    crInnerAngle = 0;\n  }\n\n  if (!$type.isNumber(crInnerAngleY)) {\n    crInnerAngleY = 0;\n  }\n\n  var middleAngle = startAngle + arc / 2;\n  var mPoint = {\n    x: $math.round($math.cos(middleAngle) * innerRadius, 4),\n    y: $math.sin(middleAngle) * innerRadiusY\n  };\n  var a0 = {\n    x: $math.cos(startAngle) * (innerRadius + innerCornerRadius),\n    y: $math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY)\n  };\n  var b0 = {\n    x: $math.cos(startAngle) * (radius - cornerRadius),\n    y: $math.sin(startAngle) * (radiusY - cornerRadiusY)\n  };\n  var c0 = {\n    x: $math.cos(endAngle) * (radius - cornerRadius),\n    y: $math.sin(endAngle) * (radiusY - cornerRadiusY)\n  };\n  var d0 = {\n    x: $math.cos(endAngle) * (innerRadius + innerCornerRadius),\n    y: $math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY)\n  };\n  var b1 = {\n    x: $math.cos(startAngle + crAngle) * radius,\n    y: $math.sin(startAngle + crAngleY) * radiusY\n  };\n  var d1 = {\n    x: $math.cos(endAngle - crInnerAngle) * innerRadius,\n    y: $math.sin(endAngle - crInnerAngleY) * innerRadiusY\n  }; // some magic math\n\n  innerCornerRadius += innerCornerRadius * $math.sin(crInnerAngle / 2);\n  innerCornerRadiusY += innerCornerRadiusY * $math.sin(crInnerAngleY / 2);\n\n  if (crInnerAngle > (endAngle - startAngle) / 2) {\n    d1 = mPoint;\n  }\n\n  var path = \"\"; // start from b if this is full circle\n\n  if (arc == 360) {\n    path = moveTo(b0);\n  } // otherwise start from a\n  else {\n    path = moveTo(a0);\n    path += lineTo(b0);\n    path += arcToPoint(b1, cornerRadius, cornerRadiusY, true);\n  } // draw arc\n\n\n  path += arcTo(startAngle + crAngle, arc - 2 * crAngle, radius, radiusY); // draw inner arc\n\n  if ($type.isNumber(innerRadius) && innerRadius != 0) {\n    // move to B if this is full circle\n    if (arc == 360 && cornerRadius == 0) {\n      path += moveTo(d0);\n    } // draw line otherwise\n    else {\n      path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);\n      path += lineTo(d0);\n      path += arcToPoint(d1, innerCornerRadius, innerCornerRadiusY, true);\n    }\n\n    path += arcTo(endAngle - crInnerAngle, -(arc - 2 * crInnerAngle), innerRadius, innerRadiusY);\n\n    if (arc < 360 || cornerRadius > 0) {\n      path += arcToPoint(a0, innerCornerRadius, innerCornerRadiusY, true);\n    }\n\n    path += lineTo(a0);\n  } else {\n    path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);\n\n    if (arc < 360) {\n      path += lineTo(a0);\n    }\n  }\n\n  return path;\n}\n/**\r\n * Creates a path for an arc to specific coordinate.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param point         Reference point\r\n * @param radius        Radius\r\n * @param radiusY       Vertical radius (for skewed arcs)\r\n * @param sweepFlag     [description]\r\n * @param largeArcFlag  [description]\r\n * @param xAxisRotation [description]\r\n * @return Arc path\r\n */\n\nexport function arcToPoint(point, radius, radiusY, sweepFlag, largeArcFlag, xAxisRotation) {\n  if (radius == 0) {\n    return \"\";\n  }\n\n  xAxisRotation = xAxisRotation || 0;\n  largeArcFlag = Boolean(largeArcFlag);\n  sweepFlag = Boolean(sweepFlag);\n  var c = \",\";\n  var sweepFlagValue = +sweepFlag; // converts to 1 or 0\n\n  var largeArcFlagValue = +largeArcFlag; // converts to 1 or 0\n\n  return \" A\" + radius + c + radiusY + c + xAxisRotation + c + largeArcFlagValue + c + sweepFlagValue + c + $math.round(point.x, 4) + c + $math.round(point.y, 4);\n}\n/**\r\n * Creates a new rectangle.\r\n *\r\n * @ignore Exclude from docs\r\n * @param width   Width (px)\r\n * @param height  Height (px)\r\n * @param x       X position\r\n * @param y       Y position\r\n * @return Rectangle\r\n */\n\nexport function rectangle(width, height, x, y) {\n  if (!$type.isNumber(x)) {\n    x = 0;\n  }\n\n  if (!$type.isNumber(y)) {\n    y = 0;\n  }\n\n  return moveTo({\n    x: x,\n    y: y\n  }) + lineTo({\n    x: x + width,\n    y: y\n  }) + lineTo({\n    x: x + width,\n    y: y + height\n  }) + lineTo({\n    x: x,\n    y: y + height\n  }) + closePath();\n}\n/**\r\n * Converts a rectangle to an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rect  Rectangle\r\n * @param ccw   Counter-clockwise?\r\n * @return SVG path\r\n */\n\nexport function rectToPath(rect, ccw) {\n  var c = \",\";\n  var L = \" L\";\n\n  if (ccw) {\n    return \"M\" + rect.x + c + rect.y + L + rect.x + c + (rect.y + rect.height) + L + (rect.x + rect.width) + c + (rect.y + rect.height) + L + (rect.x + rect.width) + c + rect.y + L + rect.x + c + rect.y;\n  } else {\n    return \"M\" + rect.x + c + rect.y + L + (rect.x + rect.width) + c + rect.y + L + (rect.x + rect.width) + c + (rect.y + rect.height) + L + rect.x + c + (rect.y + rect.height) + L + rect.x + c + rect.y;\n  }\n}\n/**\r\n * Converts SVG path to array of points.\r\n *\r\n * Note, this is experimental feature based on method which is deprecated\r\n * on some browsers and some browsers do not support it at all.\r\n *\r\n * You can save the output of this function, but not rely on it completely.\r\n */\n\nexport function pathToPoints(path, pointCount) {\n  var paper = getGhostPaper();\n  var svgPath = paper.add(\"path\").node;\n  svgPath.setAttribute(\"d\", path);\n\n  if (svgPath.getPointAtLength && svgPath.getTotalLength) {\n    var length_1 = svgPath.getTotalLength();\n    var toPoints = [];\n\n    for (var i = 0; i < pointCount; i++) {\n      var point = svgPath.getPointAtLength(i / pointCount * length_1);\n      toPoints.push({\n        x: point.x,\n        y: point.y\n      });\n    }\n\n    return toPoints;\n  }\n\n  svgPath.remove();\n}\nexport function spiralPoints(cx, cy, radius, radiusY, innerRadius, step, radiusStep, startAngle, endAngle) {\n  if (!$type.isNumber(startAngle)) {\n    startAngle = 0;\n  }\n\n  if (!$type.isNumber(startAngle)) {\n    endAngle = startAngle;\n  }\n\n  var r = innerRadius + 0.01;\n  var angle = startAngle * $math.RADIANS;\n  var points = [];\n\n  while (r < radius + radiusStep) {\n    var stepSize = step;\n\n    if (stepSize / 2 > r) {\n      stepSize = 2 * r;\n    }\n\n    angle += 2 * Math.asin(stepSize / 2 / r);\n\n    if (angle * $math.DEGREES > endAngle + (radius - innerRadius) / radiusStep * 360) {\n      break;\n    }\n\n    var degrees = angle * $math.DEGREES;\n    var point = {\n      x: cx + r * Math.cos(angle),\n      y: cy + r * radiusY / radius * Math.sin(angle)\n    };\n    points.push(point);\n    r = innerRadius + degrees / 360 * radiusStep;\n  }\n\n  points.shift();\n  return points;\n}\nexport function pointsToPath(points) {\n  if (!points || points.length == 0) {\n    return \"\";\n  }\n\n  var path = moveTo(points[0]);\n\n  if (points && points.length > 0) {\n    for (var i = 1; i < points.length; i++) {\n      path += lineTo(points[i]);\n    }\n  }\n\n  return path;\n}","map":{"version":3,"mappings":"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","names":["$math","$type","getGhostPaper","options","polyline","points","path","lineTo","prevPoint","x","y","minStep","minPolylineStep","isNumber","i","len","length","point","getDistance","moveTo","round","quadraticCurveTo","controlPoint","cubicCurveTo","controlPointA","controlPointB","closePath","arcTo","startAngle","arc","radius","radiusY","c","segments","Math","ceil","abs","l","pax","pay","cx","cos","cy","sin","endAngle","ax","ay","innerRadius","cornerRadius","innerCornerRadius","temp","min","crSin","innerRadiusY","cornerRadiusY","innerCornerRadiusY","fitToRange","crAngle","asin","DEGREES","crAngleY","crInnerAngle","crInnerAngleY","middleAngle","mPoint","a0","b0","c0","d0","b1","d1","arcToPoint","sweepFlag","largeArcFlag","xAxisRotation","Boolean","sweepFlagValue","largeArcFlagValue","rectangle","width","height","rectToPath","rect","ccw","L","pathToPoints","pointCount","paper","svgPath","add","node","setAttribute","getPointAtLength","getTotalLength","length_1","toPoints","push","remove","spiralPoints","step","radiusStep","r","angle","RADIANS","stepSize","degrees","shift","pointsToPath"],"sourceRoot":"","sources":["../../../../../src/.internal/core/rendering/Path.ts"],"sourcesContent":["/**\r\n * A collection of functions that deals with path calculations.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { getGhostPaper } from \"../rendering/Paper\";\r\nimport { options } from \"../Options\";\r\n\r\n/**\r\n * ============================================================================\r\n * PATH FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns an SVG path from a number of points.\r\n *\r\n * @ignore Exclude from docs\r\n * @param points  An array of line elbow points\r\n * @return SVG path\r\n */\r\nexport function polyline(points: IPoint[]): string {\r\n\tlet path = lineTo(points[0]);\r\n\tlet prevPoint = { x: 0, y: 0 };\r\n\r\n\tlet minStep = options.minPolylineStep;\r\n\tif (!$type.isNumber(minStep)) {\r\n\t\tminStep = 0.5;\r\n\t}\r\n\r\n\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\tlet point = points[i];\r\n\t\tif ($math.getDistance(point, prevPoint) > minStep) {\r\n\t\t\tpath += lineTo(point);\r\n\t\t\tprevPoint = point;\r\n\t\t}\r\n\t}\r\n\treturn path;\r\n}\r\n\r\n\r\n/**\r\n * Returns a starting point of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point  Starting point\r\n * @return SVG path\r\n */\r\nexport function moveTo(point: IPoint): string {\r\n\treturn \" M\" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4) + \" \";\r\n}\r\n\r\n/**\r\n * Returns a line part of SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point  SVG path\r\n * @return SVG path\r\n */\r\nexport function lineTo(point: IPoint): string {\r\n\treturn \" L\" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4) + \" \";\r\n}\r\n\r\n/**\r\n * Returns a quadratic curve part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point         End point of the curve\r\n * @param controlPoint  Control point\r\n * @return SVG path\r\n */\r\nexport function quadraticCurveTo(point: IPoint, controlPoint: IPoint): string {\r\n\treturn \" Q\" + $math.round(controlPoint.x, 4)\r\n\t\t+ \",\" + $math.round(controlPoint.y, 4) + \" \" + $math.round(point.x, 4)\r\n\t\t+ \",\" + $math.round(point.y, 4);\r\n}\r\n\r\n/**\r\n * Returns a cubic curve part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point          End point of the curve\r\n * @param controlPointA  Control point A\r\n * @param controlPointB  Control point B\r\n * @return SVG path\r\n */\r\nexport function cubicCurveTo(point: IPoint, controlPointA: IPoint, controlPointB: IPoint): string {\r\n\treturn \" C\" + $math.round(controlPointA.x, 4)\r\n\t\t+ \",\" + $math.round(controlPointA.y, 4) + \" \" + $math.round(controlPointB.x, 4)\r\n\t\t+ \",\" + $math.round(controlPointB.y, 4) + \" \" + $math.round(point.x, 4)\r\n\t\t+ \",\" + $math.round(point.y, 4);\r\n}\r\n\r\n/**\r\n * Returns a terminator for an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @return SVG path\r\n */\r\nexport function closePath(): string {\r\n\treturn \" Z\";\r\n}\r\n\r\n/**\r\n * Returns an arc part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Better parameter descriptions\r\n * @param startAngle  Starting angle\r\n * @param arc         Arc\r\n * @param radius      Radius\r\n * @param radiusY     Vertical radius\r\n * @return SVG path\r\n */\r\nexport function arcTo(startAngle: number, arc: number, radius: number, radiusY?: number): string {\r\n\r\n\tif (arc == 0) {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tif (!$type.isNumber(radiusY)) {\r\n\t\tradiusY = radius;\r\n\t}\r\n\r\n\tlet path = \"\";\r\n\tlet c = \",\";\r\n\tlet segments = Math.ceil(Math.abs(arc) / 180);\r\n\tlet l = 1;\r\n\r\n\tif (arc < 0) {\r\n\t\tl = 0;\r\n\t}\r\n\r\n\t// previous, as we use a not A\r\n\tlet pax: number = 0;\r\n\tlet pay: number = 0;\r\n\r\n\t// center\r\n\tlet cx: number = -$math.cos(startAngle) * radius;\r\n\tlet cy: number = -$math.sin(startAngle) * radiusY;\r\n\r\n\t// foir very short angles and big radius, solves artefacts\r\n\tif (arc < 0.5 && radius > 3000) {\r\n\t\tlet endAngle = startAngle + arc\r\n\t\tlet ax = $math.round($math.cos(endAngle) * radius, 4);\r\n\t\tlet ay = $math.round($math.sin(endAngle) * radiusY, 4);\r\n\t\treturn lineTo({ x: ax, y: ay })\r\n\t}\r\n\r\n\tfor (let i = 0; i < segments; i++) {\r\n\t\tlet endAngle = startAngle + arc / segments * (i + 1);\r\n\r\n\t\tlet ax = $math.round($math.cos(endAngle) * radius + cx - pax, 4);\r\n\t\tlet ay = $math.round($math.sin(endAngle) * radiusY + cy - pay, 4);\r\n\r\n\t\tpath += \" a\" + radius + c + radiusY + c + 0 + c + 0 + c + l + c + ax + c + ay;\r\n\r\n\t\tpax = ax;\r\n\t\tpay = ay;\r\n\t}\r\n\treturn path;\r\n}\r\n\r\n/**\r\n * Creates an arc path.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param startAngle         [description]\r\n * @param arc                [description]\r\n * @param radius             [description]\r\n * @param innerRadius        [description]\r\n * @param radiusY            [description]\r\n * @param cornerRadius       [description]\r\n * @param innerCornerRadius  [description]\r\n * @return SVG path\r\n */\r\nexport function arc(startAngle: number, arc: number, radius: number, innerRadius?: number, radiusY?: number, cornerRadius?: number, innerCornerRadius?: number): string {\r\n\tif (arc == 0) {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tif (!$type.isNumber(innerRadius)) {\r\n\t\tinnerRadius = 0;\r\n\t}\r\n\r\n\tif (radius == 0 && innerRadius <= 0) {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tif (radius < innerRadius) {\r\n\t\tlet temp = radius;\r\n\t\tradius = innerRadius;\r\n\t\tinnerRadius = temp;\r\n\r\n\t\tif ($type.isNumber(radiusY)) {\r\n\t\t\tradiusY = radiusY / innerRadius * radius;\r\n\t\t}\r\n\t}\r\n\r\n\tarc = $math.min(arc, 360);\r\n\r\n\tif (arc == 360) {\r\n\t\tcornerRadius = 0;\r\n\t\tinnerCornerRadius = 0;\r\n\t}\r\n\r\n\tlet endAngle = startAngle + arc;\r\n\tlet crSin = $math.sin($math.min(arc, 45) / 2);\r\n\r\n\tradiusY = $type.isNumber(radiusY) ? radiusY : radius;\r\n\tcornerRadius = cornerRadius || 0;\r\n\tinnerCornerRadius = $type.isNumber(innerCornerRadius) ? innerCornerRadius : cornerRadius;\r\n\r\n\tlet innerRadiusY = (radiusY / radius) * innerRadius;\r\n\r\n\tlet cornerRadiusY = (radiusY / radius) * cornerRadius;\r\n\tlet innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;\r\n\r\n\tcornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\r\n\tcornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n\r\n\tinnerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\r\n\tinnerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n\r\n\tcornerRadius = $math.round($math.fitToRange(cornerRadius, 0, radius * crSin), 4);\r\n\tcornerRadiusY = $math.round($math.fitToRange(cornerRadiusY, 0, radiusY * crSin), 4);\r\n\r\n\tinnerCornerRadius = $math.round($math.fitToRange(innerCornerRadius, 0, innerRadius * crSin), 4);\r\n\tinnerCornerRadiusY = $math.round($math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin), 4);\r\n\r\n\tlet crAngle: number = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\r\n\tlet crAngleY: number = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\r\n\r\n\tif (innerRadius < innerCornerRadius) {\r\n\t\tinnerRadius = innerCornerRadius;\r\n\t}\r\n\r\n\tif (innerRadiusY < innerCornerRadiusY) {\r\n\t\tinnerRadiusY = innerCornerRadiusY;\r\n\t}\r\n\r\n\tlet crInnerAngle: number = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\r\n\tlet crInnerAngleY: number = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\r\n\r\n\tif (!$type.isNumber(crInnerAngle)) {\r\n\t\tcrInnerAngle = 0;\r\n\t}\r\n\tif (!$type.isNumber(crInnerAngleY)) {\r\n\t\tcrInnerAngleY = 0;\r\n\t}\r\n\r\n\tlet middleAngle = startAngle + arc / 2;\r\n\tlet mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.sin(middleAngle) * innerRadiusY };\r\n\r\n\tlet a0 = { x: $math.cos(startAngle) * (innerRadius + innerCornerRadius), y: $math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n\tlet b0 = { x: $math.cos(startAngle) * (radius - cornerRadius), y: $math.sin(startAngle) * (radiusY - cornerRadiusY) };\r\n\tlet c0 = { x: $math.cos(endAngle) * (radius - cornerRadius), y: $math.sin(endAngle) * (radiusY - cornerRadiusY) };\r\n\tlet d0 = { x: $math.cos(endAngle) * (innerRadius + innerCornerRadius), y: $math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n\r\n\tlet b1 = { x: $math.cos(startAngle + crAngle) * radius, y: $math.sin(startAngle + crAngleY) * radiusY };\r\n\tlet d1 = { x: $math.cos(endAngle - crInnerAngle) * innerRadius, y: $math.sin(endAngle - crInnerAngleY) * innerRadiusY };\r\n\r\n\t// some magic math\r\n\tinnerCornerRadius += innerCornerRadius * $math.sin(crInnerAngle / 2);\r\n\tinnerCornerRadiusY += innerCornerRadiusY * $math.sin(crInnerAngleY / 2);\r\n\r\n\tif (crInnerAngle > (endAngle - startAngle) / 2) {\r\n\t\td1 = mPoint;\r\n\t}\r\n\r\n\tlet path: string = \"\";\r\n\t// start from b if this is full circle\r\n\tif (arc == 360) {\r\n\t\tpath = moveTo(b0);\r\n\t}\r\n\t// otherwise start from a\r\n\telse {\r\n\t\tpath = moveTo(a0);\r\n\t\tpath += lineTo(b0);\r\n\t\tpath += arcToPoint(b1, cornerRadius, cornerRadiusY, true);\r\n\t}\r\n\r\n\t// draw arc\r\n\tpath += arcTo(startAngle + crAngle, arc - 2 * crAngle, radius, radiusY);\r\n\r\n\t// draw inner arc\r\n\tif ($type.isNumber(innerRadius) && innerRadius != 0) {\r\n\r\n\t\t// move to B if this is full circle\r\n\t\tif (arc == 360 && cornerRadius == 0) {\r\n\t\t\tpath += moveTo(d0);\r\n\t\t}\r\n\t\t// draw line otherwise\r\n\t\telse {\r\n\t\t\tpath += arcToPoint(c0, cornerRadius, cornerRadiusY, true);\r\n\t\t\tpath += lineTo(d0);\r\n\t\t\tpath += arcToPoint(d1, innerCornerRadius, innerCornerRadiusY, true);\r\n\t\t}\r\n\r\n\t\tpath += arcTo(endAngle - crInnerAngle, -(arc - 2 * crInnerAngle), innerRadius, innerRadiusY);\r\n\t\tif (arc < 360 || cornerRadius > 0) {\r\n\t\t\tpath += arcToPoint(a0, innerCornerRadius, innerCornerRadiusY, true);\r\n\t\t}\r\n\t\tpath += lineTo(a0);\r\n\t}\r\n\telse {\r\n\t\tpath += arcToPoint(c0, cornerRadius, cornerRadiusY, true);\r\n\t\tif (arc < 360) {\r\n\t\t\tpath += lineTo(a0);\r\n\t\t}\r\n\t}\r\n\r\n\treturn path;\r\n}\r\n\r\n/**\r\n * Creates a path for an arc to specific coordinate.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param point         Reference point\r\n * @param radius        Radius\r\n * @param radiusY       Vertical radius (for skewed arcs)\r\n * @param sweepFlag     [description]\r\n * @param largeArcFlag  [description]\r\n * @param xAxisRotation [description]\r\n * @return Arc path\r\n */\r\nexport function arcToPoint(point: IPoint, radius: number, radiusY?: number, sweepFlag?: boolean, largeArcFlag?: boolean, xAxisRotation?: number): string {\r\n\tif (radius == 0) {\r\n\t\treturn \"\";\r\n\t}\r\n\txAxisRotation = xAxisRotation || 0;\r\n\tlargeArcFlag = Boolean(largeArcFlag);\r\n\tsweepFlag = Boolean(sweepFlag);\r\n\r\n\tlet c = \",\";\r\n\tlet sweepFlagValue: number = +sweepFlag; // converts to 1 or 0\r\n\tlet largeArcFlagValue: number = +largeArcFlag;  // converts to 1 or 0\r\n\r\n\treturn \" A\" + radius + c + radiusY + c + xAxisRotation + c + largeArcFlagValue + c + sweepFlagValue + c + $math.round(point.x, 4) + c + $math.round(point.y, 4);\r\n}\r\n\r\n/**\r\n * Creates a new rectangle.\r\n *\r\n * @ignore Exclude from docs\r\n * @param width   Width (px)\r\n * @param height  Height (px)\r\n * @param x       X position\r\n * @param y       Y position\r\n * @return Rectangle\r\n */\r\nexport function rectangle(width: number, height: number, x?: number, y?: number): string {\r\n\tif (!$type.isNumber(x)) {\r\n\t\tx = 0;\r\n\t}\r\n\tif (!$type.isNumber(y)) {\r\n\t\ty = 0;\r\n\t}\r\n\treturn moveTo({ x: x, y: y }) + lineTo({ x: x + width, y: y }) + lineTo({ x: x + width, y: y + height }) + lineTo({ x: x, y: y + height }) + closePath();\r\n}\r\n\r\n/**\r\n * Converts a rectangle to an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rect  Rectangle\r\n * @param ccw   Counter-clockwise?\r\n * @return SVG path\r\n */\r\nexport function rectToPath(rect: IRectangle, ccw?: boolean): string {\r\n\tlet c = \",\";\r\n\tlet L = \" L\";\r\n\tif (ccw) {\r\n\t\treturn \"M\" + rect.x\r\n\t\t\t+ c + rect.y + L + rect.x\r\n\t\t\t+ c + (rect.y + rect.height) + L + (rect.x + rect.width)\r\n\t\t\t+ c + (rect.y + rect.height) + L + (rect.x + rect.width)\r\n\t\t\t+ c + rect.y + L + rect.x\r\n\t\t\t+ c + rect.y;\r\n\t}\r\n\telse {\r\n\t\treturn \"M\" + rect.x\r\n\t\t\t+ c + rect.y + L + (rect.x + rect.width)\r\n\t\t\t+ c + rect.y + L + (rect.x + rect.width)\r\n\t\t\t+ c + (rect.y + rect.height) + L + rect.x\r\n\t\t\t+ c + (rect.y + rect.height) + L + rect.x\r\n\t\t\t+ c + rect.y;\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts SVG path to array of points.\r\n *\r\n * Note, this is experimental feature based on method which is deprecated\r\n * on some browsers and some browsers do not support it at all.\r\n *\r\n * You can save the output of this function, but not rely on it completely.\r\n */\r\nexport function pathToPoints(path: string, pointCount: number): IPoint[] {\r\n\r\n\tlet paper = getGhostPaper();\r\n\tlet svgPath: SVGPathElement = <any>paper.add(\"path\").node;\r\n\tsvgPath.setAttribute(\"d\", path);\r\n\r\n\tif (svgPath.getPointAtLength && svgPath.getTotalLength) {\r\n\t\tlet length = svgPath.getTotalLength();\r\n\r\n\t\tlet toPoints = []\r\n\t\tfor (let i = 0; i < pointCount; i++) {\r\n\t\t\tlet point = svgPath.getPointAtLength(i / pointCount * length);\r\n\t\t\ttoPoints.push({ x: point.x, y: point.y });\r\n\t\t}\r\n\r\n\t\treturn toPoints;\r\n\t}\r\n\r\n\tsvgPath.remove();\r\n}\r\n\r\n\r\nexport function spiralPoints(cx: number, cy: number, radius: number, radiusY: number, innerRadius: number, step: number, radiusStep: number, startAngle?: number, endAngle?: number): IPoint[] {\r\n\r\n\tif (!$type.isNumber(startAngle)) {\r\n\t\tstartAngle = 0;\r\n\t}\r\n\r\n\tif (!$type.isNumber(startAngle)) {\r\n\t\tendAngle = startAngle;\r\n\t}\r\n\r\n\tlet r = innerRadius + 0.01;\r\n\tlet angle = startAngle * $math.RADIANS;\r\n\tlet points = [];\r\n\r\n\twhile (r < radius + radiusStep) {\r\n\r\n\t\tlet stepSize = step;\r\n\t\tif (stepSize / 2 > r) {\r\n\t\t\tstepSize = 2 * r;\r\n\t\t}\r\n\r\n\t\tangle += 2 * Math.asin(stepSize / 2 / r);\t\t\r\n\r\n\t\tif (angle * $math.DEGREES > endAngle + ((radius - innerRadius) / radiusStep) * 360) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tlet degrees = angle * $math.DEGREES;\r\n\r\n\t\tlet point = { x: cx + r * Math.cos(angle), y: cy + r * radiusY / radius * Math.sin(angle) };\r\n\t\tpoints.push(point);\r\n\r\n\t\tr = innerRadius + degrees / 360 * radiusStep;\r\n\r\n\t}\r\n\r\n\tpoints.shift();\r\n\r\n\treturn points;\r\n}\r\n\r\nexport function pointsToPath(points: IPoint[]) {\r\n\tif (!points || points.length == 0) {\r\n\t\treturn \"\";\r\n\t}\r\n\tlet path = moveTo(points[0]);\r\n\tif (points && points.length > 0) {\r\n\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\tpath += lineTo(points[i]);\r\n\t\t}\r\n\t}\r\n\treturn path;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}