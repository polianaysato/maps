{"ast":null,"code":"/**\r\n * Defines Percent Chart Series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Series, SeriesDataItem } from \"./Series\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { Label } from \"../../core/elements/Label\";\nimport { Color } from \"../../core/utils/Color\";\nimport { Tick } from \"../elements/Tick\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Container } from \"../../core/Container\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $ease from \"../../core/utils/Ease\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Disposer } from \"../../core/utils/Disposer\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo: sequenced?\n\n/**\r\n * Defines a [[DataItem]] for [[PercentSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar PercentSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(PercentSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PercentSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PercentSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Adds an `id` attribute the the slice element and returns its id.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PercentSeriesDataItem.prototype.uidAttr = function () {\n    return this.slice.uidAttr();\n  };\n  /**\r\n   * Hide the data item (and corresponding visual elements).\r\n   *\r\n   * @param duration  Duration (ms)\r\n   * @param delay     Delay hiding (ms)\r\n   * @param toValue   Target value for animation\r\n   * @param fields    Fields to animate while hiding\r\n   */\n\n\n  PercentSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    if (!fields) {\n      fields = [\"value\"];\n    }\n\n    return _super.prototype.hide.call(this, duration, delay, 0, fields);\n  };\n  /**\r\n   * Sets visibility of the Data Item.\r\n   *\r\n   * @param value Data Item\r\n   */\n\n\n  PercentSeriesDataItem.prototype.setVisibility = function (value, noChangeValues) {\n    if (!noChangeValues) {\n      if (value) {\n        this.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\n      } else {\n        this.setWorkingValue(\"value\", 0, 0, 0);\n      }\n    }\n\n    _super.prototype.setVisibility.call(this, value, noChangeValues);\n  };\n  /**\r\n   * Show hidden data item (and corresponding visual elements).\r\n   *\r\n   * @param duration  Duration (ms)\r\n   * @param delay     Delay hiding (ms)\r\n   * @param fields    Fields to animate while hiding\r\n   */\n\n\n  PercentSeriesDataItem.prototype.show = function (duration, delay, fields) {\n    if (!fields) {\n      fields = [\"value\"];\n    }\n\n    return _super.prototype.show.call(this, duration, delay, fields);\n  };\n\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"category\", {\n    /**\r\n     * @return Category\r\n     */\n    get: function get() {\n      return this.properties.category;\n    },\n\n    /**\r\n     * Category.\r\n     *\r\n     * @param value  Category\r\n     */\n    set: function set(value) {\n      this.setProperty(\"category\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a marker used in the legend for this slice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Marker container\r\n   */\n\n  PercentSeriesDataItem.prototype.createLegendMarker = function (marker) {\n    this.component.createLegendMarker(marker, this);\n  };\n\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Legend data item\r\n     */\n    get: function get() {\n      return this._legendDataItem;\n    },\n\n    /**\r\n     * A legend's data item, that corresponds to this data item.\r\n     *\r\n     * @param value  Legend data item\r\n     */\n    set: function set(value) {\n      this._legendDataItem = value;\n\n      if (value.label) {\n        value.label.dataItem = this;\n      }\n\n      if (value.valueLabel) {\n        value.valueLabel.dataItem = this;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"tick\", {\n    /**\r\n     * A Tick element, related to this data item. (slice)\r\n     *\r\n     * @readonly\r\n     * @return Tick element\r\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._tick) {\n        var tick_1 = this.component.ticks.create();\n        this._tick = tick_1;\n        this.addSprite(tick_1);\n\n        this._disposers.push(tick_1);\n\n        tick_1.parent = this.component.ticksContainer;\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.ticks.removeValue(tick_1);\n          }\n        }));\n\n        tick_1.visible = this.visible;\n      }\n\n      return this._tick;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"label\", {\n    /**\r\n     * A Label element, related to this data item. (slice)\r\n     *\r\n     * @readonly\r\n     * @return Label element\r\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._label) {\n        var label_1 = this.component.labels.create();\n        this.addSprite(label_1);\n        this._label = label_1;\n\n        this._disposers.push(label_1);\n\n        label_1.parent = this.component.labelsContainer;\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.labels.removeValue(label_1);\n          }\n        }));\n\n        label_1.visible = this.visible;\n      }\n\n      return this._label;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"slice\", {\n    /**\r\n     * An element, related to this data item. (slice)\r\n     *\r\n     * @readonly\r\n     * @return Slice element\r\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._slice) {\n        var component_1 = this.component;\n        var slice_1 = component_1.slices.create();\n        this.addSprite(slice_1);\n        this._slice = slice_1;\n\n        this._disposers.push(slice_1);\n\n        slice_1.parent = component_1.slicesContainer;\n\n        this._disposers.push(new Disposer(function () {\n          component_1.slices.removeValue(slice_1);\n        }));\n\n        slice_1.visible = this.visible; // Apply accessibility\n\n        if (component_1.itemsFocusable()) {\n          if (!$type.hasValue(this.component.role)) {\n            this.component.role = \"menu\";\n          }\n\n          if (!$type.hasValue(slice_1.role)) {\n            slice_1.role = \"menuitem\";\n          }\n\n          slice_1.focusable = true;\n        } else {\n          if (!$type.hasValue(this.component.role)) {\n            this.component.role = \"list\";\n          }\n\n          if (!$type.hasValue(slice_1.role)) {\n            slice_1.role = \"listitem\";\n          }\n\n          slice_1.focusable = false;\n        } // Apply screen reader label\n\n\n        if (slice_1.focusable) {\n          slice_1.events.on(\"focus\", function (ev) {\n            slice_1.readerTitle = component_1.populateString(component_1.itemReaderText, _this);\n          }, undefined, false);\n          slice_1.events.on(\"blur\", function (ev) {\n            slice_1.readerTitle = \"\";\n          }, undefined, false);\n        }\n\n        if (slice_1.hoverable) {\n          slice_1.events.on(\"over\", function (ev) {\n            slice_1.readerTitle = component_1.populateString(component_1.itemReaderText, _this);\n          }, undefined, false);\n          slice_1.events.on(\"out\", function (ev) {\n            slice_1.readerTitle = \"\";\n          }, undefined, false);\n        }\n      }\n\n      return this._slice;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"hiddenInLegend\", {\n    /**\r\n     * @return Disabled in legend?\r\n     */\n    get: function get() {\n      return this.properties.hiddenInLegend;\n    },\n\n    /**\r\n     * Should dataItem (slice) be hidden in legend?\r\n     *\r\n     * @param value Visible in legend?\r\n     */\n    set: function set(value) {\n      this.setProperty(\"hiddenInLegend\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PercentSeriesDataItem;\n}(SeriesDataItem);\n\nexport { PercentSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[PercentSeries]] which is a base class for [[PieSeries]],\r\n * [[FunnelSeries]], and [[PyramidSeries]].\r\n *\r\n * @see {@link IPercentSeriesEvents} for a list of available Events\r\n * @see {@link IPercentSeriesAdapters} for a list of available Adapters\r\n */\n\nvar PercentSeries =\n/** @class */\nfunction (_super) {\n  __extends(PercentSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PercentSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PercentSeries\";\n    _this._addAllDataItems = false;\n    _this.colors = new ColorSet();\n    _this.colors.step = 1;\n    _this.isMeasured = true;\n    _this.calculatePercent = true;\n\n    var slicesContainer = _this.createChild(Container);\n\n    slicesContainer.shouldClone = false;\n    slicesContainer.isMeasured = false;\n    _this.slicesContainer = slicesContainer;\n\n    var ticksContainer = _this.createChild(Container);\n\n    ticksContainer.shouldClone = false;\n    ticksContainer.isMeasured = false;\n    ticksContainer.layout = \"none\";\n    _this.ticksContainer = ticksContainer;\n\n    var labelsContainer = _this.createChild(Container);\n\n    labelsContainer.shouldClone = false;\n    labelsContainer.isMeasured = false;\n    labelsContainer.layout = \"none\";\n    _this.labelsContainer = labelsContainer;\n    _this.alignLabels = false;\n\n    _this.bulletsContainer.toFront(); // Make all slices focusable\n\n\n    _this.skipFocusThreshold = 50;\n    var defaultState = _this.defaultState;\n    defaultState.transitionEasing = $ease.sinOut; // Accessibility\n\n    _this.itemReaderText = \"{category}: {value.percent.formatNumber('#.#')}%\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Creates a slice element.\r\n   *\r\n   * @return Slice\r\n   */\n\n\n  PercentSeries.prototype.createSlice = function () {\n    return new Sprite();\n  };\n  /**\r\n   * Creates a tick element.\r\n   *\r\n   * @return Tick\r\n   */\n\n\n  PercentSeries.prototype.createTick = function () {\n    return new Tick();\n  };\n  /**\r\n   * Sreates label element.\r\n   *\r\n   * @return label\r\n   */\n\n\n  PercentSeries.prototype.createLabel = function () {\n    return new Label();\n  };\n\n  Object.defineProperty(PercentSeries.prototype, \"slices\", {\n    /**\r\n     * A list of slice elements for the series.\r\n     *\r\n     * Use its `template` to configure look and behavior of the slices. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.slices.template.stroke = am4core.color(\"#fff\");\r\n     * series.slices.template.strokeWidth = 2;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.slices.template.stroke = am4core.color(\"#fff\");\r\n     * series.slices.template.strokeWidth = 2;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"slices\": {\r\n     *       \"stroke\": \"#fff\",\r\n     *       \"strokeWidth\": 2\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n     * @return Slices\r\n     */\n    get: function get() {\n      if (!this._slices) {\n        var slice = this.createSlice();\n        slice.applyOnClones = true;\n\n        this._disposers.push(slice);\n\n        this.initSlice(slice);\n        this._slices = new ListTemplate(slice);\n\n        this._disposers.push(new ListDisposer(this._slices));\n      }\n\n      return this._slices;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeries.prototype, \"ticks\", {\n    /**\r\n     * A list of tick elements for the series. Ticks connect slice to its label.\r\n     *\r\n     * Use its `template` to configure look and behavior of the ticks. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.ticks.template.strokeWidth = 2;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.ticks.template.strokeWidth = 2;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"ticks\": {\r\n     *       \"strokeWidth\": 2\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n     * @return Ticks\r\n     */\n    get: function get() {\n      if (!this._ticks) {\n        var tick = this.createTick();\n        tick.applyOnClones = true;\n\n        this._disposers.push(tick);\n\n        this.initTick(tick);\n        this._ticks = new ListTemplate(tick);\n\n        this._disposers.push(new ListDisposer(this._ticks));\n      }\n\n      return this._ticks;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeries.prototype, \"labels\", {\n    /**\r\n     * A list of slice label elements for the series.\r\n     *\r\n     * Use its `template` to configure look and behavior of the labels. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.labels.template.fill = am4core.color(\"#c00\");\r\n     * series.labels.template.fontSize = 20;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.labels.template.fill = am4core.color(\"#c00\");\r\n     * series.labels.template.fontSize = 20;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"labels\": {\r\n     *       \"stroke\": \"#c00\",\r\n     *       \"fontSize\": 20\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n     * @return Labels\r\n     */\n    get: function get() {\n      if (!this._labels) {\n        var label = this.createLabel();\n        label.applyOnClones = true;\n\n        this._disposers.push(label);\n\n        this.initLabel(label);\n        this._labels = new ListTemplate(label);\n\n        this._disposers.push(new ListDisposer(this._labels));\n      }\n\n      return this._labels;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n  PercentSeries.prototype.createDataItem = function () {\n    return new PercentSeriesDataItem();\n  };\n  /**\r\n   * Creates and returns a new slice element.\r\n   *\r\n   * @param sliceType  Type of the slice element\r\n   * @return Slice\r\n   */\n\n\n  PercentSeries.prototype.initSlice = function (slice) {};\n\n  PercentSeries.prototype.initLabel = function (label) {\n    label.text = \"{category}: {value.percent.formatNumber('#.0')}%\";\n    label.isMeasured = false;\n    label.padding(5, 5, 5, 5);\n  };\n\n  PercentSeries.prototype.initTick = function (label) {};\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PercentSeries.prototype.validateDataItems = function () {\n    this.colors.reset();\n\n    if (this.patterns) {\n      this.patterns.reset();\n    }\n\n    _super.prototype.validateDataItems.call(this);\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  PercentSeries.prototype.validateDataElement = function (dataItem) {\n    var slice = dataItem.slice;\n\n    if (slice) {\n      if (slice.fill == undefined) {\n        if (this.patterns) {\n          if (!$type.hasValue(slice.stroke)) {\n            slice.stroke = this.colors.next();\n          }\n\n          slice.fill = this.patterns.next();\n\n          if ($type.hasValue(slice.fillOpacity)) {\n            slice.fill.backgroundOpacity = slice.fillOpacity;\n          }\n\n          if (slice.stroke instanceof Color) {\n            slice.fill.stroke = slice.stroke;\n            slice.fill.fill = slice.stroke;\n          }\n        } else {\n          slice.fill = this.colors.next();\n        }\n      } else {\n        this.colors.currentStep += this.colors.step;\n      }\n\n      if (slice.stroke == undefined) {\n        slice.stroke = slice.fill;\n      }\n    } // do this at the end, otherwise bullets won't be positioned properly\n\n\n    _super.prototype.validateDataElement.call(this, dataItem);\n\n    if (slice) {\n      dataItem.bullets.each(function (key, bullet) {\n        if (bullet.fill == undefined) {\n          bullet.fill = slice.fill;\n        }\n\n        if (bullet.stroke == undefined) {\n          bullet.stroke = slice.stroke;\n        }\n      });\n    }\n\n    this.updateLegendValue(dataItem);\n  };\n  /**\r\n   * Validates (processes) data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PercentSeries.prototype.validateData = function () {\n    _super.prototype.validateData.call(this);\n\n    if (this.chart) {\n      this.chart.feedLegend();\n    }\n  };\n  /**\r\n   * Arranges slice labels according to position settings.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItems  Data items\r\n   */\n\n\n  PercentSeries.prototype.arrangeLabels = function (dataItems) {\n    for (var i = 0, len = dataItems.length; i < len; i++) {\n      var dataItem = dataItems[i];\n      var label = dataItem.label;\n\n      if (label) {\n        if (label.invalid) {\n          label.validate();\n        }\n\n        var lh = label.measuredHeight;\n\n        if (!label.visible) {\n          lh = 0;\n        }\n\n        if (label.pixelY - lh / 2 < -this.maxHeight / 2) {\n          label.y = -this.maxHeight / 2 + lh / 2;\n        }\n\n        var nextLabel = this.getNextLabel(i + 1, dataItems);\n        var bottom = label.pixelY + lh;\n\n        if (nextLabel) {\n          if (nextLabel.y < bottom) {\n            nextLabel.y = bottom;\n          }\n        }\n      }\n    }\n  };\n\n  PercentSeries.prototype.arrangeLabels2 = function (dataItems) {\n    var previousTop = this.maxHeight / 2;\n\n    for (var i = dataItems.length - 1; i >= 0; i--) {\n      var dataItem = dataItems[i];\n      var label = dataItem.label;\n\n      if (label) {\n        if (label.invalid) {\n          label.validate();\n        }\n\n        var lh = label.measuredHeight;\n\n        if (!label.visible) {\n          lh = 0;\n        }\n\n        if (i == dataItems.length - 1) {\n          previousTop += lh / 2;\n        }\n\n        if (label.pixelY + lh > previousTop) {\n          label.y = previousTop - lh;\n          previousTop = label.y;\n        }\n      }\n    }\n  };\n  /**\r\n   * Returns the next label according to `index`.\r\n   *\r\n   * @param index      Current index\r\n   * @param dataItems  Data items\r\n   * @return Label element\r\n   */\n\n\n  PercentSeries.prototype.getNextLabel = function (index, dataItems) {\n    if (dataItems.length >= index) {\n      var nextDataItem = dataItems[index];\n\n      if (nextDataItem) {\n        if (nextDataItem.label) {\n          if (nextDataItem.visible) {\n            return nextDataItem.label;\n          } else {\n            return this.getNextLabel(index + 1, dataItems);\n          }\n        } else {\n          return this.getNextLabel(index + 1, dataItems);\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(PercentSeries.prototype, \"colors\", {\n    /**\r\n     * @return Color set\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"colors\");\n    },\n\n    /**\r\n     * A color set to be used for slices.\r\n     *\r\n     * For each new subsequent slice, the chart will assign the next color in\r\n     * this set.\r\n     *\r\n     * @param value  Color set\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"colors\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeries.prototype, \"patterns\", {\n    /**\r\n     * @return Pattern set\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"patterns\");\n    },\n\n    /**\r\n     * A [[PatternSet]] to use when creating patterned fills for slices.\r\n     *\r\n     * @since 4.7.5\r\n     * @param value  Pattern set\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"patterns\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Binds related legend data item's visual settings to this series' visual\r\n   * settings.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker    Container\r\n   * @param dataItem  Data item\r\n   */\n\n  PercentSeries.prototype.createLegendMarker = function (marker, dataItem) {\n    $iter.each(marker.children.iterator(), function (child) {\n      var slice = dataItem.slice;\n      child.defaultState.properties.fill = slice.fill;\n      child.defaultState.properties.stroke = slice.stroke;\n      child.defaultState.properties.fillOpacity = slice.fillOpacity;\n      child.defaultState.properties.strokeOpacity = slice.strokeOpacity;\n      child.fill = slice.fill;\n      child.stroke = slice.stroke;\n      child.fillOpacity = slice.fillOpacity;\n      child.strokeOpacity = slice.strokeOpacity;\n\n      if (child.fill == undefined) {\n        child.__disabled = true;\n      }\n\n      var legendDataItem = marker.dataItem;\n      legendDataItem.color = slice.fill;\n      legendDataItem.colorOrig = slice.fill;\n      child.addDisposer(slice.events.on(\"propertychanged\", function (ev) {\n        if (ev.property == \"fill\") {\n          child.__disabled = false;\n\n          if (!child.isActive) {\n            child.fill = slice.fill;\n          }\n\n          child.defaultState.properties.fill = slice.fill;\n          legendDataItem.color = slice.fill;\n          legendDataItem.colorOrig = slice.fill;\n        }\n\n        if (ev.property == \"stroke\") {\n          if (!child.isActive) {\n            child.stroke = slice.stroke;\n          }\n\n          child.defaultState.properties.stroke = slice.stroke;\n        }\n      }, undefined, false));\n    });\n  };\n  /**\r\n   * Repositions bullets when slice's size changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  PercentSeries.prototype.handleSliceScale = function (event) {\n    var _this = this;\n\n    var slice = event.target;\n    var dataItem = slice.dataItem;\n\n    if (dataItem && dataItem.bullets) {\n      $iter.each(dataItem.bullets.iterator(), function (a) {\n        var value = a[1];\n\n        _this.positionBullet(value);\n      });\n    }\n  };\n  /**\r\n   * Repositions bullet and labels when slice moves.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  PercentSeries.prototype.handleSliceMove = function (event) {};\n  /**\r\n   * Copies all properties from another instance of [[PercentSeries]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  PercentSeries.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.slices.template.copyFrom(source.slices.template);\n    this.labels.template.copyFrom(source.labels.template);\n    this.ticks.template.copyFrom(source.ticks.template);\n    this.colors = source.colors.clone();\n  };\n\n  Object.defineProperty(PercentSeries.prototype, \"alignLabels\", {\n    /**\r\n     * @return Align labels?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"alignLabels\");\n    },\n\n    /**\r\n     * Align labels into nice vertical columns?\r\n     *\r\n     * This will ensure that labels never overlap with each other.\r\n     *\r\n     * Arranging labels into columns makes them more readble, and better user\r\n     * experience.\r\n     *\r\n     * If set to `false` labels will be positioned at `label.radius` distance,\r\n     * and may, in some cases, overlap.\r\n     *\r\n     * @default true\r\n     * @param value  Align labels?\r\n     */\n    set: function set(value) {\n      this.setAlignLabels(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  PercentSeries.prototype.setAlignLabels = function (value) {\n    this.setPropertyValue(\"alignLabels\", value, true);\n  };\n\n  Object.defineProperty(PercentSeries.prototype, \"ignoreZeroValues\", {\n    /**\r\n     * @return Ignore zero values\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"ignoreZeroValues\");\n    },\n\n    /**\r\n     * If set to `true` the chart will not show slices with zero values.\r\n     *\r\n     * @default false\r\n     * @since 4.7.9\r\n     * @param  value  Ignore zero values\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"ignoreZeroValues\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates corresponding legend data item with current values.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n  PercentSeries.prototype.updateLegendValue = function (dataItem) {\n    if (dataItem) {\n      var legendDataItem = dataItem.legendDataItem;\n      var legendSettings = dataItem.legendSettings;\n\n      if (legendDataItem && legendSettings) {\n        if (legendSettings) {\n          if (legendSettings.labelText) {\n            legendDataItem.label.text = legendSettings.labelText;\n          }\n\n          if (legendSettings.itemLabelText) {\n            legendDataItem.label.text = legendSettings.itemLabelText;\n          }\n\n          if (legendSettings.valueText) {\n            legendDataItem.valueLabel.text = legendSettings.valueText;\n          }\n\n          if (legendSettings.itemValueText) {\n            legendDataItem.valueLabel.text = legendSettings.itemValueText;\n          }\n        }\n      }\n    }\n  };\n\n  return PercentSeries;\n}(Series);\n\nexport { PercentSeries };\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"PercentSeries\"] = PercentSeries;\nregistry.registeredClasses[\"PercentSeriesDataItem\"] = PercentSeriesDataItem;\n/**\r\n * Add default responsive rules\r\n */\n\n/**\r\n * Disable labels and ticks.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function state(target, stateId) {\n    if (target instanceof PercentSeries) {\n      var state = target.states.create(stateId);\n      var labelState = target.labels.template.states.create(stateId);\n      labelState.properties.disabled = true;\n      var tickState = target.ticks.template.states.create(stateId);\n      tickState.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});","map":{"version":3,"mappings":"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","names":["Series","SeriesDataItem","Sprite","Label","Color","Tick","ListTemplate","ListDisposer","Container","ColorSet","registry","$iter","$ease","$type","Disposer","defaultRules","ResponsiveBreakpoints","__extends","_super","_this","className","applyTheme","PercentSeriesDataItem","slice","uidAttr","duration","delay","toValue","fields","hide","call","value","noChangeValues","setWorkingValue","values","setVisibility","show","Object","properties","category","setProperty","marker","component","createLegendMarker","_legendDataItem","label","dataItem","valueLabel","_tick","tick_1","ticks","create","addSprite","_disposers","push","parent","ticksContainer","removeValue","visible","_label","label_1","labels","labelsContainer","_slice","component_1","slice_1","slices","slicesContainer","itemsFocusable","hasValue","role","focusable","events","on","ev","readerTitle","populateString","itemReaderText","undefined","hoverable","hiddenInLegend","_addAllDataItems","colors","step","isMeasured","calculatePercent","createChild","shouldClone","layout","alignLabels","bulletsContainer","toFront","skipFocusThreshold","defaultState","transitionEasing","sinOut","PercentSeries","_slices","createSlice","applyOnClones","initSlice","_ticks","tick","createTick","initTick","_labels","createLabel","initLabel","text","padding","reset","patterns","validateDataItems","fill","stroke","next","fillOpacity","backgroundOpacity","currentStep","validateDataElement","bullets","each","key","bullet","updateLegendValue","validateData","chart","feedLegend","dataItems","i","len","length","invalid","validate","lh","measuredHeight","pixelY","maxHeight","y","nextLabel","getNextLabel","bottom","previousTop","index","nextDataItem","getPropertyValue","setPropertyValue","children","iterator","child","strokeOpacity","__disabled","legendDataItem","color","colorOrig","addDisposer","property","isActive","event","target","a","positionBullet","source","copyFrom","template","clone","setAlignLabels","legendSettings","labelText","itemLabelText","valueText","itemValueText","registeredClasses","relevant","maybeXS","state","stateId","states","labelState","disabled","tickState"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/series/PercentSeries.ts"],"sourcesContent":["/**\r\n * Defines Percent Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Tick } from \"../elements/Tick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { PatternSet } from \"../../core/utils/PatternSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { PercentChart } from \"../types/PercentChart\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: Sprite;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _tick: Tick;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Custom settings for the legend item.\r\n\t * Not used, only added to sattisfy LegendDataItem\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic legendSettings: LegendSettings;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Adds an `id` attribute the the slice element and returns its id.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic uidAttr(): string {\r\n\t\treturn this.slice.uidAttr();\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param toValue   Target value for animation\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, 0, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean, noChangeValues?: boolean): void {\r\n\t\tif (!noChangeValues) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setWorkingValue(\"value\", 0, 0, 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.setVisibility(value, noChangeValues);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates a marker used in the legend for this slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Marker container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tthis.component.createLegendMarker(marker, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * A Tick element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Tick element\r\n\t */\r\n\tpublic get tick(): this[\"_tick\"] {\r\n\t\tif (!this._tick) {\r\n\t\t\tlet tick = this.component.ticks.create();\r\n\t\t\tthis._tick = tick;\r\n\t\t\tthis.addSprite(tick);\r\n\t\t\tthis._disposers.push(tick);\r\n\t\t\ttick.parent = this.component.ticksContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.ticks.removeValue(tick);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\r\n\t\t\ttick.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * A Label element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): this[\"_label\"] {\r\n\t\tif (!this._label) {\r\n\t\t\tlet label = this.component.labels.create();\r\n\t\t\tthis.addSprite(label);\r\n\t\t\tthis._label = label;\r\n\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tlabel.parent = this.component.labelsContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.labels.removeValue(label);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tlabel.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * An element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Slice element\r\n\t */\r\n\tpublic get slice(): this[\"_slice\"] {\r\n\t\tif (!this._slice) {\r\n\r\n\t\t\tlet component = this.component;\r\n\r\n\t\t\tlet slice = component.slices.create();\r\n\t\t\tthis.addSprite(slice);\r\n\r\n\t\t\tthis._slice = slice;\r\n\t\t\tthis._disposers.push(slice);\r\n\t\t\tslice.parent = component.slicesContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tcomponent.slices.removeValue(slice);\r\n\t\t\t}));\r\n\r\n\r\n\t\t\tslice.visible = this.visible;\r\n\r\n\t\t\t// Apply accessibility\r\n\t\t\tif (component.itemsFocusable()) {\r\n\t\t\t\tif (!$type.hasValue(this.component.role)) {\r\n\t\t\t\t\tthis.component.role = \"menu\";\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.hasValue(slice.role)) {\r\n\t\t\t\t\tslice.role = \"menuitem\";\r\n\t\t\t\t}\r\n\t\t\t\tslice.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (!$type.hasValue(this.component.role)) {\r\n\t\t\t\t\tthis.component.role = \"list\";\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.hasValue(slice.role)) {\r\n\t\t\t\t\tslice.role = \"listitem\";\r\n\t\t\t\t}\r\n\t\t\t\tslice.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply screen reader label\r\n\t\t\tif (slice.focusable) {\r\n\t\t\t\tslice.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tslice.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t\tif (slice.hoverable) {\r\n\t\t\t\tslice.events.on(\"over\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tslice.events.on(\"out\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Should dataItem (slice) be hidden in legend?\r\n\t *\r\n\t * @param value Visible in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tthis.setProperty(\"hiddenInLegend\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Disabled in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.properties.hiddenInLegend;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category.\r\n\t */\r\n\tcategory?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be\r\n\t * hidden in legend.\r\n\t */\r\n\thiddenInLegend?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesProperties extends ISeriesProperties {\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * Pattern set to apply to fills.\r\n\t * \r\n\t * @since 4.7.5\r\n\t */\r\n\tpatterns?: PatternSet;\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\talignLabels?: boolean;\r\n\r\n\t/**\r\n\t * If set to `true` the chart will not show slices with zero values.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.7.9\r\n\t */\r\n\tignoreZeroValues?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentSeriesAdapters extends ISeriesAdapters, IPercentSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[PercentSeries]] which is a base class for [[PieSeries]],\r\n * [[FunnelSeries]], and [[PyramidSeries]].\r\n *\r\n * @see {@link IPercentSeriesEvents} for a list of available Events\r\n * @see {@link IPercentSeriesAdapters} for a list of available Adapters\r\n */\r\nexport class PercentSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines type of the slice elements for the series.\r\n\t */\r\n\tpublic _slice: Sprite;\r\n\r\n\t/**\r\n\t * Defines type of the tick elements for the series.\r\n\t */\r\n\tpublic _tick: Tick;\r\n\r\n\t/**\r\n\t * Defines type of the label elements for the series.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: PercentChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPercentSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPercentSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPercentSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPercentSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PercentSeriesDataItem;\r\n\r\n\t/**\r\n\t * Container slice elements are put in.\r\n\t */\r\n\tpublic slicesContainer: Container;\r\n\r\n\t/**\r\n\t * Container tick elements are put in.\r\n\t */\r\n\tpublic ticksContainer: Container;\r\n\r\n\t/**\r\n\t * Container label elements are put in.\r\n\t */\r\n\tpublic labelsContainer: Container;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t */\r\n\tprotected _slices: ListTemplate<this[\"_slice\"]>;\r\n\r\n\t/**\r\n\t * List of tick elements.\r\n\t */\r\n\tprotected _ticks: ListTemplate<this[\"_tick\"]>;\r\n\r\n\t/**\r\n\t * List of label elements.\r\n\t */\r\n\tprotected _labels: ListTemplate<this[\"_label\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PercentSeries\";\r\n\r\n\t\tthis._addAllDataItems = false;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.colors.step = 1;\r\n\t\tthis.isMeasured = true;\r\n\t\tthis.calculatePercent = true;\r\n\r\n\t\tlet slicesContainer = this.createChild(Container);\r\n\t\tslicesContainer.shouldClone = false;\r\n\t\tslicesContainer.isMeasured = false;\r\n\t\tthis.slicesContainer = slicesContainer;\r\n\r\n\t\tlet ticksContainer = this.createChild(Container);\r\n\t\tticksContainer.shouldClone = false;\r\n\t\tticksContainer.isMeasured = false;\r\n\t\tticksContainer.layout = \"none\";\r\n\t\tthis.ticksContainer = ticksContainer;\r\n\r\n\t\tlet labelsContainer = this.createChild(Container);\r\n\t\tlabelsContainer.shouldClone = false;\r\n\t\tlabelsContainer.isMeasured = false;\r\n\t\tlabelsContainer.layout = \"none\";\r\n\t\tthis.labelsContainer = labelsContainer;\r\n\r\n\t\tthis.alignLabels = false;\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\t// Make all slices focusable\r\n\t\tthis.skipFocusThreshold = 50;\r\n\r\n\t\tlet defaultState = this.defaultState;\r\n\t\tdefaultState.transitionEasing = $ease.sinOut;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.itemReaderText = \"{category}: {value.percent.formatNumber('#.#')}%\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a slice element.\r\n\t *\r\n\t * @return Slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Sprite();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a tick element.\r\n\t *\r\n\t * @return Tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new Tick();\r\n\t}\r\n\r\n\t/**\r\n\t * Sreates label element.\r\n\t *\r\n\t * @return label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new Label();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of slice elements for the series.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the slices. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.slices.template.stroke = am4core.color(\"#fff\");\r\n\t * series.slices.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.slices.template.stroke = am4core.color(\"#fff\");\r\n\t * series.slices.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"slices\": {\r\n\t *       \"stroke\": \"#fff\",\r\n\t *       \"strokeWidth\": 2\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Slices\r\n\t */\r\n\tpublic get slices(): ListTemplate<this[\"_slice\"]> {\r\n\t\tif (!this._slices) {\r\n\t\t\tlet slice = this.createSlice();\r\n\r\n\t\t\tslice.applyOnClones = true;\r\n\t\t\tthis._disposers.push(slice);\r\n\t\t\tthis.initSlice(slice);\r\n\r\n\t\t\tthis._slices = new ListTemplate(slice);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._slices));\r\n\t\t}\r\n\t\treturn this._slices;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of tick elements for the series. Ticks connect slice to its label.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the ticks. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.ticks.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.ticks.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"ticks\": {\r\n\t *       \"strokeWidth\": 2\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Ticks\r\n\t */\r\n\tpublic get ticks(): ListTemplate<this[\"_tick\"]> {\r\n\t\tif (!this._ticks) {\r\n\t\t\tlet tick = this.createTick();\r\n\t\t\ttick.applyOnClones = true;\r\n\t\t\tthis._disposers.push(tick);\r\n\t\t\tthis.initTick(tick);\r\n\r\n\t\t\tthis._ticks = new ListTemplate(tick);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._ticks));\r\n\t\t}\r\n\t\treturn this._ticks;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of slice label elements for the series.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the labels. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.labels.template.fill = am4core.color(\"#c00\");\r\n\t * series.labels.template.fontSize = 20;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.labels.template.fill = am4core.color(\"#c00\");\r\n\t * series.labels.template.fontSize = 20;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"labels\": {\r\n\t *       \"stroke\": \"#c00\",\r\n\t *       \"fontSize\": 20\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Labels\r\n\t */\r\n\tpublic get labels(): ListTemplate<this[\"_label\"]> {\r\n\t\tif (!this._labels) {\r\n\t\t\tlet label = this.createLabel();\r\n\t\t\tlabel.applyOnClones = true;\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tthis.initLabel(label);\r\n\r\n\t\t\tthis._labels = new ListTemplate(label);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._labels));\r\n\t\t}\r\n\t\treturn this._labels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PercentSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param sliceType  Type of the slice element\r\n\t * @return Slice\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\r\n\t}\r\n\r\n\tprotected initLabel(label: this[\"_label\"]) {\r\n\t\tlabel.text = \"{category}: {value.percent.formatNumber('#.0')}%\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t}\r\n\r\n\tprotected initTick(label: this[\"_tick\"]) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\tthis.colors.reset();\r\n\t\tif (this.patterns) {\r\n\t\t\tthis.patterns.reset();\r\n\t\t}\r\n\t\tsuper.validateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tif (slice) {\r\n\t\t\tif (slice.fill == undefined) {\r\n\t\t\t\tif (this.patterns) {\r\n\t\t\t\t\tif (!$type.hasValue(slice.stroke)) {\r\n\t\t\t\t\t\tslice.stroke = this.colors.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tslice.fill = this.patterns.next();\r\n\t\t\t\t\tif ($type.hasValue(slice.fillOpacity)) {\r\n\t\t\t\t\t\tslice.fill.backgroundOpacity = slice.fillOpacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (slice.stroke instanceof Color) {\r\n\t\t\t\t\t\tslice.fill.stroke = slice.stroke;\r\n\t\t\t\t\t\tslice.fill.fill = slice.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tslice.fill = this.colors.next();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.colors.currentStep += this.colors.step;\r\n\t\t\t}\r\n\r\n\t\t\tif (slice.stroke == undefined) {\r\n\t\t\t\tslice.stroke = slice.fill;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tif (slice) {\r\n\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\tif (bullet.fill == undefined) {\r\n\t\t\t\t\tbullet.fill = slice.fill;\r\n\t\t\t\t}\r\n\t\t\t\tif (bullet.stroke == undefined) {\r\n\t\t\t\t\tbullet.stroke = slice.stroke;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.updateLegendValue(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.feedLegend();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Arranges slice labels according to position settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItems  Data items\r\n\t */\r\n\tprotected arrangeLabels(dataItems: this[\"_dataItem\"][]): void {\r\n\t\tfor (let i = 0, len = dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\r\n\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\tlabel.validate();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet lh = label.measuredHeight;\r\n\t\t\t\tif (!label.visible) {\r\n\t\t\t\t\tlh = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (label.pixelY - lh / 2 < -this.maxHeight / 2) {\r\n\t\t\t\t\tlabel.y = -this.maxHeight / 2 + lh / 2;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet nextLabel = this.getNextLabel(i + 1, dataItems);\r\n\r\n\t\t\t\tlet bottom: number = label.pixelY + lh;\r\n\r\n\t\t\t\tif (nextLabel) {\r\n\t\t\t\t\tif (nextLabel.y < bottom) {\r\n\t\t\t\t\t\tnextLabel.y = bottom;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected arrangeLabels2(dataItems: this[\"_dataItem\"][]): void {\r\n\r\n\t\tlet previousTop = this.maxHeight / 2;\r\n\r\n\t\tfor (let i = dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\tlabel.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet lh = label.measuredHeight;\r\n\t\t\t\tif (!label.visible) {\r\n\t\t\t\t\tlh = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (i == dataItems.length - 1) {\r\n\t\t\t\t\tpreviousTop += lh / 2;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (label.pixelY + lh > previousTop) {\r\n\t\t\t\t\tlabel.y = previousTop - lh;\r\n\t\t\t\t\tpreviousTop = label.y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next label according to `index`.\r\n\t *\r\n\t * @param index      Current index\r\n\t * @param dataItems  Data items\r\n\t * @return Label element\r\n\t */\r\n\tprotected getNextLabel(index: number, dataItems: this[\"_dataItem\"][]): this[\"_label\"] {\r\n\t\tif (dataItems.length >= index) {\r\n\t\t\tlet nextDataItem: this[\"_dataItem\"] = dataItems[index];\r\n\t\t\tif (nextDataItem) {\r\n\t\t\t\tif (nextDataItem.label) {\r\n\t\t\t\t\tif (nextDataItem.visible) {\r\n\t\t\t\t\t\treturn nextDataItem.label;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @param value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * A [[PatternSet]] to use when creating patterned fills for slices.\r\n\t *\r\n\t * @since 4.7.5\r\n\t * @param value  Pattern set\r\n\t */\r\n\tpublic set patterns(value: PatternSet) {\r\n\t\tthis.setPropertyValue(\"patterns\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern set\r\n\t */\r\n\tpublic get patterns(): PatternSet {\r\n\t\treturn this.getPropertyValue(\"patterns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker    Container\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic createLegendMarker(marker: Container, dataItem?: this[\"_dataItem\"]): void {\r\n\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\tlet slice: this[\"_slice\"] = dataItem.slice;\r\n\r\n\t\t\tchild.defaultState.properties.fill = slice.fill;\r\n\t\t\tchild.defaultState.properties.stroke = slice.stroke;\r\n\t\t\tchild.defaultState.properties.fillOpacity = slice.fillOpacity;\r\n\t\t\tchild.defaultState.properties.strokeOpacity = slice.strokeOpacity;\r\n\r\n\t\t\tchild.fill = slice.fill;\r\n\t\t\tchild.stroke = slice.stroke;\r\n\t\t\tchild.fillOpacity = slice.fillOpacity;\r\n\t\t\tchild.strokeOpacity = slice.strokeOpacity;\r\n\r\n\t\t\tif (child.fill == undefined) {\r\n\t\t\t\tchild.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\t\tlegendDataItem.color = slice.fill;\r\n\t\t\tlegendDataItem.colorOrig = slice.fill;\r\n\r\n\t\t\tchild.addDisposer(slice.events.on(\"propertychanged\", (ev) => {\r\n\t\t\t\tif (ev.property == \"fill\") {\r\n\r\n\t\t\t\t\tchild.__disabled = false;\r\n\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.fill = slice.fill;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.fill = slice.fill;\r\n\t\t\t\t\tlegendDataItem.color = slice.fill;\r\n\t\t\t\t\tlegendDataItem.colorOrig = slice.fill;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (ev.property == \"stroke\") {\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.stroke = slice.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.stroke = slice.stroke;\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullets when slice's size changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceScale(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tlet slice: this[\"_slice\"] = event.target;\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\tif(dataItem && dataItem.bullets){\r\n\t\t\t$iter.each(dataItem.bullets.iterator(), (a) => {\r\n\t\t\t\tlet value = a[1];\r\n\t\t\t\tthis.positionBullet(value);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[PercentSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.slices.template.copyFrom(source.slices.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t\tthis.colors = source.colors.clone();\r\n\t}\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * This will ensure that labels never overlap with each other.\r\n\t *\r\n\t * Arranging labels into columns makes them more readble, and better user\r\n\t * experience.\r\n\t *\r\n\t * If set to `false` labels will be positioned at `label.radius` distance,\r\n\t * and may, in some cases, overlap.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Align labels?\r\n\t */\r\n\tpublic set alignLabels(value: boolean) {\r\n\t\tthis.setAlignLabels(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Align labels?\r\n\t */\r\n\tpublic get alignLabels(): boolean {\r\n\t\treturn this.getPropertyValue(\"alignLabels\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setAlignLabels(value: boolean) {\r\n\t\tthis.setPropertyValue(\"alignLabels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` the chart will not show slices with zero values.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.7.9\r\n\t * @param  value  Ignore zero values\r\n\t */\r\n\tpublic set ignoreZeroValues(value: boolean) {\r\n\t\tthis.setPropertyValue(\"ignoreZeroValues\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ignore zero values\r\n\t */\r\n\tpublic get ignoreZeroValues(): boolean {\r\n\t\treturn this.getPropertyValue(\"ignoreZeroValues\");\r\n\t}\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tif (dataItem) {\r\n\t\t\tlet legendDataItem = dataItem.legendDataItem;\r\n\t\t\tlet legendSettings = dataItem.legendSettings;\r\n\r\n\t\t\tif (legendDataItem && legendSettings) {\r\n\r\n\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\tlegendDataItem.label.text = legendSettings.labelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\tlegendDataItem.label.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\tlegendDataItem.valueLabel.text = legendSettings.valueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\tlegendDataItem.valueLabel.text = legendSettings.itemValueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PercentSeries\"] = PercentSeries;\r\nregistry.registeredClasses[\"PercentSeriesDataItem\"] = PercentSeriesDataItem;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable labels and ticks.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof PercentSeries) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\r\n\t\t\tlet labelState = target.labels.template.states.create(stateId);\r\n\t\t\tlabelState.properties.disabled = true;\r\n\r\n\t\t\tlet tickState = target.ticks.template.states.create(stateId);\r\n\t\t\ttickState.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n"]},"metadata":{},"sourceType":"module"}