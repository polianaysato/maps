{"ast":null,"code":"/**\r\n * Functionality related to inertia\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../Base\";\nimport { getInteraction } from \"./Interaction\";\nimport { AnimationDisposer } from \"../utils/Animation\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * A point of inertia is to simulate gradually drecreasing motion even after\r\n * actual interaction by user, that caused it, has already ended.\r\n *\r\n * [[Inertia]] object will continue triggering the same [[Sprite]] handlers\r\n * as if the interaction was still happening, gradually reducing\r\n * shift/angle/scale values until full stop.\r\n *\r\n * Basically, from the target element's point of view, while inertia is\r\n * playing, it is still being interacted with by user, albeit with a\r\n * decreasing speed.\r\n */\n\nvar Inertia =\n/** @class */\nfunction (_super) {\n  __extends(Inertia, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Inertia(interaction, type, point, startPoint) {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * List of animations currently playing.\r\n     */\n\n\n    _this.animations = [];\n    _this.className = \"Inertia\";\n    _this.interaction = interaction;\n    _this.type = type;\n    _this.point = point;\n    _this.startPoint = startPoint; // Make animations disposable\n\n    _this._disposers.push(new AnimationDisposer(_this.animations));\n\n    return _this;\n  }\n\n  Object.defineProperty(Inertia.prototype, \"x\", {\n    /**\r\n     * Returns current X coordinate.\r\n     *\r\n     * @return X\r\n     */\n    get: function get() {\n      return this.point.x;\n    },\n\n    /**\r\n     * Sets current X coordinate.\r\n     *\r\n     * Will trigger \"drag\" event for the target element.\r\n     *\r\n     * @param value X\r\n     */\n    set: function set(value) {\n      if ($type.isNumber(value)) {\n        this.point.x = value;\n        this.handleMove();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Inertia.prototype, \"y\", {\n    /**\r\n     * Returns current Y coordinate.\r\n     *\r\n     * @return Y\r\n     */\n    get: function get() {\n      return this.point.y;\n    },\n\n    /**\r\n     * Sets current Y coordinate.\r\n     *\r\n     * Will trigger \"drag\" event for the target element.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function set(value) {\n      if ($type.isNumber(value)) {\n        this.point.y = value;\n        this.handleMove();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Simulates dragging of element.\r\n   */\n\n  Inertia.prototype.handleMove = function () {\n    // Prepare {InteractionEvent} object\n    if (this.interaction.events.isEnabled(\"drag\")) {\n      var imev = {\n        type: \"drag\",\n        target: this.interaction,\n        shift: {\n          x: this.x - this.startPoint.x,\n          y: this.y - this.startPoint.y\n        },\n        startPoint: this.startPoint,\n        point: {\n          x: this.x,\n          y: this.y\n        },\n        touch: false\n      }; // Call handler\n\n      this.interaction.events.dispatchImmediately(\"drag\", imev);\n    }\n  };\n  /**\r\n   * Finishes up the inertia animation. (removes reference to this animation\r\n   * object)\r\n   */\n\n\n  Inertia.prototype.done = function () {\n    // Remove inertia animation from the object\n    this.interaction.inertias.removeKey(this.type); // Move ended\n\n    if (this.type === \"move\") {\n      getInteraction().processDragStop(this.interaction);\n    } // Destroy\n\n\n    this.dispose();\n  };\n\n  return Inertia;\n}(BaseObject);\n\nexport { Inertia };","map":{"version":3,"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAASA,UAAT,QAA2B,SAA3B;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,SAAiCC,iBAAjC,QAA0D,oBAA1D;AAGA,OAAO,KAAKC,KAAZ,MAAuB,eAAvB;AAOA;;;;;;;;;;;;;AAYA;AAAA;AAAA;AAA6BC;AA4B5B;;;;;AAGA,mBAAYC,WAAZ,EAA4CC,IAA5C,EAAgEC,KAAhE,EAA+EC,UAA/E,EAAiG;AAAjG,gBAEC;AACAC,yBAAO,IAHR;AARA;;;;;AAGOC,uBAA+B,EAA/B;AASNA,SAAI,CAACC,SAAL,GAAiB,SAAjB;AAEAD,SAAI,CAACL,WAAL,GAAmBA,WAAnB;AACAK,SAAI,CAACJ,IAAL,GAAYA,IAAZ;AACAI,SAAI,CAACH,KAAL,GAAaA,KAAb;AACAG,SAAI,CAACF,UAAL,GAAkBA,UAAlB,CATgG,CAWhG;;AACAE,SAAI,CAACE,UAAL,CAAgBC,IAAhB,CAAqB,IAAIX,iBAAJ,CAAsBQ,KAAI,CAACI,UAA3B,CAArB;;;AAEA;;AASDC,wBAAWC,iBAAX,EAAW,GAAX,EAAY;AAOZ;;;;;SAKA;AACC,aAAO,KAAKT,KAAL,CAAWU,CAAlB;AACA,KAdW;;AAPZ;;;;;;;SAOA,aAAaC,KAAb,EAA0B;AACzB,UAAIf,KAAK,CAACgB,QAAN,CAAeD,KAAf,CAAJ,EAA2B;AAC1B,aAAKX,KAAL,CAAWU,CAAX,GAAeC,KAAf;AACA,aAAKE,UAAL;AACA;AACD,KALW;oBAAA;;AAAA,GAAZ;AAuBAL,wBAAWC,iBAAX,EAAW,GAAX,EAAY;AAOZ;;;;;SAKA;AACC,aAAO,KAAKT,KAAL,CAAWc,CAAlB;AACA,KAdW;;AAPZ;;;;;;;SAOA,aAAaH,KAAb,EAA0B;AACzB,UAAIf,KAAK,CAACgB,QAAN,CAAeD,KAAf,CAAJ,EAA2B;AAC1B,aAAKX,KAAL,CAAWc,CAAX,GAAeH,KAAf;AACA,aAAKE,UAAL;AACA;AACD,KALW;oBAAA;;AAAA,GAAZ;AAgBA;;;;AAGOJ,iCAAP;AAEC;AACA,QAAI,KAAKX,WAAL,CAAiBiB,MAAjB,CAAwBC,SAAxB,CAAkC,MAAlC,CAAJ,EAA+C;AAC9C,UAAIC,IAAI,GAAiE;AACxElB,YAAI,EAAE,MADkE;AAExEmB,cAAM,EAAE,KAAKpB,WAF2D;AAGxEqB,aAAK,EAAE;AACNT,WAAC,EAAE,KAAKA,CAAL,GAAS,KAAKT,UAAL,CAAgBS,CADtB;AAENI,WAAC,EAAE,KAAKA,CAAL,GAAS,KAAKb,UAAL,CAAgBa;AAFtB,SAHiE;AAOxEb,kBAAU,EAAE,KAAKA,UAPuD;AAQxED,aAAK,EAAE;AACNU,WAAC,EAAE,KAAKA,CADF;AAENI,WAAC,EAAE,KAAKA;AAFF,SARiE;AAYxEM,aAAK,EAAE;AAZiE,OAAzE,CAD8C,CAgB9C;;AACA,WAAKtB,WAAL,CAAiBiB,MAAjB,CAAwBM,mBAAxB,CAA4C,MAA5C,EAAoDJ,IAApD;AACA;AAED,GAvBM;AAyBP;;;;;;AAIOR,2BAAP;AAEC;AACA,SAAKX,WAAL,CAAiBwB,QAAjB,CAA0BC,SAA1B,CAAoC,KAAKxB,IAAzC,EAHD,CAKC;;AACA,QAAI,KAAKA,IAAL,KAAc,MAAlB,EAA0B;AACzBL,oBAAc,GAAG8B,eAAjB,CAAiC,KAAK1B,WAAtC;AACA,KARF,CAUC;;;AACA,SAAK2B,OAAL;AAEA,GAbM;;AAeR;AA5IA,EAA6BhC,UAA7B","names":["BaseObject","getInteraction","AnimationDisposer","$type","__extends","interaction","type","point","startPoint","_super","_this","className","_disposers","push","animations","Object","Inertia","x","value","isNumber","handleMove","y","events","isEnabled","imev","target","shift","touch","dispatchImmediately","inertias","removeKey","processDragStop","dispose"],"sourceRoot":"","sources":["../../../../../src/.internal/core/interaction/Inertia.ts"],"sourcesContent":["/**\r\n * Functionality related to inertia\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { getInteraction } from \"./Interaction\";\r\nimport { InteractionObject, IInteractionObjectEvents } from \"./InteractionObject\";\r\nimport { Animation, IAnimatable, AnimationDisposer } from \"../utils/Animation\";\r\nimport { AMEvent } from \"../utils/EventDispatcher\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * Defines a list of available inertia types.\r\n */\r\nexport type InertiaTypes = \"move\" | \"resize\";\r\n\r\n/**\r\n * A point of inertia is to simulate gradually drecreasing motion even after\r\n * actual interaction by user, that caused it, has already ended.\r\n *\r\n * [[Inertia]] object will continue triggering the same [[Sprite]] handlers\r\n * as if the interaction was still happening, gradually reducing\r\n * shift/angle/scale values until full stop.\r\n *\r\n * Basically, from the target element's point of view, while inertia is\r\n * playing, it is still being interacted with by user, albeit with a\r\n * decreasing speed.\r\n */\r\nexport class Inertia extends BaseObject implements IAnimatable {\r\n\r\n\t/**\r\n\t * Holds what type of inertia it is.\r\n\t */\r\n\tpublic type: InertiaTypes;\r\n\r\n\t/**\r\n\t * An element we're performing animation on.\r\n\t */\r\n\tpublic interaction: InteractionObject;\r\n\r\n\t/**\r\n\t * Starting pointer position. The position of pointer when we \"released\"\r\n\t * the element.\r\n\t */\r\n\tpublic startPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current (simulated) pointer position.\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * List of animations currently playing.\r\n\t */\r\n\tpublic animations: Array<Animation> = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor(interaction: InteractionObject, type: InertiaTypes, point: IPoint, startPoint: IPoint) {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Inertia\";\r\n\r\n\t\tthis.interaction = interaction;\r\n\t\tthis.type = type;\r\n\t\tthis.point = point;\r\n\t\tthis.startPoint = startPoint;\r\n\r\n\t\t// Make animations disposable\r\n\t\tthis._disposers.push(new AnimationDisposer(this.animations));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current X coordinate.\r\n\t *\r\n\t * Will trigger \"drag\" event for the target element.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set x(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tthis.point.x = value;\r\n\t\t\tthis.handleMove();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current X coordinate.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tpublic get x(): number {\r\n\t\treturn this.point.x;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current Y coordinate.\r\n\t *\r\n\t * Will trigger \"drag\" event for the target element.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set y(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tthis.point.y = value;\r\n\t\t\tthis.handleMove();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current Y coordinate.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tpublic get y(): number {\r\n\t\treturn this.point.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates dragging of element.\r\n\t */\r\n\tpublic handleMove() {\r\n\r\n\t\t// Prepare {InteractionEvent} object\r\n\t\tif (this.interaction.events.isEnabled(\"drag\")) {\r\n\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"drag\"] = {\r\n\t\t\t\ttype: \"drag\",\r\n\t\t\t\ttarget: this.interaction,\r\n\t\t\t\tshift: {\r\n\t\t\t\t\tx: this.x - this.startPoint.x,\r\n\t\t\t\t\ty: this.y - this.startPoint.y\r\n\t\t\t\t},\r\n\t\t\t\tstartPoint: this.startPoint,\r\n\t\t\t\tpoint: {\r\n\t\t\t\t\tx: this.x,\r\n\t\t\t\t\ty: this.y\r\n\t\t\t\t},\r\n\t\t\t\ttouch: false\r\n\t\t\t};\r\n\r\n\t\t\t// Call handler\r\n\t\t\tthis.interaction.events.dispatchImmediately(\"drag\", imev);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Finishes up the inertia animation. (removes reference to this animation\r\n\t * object)\r\n\t */\r\n\tpublic done() {\r\n\r\n\t\t// Remove inertia animation from the object\r\n\t\tthis.interaction.inertias.removeKey(this.type);\r\n\r\n\t\t// Move ended\r\n\t\tif (this.type === \"move\") {\r\n\t\t\tgetInteraction().processDragStop(this.interaction);\r\n\t\t}\r\n\r\n\t\t// Destroy\r\n\t\tthis.dispose();\r\n\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}