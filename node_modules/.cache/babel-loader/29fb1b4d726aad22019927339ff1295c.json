{"ast":null,"code":"/**\r\n * Duration formatting functionality.\r\n */\nimport { __extends } from \"tslib\";\nimport { Language } from \"../utils/Language\";\nimport { BaseObject } from \"../Base\";\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\nimport { registry } from \"../Registry\";\nimport * as $strings from \"../utils/Strings\";\nimport * as $object from \"../utils/Object\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $type from \"../utils/Type\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * DurationFormatter class. Formats numbers as durations.\r\n *\r\n * `1000` as `16:40`\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n */\n\nvar DurationFormatter =\n/** @class */\nfunction (_super) {\n  __extends(DurationFormatter, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function DurationFormatter() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A base value for negative numbers. Will treat all numbers below this value\r\n     * as negative numbers.\r\n     */\n\n\n    _this._negativeBase = 0;\n    /**\r\n     * A base unit to consider values are in.\r\n     *\r\n     * @default \"s\"\r\n     */\n\n    _this._baseUnit = \"second\";\n    /**\r\n     * Output format to produce. If the format calls for applying color to the\r\n     * formatted value, this setting will determine what markup to use: SVG or\r\n     * HTML.\r\n     *\r\n     * Available options: svg, html.\r\n     *\r\n     * @default \"svg\"\r\n     */\n\n    _this._outputFormat = \"svg\";\n    /**\r\n     * How many milliseconds each unit represents.\r\n     */\n\n    _this._unitValues = {\n      \"millisecond\": 1,\n      \"second\": 1000,\n      \"minute\": 60000,\n      \"hour\": 3600000,\n      \"day\": 86400000,\n      \"week\": 604800000,\n      \"month\": 2592000000,\n      \"year\": 31536000000\n    };\n    /**\r\n     * Collection of aliases for units.\r\n     */\n\n    _this._unitAliases = {\n      \"Y\": \"y\",\n      \"D\": \"d\",\n      \"H\": \"h\",\n      \"K\": \"h\",\n      \"k\": \"h\",\n      \"n\": \"S\"\n    };\n    _this.className = \"DurationFormatter\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Formats the number according as duration.\r\n   *\r\n   * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n   * 16 minutes and 40 seconds.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n   * @param value   Value to format\r\n   * @param format  Format to apply\r\n   * @param base    Override base unit\r\n   * @return Formatted number\r\n   */\n\n\n  DurationFormatter.prototype.format = function (value, format, base) {\n    // no language?\n    if (!this.language) {\n      if (this.sprite) {\n        this.language = this.sprite.language;\n      } else {\n        this.language = new Language();\n      }\n    } // no base unit?\n\n\n    var baseUnit = base || this._baseUnit; // no format passed in or empty\n\n    if (typeof format === \"undefined\" || format === \"\") {\n      if ($type.hasValue(this.durationFormat)) {\n        format = this.durationFormat;\n      } else {\n        format = this.getFormat($type.toNumber(value), null, baseUnit);\n      }\n    } // Clean format\n\n\n    format = $utils.cleanFormat(format); // get format info (it will also deal with parser caching)\n\n    var info = this.parseFormat(format, baseUnit); // cast to number just in case\n    // TODO: maybe use better casting\n\n    var source = Number(value); // format and replace the number\n\n    var details;\n\n    if (source > this._negativeBase) {\n      details = info.positive;\n    } else if (source < this._negativeBase) {\n      details = info.negative;\n    } else {\n      details = info.zero;\n    } // Format\n\n\n    var formatted = this.applyFormat(source, details); // Apply color?\n\n    if (details.color !== \"\") {\n      if (this._outputFormat === \"svg\") {\n        formatted = \"<tspan fill='\" + details.color + \"'>\" + formatted + \"</tspan>\";\n      } else if (this._outputFormat === \"html\") {\n        formatted = \"<span style='color: \" + details.color + \";'>\" + formatted + \"</span>\";\n      }\n    }\n\n    return formatted;\n  };\n  /**\r\n   * Parses supplied format into structured object which can be used to format\r\n   * the number.\r\n   *\r\n   * @param format  Format string, i.e. \"#,###.00\"\r\n   * @param base    Override base unit\r\n   * @return Parsed information\r\n   */\n\n\n  DurationFormatter.prototype.parseFormat = function (format, base) {\n    var _this = this; // Check cache\n\n\n    var cached = this.getCache(format);\n\n    if ($type.hasValue(cached)) {\n      return cached;\n    } // no base unit?\n\n\n    var baseUnit = base || this._baseUnit; // Initialize duration parsing info\n\n    var info = {\n      \"positive\": {\n        \"color\": \"\",\n        \"template\": \"\",\n        \"parts\": [],\n        \"source\": \"\",\n        \"baseUnit\": baseUnit,\n        \"parsed\": false,\n        \"absolute\": false\n      },\n      \"negative\": {\n        \"color\": \"\",\n        \"template\": \"\",\n        \"parts\": [],\n        \"source\": \"\",\n        \"baseUnit\": baseUnit,\n        \"parsed\": false,\n        \"absolute\": false\n      },\n      \"zero\": {\n        \"color\": \"\",\n        \"template\": \"\",\n        \"parts\": [],\n        \"source\": \"\",\n        \"baseUnit\": baseUnit,\n        \"parsed\": false,\n        \"absolute\": false\n      }\n    }; // Escape double vertical bars (that mean display one vertical bar)\n\n    format = format.replace(\"||\", $strings.PLACEHOLDER2); // Split it up and deal with different formats\n\n    var parts = format.split(\"|\");\n    info.positive.source = parts[0];\n\n    if (typeof parts[2] === \"undefined\") {\n      info.zero = info.positive;\n    } else {\n      info.zero.source = parts[2];\n    }\n\n    if (typeof parts[1] === \"undefined\") {\n      info.negative = info.positive;\n    } else {\n      info.negative.source = parts[1];\n    } // Parse each\n\n\n    $object.each(info, function (part, item) {\n      // Already parsed\n      if (item.parsed) {\n        return;\n      } // Check cached\n\n\n      if (typeof _this.getCache(item.source) !== \"undefined\") {\n        info[part] = _this.getCache(item.source);\n        return;\n      } // Begin parsing\n\n\n      var partFormat = item.source; // Check for [] directives\n\n      var dirs = [];\n      dirs = item.source.match(/^\\[([^\\]]*)\\]/);\n\n      if (dirs && dirs.length && dirs[0] !== \"\") {\n        partFormat = item.source.substr(dirs[0].length);\n        item.color = dirs[1];\n      } // Let TextFormatter split into chunks\n\n\n      var chunks = getTextFormatter().chunk(partFormat, true);\n\n      for (var i = 0; i < chunks.length; i++) {\n        var chunk = chunks[i]; // replace back double vertical bar\n\n        chunk.text = chunk.text.replace($strings.PLACEHOLDER2, \"|\");\n\n        if (chunk.type === \"value\") {\n          // Just \"Duration\"?\n          // if (chunk.text.toLowerCase() === \"duration\") {\n          // \tchunk.text = durationFormat;\n          // }\n          // Check for \"a\" (absolute) modifier\n          if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\n            item.absolute = true;\n            chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\n          } // Find all possible parts\n\n\n          var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\n\n          if (matches) {\n            // Populate template\n            for (var x = 0; x < matches.length; x++) {\n              // Is it an alias?\n              if (!$type.hasValue(matches[x])) {\n                matches[x] = _this._unitAliases[matches[x]];\n              }\n\n              item.parts.push(matches[x]);\n              chunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\n            }\n          }\n        } // Apply to template\n\n\n        item.template += chunk.text;\n      } // Apply style formatting\n      //item.template = getTextFormatter().format(item.template, this.outputFormat);\n      // Save cache\n\n\n      _this.setCache(item.source, item); // Mark this as parsed\n\n\n      item.parsed = true;\n    }); // Save cache (the whole thing)\n\n    this.setCache(format, info);\n    return info;\n  };\n  /**\r\n   * Applies parsed format to a numeric value.\r\n   *\r\n   * @param value    Value\r\n   * @param details  Parsed format as returned by {parseFormat}\r\n   * @return Formatted duration\r\n   */\n\n\n  DurationFormatter.prototype.applyFormat = function (value, details) {\n    // Use absolute values\n    var negative = !details.absolute && value < this._negativeBase;\n    value = Math.abs(value); // Recalculate to milliseconds\n\n    var tstamp = this.toTimeStamp(value, details.baseUnit); // Init return value\n\n    var res = details.template; // Iterate through duration parts\n\n    for (var i = 0, len = details.parts.length; i < len; i++) {\n      // Gather the part\n      var part = details.parts[i];\n      var unit = this.toTimeUnit(part.substr(0, 1));\n      var digits = part.length; // Calculate current unit value\n\n      var ints = Math.floor(tstamp / this._unitValues[unit]);\n      res = res.replace($strings.PLACEHOLDER, $utils.padString(ints, digits, \"0\")); // Reduce timestamp\n\n      tstamp -= ints * this._unitValues[unit];\n    } // Reapply negative sign\n\n\n    if (negative) {\n      res = \"-\" + res;\n    }\n\n    return res;\n  };\n  /**\r\n   * Converts numeric value to timestamp in milliseconds.\r\n   *\r\n   * @param value     A source value\r\n   * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n   * @return Value representation as a timestamp in milliseconds\r\n   */\n\n\n  DurationFormatter.prototype.toTimeStamp = function (value, baseUnit) {\n    return value * this._unitValues[baseUnit];\n  };\n\n  DurationFormatter.prototype.toTimeUnit = function (code) {\n    switch (code) {\n      case \"S\":\n        return \"millisecond\";\n\n      case \"s\":\n        return \"second\";\n\n      case \"m\":\n        return \"minute\";\n\n      case \"h\":\n        return \"hour\";\n\n      case \"d\":\n        return \"day\";\n\n      case \"w\":\n        return \"week\";\n\n      case \"M\":\n        return \"month\";\n\n      case \"y\":\n        return \"year\";\n    }\n\n    ;\n  };\n  /**\r\n   * Invalidates the parent [[Sprite]] object.\r\n   */\n\n\n  DurationFormatter.prototype.invalidateSprite = function () {\n    if (this.sprite) {\n      this.sprite.invalidate();\n    }\n  };\n\n  Object.defineProperty(DurationFormatter.prototype, \"baseUnit\", {\n    /**\r\n     * @return Base unit\r\n     */\n    get: function () {\n      return this._baseUnit;\n    },\n\n    /**\r\n     * Base unit the values are in.\r\n     *\r\n     * A base unit will be used to recalculate the numeric value to millisecond\r\n     * timestamps.\r\n     *\r\n     * Available options:\r\n     *\r\n     * * \"millisecond\"\r\n     * * \"second\"\r\n     * * \"minute\"\r\n     * * \"hour\"\r\n     * * \"day\"\r\n     * * \"week\"\r\n     * * \"month\"\r\n     * * \"year\"\r\n     *\r\n     * @default \"s\"\r\n     * @param baseUnit  A base unit\r\n     */\n    set: function (baseUnit) {\n      this._baseUnit = baseUnit;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"outputFormat\", {\n    /**\r\n     * Getter for output format.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Output format\r\n     */\n    get: function () {\n      return this._outputFormat;\n    },\n\n    /**\r\n     * Setter for output format: \"svg\" or \"html.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Output format\r\n     */\n    set: function (outputFormat) {\n      this._outputFormat = outputFormat.toLowerCase();\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns appropriate default format for the value.\r\n   *\r\n   * If `maxValue` is sepcified, it will use that value to determine the time\r\n   * unit for the format.\r\n   *\r\n   * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n   * will get `\"10\"`.\r\n   *\r\n   * However, you might want it to be formatted in the context of bigger scale,\r\n   * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n   * values, including small ones will use format with minutes, e.g.:\r\n   * `00:10`, `00:50`, `12: 30`, etc.\r\n   *\r\n   * @param value     Value to format\r\n   * @param maxValue  Maximum value to be used to determine format\r\n   * @param baseUnit  Base unit of the value\r\n   * @return Format\r\n   */\n\n  DurationFormatter.prototype.getFormat = function (value, maxValue, baseUnit) {\n    // Is format override set?\n    if ($type.hasValue(this.durationFormat)) {\n      return this.durationFormat;\n    } // Get base unit\n\n\n    if (!baseUnit) {\n      baseUnit = this.baseUnit;\n    }\n\n    if ($type.hasValue(maxValue) && value != maxValue) {\n      value = Math.abs(value);\n      maxValue = Math.abs(maxValue);\n      var maxUnit = this.getValueUnit($math.max(value, maxValue), baseUnit); //let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\n      //console.log(maxUnit, diffUnit);\n\n      return this.durationFormats[baseUnit][maxUnit];\n    } else {\n      var unit = this.getValueUnit(value, baseUnit);\n      return this.durationFormats[baseUnit][unit];\n    }\n  };\n  /**\r\n   * Returns value's closest denominator time unit, e.g 100 seconds is\r\n   * `\"minute\"`, while 59 seconds would still be `second`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Denominator\r\n   */\n\n\n  DurationFormatter.prototype.getValueUnit = function (value, baseUnit) {\n    // Get base unit\n    if (!baseUnit) {\n      baseUnit = this.baseUnit;\n    } // Convert to milliseconds\n\n\n    var currentUnit;\n    var ms = this.getMilliseconds(value, baseUnit);\n    $object.eachContinue(this._unitValues, function (key, val) {\n      if (key == baseUnit || currentUnit) {\n        var num = ms / val;\n\n        if (num <= 1) {\n          if (!currentUnit) {\n            currentUnit = key;\n          }\n\n          return false;\n        }\n\n        currentUnit = key;\n      }\n\n      return true;\n    });\n    return currentUnit;\n  };\n  /**\r\n   * Converts value to milliseconds according to `baseUnit`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Value in milliseconds\r\n   */\n\n\n  DurationFormatter.prototype.getMilliseconds = function (value, baseUnit) {\n    // Get base unit\n    if (!baseUnit) {\n      baseUnit = this.baseUnit;\n    }\n\n    return value * this._unitValues[baseUnit];\n  };\n\n  Object.defineProperty(DurationFormatter.prototype, \"durationFormat\", {\n    /**\r\n     * @return Format\r\n     */\n    get: function () {\n      return this._durationFormat;\n    },\n\n    /**\r\n     * If set, this format will be used instead of the one determined dynamically\r\n     * based on the basedUnit and range of values.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Available fomatting codes\r\n     * @param value  Format\r\n     */\n    set: function (value) {\n      if (this._durationFormat != value) {\n        this._durationFormat = value;\n        this.invalidateSprite();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"durationFormats\", {\n    /**\r\n     * @return Formats\r\n     */\n    get: function () {\n      if (!this._durationFormats) {\n        this._durationFormats = {\n          \"millisecond\": {\n            \"millisecond\": this.language.translate(\"_duration_millisecond\"),\n            \"second\": this.language.translate(\"_duration_millisecond_second\"),\n            \"minute\": this.language.translate(\"_duration_millisecond_minute\"),\n            \"hour\": this.language.translate(\"_duration_millisecond_hour\"),\n            \"day\": this.language.translate(\"_duration_millisecond_day\"),\n            \"week\": this.language.translate(\"_duration_millisecond_week\"),\n            \"month\": this.language.translate(\"_duration_millisecond_month\"),\n            \"year\": this.language.translate(\"_duration_millisecond_year\")\n          },\n          \"second\": {\n            \"second\": this.language.translate(\"_duration_second\"),\n            \"minute\": this.language.translate(\"_duration_second_minute\"),\n            \"hour\": this.language.translate(\"_duration_second_hour\"),\n            \"day\": this.language.translate(\"_duration_second_day\"),\n            \"week\": this.language.translate(\"_duration_second_week\"),\n            \"month\": this.language.translate(\"_duration_second_month\"),\n            \"year\": this.language.translate(\"_duration_second_year\")\n          },\n          \"minute\": {\n            \"minute\": this.language.translate(\"_duration_minute\"),\n            \"hour\": this.language.translate(\"_duration_minute_hour\"),\n            \"day\": this.language.translate(\"_duration_minute_day\"),\n            \"week\": this.language.translate(\"_duration_minute_week\"),\n            \"month\": this.language.translate(\"_duration_minute_month\"),\n            \"year\": this.language.translate(\"_duration_minute_year\")\n          },\n          \"hour\": {\n            \"hour\": this.language.translate(\"_duration_hour\"),\n            \"day\": this.language.translate(\"_duration_hour_day\"),\n            \"week\": this.language.translate(\"_duration_hour_week\"),\n            \"month\": this.language.translate(\"_duration_hour_month\"),\n            \"year\": this.language.translate(\"_duration_hour_year\")\n          },\n          \"day\": {\n            \"day\": this.language.translate(\"_duration_day\"),\n            \"week\": this.language.translate(\"_duration_day_week\"),\n            \"month\": this.language.translate(\"_duration_day_month\"),\n            \"year\": this.language.translate(\"_duration_day_year\")\n          },\n          \"week\": {\n            \"week\": this.language.translate(\"_duration_week\"),\n            \"month\": this.language.translate(\"_duration_week_month\"),\n            \"year\": this.language.translate(\"_duration_week_year\")\n          },\n          \"month\": {\n            \"month\": this.language.translate(\"_duration_month\"),\n            \"year\": this.language.translate(\"_duration_month_year\")\n          },\n          \"year\": {\n            \"year\": this.language.translate(\"_duration_year\")\n          }\n        };\n      }\n\n      return this._durationFormats;\n    },\n\n    /**\r\n     * Duration formats for various combination of base units.\r\n     *\r\n     * @param value  Formats\r\n     */\n    set: function (value) {\n      this._durationFormats = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DurationFormatter;\n}(BaseObject);\n\nexport { DurationFormatter };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"DurationFormatter\"] = DurationFormatter;","map":{"version":3,"mappings":"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","names":["Language","BaseObject","getTextFormatter","registry","$strings","$object","$utils","$type","$math","__extends","_super","_this","className","applyTheme","DurationFormatter","value","format","base","language","sprite","baseUnit","_baseUnit","hasValue","durationFormat","getFormat","toNumber","cleanFormat","info","parseFormat","source","Number","details","_negativeBase","positive","negative","zero","formatted","applyFormat","color","_outputFormat","cached","getCache","replace","PLACEHOLDER2","parts","split","each","part","item","parsed","partFormat","dirs","match","length","substr","chunks","chunk","i","text","type","absolute","matches","x","_unitAliases","push","PLACEHOLDER","template","setCache","Math","abs","tstamp","toTimeStamp","res","len","unit","toTimeUnit","digits","ints","floor","_unitValues","padString","code","invalidate","Object","invalidateSprite","outputFormat","toLowerCase","maxValue","maxUnit","getValueUnit","max","durationFormats","currentUnit","ms","getMilliseconds","eachContinue","key","val","num","_durationFormat","_durationFormats","translate","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/core/formatters/DurationFormatter.ts"],"sourcesContent":["/**\r\n * Duration formatting functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { BaseObject } from \"../Base\";\r\nimport { ITextChunk, getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport { TimeUnit } from \"../defs/TimeUnit\";\r\nimport { Optional } from \"../utils/Type\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $math from \"../utils/Math\";\r\n\r\n/**\r\n * DurationFormatter class. Formats numbers as durations.\r\n *\r\n * `1000` as `16:40`\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n */\r\nexport class DurationFormatter extends BaseObject {\r\n\r\n\t/**\r\n\t * If set will force this format to be used, regardless of the scale.\r\n\t */\r\n\tprotected _durationFormat: string;\r\n\r\n\t/**\r\n\t * Holds duration formats for various possible scenarios.\r\n\t */\r\n\tprotected _durationFormats: Partial<Record<TimeUnit, Partial<Record<TimeUnit, string>>>>;\r\n\r\n\t/**\r\n\t * A base value for negative numbers. Will treat all numbers below this value\r\n\t * as negative numbers.\r\n\t */\r\n\tprotected _negativeBase: number = 0;\r\n\r\n\t/**\r\n\t * A base unit to consider values are in.\r\n\t *\r\n\t * @default \"s\"\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * Output format to produce. If the format calls for applying color to the\r\n\t * formatted value, this setting will determine what markup to use: SVG or\r\n\t * HTML.\r\n\t *\r\n\t * Available options: svg, html.\r\n\t *\r\n\t * @default \"svg\"\r\n\t */\r\n\tprotected _outputFormat: string = \"svg\";\r\n\r\n\r\n\t/**\r\n\t * How many milliseconds each unit represents.\r\n\t */\r\n\tprotected _unitValues: Record<TimeUnit, number> = {\r\n\t\t\"millisecond\": 1,\r\n\t\t\"second\": 1000,\r\n\t\t\"minute\": 60000,\r\n\t\t\"hour\": 3600000,\r\n\t\t\"day\": 86400000,\r\n\t\t\"week\": 604800000,\r\n\t\t\"month\": 2592000000,\r\n\t\t\"year\": 31536000000,\r\n\t};\r\n\r\n\t/**\r\n\t * Collection of aliases for units.\r\n\t */\r\n\tprotected _unitAliases: { [index: string]: string } = {\r\n\t\t\"Y\": \"y\",\r\n\t\t\"D\": \"d\",\r\n\t\t\"H\": \"h\",\r\n\t\t\"K\": \"h\",\r\n\t\t\"k\": \"h\",\r\n\t\t\"n\": \"S\"\r\n\t};\r\n\r\n\t/**\r\n\t * Holds reference to parent [[Sprite]] object.\r\n\t */\r\n\tpublic sprite: $type.Optional<Sprite>;\r\n\r\n\t/**\r\n\t * Holds reference to [[Language]] object.\r\n\t */\r\n\tpublic language: $type.Optional<Language>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationFormatter\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the number according as duration.\r\n\t *\r\n\t * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n\t * 16 minutes and 40 seconds.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n\t * @param value   Value to format\r\n\t * @param format  Format to apply\r\n\t * @param base    Override base unit\r\n\t * @return Formatted number\r\n\t */\r\n\tpublic format(value: number | string, format?: string, base?: TimeUnit): string {\r\n\r\n\t\t// no language?\r\n\t\tif (!this.language) {\r\n\t\t\tif (this.sprite) {\r\n\t\t\t\tthis.language = this.sprite.language;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.language = new Language;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// no base unit?\r\n\t\tlet baseUnit = base || this._baseUnit;\r\n\r\n\t\t// no format passed in or empty\r\n\t\tif (typeof format === \"undefined\" || format === \"\") {\r\n\t\t\tif ($type.hasValue(this.durationFormat)) {\r\n\t\t\t\tformat = this.durationFormat;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tformat = this.getFormat($type.toNumber(value), null, baseUnit);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Clean format\r\n\t\tformat = $utils.cleanFormat(format);\r\n\r\n\t\t// get format info (it will also deal with parser caching)\r\n\t\tlet info = this.parseFormat(format, baseUnit);\r\n\r\n\t\t// cast to number just in case\r\n\t\t// TODO: maybe use better casting\r\n\t\tlet source: number = Number(value);\r\n\r\n\t\t// format and replace the number\r\n\t\tlet details;\r\n\t\tif (source > this._negativeBase) {\r\n\t\t\tdetails = info.positive;\r\n\t\t}\r\n\t\telse if (source < this._negativeBase) {\r\n\t\t\tdetails = info.negative;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdetails = info.zero;\r\n\t\t}\r\n\r\n\r\n\t\t// Format\r\n\t\tlet formatted = this.applyFormat(source, details);\r\n\r\n\t\t// Apply color?\r\n\t\tif (details.color !== \"\") {\r\n\t\t\tif (this._outputFormat === \"svg\") {\r\n\t\t\t\tformatted = \"<tspan fill='\" + details.color + \"'>\" + formatted + \"</tspan>\";\r\n\t\t\t}\r\n\t\t\telse if (this._outputFormat === \"html\") {\r\n\t\t\t\tformatted = \"<span style='color: \" + details.color + \";'>\" + formatted + \"</span>\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn formatted;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses supplied format into structured object which can be used to format\r\n\t * the number.\r\n\t *\r\n\t * @param format  Format string, i.e. \"#,###.00\"\r\n\t * @param base    Override base unit\r\n\t * @return Parsed information\r\n\t */\r\n\tprotected parseFormat(format: string, base?: TimeUnit): any {\r\n\r\n\t\t// Check cache\r\n\t\tlet cached = this.getCache(format);\r\n\t\tif ($type.hasValue(cached)) {\r\n\t\t\treturn cached;\r\n\t\t}\r\n\r\n\t\t// no base unit?\r\n\t\tlet baseUnit = base || this._baseUnit;\r\n\r\n\t\t// Initialize duration parsing info\r\n\t\tlet info = {\r\n\t\t\t\"positive\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t},\r\n\t\t\t\"negative\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t},\r\n\t\t\t\"zero\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Escape double vertical bars (that mean display one vertical bar)\r\n\t\tformat = format.replace(\"||\", $strings.PLACEHOLDER2);\r\n\r\n\t\t// Split it up and deal with different formats\r\n\t\tlet parts = format.split(\"|\");\r\n\t\tinfo.positive.source = parts[0];\r\n\r\n\t\tif (typeof parts[2] === \"undefined\") {\r\n\t\t\tinfo.zero = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.zero.source = parts[2];\r\n\t\t}\r\n\r\n\t\tif (typeof parts[1] === \"undefined\") {\r\n\t\t\tinfo.negative = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.negative.source = parts[1];\r\n\t\t}\r\n\r\n\t\t// Parse each\r\n\t\t$object.each(info, (part, item) => {\r\n\t\t\t// Already parsed\r\n\t\t\tif (item.parsed) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Check cached\r\n\t\t\tif (typeof this.getCache(item.source) !== \"undefined\") {\r\n\t\t\t\tinfo[part] = this.getCache(item.source);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Begin parsing\r\n\t\t\tlet partFormat: string = item.source;\r\n\r\n\t\t\t// Check for [] directives\r\n\t\t\tlet dirs: string[] | null = [];\r\n\t\t\tdirs = item.source.match(/^\\[([^\\]]*)\\]/);\r\n\t\t\tif (dirs && dirs.length && dirs[0] !== \"\") {\r\n\t\t\t\tpartFormat = item.source.substr(dirs[0].length);\r\n\t\t\t\titem.color = dirs[1];\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Let TextFormatter split into chunks\r\n\t\t\tlet chunks: ITextChunk[] = getTextFormatter().chunk(partFormat, true);\r\n\t\t\tfor (let i: number = 0; i < chunks.length; i++) {\r\n\t\t\t\tlet chunk: ITextChunk = chunks[i];\r\n\r\n\t\t\t\t// replace back double vertical bar\r\n\t\t\t\tchunk.text = chunk.text.replace($strings.PLACEHOLDER2, \"|\");\r\n\r\n\t\t\t\tif (chunk.type === \"value\") {\r\n\r\n\t\t\t\t\t// Just \"Duration\"?\r\n\t\t\t\t\t// if (chunk.text.toLowerCase() === \"duration\") {\r\n\t\t\t\t\t// \tchunk.text = durationFormat;\r\n\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t// Check for \"a\" (absolute) modifier\r\n\t\t\t\t\tif (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\r\n\t\t\t\t\t\titem.absolute = true;\r\n\t\t\t\t\t\tchunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Find all possible parts\r\n\t\t\t\t\tlet matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\r\n\r\n\t\t\t\t\tif (matches) {\r\n\t\t\t\t\t\t// Populate template\r\n\t\t\t\t\t\tfor (let x = 0; x < matches.length; x++) {\r\n\t\t\t\t\t\t\t// Is it an alias?\r\n\t\t\t\t\t\t\tif (!$type.hasValue(matches[x])) {\r\n\t\t\t\t\t\t\t\tmatches[x] = this._unitAliases[matches[x]];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\titem.parts.push(matches[x]);\r\n\t\t\t\t\t\t\tchunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply to template\r\n\t\t\t\titem.template += chunk.text;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply style formatting\r\n\t\t\t//item.template = getTextFormatter().format(item.template, this.outputFormat);\r\n\r\n\t\t\t// Save cache\r\n\t\t\tthis.setCache(item.source, item);\r\n\r\n\t\t\t// Mark this as parsed\r\n\t\t\titem.parsed = true;\r\n\t\t});\r\n\r\n\t\t// Save cache (the whole thing)\r\n\t\tthis.setCache(format, info);\r\n\r\n\t\treturn info;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies parsed format to a numeric value.\r\n\t *\r\n\t * @param value    Value\r\n\t * @param details  Parsed format as returned by {parseFormat}\r\n\t * @return Formatted duration\r\n\t */\r\n\tprotected applyFormat(value: number, details: any): string {\r\n\r\n\t\t// Use absolute values\r\n\t\tlet negative: boolean = !details.absolute && (value < this._negativeBase);\r\n\t\tvalue = Math.abs(value);\r\n\r\n\t\t// Recalculate to milliseconds\r\n\t\tlet tstamp: number = this.toTimeStamp(value, details.baseUnit);\r\n\r\n\t\t// Init return value\r\n\t\tlet res: string = details.template;\r\n\r\n\t\t// Iterate through duration parts\r\n\t\tfor (let i = 0, len = details.parts.length; i < len; i++) {\r\n\r\n\t\t\t// Gather the part\r\n\t\t\tlet part: string = details.parts[i];\r\n\t\t\tlet unit: TimeUnit = this.toTimeUnit(part.substr(0, 1));\r\n\t\t\tlet digits: number = part.length;\r\n\r\n\t\t\t// Calculate current unit value\r\n\t\t\tlet ints: number = Math.floor(tstamp / this._unitValues[unit]);\r\n\t\t\tres = res.replace($strings.PLACEHOLDER, $utils.padString(ints, digits, \"0\"));\r\n\r\n\t\t\t// Reduce timestamp\r\n\t\t\ttstamp -= ints * this._unitValues[unit];\r\n\t\t}\r\n\r\n\t\t// Reapply negative sign\r\n\t\tif (negative) {\r\n\t\t\tres = \"-\" + res;\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts numeric value to timestamp in milliseconds.\r\n\t *\r\n\t * @param value     A source value\r\n\t * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n\t * @return Value representation as a timestamp in milliseconds\r\n\t */\r\n\tpublic toTimeStamp(value: number, baseUnit: TimeUnit): number {\r\n\t\treturn value * this._unitValues[baseUnit];\r\n\t}\r\n\r\n\tprotected toTimeUnit(code: string): Optional<TimeUnit> {\r\n\t\tswitch (code) {\r\n\t\t\tcase \"S\":\r\n\t\t\t\treturn \"millisecond\";\r\n\t\t\tcase \"s\":\r\n\t\t\t\treturn \"second\";\r\n\t\t\tcase \"m\":\r\n\t\t\t\treturn \"minute\";\r\n\t\t\tcase \"h\":\r\n\t\t\t\treturn \"hour\";\r\n\t\t\tcase \"d\":\r\n\t\t\t\treturn \"day\";\r\n\t\t\tcase \"w\":\r\n\t\t\t\treturn \"week\";\r\n\t\t\tcase \"M\":\r\n\t\t\t\treturn \"month\";\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn \"year\";\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates the parent [[Sprite]] object.\r\n\t */\r\n\tprotected invalidateSprite(): void {\r\n\t\tif (this.sprite) {\r\n\t\t\tthis.sprite.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Base unit the values are in.\r\n\t *\r\n\t * A base unit will be used to recalculate the numeric value to millisecond\r\n\t * timestamps.\r\n\t *\r\n\t * Available options:\r\n\t *\r\n\t * * \"millisecond\"\r\n\t * * \"second\"\r\n\t * * \"minute\"\r\n\t * * \"hour\"\r\n\t * * \"day\"\r\n\t * * \"week\"\r\n\t * * \"month\"\r\n\t * * \"year\"\r\n\t *\r\n\t * @default \"s\"\r\n\t * @param baseUnit  A base unit\r\n\t */\r\n\tpublic set baseUnit(baseUnit: TimeUnit) {\r\n\t\tthis._baseUnit = baseUnit;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Setter for output format: \"svg\" or \"html.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Output format\r\n\t */\r\n\tpublic set outputFormat(outputFormat: string) {\r\n\t\tthis._outputFormat = outputFormat.toLowerCase();\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * Getter for output format.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Output format\r\n\t */\r\n\tpublic get outputFormat(): string {\r\n\t\treturn this._outputFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns appropriate default format for the value.\r\n\t *\r\n\t * If `maxValue` is sepcified, it will use that value to determine the time\r\n\t * unit for the format.\r\n\t *\r\n\t * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n\t * will get `\"10\"`.\r\n\t *\r\n\t * However, you might want it to be formatted in the context of bigger scale,\r\n\t * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n\t * values, including small ones will use format with minutes, e.g.:\r\n\t * `00:10`, `00:50`, `12: 30`, etc.\r\n\t *\r\n\t * @param value     Value to format\r\n\t * @param maxValue  Maximum value to be used to determine format\r\n\t * @param baseUnit  Base unit of the value\r\n\t * @return Format\r\n\t */\r\n\tpublic getFormat(value: number, maxValue?: number, baseUnit?: TimeUnit): string {\r\n\r\n\t\t// Is format override set?\r\n\t\tif ($type.hasValue(this.durationFormat)) {\r\n\t\t\treturn this.durationFormat;\r\n\t\t}\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.baseUnit;\r\n\t\t}\r\n\r\n\t\tif ($type.hasValue(maxValue) && value != maxValue) {\r\n\t\t\tvalue = Math.abs(value);\r\n\t\t\tmaxValue = Math.abs(maxValue);\r\n\t\t\tlet maxUnit = this.getValueUnit($math.max(value, maxValue), baseUnit);\r\n\t\t\t//let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\r\n\t\t\t//console.log(maxUnit, diffUnit);\r\n\t\t\treturn this.durationFormats[baseUnit][maxUnit];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet unit = this.getValueUnit(value, baseUnit);\r\n\t\t\treturn this.durationFormats[baseUnit][unit];\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns value's closest denominator time unit, e.g 100 seconds is\r\n\t * `\"minute\"`, while 59 seconds would still be `second`.\r\n\t *\r\n\t * @param value     Source duration value\r\n\t * @param baseUnit  Base unit\r\n\t * @return Denominator\r\n\t */\r\n\tpublic getValueUnit(value: number, baseUnit?: TimeUnit): TimeUnit {\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.baseUnit;\r\n\t\t}\r\n\r\n\t\t// Convert to milliseconds\r\n\t\tlet currentUnit: TimeUnit;\r\n\t\tlet ms = this.getMilliseconds(value, baseUnit);\r\n\t\t$object.eachContinue(this._unitValues, (key, val) => {\r\n\t\t\tif (key == baseUnit || currentUnit) {\r\n\t\t\t\tlet num = ms / val;\r\n\t\t\t\tif (num <= 1) {\r\n\t\t\t\t\tif (!currentUnit) {\r\n\t\t\t\t\t\tcurrentUnit = key;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tcurrentUnit = key;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn currentUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts value to milliseconds according to `baseUnit`.\r\n\t *\r\n\t * @param value     Source duration value\r\n\t * @param baseUnit  Base unit\r\n\t * @return Value in milliseconds\r\n\t */\r\n\tpublic getMilliseconds(value: number, baseUnit?: TimeUnit): number {\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.baseUnit;\r\n\t\t}\r\n\r\n\t\treturn value * this._unitValues[baseUnit];\r\n\t}\r\n\r\n\t/**\r\n\t * If set, this format will be used instead of the one determined dynamically\r\n\t * based on the basedUnit and range of values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Available fomatting codes\r\n\t * @param value  Format\r\n\t */\r\n\tpublic set durationFormat(value: string) {\r\n\t\tif (this._durationFormat != value) {\r\n\t\t\tthis._durationFormat = value;\r\n\t\t\tthis.invalidateSprite();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Format\r\n\t */\r\n\tpublic get durationFormat(): Optional<string> {\r\n\t\treturn this._durationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Duration formats for various combination of base units.\r\n\t *\r\n\t * @param value  Formats\r\n\t */\r\n\tpublic set durationFormats(value: Partial<Record<TimeUnit, Partial<Record<TimeUnit, string>>>>) {\r\n\t\tthis._durationFormats = value;\r\n\t\tthis.invalidateSprite();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Formats\r\n\t */\r\n\tpublic get durationFormats(): Partial<Record<TimeUnit, Partial<Record<TimeUnit, string>>>> {\r\n\t\tif (!this._durationFormats) {\r\n\t\t\tthis._durationFormats = {\r\n\t\t\t\t\"millisecond\": {\r\n\t\t\t\t\t\"millisecond\": this.language.translate(\"_duration_millisecond\"),\r\n\t\t\t\t\t\"second\": this.language.translate(\"_duration_millisecond_second\"),\r\n\t\t\t\t\t\"minute\": this.language.translate(\"_duration_millisecond_minute\"),\r\n\t\t\t\t\t\"hour\": this.language.translate(\"_duration_millisecond_hour\"),\r\n\t\t\t\t\t\"day\": this.language.translate(\"_duration_millisecond_day\"),\r\n\t\t\t\t\t\"week\": this.language.translate(\"_duration_millisecond_week\"),\r\n\t\t\t\t\t\"month\": this.language.translate(\"_duration_millisecond_month\"),\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_millisecond_year\")\r\n\t\t\t\t},\r\n\t\t\t\t\"second\": {\r\n\t\t\t\t\t\"second\": this.language.translate(\"_duration_second\"),\r\n\t\t\t\t\t\"minute\": this.language.translate(\"_duration_second_minute\"),\r\n\t\t\t\t\t\"hour\": this.language.translate(\"_duration_second_hour\"),\r\n\t\t\t\t\t\"day\": this.language.translate(\"_duration_second_day\"),\r\n\t\t\t\t\t\"week\": this.language.translate(\"_duration_second_week\"),\r\n\t\t\t\t\t\"month\": this.language.translate(\"_duration_second_month\"),\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_second_year\")\r\n\t\t\t\t},\r\n\t\t\t\t\"minute\": {\r\n\t\t\t\t\t\"minute\": this.language.translate(\"_duration_minute\"),\r\n\t\t\t\t\t\"hour\": this.language.translate(\"_duration_minute_hour\"),\r\n\t\t\t\t\t\"day\": this.language.translate(\"_duration_minute_day\"),\r\n\t\t\t\t\t\"week\": this.language.translate(\"_duration_minute_week\"),\r\n\t\t\t\t\t\"month\": this.language.translate(\"_duration_minute_month\"),\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_minute_year\")\r\n\t\t\t\t},\r\n\t\t\t\t\"hour\": {\r\n\t\t\t\t\t\"hour\": this.language.translate(\"_duration_hour\"),\r\n\t\t\t\t\t\"day\": this.language.translate(\"_duration_hour_day\"),\r\n\t\t\t\t\t\"week\": this.language.translate(\"_duration_hour_week\"),\r\n\t\t\t\t\t\"month\": this.language.translate(\"_duration_hour_month\"),\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_hour_year\")\r\n\t\t\t\t},\r\n\t\t\t\t\"day\": {\r\n\t\t\t\t\t\"day\": this.language.translate(\"_duration_day\"),\r\n\t\t\t\t\t\"week\": this.language.translate(\"_duration_day_week\"),\r\n\t\t\t\t\t\"month\": this.language.translate(\"_duration_day_month\"),\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_day_year\")\r\n\t\t\t\t},\r\n\t\t\t\t\"week\": {\r\n\t\t\t\t\t\"week\": this.language.translate(\"_duration_week\"),\r\n\t\t\t\t\t\"month\": this.language.translate(\"_duration_week_month\"),\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_week_year\")\r\n\t\t\t\t},\r\n\t\t\t\t\"month\": {\r\n\t\t\t\t\t\"month\": this.language.translate(\"_duration_month\"),\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_month_year\")\r\n\t\t\t\t},\r\n\t\t\t\t\"year\": {\r\n\t\t\t\t\t\"year\": this.language.translate(\"_duration_year\")\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn this._durationFormats;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationFormatter\"] = DurationFormatter;\r\n"]},"metadata":{},"sourceType":"module"}