{"ast":null,"code":"/**\r\n * Rounded rectangle module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../utils/Math\";\nimport * as $type from \"../utils/Type\";\nimport * as $utils from \"../utils/Utils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a rectangle with rounded corners.\r\n *\r\n * @see {@link IRoundedRectangleEvents} for a list of available events\r\n * @see {@link IRoundedRectangleAdapters} for a list of available Adapters\r\n */\n\nvar RoundedRectangle =\n/** @class */\nfunction (_super) {\n  __extends(RoundedRectangle, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function RoundedRectangle() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"RoundedRectangle\";\n    _this.element = _this.paper.add(\"path\");\n\n    _this.cornerRadius(3, 3, 3, 3);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  RoundedRectangle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.innerWidth;\n    var h = this.innerHeight;\n\n    if ($type.isNumber(w) && $type.isNumber(h)) {\n      var minSide = $math.min(w, h) / 2;\n      var cornerRadiusTopLeft = $utils.relativeToValue(this.cornerRadiusTopLeft, minSide);\n      var cornerRadiusTopRight = $utils.relativeToValue(this.cornerRadiusTopRight, minSide);\n      var cornerRadiusBottomRight = $utils.relativeToValue(this.cornerRadiusBottomRight, minSide);\n      var cornerRadiusBottomLeft = $utils.relativeToValue(this.cornerRadiusBottomLeft, minSide);\n      var maxcr = $math.min(Math.abs(w / 2), Math.abs(h / 2));\n      var crtl = $math.fitToRange(cornerRadiusTopLeft, 0, maxcr);\n      var crtr = $math.fitToRange(cornerRadiusTopRight, 0, maxcr);\n      var crbr = $math.fitToRange(cornerRadiusBottomRight, 0, maxcr);\n      var crbl = $math.fitToRange(cornerRadiusBottomLeft, 0, maxcr);\n      var lineT = \"M\" + crtl + \",0 L\" + (w - crtr) + \",0\";\n      var lineB = \" L\" + crbl + \",\" + h;\n      var lineL = \" L0,\" + crtl;\n      var lineR = \" L\" + w + \",\" + (h - crbr);\n      var arcTR = \" a\" + crtr + \",\" + crtr + \" 0 0 1 \" + crtr + \",\" + crtr;\n      var arcBR = \" a\" + crbr + \",\" + crbr + \" 0 0 1 -\" + crbr + \",\" + crbr;\n      var arcBL = \" a\" + crbl + \",\" + crbl + \" 0 0 1 -\" + crbl + \",-\" + crbl;\n      var arcTL = \" a\" + crtl + \",\" + crtl + \" 0 0 1 \" + crtl + \",-\" + crtl;\n      var path = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL + \" Z\";\n      this.path = path;\n    }\n  };\n  /**\r\n   * Sets radius for all four corners at ones.\r\n   *\r\n   * All numbers are in pixels.\r\n   *\r\n   * @param tl  Top-left corner\r\n   * @param tr  Top-right corner\r\n   * @param bl  Bottom-left corner\r\n   * @param br  Bottom-right corner\r\n   */\n\n\n  RoundedRectangle.prototype.cornerRadius = function (tl, tr, bl, br) {\n    this.cornerRadiusTopLeft = tl;\n    this.cornerRadiusTopRight = tr;\n    this.cornerRadiusBottomLeft = bl;\n    this.cornerRadiusBottomRight = br;\n  };\n\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusTopLeft\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cornerRadiusTopLeft\");\n    },\n\n    /**\r\n     * Radius of the top-left corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"cornerRadiusTopLeft\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusTopRight\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cornerRadiusTopRight\");\n    },\n\n    /**\r\n     * Radius of the top-right corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"cornerRadiusTopRight\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusBottomRight\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cornerRadiusBottomRight\");\n    },\n\n    /**\r\n     * Radius of the bottom-right corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"cornerRadiusBottomRight\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusBottomLeft\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cornerRadiusBottomLeft\");\n    },\n\n    /**\r\n     * Radius of the bottom-left corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"cornerRadiusBottomLeft\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Measures the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  RoundedRectangle.prototype.measureElement = function () {};\n\n  Object.defineProperty(RoundedRectangle.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function get() {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n\n      if (this.isMeasured) {\n        return {\n          x: 0,\n          y: 0,\n          width: this.innerWidth,\n          height: this.innerHeight\n        };\n      } else {\n        return {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return RoundedRectangle;\n}(Sprite);\n\nexport { RoundedRectangle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"RoundedRectangle\"] = RoundedRectangle;","map":{"version":3,"mappings":"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","names":["Sprite","registry","$math","$type","$utils","__extends","_super","_this","className","element","paper","add","cornerRadius","applyTheme","RoundedRectangle","draw","call","w","innerWidth","h","innerHeight","isNumber","minSide","min","cornerRadiusTopLeft","relativeToValue","cornerRadiusTopRight","cornerRadiusBottomRight","cornerRadiusBottomLeft","maxcr","Math","abs","crtl","fitToRange","crtr","crbr","crbl","lineT","lineB","lineL","lineR","arcTR","arcBR","arcBL","arcTL","path","tl","tr","bl","br","Object","getPropertyValue","value","setPercentProperty","definedBBox","isMeasured","x","y","width","height","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/core/elements/RoundedRectangle.ts"],"sourcesContent":["/**\r\n * Rounded rectangle module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport { Percent } from \"../utils/Percent\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RoundedRectangle]].\r\n */\r\nexport interface IRoundedRectangleProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Radius of the top-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tcornerRadiusTopLeft?: number;\r\n\r\n\t/**\r\n\t * Radius of the top-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tcornerRadiusTopRight?: number;\r\n\r\n\t/**\r\n\t * Radius of the bottom-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tcornerRadiusBottomRight?: number;\r\n\r\n\t/**\r\n\t * Radius of the bottom-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tcornerRadiusBottomLeft?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RoundedRectangle]].\r\n */\r\nexport interface IRoundedRectangleEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RoundedRectangle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRoundedRectangleAdapters extends ISpriteAdapters, IRoundedRectangleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a rectangle with rounded corners.\r\n *\r\n * @see {@link IRoundedRectangleEvents} for a list of available events\r\n * @see {@link IRoundedRectangleAdapters} for a list of available Adapters\r\n */\r\nexport class RoundedRectangle extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRoundedRectangleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRoundedRectangleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRoundedRectangleEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RoundedRectangle\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.cornerRadius(3, 3, 3, 3);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet w: number = this.innerWidth;\r\n\t\tlet h: number = this.innerHeight;\r\n\r\n\t\tif ($type.isNumber(w) && $type.isNumber(h)) {\r\n\r\n\t\t\tlet minSide = $math.min(w, h) / 2;\r\n\r\n\t\t\tlet cornerRadiusTopLeft = $utils.relativeToValue(this.cornerRadiusTopLeft, minSide);\r\n\t\t\tlet cornerRadiusTopRight = $utils.relativeToValue(this.cornerRadiusTopRight, minSide);\r\n\t\t\tlet cornerRadiusBottomRight = $utils.relativeToValue(this.cornerRadiusBottomRight, minSide);\r\n\t\t\tlet cornerRadiusBottomLeft = $utils.relativeToValue(this.cornerRadiusBottomLeft, minSide);\r\n\r\n\t\t\tlet maxcr: number = $math.min(Math.abs(w / 2), Math.abs(h / 2));\r\n\t\t\tlet crtl: number = $math.fitToRange(cornerRadiusTopLeft, 0, maxcr);\r\n\t\t\tlet crtr: number = $math.fitToRange(cornerRadiusTopRight, 0, maxcr);\r\n\t\t\tlet crbr: number = $math.fitToRange(cornerRadiusBottomRight, 0, maxcr);\r\n\t\t\tlet crbl: number = $math.fitToRange(cornerRadiusBottomLeft, 0, maxcr);\r\n\r\n\t\t\tlet lineT: string = \"M\" + crtl + \",0 L\" + (w - crtr) + \",0\";\r\n\t\t\tlet lineB: string = \" L\" + crbl + \",\" + h;\r\n\t\t\tlet lineL: string = \" L0,\" + crtl;\r\n\t\t\tlet lineR: string = \" L\" + w + \",\" + (h - crbr);\r\n\r\n\t\t\tlet arcTR: string = \" a\" + crtr + \",\" + crtr + \" 0 0 1 \" + crtr + \",\" + crtr;\r\n\t\t\tlet arcBR: string = \" a\" + crbr + \",\" + crbr + \" 0 0 1 -\" + crbr + \",\" + crbr;\r\n\t\t\tlet arcBL: string = \" a\" + crbl + \",\" + crbl + \" 0 0 1 -\" + crbl + \",-\" + crbl;\r\n\t\t\tlet arcTL: string = \" a\" + crtl + \",\" + crtl + \" 0 0 1 \" + crtl + \",-\" + crtl;\r\n\r\n\r\n\t\t\tlet path: string = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL + \" Z\";\r\n\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius for all four corners at ones.\r\n\t *\r\n\t * All numbers are in pixels.\r\n\t *\r\n\t * @param tl  Top-left corner\r\n\t * @param tr  Top-right corner\r\n\t * @param bl  Bottom-left corner\r\n\t * @param br  Bottom-right corner\r\n\t */\r\n\tpublic cornerRadius(tl: number | Percent, tr: number | Percent, bl: number | Percent, br: number | Percent) {\r\n\t\tthis.cornerRadiusTopLeft = tl;\r\n\t\tthis.cornerRadiusTopRight = tr;\r\n\t\tthis.cornerRadiusBottomLeft = bl;\r\n\t\tthis.cornerRadiusBottomRight = br;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the top-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param value  Radius (px or Percent)\r\n\t */\r\n\tpublic set cornerRadiusTopLeft(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"cornerRadiusTopLeft\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or Percent)\r\n\t */\r\n\tpublic get cornerRadiusTopLeft(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusTopLeft\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the top-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param value  Radius (px or Percent)\r\n\t */\r\n\tpublic set cornerRadiusTopRight(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"cornerRadiusTopRight\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or Percent)\r\n\t */\r\n\tpublic get cornerRadiusTopRight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusTopRight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the bottom-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param value  Radius (px or Percent)\r\n\t */\r\n\tpublic set cornerRadiusBottomRight(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"cornerRadiusBottomRight\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or Percent)\r\n\t */\r\n\tpublic get cornerRadiusBottomRight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusBottomRight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the bottom-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param value  Radius (px or Percent)\r\n\t */\r\n\tpublic set cornerRadiusBottomLeft(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"cornerRadiusBottomLeft\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or Percent)\r\n\t */\r\n\tpublic get cornerRadiusBottomLeft(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusBottomLeft\");\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\r\n\t\tif (this.isMeasured) {\r\n\t\t\treturn {\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.innerWidth,\r\n\t\t\t\theight: this.innerHeight\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: 0, height: 0 };\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RoundedRectangle\"] = RoundedRectangle;\r\n"]},"metadata":{},"sourceType":"module"}