{"ast":null,"code":"/**\r\n * DurationAxis module\r\n */\nimport { __extends, __values } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ValueAxis, ValueAxisDataItem } from \"./ValueAxis\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar DurationAxisDataItem =\n/** @class */\nfunction (_super) {\n  __extends(DurationAxisDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function DurationAxisDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"DurationAxisDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return DurationAxisDataItem;\n}(ValueAxisDataItem);\n\nexport { DurationAxisDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar DurationAxis =\n/** @class */\nfunction (_super) {\n  __extends(DurationAxis, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function DurationAxis() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A base unit (granularity) of data.\r\n     *\r\n     * Used to indicate what are the base units of your data.\r\n     */\n\n\n    _this._baseUnit = \"second\";\n    _this.className = \"DurationAxis\";\n\n    _this.setPropertyValue(\"maxZoomFactor\", 1000000); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Formats the value according to axis' own [[DurationFormatter]].\r\n   *\r\n   * @param value  Source value\r\n   * @return Formatted value\r\n   */\n\n\n  DurationAxis.prototype.formatLabel = function (value, format) {\n    return this.durationFormatter.format(value, format || this.axisDurationFormat);\n  };\n  /**\r\n   * Adjusts actual min and max scale values so that the axis starts and ends\r\n   * at \"nice\" values, unless `strictMinMax` is set.\r\n   *\r\n   * The `difference` can be something else than `max - min`, because of the\r\n   * axis breaks.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param min        [description]\r\n   * @param max        [description]\r\n   * @param difference [description]\r\n   * @param gridCount  [description]\r\n   * @param strictMode [description]\r\n   * @return [description]\r\n   */\n\n\n  DurationAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\n    var e_1, _a;\n\n    var minMaxStep;\n    var timeUnit = this.baseUnit; // we don't allow to go to smaller units, setting so to avoid invalidation\n\n    this.setPropertyValue(\"maxPrecision\", 0);\n\n    if (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\n      // will fail if 0\n      if (gridCount <= 1) {\n        gridCount = 1;\n      }\n\n      gridCount = Math.round(gridCount);\n      var initialMin = min;\n      var initialMax = max; // in case min and max is the same, use max\n\n      if (difference === 0) {\n        difference = Math.abs(max);\n      }\n\n      var step = difference / gridCount;\n      var divisors = [60, 30, 20, 15, 10, 2, 1];\n      var realDivisor = 1;\n\n      if (timeUnit == \"hour\") {\n        divisors = [24, 12, 6, 4, 2, 1];\n      }\n\n      try {\n        for (var divisors_1 = __values(divisors), divisors_1_1 = divisors_1.next(); !divisors_1_1.done; divisors_1_1 = divisors_1.next()) {\n          var divisor = divisors_1_1.value;\n\n          if (difference / divisor > gridCount) {\n            realDivisor = divisor;\n            break;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (divisors_1_1 && !divisors_1_1.done && (_a = divisors_1.return)) _a.call(divisors_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      var count = Math.ceil((max - min) / realDivisor / gridCount);\n      var exponent = Math.log(Math.abs(count)) * Math.LOG10E;\n      var power = Math.pow(10, Math.floor(exponent)) / 10;\n      var reducedCount = count / power; // find closest to divisor\n\n      var closest = $math.closest(divisors, reducedCount);\n      count = closest * power;\n      step = realDivisor * count; // TODO can this be removed ?\n\n      this.durationFormatter.getValueUnit(step, this.baseUnit);\n      min = Math.floor(min / step) * step;\n      max = Math.ceil(max / step) * step;\n\n      if (strictMode) {\n        min -= step;\n\n        if (min < 0 && initialMin >= 0) {\n          min = 0;\n        }\n\n        max += step;\n\n        if (max > 0 && initialMax <= 0) {\n          max = 0;\n        }\n      }\n\n      minMaxStep = {\n        min: min,\n        max: max,\n        step: step\n      };\n    } else {\n      minMaxStep = _super.prototype.adjustMinMax.call(this, min, max, difference, gridCount, strictMode);\n    } // choose duration formatter based on step\n\n\n    this.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\n    return minMaxStep;\n  };\n\n  Object.defineProperty(DurationAxis.prototype, \"tooltipDurationFormat\", {\n    /**\r\n     * @return Duration format for axis labels\r\n     */\n    get: function () {\n      return this._tooltipDurationFormat;\n    },\n\n    /**\r\n     * A special duration format to apply axis tooltips.\r\n     *\r\n     * Will use same format as for labels, if not set.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n     * @param value  Duration format for axis labels\r\n     */\n    set: function (value) {\n      this._tooltipDurationFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns text to show in a axis tooltip, based on specific position within\r\n   * axis.\r\n   *\r\n   * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n   * chart, or explicitly for this Axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (px)\r\n   * @return Label (numeric value)\r\n   */\n\n  DurationAxis.prototype.getTooltipText = function (position) {\n    var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\n    var valueStr = this.formatLabel(value, this.tooltipDurationFormat);\n\n    if (!this._adapterO) {\n      return valueStr;\n    } else {\n      return this._adapterO.apply(\"getTooltipText\", valueStr);\n    }\n  };\n\n  Object.defineProperty(DurationAxis.prototype, \"baseUnit\", {\n    /**\r\n     * @return Base unit\r\n     */\n    get: function () {\n      return this._baseUnit;\n    },\n\n    /**\r\n     * A base unit (granularity) of data.\r\n     *\r\n     * Used to indicate what are the base units of your data.\r\n     *\r\n     * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n     * \"day\", \"week\", \"month\", \"year\".\r\n     *\r\n     * @default \"second\"\r\n     * @param timeUnit\r\n     */\n    set: function (timeUnit) {\n      if (this._baseUnit != timeUnit) {\n        this._baseUnit = timeUnit;\n        this.durationFormatter.baseUnit = timeUnit;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related data from a different instance of Axis.\r\n   *\r\n   * @param source Source Axis\r\n   */\n\n  DurationAxis.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.baseUnit = source.baseUnit;\n  };\n\n  return DurationAxis;\n}(ValueAxis);\n\nexport { DurationAxis };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;","map":{"version":3,"mappings":"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","names":["ValueAxis","ValueAxisDataItem","registry","$math","__extends","_super","_this","className","applyTheme","setPropertyValue","DurationAxis","value","format","durationFormatter","axisDurationFormat","min","max","difference","gridCount","strictMode","minMaxStep","timeUnit","baseUnit","Math","round","initialMin","initialMax","abs","step","divisors","realDivisor","divisors_1_1","divisor","count","ceil","exponent","log","LOG10E","power","pow","floor","reducedCount","closest","getValueUnit","adjustMinMax","call","getFormat","Object","_tooltipDurationFormat","position","positionToValue","_stepDecimalPlaces","valueStr","formatLabel","tooltipDurationFormat","_adapterO","apply","_baseUnit","invalidate","source","copyFrom","registeredClasses","DurationAxisDataItem"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/axes/DurationAxis.ts"],"sourcesContent":["/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\t// TODO can this be removed ?\r\n\t\t\tthis.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\tlet valueStr = this.formatLabel(value, this.tooltipDurationFormat)\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn valueStr;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"getTooltipText\", valueStr);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n"]},"metadata":{},"sourceType":"module"}