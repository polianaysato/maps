{"ast":null,"code":"/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\n\nvar StepLineSeriesSegment =\n/** @class */\nfunction (_super) {\n  __extends(StepLineSeriesSegment, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function StepLineSeriesSegment() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"StepLineSeriesSegment\";\n    return _this;\n  }\n  /**\r\n   * Draws the series segment.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param points       Points to connect\r\n   * @param closePoints  ?\r\n   * @param smoothnessX  Horizontal bezier setting (?)\r\n   * @param smoothnessY  Vertical bezier setting (?)\r\n   */\n\n\n  StepLineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY, noRisers, vertical) {\n    if (points.length > 0 && closePoints.length > 0) {\n      if (noRisers) {\n        var path = $path.moveTo(points[0]);\n\n        if (points.length > 0) {\n          for (var i = 1; i < points.length; i++) {\n            var point = points[i];\n\n            if (i / 2 == Math.round(i / 2)) {\n              path += $path.moveTo(point);\n            } else {\n              path += $path.lineTo(point);\n            }\n          }\n        }\n\n        this.strokeSprite.path = path;\n\n        if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) {\n          // helps to avoid drawing fill object if fill is not visible\n          path = $path.moveTo(points[0]) + $path.polyline(points);\n          path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\n          path += $path.lineTo(points[0]);\n          path += $path.closePath();\n          this.fillSprite.path = path;\n        } else {}\n      } else {\n        var path = $path.moveTo(points[0]) + $path.polyline(points);\n        this.strokeSprite.path = path;\n\n        if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) {\n          // helps to avoid drawing fill object if fill is not visible\n          path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\n          path += $path.lineTo(points[0]);\n          path += $path.closePath();\n          this.fillSprite.path = path;\n        }\n      }\n    } else {\n      this.strokeSprite.path = \"\";\n      this.fillSprite.path = \"\";\n    }\n  };\n\n  return StepLineSeriesSegment;\n}(LineSeriesSegment);\n\nexport { StepLineSeriesSegment };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;","map":{"version":3,"mappings":"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","names":["LineSeriesSegment","registry","$path","__extends","_super","_this","className","StepLineSeriesSegment","points","closePoints","smoothnessX","smoothnessY","noRisers","vertical","length","path","moveTo","i","point","Math","round","lineTo","strokeSprite","fillOpacity","fillSprite","polyline","closePath","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts"],"sourcesContent":["/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\tthis.fillSprite.path = \"\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n"]},"metadata":{},"sourceType":"module"}