{"ast":null,"code":"/**\r\n * An Adapter can be used to apply chained synchronous transformations to any\r\n * value at runtime.\r\n *\r\n * Each type class using Adapters must have `adapters` property and adapter\r\n * interface defined.\r\n *\r\n * Adapters can be used to allow external code to apply transformations to any\r\n * value at any time.\r\n *\r\n * For example we have a Weather class which has a method `now()` which returns\r\n * current temperature.\r\n *\r\n * ```\r\n * function now() {\r\n *   // ... calculate temperature\r\n *   let temp = \"Temperature now is \" + degrees + \"F\";\r\n *   return temp;\r\n * }\r\n * ```\r\n *\r\n * Now, supposed we want to let other classes to modify the output of the\r\n * `now()`? We just apply an adapter to the `temp` before it is returned:\r\n *\r\n * ```\r\n * temp = this.adapters.apply(\"now\", {\r\n *   temp: temp,\r\n *   degrees: degrees\r\n * }).temp;\r\n * ```\r\n *\r\n * Some other class might tap onto it by defining an Adapter that calculates\r\n * the temperature in Celsius:\r\n *\r\n * weather.adapters.add(\"now\", (arg) => {\r\n *   arg.temp += \"(\" + farenheitToCelsius(arg.degrees) + \"C)\";\r\n *   return arh;\r\n * });\r\n *\r\n * Furthermore some time-related class could add time:\r\n *\r\n * weather.adapters.add(\"now\", (arg) => {\r\n *   arg.temp += \"; the time now is \" + (new Date().toLocaleString());\r\n *   return arh;\r\n * });\r\n *\r\n * So without adapters we would get output like this:\r\n *\r\n * ```\r\n * Temperature now is 90F\r\n * ```\r\n *\r\n * With adapters applied we now have:\r\n *\r\n * ```\r\n * Temperature now is 90F (32C); the time now is 12/11/2012, 7:00:00 PM\r\n * ```\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { SortedList } from \"./SortedList\";\nimport * as $number from \"./Number\";\nimport * as $order from \"./Order\";\nimport * as $iter from \"../utils/Iterator\";\nimport * as $array from \"../utils/Array\";\nimport * as $type from \"../utils/Type\";\nimport * as $object from \"../utils/Object\";\n/**\r\n * ============================================================================\r\n * GLOBAL ADAPTER\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A global adapter is an adpater that is attached to a class type rather than\r\n * specific object instance.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nvar GlobalAdapter =\n/** @class */\nfunction () {\n  function GlobalAdapter() {\n    /**\r\n     * Callback id iterator.\r\n     */\n    this._callbackId = 0;\n    /**\r\n     * A list of if callbacks (adapters).\r\n     */\n\n    this._callbacks = new SortedList(function (left, right) {\n      return $order.or($number.order(left.priority, right.priority), $number.order(left.id, right.id));\n    });\n  }\n  /**\r\n   * Adds a global callback which is not specific to any particular object.\r\n   * Whenever an adapter in any object of the specific class type is invoked\r\n   * global adapters will kick in.\r\n   *\r\n   * @param type      Class type\r\n   * @param key       Adapter key\r\n   * @param callback  Callback function\r\n   * @param priority  Priority (higher priority meaning adapter will be applied later)\r\n   * @param scope     Callback function scaope\r\n   */\n\n\n  GlobalAdapter.prototype.addAll = function (type, key, callback, priority, scope) {\n    if (priority === void 0) {\n      priority = 0;\n    }\n\n    this._callbacks.insert({\n      id: ++this._callbackId,\n      key: key,\n      callback: callback,\n      priority: priority,\n      scope: scope,\n      type: type\n    });\n  };\n  /**\r\n   * Returns if there are adapters for specific type available.\r\n   *\r\n   * @param type  Adapter type\r\n   * @param key   Adapter key\r\n   * @return {boolean}\r\n   */\n\n\n  GlobalAdapter.prototype.isEnabled = function (type, key) {\n    return $array.any(this._callbacks.values, function (x) {\n      return x.key === key && type instanceof x.type;\n    });\n  };\n  /**\r\n   * Applies global adapters for the object of the specific type.\r\n   *\r\n   * @param type   Class type\r\n   * @param key    Adapter key\r\n   * @param value  Value\r\n   */\n\n\n  GlobalAdapter.prototype.applyAll = function (type, key, value) {\n    // This is needed to improve the performance and reduce garbage collection\n    var callbacks = this._callbacks.values;\n    var length = callbacks.length;\n\n    if (length == 0) {\n      return value;\n    } // Cycle through all callbacks and find the ones we need to use\n\n\n    for (var i = 0; i < length; ++i) {\n      var item = callbacks[i];\n\n      if (item.key === key && type instanceof item.type) {\n        value = item.callback.call(item.scope, value, type, key);\n      }\n    }\n\n    return value;\n  };\n\n  return GlobalAdapter;\n}();\n\nexport { GlobalAdapter };\n/**\r\n * A global Adapter for plugins that want to add specific\r\n * functionality for any chart, not just specific instance.\r\n *\r\n * If you want to add an adapter which applies to all instances of the same\r\n * object type, like, for instance all slices in PieSeries, you can use\r\n * global adapter.\r\n *\r\n * Global adapter is a system-wide instance, accessible via `globalAdapter`.\r\n *\r\n * ```TypeScript\r\n * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, \"fill\">(am4charts.PieSeries, \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n * ```JavaScript\r\n * am4core.globalAdapter.addAll(am4charts.PieSeries, \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n *\r\n * @ignore\r\n */\n\nexport var globalAdapter = new GlobalAdapter();\n/**\r\n * ============================================================================\r\n * REGULAR ADAPTER\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Adapter allows adding ordered callback functions and associating them with a\r\n * string-based key. An Adapter user can then easily invoke those callbacks to\r\n * apply custom functions on its input, output or intermediate values.\r\n *\r\n * Custom code and plugins can add their own callbacks to modify and enhance\r\n * core functionality.\r\n *\r\n * See the description of `add()` for an example.\r\n *\r\n * Almost any object in amCharts4 has own adapter, accessible with `adapter`\r\n * property.\r\n *\r\n * Any adapters added to it will be applied to that object only.\r\n *\r\n * ### Global Adapters\r\n *\r\n * If you want to add an adapter which applies to all instances of the same\r\n * object type, like, for instance all slices in PieSeries, you can use\r\n * global adapter.\r\n *\r\n * Global adapter is a system-wide instance, accessible via `globalAdapter`.\r\n *\r\n * ```TypeScript\r\n * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, \"fill\">(am4charts.PieSeries. \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n * ```JavaScript\r\n * am4core.globalAdapter.addAll(am4charts.PieSeries. \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n *\r\n * {@link https://www.amcharts.com/docs/v4/reference/adapter_module/#globalAdapter_property More info}.\r\n *\r\n * @important\r\n */\n\nvar Adapter =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor, sets the object referece this Adapter should be used for.\r\n   *\r\n   * @param c Object\r\n   */\n  function Adapter(c) {\n    /**\r\n     * Internal counter for callback ids.\r\n     */\n    this._callbackId = 0;\n    /**\r\n     * A list of adapter callbacks.\r\n     *\r\n     * @param $number.order(left.priority, right.priority) [description]\r\n     * @param $number.order(left.id,       right.id));\t}  [description]\r\n     */\n\n    this._callbacks = new SortedList(function (left, right) {\n      return $order.or($number.order(left.priority, right.priority), $number.order(left.id, right.id));\n    });\n    this._disabled = {};\n    this.object = c; // TODO this exposes the internal events\n\n    this.events = this._callbacks.events;\n  }\n  /**\r\n   * Adds a callback for a specific key.\r\n   *\r\n   * ```TypeScript\r\n   * // Override fill color value and make all slices green\r\n   * chart.series.template.adapter.add(\"fill\", (value, target, key) => {\r\n   *   return am4core.color(\"#005500\");\r\n   * });\r\n   * ```\r\n   * ```JavaScript\r\n   * // Override fill color value and make all slices green\r\n   * chart.series.template.adapter.add(\"fill\", function(value, target, key) {\r\n   *   return am4core.color(\"#005500\");\r\n   * });\r\n   * ```\r\n   * ```JSON\r\n   * {\r\n   *   // ...\r\n   *   \"series\": [{\r\n   *     // ...\r\n   *     \"adapter\": {\r\n   *     \t// Override fill color value and make all slices green\r\n   *     \t\"fill\": function(value, target, key) {\r\n   *     \t  return am4core.color(\"#005500\");\r\n   *     \t}\r\n   *     }\r\n   *   }]\r\n   * }\r\n   * ```\r\n   *\r\n   * The above will call user-defined function (adapter) whenever `fill` value\r\n   * is requested from the Pie series, allowing it to override the default\r\n   * using custom code and any fuzzy logic.\r\n   *\r\n   * There can be any number of adapters set on one property key.\r\n   *\r\n   * In this case adapters will be applied in daisy-chain fashion. The first\r\n   * adapter in queue will make its transformation. The next one will have\r\n   * the output of the first adapter as a starting value, etc.\r\n   *\r\n   * The order of the adapters are determined either by the order they were\r\n   * added in, or their `priority` value.\r\n   *\r\n   * The heigher the `priority`, the later in the game adapter will be applied.\r\n   *\r\n   * @param key       Key\r\n   * @param callback  A callback function\r\n   * @param priority  The higher priority, the more chance the adapter will be applied last\r\n   * @param scope     Scope for the callback function\r\n   */\n\n\n  Adapter.prototype.add = function (key, callback, priority, scope) {\n    if (priority === void 0) {\n      priority = 0;\n    }\n\n    this._callbacks.insert({\n      id: ++this._callbackId,\n      key: key,\n      callback: callback,\n      priority: priority,\n      scope: scope\n    });\n  };\n  /**\r\n   * Checks whether specific adapter is already set.\r\n   *\r\n   * @param key       Key\r\n   * @param callback  A callback function\r\n   * @param priority  The higher priority, the more chance the adapter will be applied last\r\n   * @param scope     Scope for the callback function\r\n   * @returns                            Adapter set?\r\n   */\n\n\n  Adapter.prototype.has = function (key, callback, priority, scope) {\n    if (priority === void 0) {\n      priority = 0;\n    }\n\n    return $iter.contains(this._callbacks.iterator(), function (item) {\n      return item.key === key && item.callback === callback && item.priority === priority && item.scope === scope;\n    });\n  };\n  /**\r\n   * Removes adapter callbacks for the specific `key`.\r\n   *\r\n   * If `priority` is specified, only callbacks for that priority are removed.\r\n   *\r\n   * @param key      Key\r\n   * @param priority Priority\r\n   * @todo Implement\r\n   */\n\n\n  Adapter.prototype.remove = function (key, priority) {\n    var _this = this; // It has to make a copy because it removes the elements while iterating\n    // TODO inefficient\n    // TODO should this re-enable the key ?\n\n\n    $array.each($iter.toArray(this._callbacks.iterator()), function (item) {\n      // TODO test this\n      if (item.key === key && (!$type.isNumber(priority) || priority === item.priority)) {\n        _this._callbacks.remove(item);\n      }\n    });\n  };\n  /**\r\n   * Enable applying adapters for a certain key, if it was disabled before by\r\n   * `disableKey()`.\r\n   *\r\n   * @param key Key\r\n   */\n\n\n  Adapter.prototype.enableKey = function (key) {\n    delete this._disabled[key];\n  };\n  /**\r\n   * Disable applying adapters for a certain key.\r\n   *\r\n   * Optionally, can set how many applies to skip before automatically\r\n   * re-enabling the applying.\r\n   *\r\n   * @param key     Key\r\n   * @param amount  Number of applies to skip\r\n   */\n\n\n  Adapter.prototype.disableKey = function (key, amount) {\n    if (amount === void 0) {\n      amount = Infinity;\n    }\n\n    this._disabled[key] = amount;\n  };\n\n  Adapter.prototype._hasListenersByType = function (key) {\n    return $array.any(this._callbacks.values, function (x) {\n      return x.key === key;\n    });\n  };\n  /**\r\n   * Returns if there are any enabled adapters set for the specific `key`.\r\n   *\r\n   * @returns Are there any adapters for the key?\r\n   */\n\n\n  Adapter.prototype.isEnabled = function (key) {\n    return this._disabled[key] == null && (this._hasListenersByType(key) || globalAdapter.isEnabled(this.object, key));\n  };\n\n  Adapter.prototype._shouldDispatch = function (key) {\n    var count = this._disabled[key];\n\n    if (!$type.isNumber(count)) {\n      return true;\n    } else {\n      if (count <= 1) {\n        delete this._disabled[key];\n      } else {\n        --this._disabled[key];\n      }\n\n      return false;\n    }\n  };\n  /**\r\n   * Passes the input value through all the callbacks for the defined `key`.\r\n   *\r\n   * @param key      Key\r\n   * @param value    Input value\r\n   * @param ...rest  Rest of the parameters to be passed into callback\r\n   * @return Output value\r\n   */\n\n\n  Adapter.prototype.apply = function (key, value) {\n    if (this._shouldDispatch(key)) {\n      // This is needed to improve the performance and reduce garbage collection\n      var callbacks = this._callbacks.values;\n      var length_1 = callbacks.length;\n\n      if (length_1 > 0) {\n        for (var i = 0; i < length_1; ++i) {\n          var item = callbacks[i];\n\n          if (item.key === key) {\n            value = item.callback.call(item.scope, value, this.object, key);\n          }\n        }\n      } // Apply global adapters\n\n\n      value = globalAdapter.applyAll(this.object, key, value);\n      return value;\n    } else {\n      return value;\n    }\n  };\n  /**\r\n   * Returns all adapter keys which are in this adapter.\r\n   *\r\n   * @return Adapter keys\r\n   */\n\n\n  Adapter.prototype.keys = function () {\n    // TODO inefficient\n    return $iter.toArray($iter.map(this._callbacks.iterator(), function (x) {\n      return x.key;\n    }));\n  };\n  /**\r\n   * Copies all the adapter callbacks from `source`.\r\n   *\r\n   * @param source  An Adapter to copy items from\r\n   */\n\n\n  Adapter.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    $iter.each(source._callbacks.iterator(), function (x) {\n      _this.add(x.key, x.callback, x.priority, x.scope);\n    });\n    $object.each(source._disabled, function (key, val) {\n      _this._disabled[key] = val;\n    });\n  };\n  /**\r\n   * Clears all callbacks from this Adapter.\r\n   */\n\n\n  Adapter.prototype.clear = function () {\n    // TODO should this also re-enable all the keys ?\n    this._callbacks.clear();\n  };\n\n  return Adapter;\n}();\n\nexport { Adapter };","map":{"version":3,"mappings":"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","names":["SortedList","$number","$order","$iter","$array","$type","$object","left","right","or","order","priority","id","GlobalAdapter","type","key","callback","scope","_callbacks","insert","_callbackId","any","values","x","value","callbacks","length","i","item","call","globalAdapter","c","object","events","Adapter","contains","iterator","each","toArray","isNumber","_this","remove","_disabled","amount","_hasListenersByType","isEnabled","count","_shouldDispatch","length_1","applyAll","map","source","add","val","clear"],"sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Adapter.ts"],"sourcesContent":["/**\r\n * An Adapter can be used to apply chained synchronous transformations to any\r\n * value at runtime.\r\n *\r\n * Each type class using Adapters must have `adapters` property and adapter\r\n * interface defined.\r\n *\r\n * Adapters can be used to allow external code to apply transformations to any\r\n * value at any time.\r\n *\r\n * For example we have a Weather class which has a method `now()` which returns\r\n * current temperature.\r\n *\r\n * ```\r\n * function now() {\r\n *   // ... calculate temperature\r\n *   let temp = \"Temperature now is \" + degrees + \"F\";\r\n *   return temp;\r\n * }\r\n * ```\r\n *\r\n * Now, supposed we want to let other classes to modify the output of the\r\n * `now()`? We just apply an adapter to the `temp` before it is returned:\r\n *\r\n * ```\r\n * temp = this.adapters.apply(\"now\", {\r\n *   temp: temp,\r\n *   degrees: degrees\r\n * }).temp;\r\n * ```\r\n *\r\n * Some other class might tap onto it by defining an Adapter that calculates\r\n * the temperature in Celsius:\r\n *\r\n * weather.adapters.add(\"now\", (arg) => {\r\n *   arg.temp += \"(\" + farenheitToCelsius(arg.degrees) + \"C)\";\r\n *   return arh;\r\n * });\r\n *\r\n * Furthermore some time-related class could add time:\r\n *\r\n * weather.adapters.add(\"now\", (arg) => {\r\n *   arg.temp += \"; the time now is \" + (new Date().toLocaleString());\r\n *   return arh;\r\n * });\r\n *\r\n * So without adapters we would get output like this:\r\n *\r\n * ```\r\n * Temperature now is 90F\r\n * ```\r\n *\r\n * With adapters applied we now have:\r\n *\r\n * ```\r\n * Temperature now is 90F (32C); the time now is 12/11/2012, 7:00:00 PM\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SortedList } from \"./SortedList\";\r\nimport { EventDispatcher } from \"./EventDispatcher\";\r\nimport * as $number from \"./Number\";\r\nimport * as $order from \"./Order\";\r\nimport * as $iter from \"../utils/Iterator\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $object from \"../utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Adapter interface.\r\n */\r\ninterface IAdapterCallback<Target, T> {\r\n\tid: number;\r\n\tkey: any;\r\n\tcallback: any;\r\n\tscope: any;\r\n\tpriority: number;\r\n}\r\n\r\n/**\r\n * Defines an interface for a global adapter.\r\n */\r\ninterface IGlobalAdapterCallback {\r\n\tid: number;\r\n\tkey: string;\r\n\tcallback: <T, Target, Key extends keyof T, C>(this: C, value: T[Key], target: Target, key?: keyof T) => T[Key];\r\n\tscope: any;\r\n\tpriority: number;\r\n\ttype: { new(): any };\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * GLOBAL ADAPTER\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A global adapter is an adpater that is attached to a class type rather than\r\n * specific object instance.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class GlobalAdapter {\r\n\r\n\t/**\r\n\t * Callback id iterator.\r\n\t */\r\n\tprivate _callbackId: number = 0;\r\n\r\n\t/**\r\n\t * A list of if callbacks (adapters).\r\n\t */\r\n\tprivate _callbacks = new SortedList<IGlobalAdapterCallback>((left, right) => {\r\n\t\treturn $order.or($number.order(left.priority, right.priority),\r\n\t\t\t$number.order(left.id, right.id));\r\n\t});\r\n\r\n\tpublic addAll<T, Target, Key extends keyof T>(\r\n\t\ttype: { new(): Target },\r\n\t\tkey: Key,\r\n\t\tcallback: (value: T[Key], target: Target, key: keyof T) => T[Key],\r\n\t\tpriority?: number\r\n\t): void;\r\n\r\n\tpublic addAll<T, Target, Key extends keyof T, C>(\r\n\t\ttype: { new(): Target },\r\n\t\tkey: Key,\r\n\t\tcallback: (this: C, value: T[Key], target: Target, key: keyof T) => T[Key],\r\n\t\tpriority?: number,\r\n\t\tscope?: C\r\n\t): void;\r\n\r\n\t/**\r\n\t * Adds a global callback which is not specific to any particular object.\r\n\t * Whenever an adapter in any object of the specific class type is invoked\r\n\t * global adapters will kick in.\r\n\t *\r\n\t * @param type      Class type\r\n\t * @param key       Adapter key\r\n\t * @param callback  Callback function\r\n\t * @param priority  Priority (higher priority meaning adapter will be applied later)\r\n\t * @param scope     Callback function scaope\r\n\t */\r\n\tpublic addAll(type: any, key: any, callback: any, priority: number = 0, scope?: any): void {\r\n\t\tthis._callbacks.insert({\r\n\t\t\tid: ++this._callbackId,\r\n\t\t\tkey: key,\r\n\t\t\tcallback: callback,\r\n\t\t\tpriority: priority,\r\n\t\t\tscope: scope,\r\n\t\t\ttype: type\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if there are adapters for specific type available.\r\n\t *\r\n\t * @param type  Adapter type\r\n\t * @param key   Adapter key\r\n\t * @return {boolean}\r\n\t */\r\n\tpublic isEnabled<T, Target, Key extends keyof T>(type: Target, key: Key): boolean {\r\n\t\treturn $array.any(this._callbacks.values, (x) => x.key === key && type instanceof x.type);\r\n\t}\r\n\r\n\t/**\r\n\t * Applies global adapters for the object of the specific type.\r\n\t *\r\n\t * @param type   Class type\r\n\t * @param key    Adapter key\r\n\t * @param value  Value\r\n\t */\r\n\tpublic applyAll<T, Target, Key extends keyof T = keyof T>(type: Target, key: Key, value: T[Key]): T[Key] {\r\n\t\t// This is needed to improve the performance and reduce garbage collection\r\n\t\tconst callbacks = this._callbacks.values;\r\n\t\tconst length = callbacks.length;\r\n\r\n\t\tif (length == 0) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\t// Cycle through all callbacks and find the ones we need to use\r\n\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\tconst item = callbacks[i];\r\n\r\n\t\t\tif (item.key === key && type instanceof item.type) {\r\n\t\t\t\tvalue = (<any>item).callback.call(item.scope, value, type, key);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A global Adapter for plugins that want to add specific\r\n * functionality for any chart, not just specific instance.\r\n *\r\n * If you want to add an adapter which applies to all instances of the same\r\n * object type, like, for instance all slices in PieSeries, you can use\r\n * global adapter.\r\n *\r\n * Global adapter is a system-wide instance, accessible via `globalAdapter`.\r\n *\r\n * ```TypeScript\r\n * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, \"fill\">(am4charts.PieSeries, \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n * ```JavaScript\r\n * am4core.globalAdapter.addAll(am4charts.PieSeries, \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n *\r\n * @ignore\r\n */\r\nexport let globalAdapter: GlobalAdapter = new GlobalAdapter();\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REGULAR ADAPTER\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Adapter allows adding ordered callback functions and associating them with a\r\n * string-based key. An Adapter user can then easily invoke those callbacks to\r\n * apply custom functions on its input, output or intermediate values.\r\n *\r\n * Custom code and plugins can add their own callbacks to modify and enhance\r\n * core functionality.\r\n *\r\n * See the description of `add()` for an example.\r\n *\r\n * Almost any object in amCharts4 has own adapter, accessible with `adapter`\r\n * property.\r\n *\r\n * Any adapters added to it will be applied to that object only.\r\n *\r\n * ### Global Adapters\r\n *\r\n * If you want to add an adapter which applies to all instances of the same\r\n * object type, like, for instance all slices in PieSeries, you can use\r\n * global adapter.\r\n *\r\n * Global adapter is a system-wide instance, accessible via `globalAdapter`.\r\n *\r\n * ```TypeScript\r\n * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, \"fill\">(am4charts.PieSeries. \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n * ```JavaScript\r\n * am4core.globalAdapter.addAll(am4charts.PieSeries. \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n *\r\n * {@link https://www.amcharts.com/docs/v4/reference/adapter_module/#globalAdapter_property More info}.\r\n *\r\n * @important\r\n */\r\nexport class Adapter<Target, T> {\r\n\r\n\t/**\r\n\t * Internal counter for callback ids.\r\n\t */\r\n\tprivate _callbackId: number = 0;\r\n\r\n\t/**\r\n\t * A list of adapter callbacks.\r\n\t *\r\n\t * @param $number.order(left.priority, right.priority) [description]\r\n\t * @param $number.order(left.id,       right.id));\t}  [description]\r\n\t */\r\n\tprivate _callbacks = new SortedList<IAdapterCallback<Target, T>>((left, right) => {\r\n\t\treturn $order.or($number.order(left.priority, right.priority),\r\n\t\t\t$number.order(left.id, right.id));\r\n\t});\r\n\r\n\tprotected _disabled: { [key in keyof T]?: number } = {};\r\n\r\n\t/**\r\n\t * Holds an object reference this Adapter is for.\r\n\t */\r\n\tpublic object: Target;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t */\r\n\tpublic events: EventDispatcher<{\r\n\t\tinserted: {};\r\n\t\tremoved: {};\r\n\t}>;\r\n\r\n\t/**\r\n\t * Constructor, sets the object referece this Adapter should be used for.\r\n\t *\r\n\t * @param c Object\r\n\t */\r\n\tconstructor(c: Target) {\r\n\t\tthis.object = c;\r\n\r\n\t\t// TODO this exposes the internal events\r\n\t\tthis.events = this._callbacks.events;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a callback for a specific key.\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Override fill color value and make all slices green\r\n\t * chart.series.template.adapter.add(\"fill\", (value, target, key) => {\r\n\t *   return am4core.color(\"#005500\");\r\n\t * });\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Override fill color value and make all slices green\r\n\t * chart.series.template.adapter.add(\"fill\", function(value, target, key) {\r\n\t *   return am4core.color(\"#005500\");\r\n\t * });\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"adapter\": {\r\n\t *     \t// Override fill color value and make all slices green\r\n\t *     \t\"fill\": function(value, target, key) {\r\n\t *     \t  return am4core.color(\"#005500\");\r\n\t *     \t}\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will call user-defined function (adapter) whenever `fill` value\r\n\t * is requested from the Pie series, allowing it to override the default\r\n\t * using custom code and any fuzzy logic.\r\n\t *\r\n\t * There can be any number of adapters set on one property key.\r\n\t *\r\n\t * In this case adapters will be applied in daisy-chain fashion. The first\r\n\t * adapter in queue will make its transformation. The next one will have\r\n\t * the output of the first adapter as a starting value, etc.\r\n\t *\r\n\t * The order of the adapters are determined either by the order they were\r\n\t * added in, or their `priority` value.\r\n\t *\r\n\t * The heigher the `priority`, the later in the game adapter will be applied.\r\n\t *\r\n\t * @param key       Key\r\n\t * @param callback  A callback function\r\n\t * @param priority  The higher priority, the more chance the adapter will be applied last\r\n\t * @param scope     Scope for the callback function\r\n\t */\r\n\tpublic add<Key extends keyof T, C>(key: Key, callback: (this: C, value: T[Key], target: Target, key: Key) => T[Key], priority: number = 0, scope?: C): void {\r\n\t\tthis._callbacks.insert({\r\n\t\t\tid: ++this._callbackId,\r\n\t\t\tkey: key,\r\n\t\t\tcallback: callback,\r\n\t\t\tpriority: priority,\r\n\t\t\tscope: scope\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether specific adapter is already set.\r\n\t *\r\n\t * @param key       Key\r\n\t * @param callback  A callback function\r\n\t * @param priority  The higher priority, the more chance the adapter will be applied last\r\n\t * @param scope     Scope for the callback function\r\n\t * @returns                            Adapter set?\r\n\t */\r\n\tpublic has<Key extends keyof T, C>(key: Key, callback: (this: C, value: T[Key], target: Target, key: Key) => T[Key], priority: number = 0, scope?: C): boolean {\r\n\t\treturn $iter.contains(this._callbacks.iterator(), (item) => {\r\n\t\t\treturn item.key === key && item.callback === callback && item.priority === priority && item.scope === scope;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Removes adapter callbacks for the specific `key`.\r\n\t *\r\n\t * If `priority` is specified, only callbacks for that priority are removed.\r\n\t *\r\n\t * @param key      Key\r\n\t * @param priority Priority\r\n\t * @todo Implement\r\n\t */\r\n\tpublic remove(key: string, priority?: number): void {\r\n\t\t// It has to make a copy because it removes the elements while iterating\r\n\t\t// TODO inefficient\r\n\t\t// TODO should this re-enable the key ?\r\n\t\t$array.each($iter.toArray(this._callbacks.iterator()), (item) => {\r\n\t\t\t// TODO test this\r\n\t\t\tif (item.key === key && (!$type.isNumber(priority) || priority === item.priority)) {\r\n\t\t\t\tthis._callbacks.remove(item);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Enable applying adapters for a certain key, if it was disabled before by\r\n\t * `disableKey()`.\r\n\t *\r\n\t * @param key Key\r\n\t */\r\n\tpublic enableKey<Key extends keyof T>(key: Key): void {\r\n\t\tdelete this._disabled[key];\r\n\t}\r\n\r\n\t/**\r\n\t * Disable applying adapters for a certain key.\r\n\t *\r\n\t * Optionally, can set how many applies to skip before automatically\r\n\t * re-enabling the applying.\r\n\t *\r\n\t * @param key     Key\r\n\t * @param amount  Number of applies to skip\r\n\t */\r\n\tpublic disableKey<Key extends keyof T>(key: Key, amount: number = Infinity): void {\r\n\t\tthis._disabled[key] = amount;\r\n\t}\r\n\r\n\tprotected _hasListenersByType<Key extends keyof T>(key: Key): boolean {\r\n\t\treturn $array.any(this._callbacks.values, (x) => x.key === key);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if there are any enabled adapters set for the specific `key`.\r\n\t *\r\n\t * @returns Are there any adapters for the key?\r\n\t */\r\n\tpublic isEnabled<Key extends keyof T>(key: Key): boolean {\r\n\t\treturn this._disabled[key] == null && (this._hasListenersByType(key) || globalAdapter.isEnabled<T, Target, Key>(this.object, key));\r\n\t}\r\n\r\n\tprotected _shouldDispatch<Key extends keyof T>(key: Key): boolean {\r\n\t\tconst count = this._disabled[key];\r\n\r\n\t\tif (!$type.isNumber(count)) {\r\n\t\t\treturn true;\r\n\r\n\t\t} else {\r\n\t\t\tif (count <= 1) {\r\n\t\t\t\tdelete this._disabled[key];\r\n\r\n\t\t\t} else {\r\n\t\t\t\t--this._disabled[key];\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Passes the input value through all the callbacks for the defined `key`.\r\n\t *\r\n\t * @param key      Key\r\n\t * @param value    Input value\r\n\t * @param ...rest  Rest of the parameters to be passed into callback\r\n\t * @return Output value\r\n\t */\r\n\tpublic apply<Key extends keyof T>(key: Key, value: T[Key]): T[Key] {\r\n\t\tif (this._shouldDispatch(key)) {\r\n\t\t\t// This is needed to improve the performance and reduce garbage collection\r\n\t\t\tconst callbacks = this._callbacks.values;\r\n\t\t\tconst length = callbacks.length;\r\n\r\n\t\t\tif (length > 0) {\r\n\t\t\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\t\t\tconst item = callbacks[i];\r\n\r\n\t\t\t\t\tif (item.key === key) {\r\n\t\t\t\t\t\tvalue = item.callback.call(item.scope, value, this.object, key);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Apply global adapters\r\n\t\t\tvalue = globalAdapter.applyAll<T, Target, Key>(this.object, key, value);\r\n\r\n\t\t\treturn value;\r\n\r\n\t\t} else {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all adapter keys which are in this adapter.\r\n\t *\r\n\t * @return Adapter keys\r\n\t */\r\n\tpublic keys(): Array<string> {\r\n\t\t// TODO inefficient\r\n\t\treturn $iter.toArray($iter.map(this._callbacks.iterator(), (x) => x.key));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all the adapter callbacks from `source`.\r\n\t *\r\n\t * @param source  An Adapter to copy items from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source._callbacks.iterator(), (x) => {\r\n\t\t\tthis.add(x.key, x.callback, x.priority, x.scope);\r\n\t\t});\r\n\t\t$object.each(source._disabled, (key, val) => {\r\n\t\t\tthis._disabled[key] = val;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Clears all callbacks from this Adapter.\r\n\t */\r\n\tpublic clear(): void {\r\n\t\t// TODO should this also re-enable all the keys ?\r\n\t\tthis._callbacks.clear();\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}