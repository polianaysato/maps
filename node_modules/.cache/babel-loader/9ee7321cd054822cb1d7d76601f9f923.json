{"ast":null,"code":"/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Component } from \"../../core/Component\";\nimport { DataItem } from \"../../core/DataItem\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { TextLink } from \"../../core/elements/TextLink\";\nimport { Triangle } from \"../../core/elements/Triangle\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $iter from \"../../core/utils/Iterator\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar NavigationBarDataItem =\n/** @class */\nfunction (_super) {\n  __extends(NavigationBarDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function NavigationBarDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"NavigationBarDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(NavigationBarDataItem.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function () {\n      return this.properties[\"name\"];\n    },\n\n    /**\r\n     * Name of the navigation bar item.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"name\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return NavigationBarDataItem;\n}(DataItem);\n\nexport { NavigationBarDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\n\nvar NavigationBar =\n/** @class */\nfunction (_super) {\n  __extends(NavigationBar, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function NavigationBar() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"NavigationBar\";\n    var interfaceColors = new InterfaceColorSet();\n    var textLink = new TextLink();\n    textLink.valign = \"middle\";\n    textLink.paddingTop = 8;\n    textLink.paddingBottom = 8;\n    _this.paddingBottom = 2;\n    _this.links = new ListTemplate(textLink);\n\n    _this._disposers.push(new ListDisposer(_this.links));\n\n    _this._disposers.push(textLink);\n\n    _this._linksIterator = new $iter.ListIterator(_this.links, function () {\n      return _this.links.create();\n    });\n    _this._linksIterator.createNewItems = true;\n    var triangle = new Triangle();\n    triangle.direction = \"right\";\n    triangle.width = 8;\n    triangle.height = 12;\n    triangle.fill = interfaceColors.getFor(\"alternativeBackground\");\n    triangle.fillOpacity = 0.5;\n    triangle.valign = \"middle\";\n    triangle.marginLeft = 10;\n    triangle.marginRight = 10;\n    _this.separators = new ListTemplate(triangle);\n\n    _this._disposers.push(new ListDisposer(_this.separators));\n\n    _this._disposers.push(triangle);\n\n    var activeLink = new TextLink();\n    _this.activeLink = activeLink;\n    activeLink.copyFrom(textLink);\n    activeLink.valign = \"middle\";\n    activeLink.fontWeight = \"bold\";\n    _this.width = percent(100);\n    _this.layout = \"grid\";\n    _this.dataFields.name = \"name\"; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Completely redraws the navigation bar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  NavigationBar.prototype.validateDataElements = function () {\n    this.removeChildren();\n\n    this._linksIterator.reset();\n\n    _super.prototype.validateDataElements.call(this); //@todo: dispose\n\n  };\n  /**\r\n   * Creates a visual element for a data item (nav item).\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  NavigationBar.prototype.validateDataElement = function (dataItem) {\n    _super.prototype.validateDataElement.call(this, dataItem);\n\n    var textLink;\n\n    if (dataItem.index < this.dataItems.length - 1) {\n      textLink = this._linksIterator.getLast();\n      textLink.parent = this;\n      var separator = this.separators.create();\n      separator.parent = this;\n      separator.valign = \"middle\";\n    } else {\n      textLink = this.activeLink;\n      textLink.events.copyFrom(this.links.template.events);\n      textLink.hide(0);\n      textLink.show();\n      textLink.parent = this;\n    }\n\n    textLink.dataItem = dataItem;\n    textLink.text = dataItem.name;\n    textLink.validate();\n  };\n\n  return NavigationBar;\n}(Component);\n\nexport { NavigationBar };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;","map":{"version":3,"mappings":"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","names":["Component","DataItem","ListTemplate","ListDisposer","TextLink","Triangle","registry","InterfaceColorSet","percent","$iter","__extends","_super","_this","className","applyTheme","Object","NavigationBarDataItem","properties","value","setProperty","interfaceColors","textLink","valign","paddingTop","paddingBottom","links","_disposers","push","_linksIterator","ListIterator","create","createNewItems","triangle","direction","width","height","fill","getFor","fillOpacity","marginLeft","marginRight","separators","activeLink","copyFrom","fontWeight","layout","dataFields","name","NavigationBar","removeChildren","reset","validateDataElements","call","dataItem","validateDataElement","index","dataItems","length","getLast","parent","separator","events","template","hide","show","text","validate","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/elements/NavigationBar.ts"],"sourcesContent":["/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n"]},"metadata":{},"sourceType":"module"}