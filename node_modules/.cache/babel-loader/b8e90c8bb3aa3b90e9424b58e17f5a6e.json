{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * AxisFill is a base class used to defines fill shapes for various\r\n * type-specific Axes.\r\n *\r\n * Axis fills are used to add fills to specific ranges of those axes.\r\n *\r\n * @see {@link IAxisFillEvents} for a list of available events\r\n * @see {@link IAxisFillAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar AxisFill =\n/** @class */\nfunction (_super) {\n  __extends(AxisFill, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Axis\r\n   */\n\n\n  function AxisFill(axis) {\n    var _this = _super.call(this) || this;\n\n    _this.axis = axis;\n    _this.element = _this.paper.add(\"path\");\n    _this.className = \"AxisFill\";\n    _this.isMeasured = false;\n    _this.location = 0;\n    _this.above = false;\n    var interfaceColors = new InterfaceColorSet();\n    _this.fill = interfaceColors.getFor(\"alternativeBackground\");\n    _this.fillOpacity = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  AxisFill.prototype.setDisabled = function (value) {\n    var changed = _super.prototype.setDisabled.call(this, value);\n\n    if (this.axis) {\n      this.axis.invalidateDataItems();\n    }\n\n    return changed;\n  };\n  /**\r\n   * Draws the fill element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisFill.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (this.__disabled || this.disabled) {\n      return;\n    }\n\n    if (this.axis && $type.isNumber(this.startPosition) && $type.isNumber(this.endPosition)) {\n      this.fillPath = this.axis.getPositionRangePath(this.startPosition, this.endPosition);\n      this.path = this.fillPath;\n\n      if (this.isMeasured) {\n        this.measure();\n      }\n    }\n  };\n\n  Object.defineProperty(AxisFill.prototype, \"startPosition\", {\n    /**\r\n     * @return Start position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startPosition\");\n    },\n\n    /**\r\n     * An actual starting position of the fill.\r\n     *\r\n     * @param value  Starting position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startPosition\", value);\n      this.invalidate(); // this is needed as relative position might not change when zooming\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisFill.prototype, \"endPosition\", {\n    /**\r\n     * @return End position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endPosition\");\n    },\n\n    /**\r\n     * An actual end position of the fill.\r\n     *\r\n     * @param value End position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endPosition\", value);\n      this.invalidate(); // this is needed as relative position might not change when zooming\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisFill.prototype, \"location\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"location\");\n    },\n\n    /**\r\n     * Relative location of the fill. (0-1)\r\n     *\r\n     * @param value Location (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"location\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  AxisFill.prototype.setPath = function (value) {\n    if (this.setPropertyValue(\"path\", value)) {\n      this.element.attr({\n        \"d\": value\n      });\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(AxisFill.prototype, \"above\", {\n    /**\r\n     * @return Draw above series?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"above\");\n    },\n\n    /**\r\n     * Normally fill goes below series. Set this to `true` to go above.\r\n     *\r\n     * @default false\r\n     * @since 4.5.9\r\n     * @param  value  Draw above series?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"above\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisFill;\n}(Sprite);\n\nexport { AxisFill };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisFill\"] = AxisFill;","map":{"version":3,"mappings":"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","names":["Sprite","registry","InterfaceColorSet","$type","__extends","axis","_super","_this","element","paper","add","className","isMeasured","location","above","interfaceColors","fill","getFor","fillOpacity","applyTheme","AxisFill","value","changed","setDisabled","call","invalidateDataItems","draw","__disabled","disabled","isNumber","startPosition","endPosition","fillPath","getPositionRangePath","path","measure","Object","getPropertyValue","setPropertyValue","invalidate","attr","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/axes/AxisFill.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Axis, AxisItemLocation, AxisDataItem } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFill]].\r\n */\r\nexport interface IAxisFillProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Start position. (0-1)\r\n\t */\r\n\tstartPosition?: number;\r\n\r\n\t/**\r\n\t * End position. (0-1)\r\n\t */\r\n\tendPosition?: number;\r\n\r\n\t/**\r\n\t * Location within the axis.\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tabove?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFill]].\r\n */\r\nexport interface IAxisFillEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFill]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillAdapters extends ISpriteAdapters, IAxisFillProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * AxisFill is a base class used to defines fill shapes for various\r\n * type-specific Axes.\r\n *\r\n * Axis fills are used to add fills to specific ranges of those axes.\r\n *\r\n * @see {@link IAxisFillEvents} for a list of available events\r\n * @see {@link IAxisFillAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisFill extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillEvents;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * [_dataItem description]\r\n\t *\r\n\t * Not sure what this is doing here?\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper();\r\n\t\tthis.axis = axis;\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.className = \"AxisFill\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.location = 0;\r\n\r\n\t\tthis.above = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tif (this.__disabled || this.disabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.axis && $type.isNumber(this.startPosition) && $type.isNumber(this.endPosition)) {\r\n\t\t\tthis.fillPath = this.axis.getPositionRangePath(this.startPosition, this.endPosition);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t\tif (this.isMeasured) {\r\n\t\t\t\tthis.measure();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An actual starting position of the fill.\r\n\t *\r\n\t * @param value  Starting position\r\n\t */\r\n\tpublic set startPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"startPosition\", value);\r\n\t\tthis.invalidate(); // this is needed as relative position might not change when zooming\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start position\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\treturn this.getPropertyValue(\"startPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * An actual end position of the fill.\r\n\t *\r\n\t * @param value End position\r\n\t */\r\n\tpublic set endPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"endPosition\", value);\r\n\t\tthis.invalidate(); // this is needed as relative position might not change when zooming\r\n\t}\r\n\r\n\t/**\r\n\t * @return End position\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\treturn this.getPropertyValue(\"endPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of the fill. (0-1)\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setPath(value: string): boolean {\r\n\t\tif (this.setPropertyValue(\"path\", value)) {\r\n\t\t\tthis.element.attr({ \"d\": value });\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.9\r\n\t * @param  value  Draw above series?\r\n\t */\r\n\tpublic set above(value: boolean) {\r\n\t\tthis.setPropertyValue(\"above\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw above series?\r\n\t */\r\n\tpublic get above(): boolean {\r\n\t\treturn this.getPropertyValue(\"above\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFill\"] = AxisFill;\r\n"]},"metadata":{},"sourceType":"module"}