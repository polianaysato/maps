{"ast":null,"code":"/**\r\n * Module that defines everything related to building OHLCs.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Candlestick } from \"./Candlestick\";\nimport { Line } from \"../../core/elements/Line\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\n\nvar OHLC =\n/** @class */\nfunction (_super) {\n  __extends(OHLC, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function OHLC() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"OHLC\";\n    _this.layout = \"none\";\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  OHLC.prototype.createAssets = function () {\n    //super.createAssets();\n    this.openLine = this.createChild(Line);\n    this.openLine.shouldClone = false;\n    this.highLowLine = this.createChild(Line);\n    this.highLowLine.shouldClone = false;\n    this.closeLine = this.createChild(Line);\n    this.closeLine.shouldClone = false;\n  };\n  /**\r\n   * Copies all parameters from another [[OHLC]].\r\n   *\r\n   * @param source Source OHLC\r\n   */\n\n\n  OHLC.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (this.openLine) {\n      this.openLine.copyFrom(source.openLine);\n    }\n\n    if (this.highLowLine) {\n      this.highLowLine.copyFrom(source.highLowLine);\n    }\n\n    if (this.closeLine) {\n      this.closeLine.copyFrom(source.closeLine);\n    }\n  };\n\n  return OHLC;\n}(Candlestick);\n\nexport { OHLC };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"OHLC\"] = OHLC;","map":{"version":3,"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAASA,WAAT,QAA8F,eAA9F;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AA4BA;;;;;;;AAOA;;;;;;;;;AAQA;AAAA;AAAA;AAA0BC;AAiCzB;;;;;AAGA;AAAA,gBACCC,qBAAO,IADR;;AAECC,SAAI,CAACC,SAAL,GAAiB,MAAjB;AACAD,SAAI,CAACE,MAAL,GAAc,MAAd;;AACA;AACD;;;;;AAGUC,gCAAV;AACC;AAEA,SAAKC,QAAL,GAAgB,KAAKC,WAAL,CAAiBT,IAAjB,CAAhB;AACA,SAAKQ,QAAL,CAAcE,WAAd,GAA4B,KAA5B;AAEA,SAAKC,WAAL,GAAmB,KAAKF,WAAL,CAAiBT,IAAjB,CAAnB;AACA,SAAKW,WAAL,CAAiBD,WAAjB,GAA+B,KAA/B;AAEA,SAAKE,SAAL,GAAiB,KAAKH,WAAL,CAAiBT,IAAjB,CAAjB;AACA,SAAKY,SAAL,CAAeF,WAAf,GAA6B,KAA7B;AACA,GAXS;AAaV;;;;;;;AAKOH,4BAAP,UAAgBM,MAAhB,EAA4B;AAC3BV,qBAAMW,QAAN,CAAcC,IAAd,CAAc,IAAd,EAAeF,MAAf;;AACA,QAAI,KAAKL,QAAT,EAAmB;AAClB,WAAKA,QAAL,CAAcM,QAAd,CAAuBD,MAAM,CAACL,QAA9B;AACA;;AACD,QAAI,KAAKG,WAAT,EAAsB;AACrB,WAAKA,WAAL,CAAiBG,QAAjB,CAA0BD,MAAM,CAACF,WAAjC;AACA;;AACD,QAAI,KAAKC,SAAT,EAAoB;AACnB,WAAKA,SAAL,CAAeE,QAAf,CAAwBD,MAAM,CAACD,SAA/B;AACA;AACD,GAXM;;AAaR;AA3EA,EAA0Bb,WAA1B;;;AA6EA;;;;;;;AAMAE,QAAQ,CAACe,iBAAT,CAA2B,MAA3B,IAAqCT,IAArC","names":["Candlestick","Line","registry","__extends","_super","_this","className","layout","OHLC","openLine","createChild","shouldClone","highLowLine","closeLine","source","copyFrom","call","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/elements/OHLC.ts"],"sourcesContent":["/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[OHLC]].\r\n\t *\r\n\t * @param source Source OHLC\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n"]},"metadata":{},"sourceType":"module"}