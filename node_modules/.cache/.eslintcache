[{"C:\\Users\\polia\\Desktop\\Overlay\\src\\index.tsx":"1","C:\\Users\\polia\\Desktop\\Overlay\\src\\App.tsx":"2","C:\\Users\\polia\\Desktop\\Overlay\\src\\routes.tsx":"3","C:\\Users\\polia\\Desktop\\Overlay\\src\\context\\MapContext.tsx":"4","C:\\Users\\polia\\Desktop\\Overlay\\src\\components\\Navbar.tsx":"5","C:\\Users\\polia\\Desktop\\Overlay\\src\\pages\\Unclustered-states\\Unclustered-states.tsx":"6","C:\\Users\\polia\\Desktop\\Overlay\\src\\components\\Legend.tsx":"7","C:\\Users\\polia\\Desktop\\Overlay\\src\\components\\Tabs.tsx":"8","C:\\Users\\polia\\Desktop\\Overlay\\src\\pages\\Mapbox.tsx":"9","C:\\Users\\polia\\Desktop\\Overlay\\src\\components\\Popup.tsx":"10","C:\\Users\\polia\\Desktop\\Overlay\\src\\helpers\\Utils.ts":"11","C:\\Users\\polia\\Desktop\\Overlay\\src\\components\\Views.tsx":"12","C:\\Users\\polia\\Desktop\\Overlay\\src\\pages\\Unclustered\\UnclusteredMetros.tsx":"13","C:\\Users\\polia\\Desktop\\Overlay\\src\\pages\\UnclusteredZips\\UnclusteredZips.tsx":"14"},{"size":226,"mtime":1644205390403,"results":"15","hashOfConfig":"16"},{"size":269,"mtime":1644205390342,"results":"17","hashOfConfig":"16"},{"size":708,"mtime":1644812987923,"results":"18","hashOfConfig":"16"},{"size":1806,"mtime":1644204772769,"results":"19","hashOfConfig":"16"},{"size":157,"mtime":1644813560540,"results":"20","hashOfConfig":"16"},{"size":394,"mtime":1644811247952,"results":"21","hashOfConfig":"16"},{"size":4259,"mtime":1644805668597,"results":"22","hashOfConfig":"16"},{"size":2641,"mtime":1644814181953,"results":"23","hashOfConfig":"16"},{"size":10113,"mtime":1645892772860,"results":"24","hashOfConfig":"16"},{"size":5764,"mtime":1644811205108,"results":"25","hashOfConfig":"16"},{"size":36693,"mtime":1644808592959,"results":"26","hashOfConfig":"16"},{"size":2139,"mtime":1644808266867,"results":"27","hashOfConfig":"16"},{"size":391,"mtime":1644811498306,"results":"28","hashOfConfig":"16"},{"size":397,"mtime":1644813275378,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"6pdqyy",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\polia\\Desktop\\Overlay\\src\\index.tsx",[],["62","63"],"C:\\Users\\polia\\Desktop\\Overlay\\src\\App.tsx",[],"C:\\Users\\polia\\Desktop\\Overlay\\src\\routes.tsx",[],"C:\\Users\\polia\\Desktop\\Overlay\\src\\context\\MapContext.tsx",["64"],"import React, { createContext, useState, useEffect } from \"react\";\n\ninterface Feature {\n  properties: Properties;\n}\n\ninterface Properties {\n  density: number;\n}\n\ntype MapType = {\n  colorScheme: Array<string>;\n  steps: Array<number>;\n  poiViews6Miles: Array<number>;\n  poiColor6Miles: Array<string>;\n  poiViews12Miles: Array<number>;\n  poiColor12Miles: Array<string>;\n  poiViews18Miles: Array<number>;\n  poiColor18Miles: Array<string>;\n};\n\ntype PropsMapContext = {\n  state: MapType;\n  setState: any;\n  getColor: Function;\n  mapStyle: Function;\n};\n\nconst DEFAULT_VALUE = {\n  state: {\n    colorScheme: [\"\"],\n    steps: [0],\n    poiViews6Miles: [0],\n    poiColor6Miles: [\"\"],\n    poiViews12Miles: [0],\n    poiColor12Miles: [\"\"],\n    poiViews18Miles: [0],\n    poiColor18Miles: [\"\"],\n  },\n  setState: () => {},\n  getColor: () => {},\n  mapStyle: () => {},\n};\n\nconst MapContext = createContext<PropsMapContext>(DEFAULT_VALUE);\n\nconst MapProvider: React.FC = ({ children }) => {\n  const [state, setState] = useState(DEFAULT_VALUE.state);\n\n  function getColor(d: number) {\n    return d > 500000\n      ? \"#0D47A1\"\n      : d > 250000\n      ? \"#1565c0\"\n      : d > 200000\n      ? \"#1976d2\"\n      : d > 150000\n      ? \"#1e88e5\"\n      : d > 100000\n      ? \"#42a5f5\"\n      : d > 50000\n      ? \"#64b5f6\"\n      : d > 5000\n      ? \"#bbdefb\"\n      : \"#e3f2fd\";\n  }\n\n  function mapStyle(feature: Feature) {\n    return {\n      weight: 1,\n      opacity: 1,\n      color: \"white\",\n      dashArray: \"1\",\n      fillOpacity: 0.7,\n      fillColor: getColor(feature.properties.density),\n    };\n  }\n  return (\n    <MapContext.Provider\n      value={{\n        state,\n        setState,\n        getColor,\n        mapStyle,\n      }}\n    >\n      {children}\n    </MapContext.Provider>\n  );\n};\nexport { MapProvider };\nexport default MapContext;\n","C:\\Users\\polia\\Desktop\\Overlay\\src\\components\\Navbar.tsx",[],"C:\\Users\\polia\\Desktop\\Overlay\\src\\pages\\Unclustered-states\\Unclustered-states.tsx",[],"C:\\Users\\polia\\Desktop\\Overlay\\src\\components\\Legend.tsx",[],"C:\\Users\\polia\\Desktop\\Overlay\\src\\components\\Tabs.tsx",[],"C:\\Users\\polia\\Desktop\\Overlay\\src\\pages\\Mapbox.tsx",["65","66"],"// @ts-nocheck\nimport { useRef, useEffect, useState, useCallback } from \"react\"\nimport mapboxgl from \"mapbox-gl\"\nimport \"mapbox-gl/dist/mapbox-gl.css\"\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder'\nimport ReactDOM from 'react-dom'\nimport { makeStyles, Box, IconButton } from '@material-ui/core'\nimport AddIcon from '@mui/icons-material/Add'\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport clusterBlue from \"../assets/clusterBlue.svg\"\nimport unclusteredPoint from \"../assets/unclusteredPoint.svg\"\nimport \"../styles/App.css\"\nimport Legend from \"../components/Legend\"\nimport { mapboxStyle, states12MilesRadius, states12MilesSteps, states18MilesRadius, states18MilesSteps, states6MilesRadius, states6MilesSteps, statesHeatmapFill, statesHeatmapSteps, statesMapFilter, statesCircleStroke18, statesCircleStroke6, statesCircleStroke12, getPixels } from \"../helpers/Utils\"\n\n\nconst useStyles = makeStyles(() => ({\n  chartDiv: {\n    height: '25em'\n  },\n  ctrlWrapper: {\n    zIndex: 1000,\n    position: 'absolute',\n    right: 0,\n    top: 0,\n    display: 'block',\n    width: 30,\n    margin: 10,\n  },\n  plus: {\n    boxShadow: 'rgb(0, 0, 0, 0.2) 0px 3px 1px -2px, rgb(0, 0, 0, 0.14) 0px 2px 2px 0px, rgb(0, 0, 0, 0.12) 0px 1px 5px 0px',\n    background: '#FFF',\n    width: 30,\n    height: 30,\n    borderRadius: '5px 5px 0px 0px',\n  },\n  minus: {\n    boxShadow: 'rgb(0, 0, 0, 0.2) 0px 3px 1px -2px, rgb(0, 0, 0, 0.14) 0px 2px 2px 0px, rgb(0, 0, 0, 0.12) 0px 1px 5px 0px',\n    background: '#FFF',\n    width: 30,\n    height: 30,\n    borderRadius: '0px 0px 5px 5px',\n  }\n}))\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoiZW5nbWFwYm94IiwiYSI6ImNqY3M1ZXA5czM2ZGYzM283ZmhscDltcGMifQ.Za7ut_7UThGzvjWhX4ACJQ\";\n\n\nexport const Mapbox = ({ geoJson, poi, Popup }) => {\n  const [colorScheme, setColorScheme] = useState<Array<string>>([])\n  const [steps, setSteps] = useState<Array<number>>([])\n\n  const [poiViews6Miles, setPoiViews6Miles] = useState<Array<number>>([])\n  const [poiColor6Miles, setPoiColor6Miles] = useState<Array<string>>([])\n\n  const [poiViews12Miles, setPoiViews12Miles] = useState<Array<number>>([])\n  const [poiColor12Miles, setPoiColor12Miles] = useState<Array<string>>([])\n\n  const [poiViews18Miles, setPoiViews18Miles] = useState<Array<number>>([])\n  const [poiColor18Miles, setPoiColor18Miles] = useState<Array<string>>([])\n\n  const mapContainer = useRef()\n  const map = useRef()\n  const popUpRef = useRef()\n  const geoCoder = useRef()\n\n\n  const classes = useStyles()\n\n\n  useEffect(() => {\n    setColorScheme(statesHeatmapFill)\n    setSteps(statesHeatmapSteps)\n\n    setPoiColor6Miles(states6MilesRadius)\n\n    setPoiViews6Miles(states6MilesSteps)\n\n    setPoiColor12Miles(states12MilesRadius)\n    setPoiViews12Miles(states12MilesSteps)\n\n    setPoiColor18Miles(states18MilesRadius)\n    setPoiViews18Miles(states18MilesSteps)\n  }, [])\n\n  useEffect(() => {\n    //initialize popup just once\n    popUpRef.current = new mapboxgl.Popup({\n        closeButton: false,\n        closeOnClick: false,\n    })\n}, [])\n\n\n  useEffect(() => {\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: mapboxStyle,\n      center: [-97, 36],\n      zoom: 3.3,\n    })\n\n    console.log(poi)\n\n    // only want to work with the map after it has fully loaded\n    // if you try to add sources and layers before the map has loaded\n    // things will not work properly\n    map.current.on(\"load\", () => {\n      map.current.addSource(\"sites\", {\n        type: \"geojson\",\n        data: poi,\n      })\n\n      map.current.addSource(\"states\", {\n        type: \"geojson\",\n        data: geoJson,\n      })\n\n      map.current.addLayer({\n        id: \"hover\",\n        type: \"fill\",\n        source: \"states\",\n        paint: {\n          \"fill-color\": statesMapFilter,\n          \"fill-opacity\": 1,\n          \"fill-outline-color\": \"#000\",\n        },\n        \n      })\n\n      map.current.addLayer({\n        id: 'outerCircle',\n        type: 'circle',\n        'icon-allow-overlap': true,\n        source: 'sites',\n        paint: {\n          \"circle-color\": statesCircleStroke18,\n          \"circle-radius\": [\n            \"interpolate\",\n            [\"linear\"],\n            [\"zoom\"],\n            // zoom is 5 (or less) -> circle radius will be 1px\n            4,\n            9,\n            // zoom is 10 (or greater) -> circle radius will be 5px\n          ],\n            'circle-opacity': 1,\n        },\n    })\n\n      map.current.addLayer({\n        id: 'radius',\n        type: 'circle',\n        source: 'sites',\n        'icon-allow-overlap': true,\n        paint: {\n          \"circle-color\": statesCircleStroke12,\n          \"circle-radius\": [\n            \"interpolate\",\n            [\"linear\"],\n            [\"zoom\"],\n            // zoom is 5 (or less) -> circle radius will be 1px\n            4,\n            6,\n            // zoom is 10 (or greater) -> circle radius will be 5px\n          ],\n            'circle-opacity': 1,\n        },\n    })\n\n      map.current.addLayer({\n        id: \"unclustered-point\",\n        type: \"circle\",\n        source: \"sites\",\n        filter: [\"!\", [\"has\", \"point_count\"]],\n        'icon-allow-overlap': true,\n        paint: {\n          \"circle-color\": statesCircleStroke6,\n          \"circle-radius\": [\n            \"interpolate\",\n            [\"linear\"],\n            [\"zoom\"],\n            // zoom is 5 (or less) -> circle radius will be 1px\n            4,\n            3,\n            // zoom is 10 (or greater) -> circle radius will be 5px\n          ],\n          'circle-opacity': 1,\n        },\n      })\n\n\n\n      map.current.on(\"mouseover\", \"radius\", (e: any) => {\n        e.preventDefault()\n        let f = map.current.queryRenderedFeatures(e.point, { layers: ['radius'] })\n\n        if (f.length) {\n            map.current.getCanvas().style.cursor = 'pointer'\n            let popupNode = document.createElement('div')\n            if (Popup) {\n                let elem = <Popup data={f[0]} />\n                ReactDOM.render(elem, popupNode)\n                popUpRef.current\n                    .setLngLat(e.lngLat)\n                    .setDOMContent(popupNode)\n                    .addTo(map.current)\n            }\n            return\n        }\n      })\n\n        map.current.on('mouseover', `hover`, () => {\n        map.current.getCanvas().style.cursor = ''\n        popUpRef.current.remove()\n      }) \n      \n\n      map.current.on('click', (e) => {\n        if (e.defaultPrevented === false) {\n          popUpRef.current.remove()\n        }\n      });\n      \n     \n    })\n\n    // cleanup function to remove map on unmount\n    return () => map.current.remove()\n  }, [Popup, geoJson, poi, poiColor12Miles, poiColor6Miles, poiViews12Miles, poiViews6Miles])\n\n\n  const createRadiusOnZoom = useCallback((currentZoom: number) => {\n    let stops18: any = []\n    let stops12: any = []\n    let stops6: any = []\n    let innerRadius = {}\n    let midRadius = {}\n    let outerRadius = {}\n    let pixels: number = 7\n\n    if (map.current) {\n        pixels = Number(getPixels('US', Number(currentZoom), 50))\n    }\n\n    let pixels18 = Number(pixels) \n    let pixels12 = Number(pixels*0.5) \n    let pixels6 = Number(pixels*0.3) \n    stops18.push(['Mock', pixels18])\n    stops12.push(['Mock', pixels12])\n    stops6.push(['Mock', pixels6])\n\n    innerRadius = {\n        property: 'vendor',\n        type: 'categorical',\n        stops: stops6,\n    }\n\n    midRadius = {\n      property: 'vendor',\n        type: 'categorical',\n        stops: stops12,\n    }\n\n    outerRadius = {\n      property: 'vendor',\n        type: 'categorical',\n        stops: stops18,\n    }\n\n    return {\n        innerRadius: innerRadius,\n        midRadius: midRadius,\n        outerRadius: outerRadius\n    }\n}, [])\n\n\nconst zoomIn = useCallback(() => {\n  if (map.current !== undefined) {\n      let currentZoom = map.current.getZoom()\n\n      if (currentZoom) {\n          map.current.zoomTo(Number(currentZoom) + 1, {\n              duration: 350,\n          })\n\n          let radius = createRadiusOnZoom(currentZoom)\n\n          if (map.current !== undefined && map.current.isStyleLoaded()) {\n            map.current.setPaintProperty('unclustered-point', 'circle-radius', radius.innerRadius)\n            map.current.setPaintProperty('outerCircle', 'circle-radius', radius.outerRadius)\n            map.current.setPaintProperty('radius', 'circle-radius', radius.midRadius)\n            \n        } \n      }\n  }\n}, [createRadiusOnZoom])\n\n\nconst zoomOut = useCallback(() => {\n  if (map.current !== undefined) {\n      let currentZoom = map.current.getZoom()\n\n      if (currentZoom) {\n          map.current.zoomTo(Number(currentZoom) - 1, {\n              duration: 350,\n          })\n\n          let radius = createRadiusOnZoom(currentZoom - 1)\n\n          if (map.current !== undefined && map.current.isStyleLoaded()) {\n            map.current.setPaintProperty('unclustered-point', 'circle-radius', radius.innerRadius)\n            map.current.setPaintProperty('radius', 'circle-radius', radius.midRadius)\n            map.current.setPaintProperty('outerCircle', 'circle-radius', radius.outerRadius)\n        } \n      }\n  }\n}, [createRadiusOnZoom])\n\n\n  return (\n    <>\n      <Legend\n        type=\"dots\"\n        clusters=\"Clusters\"\n        pointCount=\"Views\"\n        clusterImg={clusterBlue}\n        unclusteredImg={unclusteredPoint}\n        unclusteredPoint=\"Unclustered Points\"\n        colorScheme={colorScheme}\n        steps={steps}\n        poi=\"POI\"\n        views=\"Views\"\n        poiColor6Miles={poiColor6Miles}\n        poiViews6Miles={poiViews6Miles}\n        poiColor12Miles={poiColor12Miles}\n        poiViews12Miles={poiViews12Miles}\n        poiColor18Miles={poiColor18Miles}\n        poiViews18Miles={poiViews18Miles}\n      />\n      <div ref={mapContainer} style={{ width: \"100%\", height: \"100vh\" }} />\n      <div className={classes.ctrlWrapper}>\n        <Box>\n          <IconButton aria-label=\"zoom in\" onClick={zoomIn} className={classes.plus}>\n            <AddIcon />\n          </IconButton>\n          <IconButton aria-label=\"zoom out\" onClick={zoomOut} className={classes.minus}>\n            <RemoveIcon /> \n          </IconButton>\n        </Box>\n      </div>\n    </>\n  )\n}\n\n\n","C:\\Users\\polia\\Desktop\\Overlay\\src\\components\\Popup.tsx",["67","68"],"// @ts-nocheck\nimport { PlaceOutlined } from \"@material-ui/icons\"\nimport { useRef, useEffect, useState } from \"react\"\nimport * as am4core from \"@amcharts/amcharts4/core\"\nimport * as am4charts from '@amcharts/amcharts4/charts'\nimport { makeStyles } from \"@material-ui/styles\"\nimport { miles6, miles12, miles18 } from \"../helpers/Utils\"\nimport shortid from 'shortid'\nimport { Divider } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        display: 'block', \n        margin: 'auto', \n        width: 'auto'\n    },\n    header: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '100%',\n        paddingTop: -13,\n        paddingBottom: 10\n    },\n    title: {\n        fontSize: '13px',\n        fontFamily: 'Nunito Sans, sans-serif',\n    },\n    subTitle: {\n        fontSize: '13px',\n        fontFamily: 'Nunito Sans, sans-serif',\n        fontWeight: 'bold'\n    },\n    wrapper: {\n        display: 'block',\n        margin: 'auto',\n        height: '25em',\n        textAlign: 'center',\n        '& div': {\n            marginTop: -15\n        },\n        marginTop: 20\n    },\n    hidden: {\n        display: 'none'\n    }\n}))\n\nexport const Popup = ({ data }) => {\n\n    const classes = useStyles()\n    const [label, setLabel] = useState()\n    const [zip, setZip] = useState()\n    const [open, setOpen] = useState(true)\n\n    const chartDiv6 = useRef<string>('chartDiv' + shortid.generate())\n    const chartDiv12 = useRef<string>('chartDiv' + shortid.generate())\n    const chartDiv18 = useRef<string>('chartDiv' + shortid.generate())\n\n    const createPieSeries = (criteria: string, miles: string, chart: any) => {\n        let pieSeries = chart.series.push(new am4charts.PieSeries())\n        am4core.options.autoSetClassName = true\n        pieSeries.dataFields.value = criteria\n        pieSeries.dataFields.category = miles\n    \n        pieSeries.ticks.template.disabled = true\n        pieSeries.alignLabels = false\n        let labels = pieSeries.labels.template\n        labels.text = \"[bold]{value} {category} \\n {percent}%[/]\"\n\n        pieSeries.tooltip.getFillFromObject = false\n        //pieSeries.tooltip.label.propertyFields.fill = \"#000\"\n        pieSeries.tooltip.background.propertyFields.stroke = \"color\"\n        pieSeries.slices.template.tooltipText = \"[black bold font-size: 13px]{category}:[/] [black font-size: 13px]{value} \\n {percent}%[/]\";\n    \n        labels.radius = am4core.percent(-40)\n        labels.fill = am4core.color(\"black\")\n        labels.wrap = true\n        labels.truncate = true\n        labels.maxWidth = 50\n\n    \n        pieSeries.slices.template.propertyFields.fill = \"color\"\n        //pieSeries.slices.template.propertyFields.showTooltipOn = false\n    }\n\n    useEffect(() => {\n        let properties = data && data!.properties\n        //let coordinates = [ data.lngLat.lat, data.lngLat.lng ]\n\n        setLabel(properties.Label)\n        setZip(properties.Zip)\n\n        let chart6 = am4core.create(chartDiv6.current, am4charts.PieChart)\n        let chart12 = am4core.create(chartDiv12.current, am4charts.PieChart)\n        let chart18 = am4core.create(chartDiv18.current, am4charts.PieChart)\n\n\n        let chartData6 = []\n        let chartData12 = []\n        let chartData18 = []\n        miles6.map((v) => {\n          let obj = { [`${v.miles}`]: v.criteria, criteria: properties[v.value], color: am4core.color(v.color), percent: ((properties[v.value] / (properties['sixMilesViews'] + properties['sixMilesConversions'] + properties['sixMilesClicks'])) * 100).toFixed(1)}\n          chartData6.push(obj)\n          return chartData6\n        })\n\n        chart6.data = chartData6\n\n        miles12.map((v) => {\n            let obj = { [`${v.miles}`]: v.criteria, criteria: properties[v.value], color: am4core.color(v.color), percent: ((properties[v.value] / (properties['twelveMilesViews'] + properties['twelveMilesConversions'] + properties['twelveMilesClicks'])) * 100).toFixed(1)}\n          chartData12.push(obj)\n          return chartData12\n        })\n\n        chart12.data = chartData12\n\n        miles18.map((v) => {\n            let obj = { [`${v.miles}`]: v.criteria, criteria: properties[v.value], color: am4core.color(v.color), percent: ((properties[v.value] / (properties['eighteenMilesViews'] + properties['eighteenMilesViews'] + properties['eighteenMilesViews'])) * 100).toFixed(1)}\n          chartData18.push(obj)\n          return chartData18\n        })\n\n        chart18.data = chartData18 \n\n        // Add and configure Series\n        createPieSeries('criteria', '6miles', chart6)\n        createPieSeries('criteria', '12miles', chart12)\n        createPieSeries('criteria', '18miles', chart18) \n\n\n    })\n    \n    \n    return (\n        <div className={open? classes.container : classes.hidden}>\n            <div className={classes.header}>\n                <PlaceOutlined />\n                <span className={classes.title}>{label} - {zip}</span>\n            </div>\n            <Divider />\n            <div className={classes.header}>\n                <div className={classes.wrapper}>\n                    <span className={classes.subTitle}>6 miles</span>\n                    <div id={chartDiv6.current} className={classes.wrapper}></div>\n                </div>\n                <div className={classes.wrapper}>\n                    <span className={classes.subTitle}>12 miles</span>\n                    <div id={chartDiv12.current} className={classes.wrapper}></div>\n                </div>\n                <div className={classes.wrapper}>\n                    <span className={classes.subTitle}>18 miles</span>\n                    <div id={chartDiv18.current} className={classes.wrapper}></div>\n                </div>\n            </div>\n        </div>\n    )\n}","C:\\Users\\polia\\Desktop\\Overlay\\src\\helpers\\Utils.ts",[],"C:\\Users\\polia\\Desktop\\Overlay\\src\\components\\Views.tsx",[],"C:\\Users\\polia\\Desktop\\Overlay\\src\\pages\\Unclustered\\UnclusteredMetros.tsx",[],"C:\\Users\\polia\\Desktop\\Overlay\\src\\pages\\UnclusteredZips\\UnclusteredZips.tsx",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":42,"nodeType":"75","messageId":"76","endLine":1,"endColumn":51},{"ruleId":"73","severity":1,"message":"77","line":5,"column":8,"nodeType":"75","messageId":"76","endLine":5,"endColumn":22},{"ruleId":"73","severity":1,"message":"78","line":66,"column":9,"nodeType":"75","messageId":"76","endLine":66,"endColumn":17},{"ruleId":"73","severity":1,"message":"79","line":54,"column":18,"nodeType":"75","messageId":"76","endLine":54,"endColumn":25},{"ruleId":"80","severity":1,"message":"81","line":87,"column":5,"nodeType":"75","endLine":87,"endColumn":14,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'MapboxGeocoder' is defined but never used.","'geoCoder' is assigned a value but never used.","'setOpen' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setLabel'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [data] as a second argument to the useEffect Hook.",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Add dependencies array: [data]",{"range":"88","text":"89"},[4711,4711],", [data]"]